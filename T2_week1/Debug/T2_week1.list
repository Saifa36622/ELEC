
T2_week1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d68  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002f40  08002f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f80  08002f80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f80  08002f80  00012f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f88  08002f88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f88  08002f88  00012f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f8c  08002f8c  00012f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002f9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002f9c  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c28a  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b67  00000000  00000000  0002c309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  0002de70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000073a  00000000  00000000  0002e7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023eba  00000000  00000000  0002ef12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd0d  00000000  00000000  00052dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5850  00000000  00000000  0005ead9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000025b4  00000000  00000000  0014432c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001468e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002f28 	.word	0x08002f28

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002f28 	.word	0x08002f28

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fadb 	bl	8000ad2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f8cc 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f960 	bl	80007e4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f914 	bl	8000750 <MX_LPUART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800052e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000532:	f000 fdf3 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053c:	485d      	ldr	r0, [pc, #372]	; (80006b4 <main+0x1a0>)
 800053e:	f000 fded 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2110      	movs	r1, #16
 8000546:	485b      	ldr	r0, [pc, #364]	; (80006b4 <main+0x1a0>)
 8000548:	f000 fde8 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2120      	movs	r1, #32
 8000550:	4858      	ldr	r0, [pc, #352]	; (80006b4 <main+0x1a0>)
 8000552:	f000 fde3 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000560:	f000 fddc 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8000564:	200a      	movs	r0, #10
 8000566:	f000 fb25 	bl	8000bb4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000574:	f000 fdd2 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000578:	2064      	movs	r0, #100	; 0x64
 800057a:	f000 fb1b 	bl	8000bb4 <HAL_Delay>


	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000588:	f000 fdc8 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f000 fdc1 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a0:	4844      	ldr	r0, [pc, #272]	; (80006b4 <main+0x1a0>)
 80005a2:	f000 fdbb 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2110      	movs	r1, #16
 80005aa:	4842      	ldr	r0, [pc, #264]	; (80006b4 <main+0x1a0>)
 80005ac:	f000 fdb6 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2120      	movs	r1, #32
 80005b4:	483f      	ldr	r0, [pc, #252]	; (80006b4 <main+0x1a0>)
 80005b6:	f000 fdb1 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f000 fdaa 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80005c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005cc:	f000 faf2 	bl	8000bb4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005da:	f000 fd9f 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80005de:	2064      	movs	r0, #100	; 0x64
 80005e0:	f000 fae8 	bl	8000bb4 <HAL_Delay>


	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ee:	f000 fd95 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f000 fd8e 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000606:	482b      	ldr	r0, [pc, #172]	; (80006b4 <main+0x1a0>)
 8000608:	f000 fd88 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	2110      	movs	r1, #16
 8000610:	4828      	ldr	r0, [pc, #160]	; (80006b4 <main+0x1a0>)
 8000612:	f000 fd83 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2120      	movs	r1, #32
 800061a:	4826      	ldr	r0, [pc, #152]	; (80006b4 <main+0x1a0>)
 800061c:	f000 fd7e 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062a:	f000 fd77 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800062e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000632:	f000 fabf 	bl	8000bb4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000640:	f000 fd6c 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000644:	2064      	movs	r0, #100	; 0x64
 8000646:	f000 fab5 	bl	8000bb4 <HAL_Delay>


	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f000 fd62 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000662:	f000 fd5b 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800066c:	4811      	ldr	r0, [pc, #68]	; (80006b4 <main+0x1a0>)
 800066e:	f000 fd55 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000672:	2201      	movs	r2, #1
 8000674:	2110      	movs	r1, #16
 8000676:	480f      	ldr	r0, [pc, #60]	; (80006b4 <main+0x1a0>)
 8000678:	f000 fd50 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800067c:	2201      	movs	r2, #1
 800067e:	2120      	movs	r1, #32
 8000680:	480c      	ldr	r0, [pc, #48]	; (80006b4 <main+0x1a0>)
 8000682:	f000 fd4b 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f000 fd44 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000694:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000698:	f000 fa8c 	bl	8000bb4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a6:	f000 fd39 	bl	800111c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80006aa:	2064      	movs	r0, #100	; 0x64
 80006ac:	f000 fa82 	bl	8000bb4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80006b0:	e73a      	b.n	8000528 <main+0x14>
 80006b2:	bf00      	nop
 80006b4:	48000400 	.word	0x48000400

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0318 	add.w	r3, r7, #24
 80006c2:	2238      	movs	r2, #56	; 0x38
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fc02 	bl	8002ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 fd5a 	bl	8001194 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	2340      	movs	r3, #64	; 0x40
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f2:	2302      	movs	r3, #2
 80006f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006fa:	2355      	movs	r3, #85	; 0x55
 80006fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0318 	add.w	r3, r7, #24
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fdf4 	bl	80012fc <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800071a:	f000 f8eb 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2303      	movs	r3, #3
 8000724:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2104      	movs	r1, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f001 f8f2 	bl	8001920 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000742:	f000 f8d7 	bl	80008f4 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	; 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000754:	4b21      	ldr	r3, [pc, #132]	; (80007dc <MX_LPUART1_UART_Init+0x8c>)
 8000756:	4a22      	ldr	r2, [pc, #136]	; (80007e0 <MX_LPUART1_UART_Init+0x90>)
 8000758:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800075a:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_LPUART1_UART_Init+0x8c>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_LPUART1_UART_Init+0x8c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_LPUART1_UART_Init+0x8c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_LPUART1_UART_Init+0x8c>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_LPUART1_UART_Init+0x8c>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_LPUART1_UART_Init+0x8c>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_LPUART1_UART_Init+0x8c>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_LPUART1_UART_Init+0x8c>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_LPUART1_UART_Init+0x8c>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000792:	4812      	ldr	r0, [pc, #72]	; (80007dc <MX_LPUART1_UART_Init+0x8c>)
 8000794:	f001 fd2e 	bl	80021f4 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f8a9 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a2:	2100      	movs	r1, #0
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <MX_LPUART1_UART_Init+0x8c>)
 80007a6:	f002 fac9 	bl	8002d3c <HAL_UARTEx_SetTxFifoThreshold>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007b0:	f000 f8a0 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b4:	2100      	movs	r1, #0
 80007b6:	4809      	ldr	r0, [pc, #36]	; (80007dc <MX_LPUART1_UART_Init+0x8c>)
 80007b8:	f002 fafe 	bl	8002db8 <HAL_UARTEx_SetRxFifoThreshold>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007c2:	f000 f897 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_LPUART1_UART_Init+0x8c>)
 80007c8:	f002 fa7f 	bl	8002cca <HAL_UARTEx_DisableFifoMode>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007d2:	f000 f88f 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000028 	.word	0x20000028
 80007e0:	40008000 	.word	0x40008000

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	4b3b      	ldr	r3, [pc, #236]	; (80008e8 <MX_GPIO_Init+0x104>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a3a      	ldr	r2, [pc, #232]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b38      	ldr	r3, [pc, #224]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a34      	ldr	r2, [pc, #208]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000818:	f043 0320 	orr.w	r3, r3, #32
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b32      	ldr	r3, [pc, #200]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0320 	and.w	r3, r3, #32
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <MX_GPIO_Init+0x104>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a2e      	ldr	r2, [pc, #184]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a28      	ldr	r2, [pc, #160]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000864:	f000 fc5a 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800086e:	481f      	ldr	r0, [pc, #124]	; (80008ec <MX_GPIO_Init+0x108>)
 8000870:	f000 fc54 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4819      	ldr	r0, [pc, #100]	; (80008f0 <MX_GPIO_Init+0x10c>)
 800088c:	f000 fac4 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_10;
 8000890:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ac:	f000 fab4 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80008b0:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	4808      	ldr	r0, [pc, #32]	; (80008ec <MX_GPIO_Init+0x108>)
 80008ca:	f000 faa5 	bl	8000e18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2028      	movs	r0, #40	; 0x28
 80008d4:	f000 fa6b 	bl	8000dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008d8:	2028      	movs	r0, #40	; 0x28
 80008da:	f000 fa82 	bl	8000de2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	; 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000
 80008ec:	48000400 	.word	0x48000400
 80008f0:	48000800 	.word	0x48000800

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <HAL_MspInit+0x44>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <HAL_MspInit+0x44>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6613      	str	r3, [r2, #96]	; 0x60
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_MspInit+0x44>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_MspInit+0x44>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000922:	4a08      	ldr	r2, [pc, #32]	; (8000944 <HAL_MspInit+0x44>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	6593      	str	r3, [r2, #88]	; 0x58
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_MspInit+0x44>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000936:	f000 fcd1 	bl	80012dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b09e      	sub	sp, #120	; 0x78
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	2254      	movs	r2, #84	; 0x54
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f002 fab1 	bl	8002ed0 <memset>
  if(huart->Instance==LPUART1)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a1f      	ldr	r2, [pc, #124]	; (80009f0 <HAL_UART_MspInit+0xa8>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d136      	bne.n	80009e6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000978:	2320      	movs	r3, #32
 800097a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	4618      	mov	r0, r3
 8000986:	f001 f9e7 	bl	8001d58 <HAL_RCCEx_PeriphCLKConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000990:	f7ff ffb0 	bl	80008f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <HAL_UART_MspInit+0xac>)
 8000996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000998:	4a16      	ldr	r2, [pc, #88]	; (80009f4 <HAL_UART_MspInit+0xac>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <HAL_UART_MspInit+0xac>)
 80009a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_UART_MspInit+0xac>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b0:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <HAL_UART_MspInit+0xac>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_UART_MspInit+0xac>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80009c4:	230c      	movs	r3, #12
 80009c6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80009d4:	230c      	movs	r3, #12
 80009d6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009dc:	4619      	mov	r1, r3
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f000 fa19 	bl	8000e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009e6:	bf00      	nop
 80009e8:	3778      	adds	r7, #120	; 0x78
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40008000 	.word	0x40008000
 80009f4:	40021000 	.word	0x40021000

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a44:	f000 f898 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a54:	f000 fb7a 	bl	800114c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <SystemInit+0x20>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <SystemInit+0x20>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a84:	f7ff ffea 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8a:	490d      	ldr	r1, [pc, #52]	; (8000ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <LoopForever+0xe>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa0:	4c0a      	ldr	r4, [pc, #40]	; (8000acc <LoopForever+0x16>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aae:	f002 fa17 	bl	8002ee0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab2:	f7ff fd2f 	bl	8000514 <main>

08000ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab6:	e7fe      	b.n	8000ab6 <LoopForever>
  ldr   r0, =_estack
 8000ab8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac4:	08002f90 	.word	0x08002f90
  ldr r2, =_sbss
 8000ac8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000acc:	200000c0 	.word	0x200000c0

08000ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC1_2_IRQHandler>

08000ad2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f95b 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 f80e 	bl	8000b04 <HAL_InitTick>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	e001      	b.n	8000af8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af4:	f7ff ff04 	bl	8000900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af8:	79fb      	ldrb	r3, [r7, #7]

}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <HAL_InitTick+0x68>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d022      	beq.n	8000b5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_InitTick+0x6c>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <HAL_InitTick+0x68>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b24:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 f966 	bl	8000dfe <HAL_SYSTICK_Config>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d10f      	bne.n	8000b58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b0f      	cmp	r3, #15
 8000b3c:	d809      	bhi.n	8000b52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	f04f 30ff 	mov.w	r0, #4294967295
 8000b46:	f000 f932 	bl	8000dae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_InitTick+0x70>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	e007      	b.n	8000b62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	73fb      	strb	r3, [r7, #15]
 8000b56:	e004      	b.n	8000b62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e001      	b.n	8000b62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000004 	.word	0x20000004

08000b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_IncTick+0x1c>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_IncTick+0x20>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a03      	ldr	r2, [pc, #12]	; (8000b94 <HAL_IncTick+0x1c>)
 8000b88:	6013      	str	r3, [r2, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	200000bc 	.word	0x200000bc
 8000b98:	20000008 	.word	0x20000008

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200000bc 	.word	0x200000bc

08000bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bbc:	f7ff ffee 	bl	8000b9c <HAL_GetTick>
 8000bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bcc:	d004      	beq.n	8000bd8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_Delay+0x40>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bd8:	bf00      	nop
 8000bda:	f7ff ffdf 	bl	8000b9c <HAL_GetTick>
 8000bde:	4602      	mov	r2, r0
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d8f7      	bhi.n	8000bda <HAL_Delay+0x26>
  {
  }
}
 8000bea:	bf00      	nop
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000008 	.word	0x20000008

08000bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	60d3      	str	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_GetPriorityGrouping+0x18>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	f003 0307 	and.w	r3, r3, #7
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	db0b      	blt.n	8000c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f003 021f 	and.w	r2, r3, #31
 8000c74:	4907      	ldr	r1, [pc, #28]	; (8000c94 <__NVIC_EnableIRQ+0x38>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	095b      	lsrs	r3, r3, #5
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000e100 	.word	0xe000e100

08000c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db0a      	blt.n	8000cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	490c      	ldr	r1, [pc, #48]	; (8000ce4 <__NVIC_SetPriority+0x4c>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc0:	e00a      	b.n	8000cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4908      	ldr	r1, [pc, #32]	; (8000ce8 <__NVIC_SetPriority+0x50>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	3b04      	subs	r3, #4
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	761a      	strb	r2, [r3, #24]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f1c3 0307 	rsb	r3, r3, #7
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	bf28      	it	cs
 8000d0a:	2304      	movcs	r3, #4
 8000d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d902      	bls.n	8000d1c <NVIC_EncodePriority+0x30>
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b03      	subs	r3, #3
 8000d1a:	e000      	b.n	8000d1e <NVIC_EncodePriority+0x32>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	4313      	orrs	r3, r2
         );
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	; 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d64:	d301      	bcc.n	8000d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00f      	b.n	8000d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <SysTick_Config+0x40>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d72:	210f      	movs	r1, #15
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f7ff ff8e 	bl	8000c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <SysTick_Config+0x40>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SysTick_Config+0x40>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	e000e010 	.word	0xe000e010

08000d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff29 	bl	8000bf8 <__NVIC_SetPriorityGrouping>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbc:	f7ff ff40 	bl	8000c40 <__NVIC_GetPriorityGrouping>
 8000dc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	6978      	ldr	r0, [r7, #20]
 8000dc8:	f7ff ff90 	bl	8000cec <NVIC_EncodePriority>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff5f 	bl	8000c98 <__NVIC_SetPriority>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff33 	bl	8000c5c <__NVIC_EnableIRQ>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffa4 	bl	8000d54 <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e26:	e15a      	b.n	80010de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	fa01 f303 	lsl.w	r3, r1, r3
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 814c 	beq.w	80010d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d005      	beq.n	8000e58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d130      	bne.n	8000eba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e8e:	2201      	movs	r2, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	f003 0201 	and.w	r2, r3, #1
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d017      	beq.n	8000ef6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d123      	bne.n	8000f4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	6939      	ldr	r1, [r7, #16]
 8000f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0203 	and.w	r2, r3, #3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 80a6 	beq.w	80010d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8c:	4b5b      	ldr	r3, [pc, #364]	; (80010fc <HAL_GPIO_Init+0x2e4>)
 8000f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f90:	4a5a      	ldr	r2, [pc, #360]	; (80010fc <HAL_GPIO_Init+0x2e4>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6613      	str	r3, [r2, #96]	; 0x60
 8000f98:	4b58      	ldr	r3, [pc, #352]	; (80010fc <HAL_GPIO_Init+0x2e4>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa4:	4a56      	ldr	r2, [pc, #344]	; (8001100 <HAL_GPIO_Init+0x2e8>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fce:	d01f      	beq.n	8001010 <HAL_GPIO_Init+0x1f8>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a4c      	ldr	r2, [pc, #304]	; (8001104 <HAL_GPIO_Init+0x2ec>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d019      	beq.n	800100c <HAL_GPIO_Init+0x1f4>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a4b      	ldr	r2, [pc, #300]	; (8001108 <HAL_GPIO_Init+0x2f0>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d013      	beq.n	8001008 <HAL_GPIO_Init+0x1f0>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a4a      	ldr	r2, [pc, #296]	; (800110c <HAL_GPIO_Init+0x2f4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d00d      	beq.n	8001004 <HAL_GPIO_Init+0x1ec>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a49      	ldr	r2, [pc, #292]	; (8001110 <HAL_GPIO_Init+0x2f8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d007      	beq.n	8001000 <HAL_GPIO_Init+0x1e8>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a48      	ldr	r2, [pc, #288]	; (8001114 <HAL_GPIO_Init+0x2fc>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d101      	bne.n	8000ffc <HAL_GPIO_Init+0x1e4>
 8000ff8:	2305      	movs	r3, #5
 8000ffa:	e00a      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	e008      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 8001000:	2304      	movs	r3, #4
 8001002:	e006      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 8001004:	2303      	movs	r3, #3
 8001006:	e004      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 8001008:	2302      	movs	r3, #2
 800100a:	e002      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <HAL_GPIO_Init+0x1fa>
 8001010:	2300      	movs	r3, #0
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	f002 0203 	and.w	r2, r2, #3
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	4093      	lsls	r3, r2
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001022:	4937      	ldr	r1, [pc, #220]	; (8001100 <HAL_GPIO_Init+0x2e8>)
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	089b      	lsrs	r3, r3, #2
 8001028:	3302      	adds	r3, #2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <HAL_GPIO_Init+0x300>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001054:	4a30      	ldr	r2, [pc, #192]	; (8001118 <HAL_GPIO_Init+0x300>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800105a:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <HAL_GPIO_Init+0x300>)
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800107e:	4a26      	ldr	r2, [pc, #152]	; (8001118 <HAL_GPIO_Init+0x300>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <HAL_GPIO_Init+0x300>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a8:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <HAL_GPIO_Init+0x300>)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <HAL_GPIO_Init+0x300>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010d2:	4a11      	ldr	r2, [pc, #68]	; (8001118 <HAL_GPIO_Init+0x300>)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3301      	adds	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f47f ae9d 	bne.w	8000e28 <HAL_GPIO_Init+0x10>
  }
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010000 	.word	0x40010000
 8001104:	48000400 	.word	0x48000400
 8001108:	48000800 	.word	0x48000800
 800110c:	48000c00 	.word	0x48000c00
 8001110:	48001000 	.word	0x48001000
 8001114:	48001400 	.word	0x48001400
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001138:	e002      	b.n	8001140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001158:	695a      	ldr	r2, [r3, #20]
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	4013      	ands	r3, r2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d006      	beq.n	8001170 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f806 	bl	800117c <HAL_GPIO_EXTI_Callback>
  }
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40010400 	.word	0x40010400

0800117c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d141      	bne.n	8001226 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011a2:	4b4b      	ldr	r3, [pc, #300]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ae:	d131      	bne.n	8001214 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011b0:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011b6:	4a46      	ldr	r2, [pc, #280]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c0:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011c8:	4a41      	ldr	r2, [pc, #260]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011d0:	4b40      	ldr	r3, [pc, #256]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2232      	movs	r2, #50	; 0x32
 80011d6:	fb02 f303 	mul.w	r3, r2, r3
 80011da:	4a3f      	ldr	r2, [pc, #252]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	0c9b      	lsrs	r3, r3, #18
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e6:	e002      	b.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011ee:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fa:	d102      	bne.n	8001202 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f2      	bne.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001202:	4b33      	ldr	r3, [pc, #204]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800120e:	d158      	bne.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e057      	b.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001214:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800121a:	4a2d      	ldr	r2, [pc, #180]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001220:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001224:	e04d      	b.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800122c:	d141      	bne.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800122e:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800123a:	d131      	bne.n	80012a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001242:	4a23      	ldr	r2, [pc, #140]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001248:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001254:	4a1e      	ldr	r2, [pc, #120]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2232      	movs	r2, #50	; 0x32
 8001262:	fb02 f303 	mul.w	r3, r2, r3
 8001266:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001268:	fba2 2303 	umull	r2, r3, r2, r3
 800126c:	0c9b      	lsrs	r3, r3, #18
 800126e:	3301      	adds	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001272:	e002      	b.n	800127a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3b01      	subs	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001286:	d102      	bne.n	800128e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f2      	bne.n	8001274 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129a:	d112      	bne.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e011      	b.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012b0:	e007      	b.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012ba:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40007000 	.word	0x40007000
 80012d4:	20000000 	.word	0x20000000
 80012d8:	431bde83 	.word	0x431bde83

080012dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ea:	6093      	str	r3, [r2, #8]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40007000 	.word	0x40007000

080012fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e2fe      	b.n	800190c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d075      	beq.n	8001406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800131a:	4b97      	ldr	r3, [pc, #604]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001324:	4b94      	ldr	r3, [pc, #592]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	2b0c      	cmp	r3, #12
 8001332:	d102      	bne.n	800133a <HAL_RCC_OscConfig+0x3e>
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2b03      	cmp	r3, #3
 8001338:	d002      	beq.n	8001340 <HAL_RCC_OscConfig+0x44>
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	2b08      	cmp	r3, #8
 800133e:	d10b      	bne.n	8001358 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	4b8d      	ldr	r3, [pc, #564]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d05b      	beq.n	8001404 <HAL_RCC_OscConfig+0x108>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d157      	bne.n	8001404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e2d9      	b.n	800190c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001360:	d106      	bne.n	8001370 <HAL_RCC_OscConfig+0x74>
 8001362:	4b85      	ldr	r3, [pc, #532]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a84      	ldr	r2, [pc, #528]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 8001368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e01d      	b.n	80013ac <HAL_RCC_OscConfig+0xb0>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x98>
 800137a:	4b7f      	ldr	r3, [pc, #508]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a7e      	ldr	r2, [pc, #504]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 8001380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	4b7c      	ldr	r3, [pc, #496]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a7b      	ldr	r2, [pc, #492]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 800138c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e00b      	b.n	80013ac <HAL_RCC_OscConfig+0xb0>
 8001394:	4b78      	ldr	r3, [pc, #480]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a77      	ldr	r2, [pc, #476]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 800139a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b75      	ldr	r3, [pc, #468]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a74      	ldr	r2, [pc, #464]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 80013a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d013      	beq.n	80013dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fbf2 	bl	8000b9c <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fbee 	bl	8000b9c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e29e      	b.n	800190c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ce:	4b6a      	ldr	r3, [pc, #424]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0xc0>
 80013da:	e014      	b.n	8001406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013dc:	f7ff fbde 	bl	8000b9c <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e4:	f7ff fbda 	bl	8000b9c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b64      	cmp	r3, #100	; 0x64
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e28a      	b.n	800190c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013f6:	4b60      	ldr	r3, [pc, #384]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0xe8>
 8001402:	e000      	b.n	8001406 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d075      	beq.n	80014fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001412:	4b59      	ldr	r3, [pc, #356]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800141c:	4b56      	ldr	r3, [pc, #344]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b0c      	cmp	r3, #12
 800142a:	d102      	bne.n	8001432 <HAL_RCC_OscConfig+0x136>
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d002      	beq.n	8001438 <HAL_RCC_OscConfig+0x13c>
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b04      	cmp	r3, #4
 8001436:	d11f      	bne.n	8001478 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001438:	4b4f      	ldr	r3, [pc, #316]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001440:	2b00      	cmp	r3, #0
 8001442:	d005      	beq.n	8001450 <HAL_RCC_OscConfig+0x154>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e25d      	b.n	800190c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001450:	4b49      	ldr	r3, [pc, #292]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	061b      	lsls	r3, r3, #24
 800145e:	4946      	ldr	r1, [pc, #280]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001464:	4b45      	ldr	r3, [pc, #276]	; (800157c <HAL_RCC_OscConfig+0x280>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fb4b 	bl	8000b04 <HAL_InitTick>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d043      	beq.n	80014fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e249      	b.n	800190c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d023      	beq.n	80014c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001480:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a3c      	ldr	r2, [pc, #240]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148c:	f7ff fb86 	bl	8000b9c <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001494:	f7ff fb82 	bl	8000b9c <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e232      	b.n	800190c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b2:	4b31      	ldr	r3, [pc, #196]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	061b      	lsls	r3, r3, #24
 80014c0:	492d      	ldr	r1, [pc, #180]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	604b      	str	r3, [r1, #4]
 80014c6:	e01a      	b.n	80014fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c8:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a2a      	ldr	r2, [pc, #168]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 80014ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d4:	f7ff fb62 	bl	8000b9c <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014dc:	f7ff fb5e 	bl	8000b9c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e20e      	b.n	800190c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x1e0>
 80014fa:	e000      	b.n	80014fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d041      	beq.n	800158e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d01c      	beq.n	800154c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001512:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 8001514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001518:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001522:	f7ff fb3b 	bl	8000b9c <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152a:	f7ff fb37 	bl	8000b9c <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e1e7      	b.n	800190c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 800153e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0ef      	beq.n	800152a <HAL_RCC_OscConfig+0x22e>
 800154a:	e020      	b.n	800158e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 800154e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001552:	4a09      	ldr	r2, [pc, #36]	; (8001578 <HAL_RCC_OscConfig+0x27c>)
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155c:	f7ff fb1e 	bl	8000b9c <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001562:	e00d      	b.n	8001580 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001564:	f7ff fb1a 	bl	8000b9c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d906      	bls.n	8001580 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e1ca      	b.n	800190c <HAL_RCC_OscConfig+0x610>
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000
 800157c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001580:	4b8c      	ldr	r3, [pc, #560]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 8001582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1ea      	bne.n	8001564 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 80a6 	beq.w	80016e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015a0:	4b84      	ldr	r3, [pc, #528]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 80015a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_OscConfig+0x2b4>
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0x2b6>
 80015b0:	2300      	movs	r3, #0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00d      	beq.n	80015d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	4b7f      	ldr	r3, [pc, #508]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ba:	4a7e      	ldr	r2, [pc, #504]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c0:	6593      	str	r3, [r2, #88]	; 0x58
 80015c2:	4b7c      	ldr	r3, [pc, #496]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015ce:	2301      	movs	r3, #1
 80015d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d2:	4b79      	ldr	r3, [pc, #484]	; (80017b8 <HAL_RCC_OscConfig+0x4bc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d118      	bne.n	8001610 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015de:	4b76      	ldr	r3, [pc, #472]	; (80017b8 <HAL_RCC_OscConfig+0x4bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a75      	ldr	r2, [pc, #468]	; (80017b8 <HAL_RCC_OscConfig+0x4bc>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fad7 	bl	8000b9c <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f2:	f7ff fad3 	bl	8000b9c <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e183      	b.n	800190c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001604:	4b6c      	ldr	r3, [pc, #432]	; (80017b8 <HAL_RCC_OscConfig+0x4bc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d108      	bne.n	800162a <HAL_RCC_OscConfig+0x32e>
 8001618:	4b66      	ldr	r3, [pc, #408]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 800161a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800161e:	4a65      	ldr	r2, [pc, #404]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001628:	e024      	b.n	8001674 <HAL_RCC_OscConfig+0x378>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b05      	cmp	r3, #5
 8001630:	d110      	bne.n	8001654 <HAL_RCC_OscConfig+0x358>
 8001632:	4b60      	ldr	r3, [pc, #384]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 8001634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001638:	4a5e      	ldr	r2, [pc, #376]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 800163a:	f043 0304 	orr.w	r3, r3, #4
 800163e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001642:	4b5c      	ldr	r3, [pc, #368]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 8001644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001648:	4a5a      	ldr	r2, [pc, #360]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001652:	e00f      	b.n	8001674 <HAL_RCC_OscConfig+0x378>
 8001654:	4b57      	ldr	r3, [pc, #348]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 8001656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165a:	4a56      	ldr	r2, [pc, #344]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001664:	4b53      	ldr	r3, [pc, #332]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 8001666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166a:	4a52      	ldr	r2, [pc, #328]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 800166c:	f023 0304 	bic.w	r3, r3, #4
 8001670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d016      	beq.n	80016aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167c:	f7ff fa8e 	bl	8000b9c <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001682:	e00a      	b.n	800169a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001684:	f7ff fa8a 	bl	8000b9c <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001692:	4293      	cmp	r3, r2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e138      	b.n	800190c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800169a:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 800169c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0ed      	beq.n	8001684 <HAL_RCC_OscConfig+0x388>
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016aa:	f7ff fa77 	bl	8000b9c <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7ff fa73 	bl	8000b9c <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e121      	b.n	800190c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016c8:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 80016ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1ed      	bne.n	80016b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016d6:	7ffb      	ldrb	r3, [r7, #31]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d105      	bne.n	80016e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016dc:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 80016de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e0:	4a34      	ldr	r2, [pc, #208]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 80016e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0320 	and.w	r3, r3, #32
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d03c      	beq.n	800176e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d01c      	beq.n	8001736 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016fc:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 80016fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001702:	4a2c      	ldr	r2, [pc, #176]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170c:	f7ff fa46 	bl	8000b9c <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001714:	f7ff fa42 	bl	8000b9c <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e0f2      	b.n	800190c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 8001728:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0ef      	beq.n	8001714 <HAL_RCC_OscConfig+0x418>
 8001734:	e01b      	b.n	800176e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001736:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 8001738:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800173c:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 800173e:	f023 0301 	bic.w	r3, r3, #1
 8001742:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001746:	f7ff fa29 	bl	8000b9c <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800174e:	f7ff fa25 	bl	8000b9c <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e0d5      	b.n	800190c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 8001762:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1ef      	bne.n	800174e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 80c9 	beq.w	800190a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b0c      	cmp	r3, #12
 8001782:	f000 8083 	beq.w	800188c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d15e      	bne.n	800184c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_RCC_OscConfig+0x4b8>)
 8001794:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179a:	f7ff f9ff 	bl	8000b9c <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a0:	e00c      	b.n	80017bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a2:	f7ff f9fb 	bl	8000b9c <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d905      	bls.n	80017bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e0ab      	b.n	800190c <HAL_RCC_OscConfig+0x610>
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017bc:	4b55      	ldr	r3, [pc, #340]	; (8001914 <HAL_RCC_OscConfig+0x618>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ec      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c8:	4b52      	ldr	r3, [pc, #328]	; (8001914 <HAL_RCC_OscConfig+0x618>)
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	4b52      	ldr	r3, [pc, #328]	; (8001918 <HAL_RCC_OscConfig+0x61c>)
 80017ce:	4013      	ands	r3, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6a11      	ldr	r1, [r2, #32]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017d8:	3a01      	subs	r2, #1
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	4311      	orrs	r1, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80017e2:	0212      	lsls	r2, r2, #8
 80017e4:	4311      	orrs	r1, r2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017ea:	0852      	lsrs	r2, r2, #1
 80017ec:	3a01      	subs	r2, #1
 80017ee:	0552      	lsls	r2, r2, #21
 80017f0:	4311      	orrs	r1, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017f6:	0852      	lsrs	r2, r2, #1
 80017f8:	3a01      	subs	r2, #1
 80017fa:	0652      	lsls	r2, r2, #25
 80017fc:	4311      	orrs	r1, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001802:	06d2      	lsls	r2, r2, #27
 8001804:	430a      	orrs	r2, r1
 8001806:	4943      	ldr	r1, [pc, #268]	; (8001914 <HAL_RCC_OscConfig+0x618>)
 8001808:	4313      	orrs	r3, r2
 800180a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800180c:	4b41      	ldr	r3, [pc, #260]	; (8001914 <HAL_RCC_OscConfig+0x618>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a40      	ldr	r2, [pc, #256]	; (8001914 <HAL_RCC_OscConfig+0x618>)
 8001812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001816:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001818:	4b3e      	ldr	r3, [pc, #248]	; (8001914 <HAL_RCC_OscConfig+0x618>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4a3d      	ldr	r2, [pc, #244]	; (8001914 <HAL_RCC_OscConfig+0x618>)
 800181e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001822:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff f9ba 	bl	8000b9c <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182c:	f7ff f9b6 	bl	8000b9c <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e066      	b.n	800190c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183e:	4b35      	ldr	r3, [pc, #212]	; (8001914 <HAL_RCC_OscConfig+0x618>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x530>
 800184a:	e05e      	b.n	800190a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184c:	4b31      	ldr	r3, [pc, #196]	; (8001914 <HAL_RCC_OscConfig+0x618>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a30      	ldr	r2, [pc, #192]	; (8001914 <HAL_RCC_OscConfig+0x618>)
 8001852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff f9a0 	bl	8000b9c <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff f99c 	bl	8000b9c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e04c      	b.n	800190c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001872:	4b28      	ldr	r3, [pc, #160]	; (8001914 <HAL_RCC_OscConfig+0x618>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800187e:	4b25      	ldr	r3, [pc, #148]	; (8001914 <HAL_RCC_OscConfig+0x618>)
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	4924      	ldr	r1, [pc, #144]	; (8001914 <HAL_RCC_OscConfig+0x618>)
 8001884:	4b25      	ldr	r3, [pc, #148]	; (800191c <HAL_RCC_OscConfig+0x620>)
 8001886:	4013      	ands	r3, r2
 8001888:	60cb      	str	r3, [r1, #12]
 800188a:	e03e      	b.n	800190a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e039      	b.n	800190c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <HAL_RCC_OscConfig+0x618>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f003 0203 	and.w	r2, r3, #3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d12c      	bne.n	8001906 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	3b01      	subs	r3, #1
 80018b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d123      	bne.n	8001906 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d11b      	bne.n	8001906 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d113      	bne.n	8001906 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	085b      	lsrs	r3, r3, #1
 80018ea:	3b01      	subs	r3, #1
 80018ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d109      	bne.n	8001906 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fc:	085b      	lsrs	r3, r3, #1
 80018fe:	3b01      	subs	r3, #1
 8001900:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d001      	beq.n	800190a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3720      	adds	r7, #32
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	019f800c 	.word	0x019f800c
 800191c:	feeefffc 	.word	0xfeeefffc

08001920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e11e      	b.n	8001b76 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001938:	4b91      	ldr	r3, [pc, #580]	; (8001b80 <HAL_RCC_ClockConfig+0x260>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 030f 	and.w	r3, r3, #15
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d910      	bls.n	8001968 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b8e      	ldr	r3, [pc, #568]	; (8001b80 <HAL_RCC_ClockConfig+0x260>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 020f 	bic.w	r2, r3, #15
 800194e:	498c      	ldr	r1, [pc, #560]	; (8001b80 <HAL_RCC_ClockConfig+0x260>)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001956:	4b8a      	ldr	r3, [pc, #552]	; (8001b80 <HAL_RCC_ClockConfig+0x260>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e106      	b.n	8001b76 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d073      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d129      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197c:	4b81      	ldr	r3, [pc, #516]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0f4      	b.n	8001b76 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800198c:	f000 f99e 	bl	8001ccc <RCC_GetSysClockFreqFromPLLSource>
 8001990:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4a7c      	ldr	r2, [pc, #496]	; (8001b88 <HAL_RCC_ClockConfig+0x268>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d93f      	bls.n	8001a1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800199a:	4b7a      	ldr	r3, [pc, #488]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d009      	beq.n	80019ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d033      	beq.n	8001a1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d12f      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019ba:	4b72      	ldr	r3, [pc, #456]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019c2:	4a70      	ldr	r2, [pc, #448]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 80019c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e024      	b.n	8001a1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d107      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d8:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d109      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0c6      	b.n	8001b76 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e8:	4b66      	ldr	r3, [pc, #408]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0be      	b.n	8001b76 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80019f8:	f000 f8ce 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4a61      	ldr	r2, [pc, #388]	; (8001b88 <HAL_RCC_ClockConfig+0x268>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d909      	bls.n	8001a1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a06:	4b5f      	ldr	r3, [pc, #380]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a0e:	4a5d      	ldr	r2, [pc, #372]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a1a:	4b5a      	ldr	r3, [pc, #360]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f023 0203 	bic.w	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4957      	ldr	r1, [pc, #348]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a2c:	f7ff f8b6 	bl	8000b9c <HAL_GetTick>
 8001a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a34:	f7ff f8b2 	bl	8000b9c <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e095      	b.n	8001b76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	4b4e      	ldr	r3, [pc, #312]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 020c 	and.w	r2, r3, #12
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d1eb      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d023      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a74:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4a42      	ldr	r2, [pc, #264]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001a7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d007      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a8c:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001a94:	4a3b      	ldr	r2, [pc, #236]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001a96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a9c:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	4936      	ldr	r1, [pc, #216]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b80      	cmp	r3, #128	; 0x80
 8001ab4:	d105      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ab6:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	4a32      	ldr	r2, [pc, #200]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001abc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ac0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac2:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <HAL_RCC_ClockConfig+0x260>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d21d      	bcs.n	8001b0c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <HAL_RCC_ClockConfig+0x260>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f023 020f 	bic.w	r2, r3, #15
 8001ad8:	4929      	ldr	r1, [pc, #164]	; (8001b80 <HAL_RCC_ClockConfig+0x260>)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ae0:	f7ff f85c 	bl	8000b9c <HAL_GetTick>
 8001ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae8:	f7ff f858 	bl	8000b9c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e03b      	b.n	8001b76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_RCC_ClockConfig+0x260>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d1ed      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d008      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4917      	ldr	r1, [pc, #92]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d009      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	490f      	ldr	r1, [pc, #60]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b4a:	f000 f825 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_RCC_ClockConfig+0x264>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	490c      	ldr	r1, [pc, #48]	; (8001b8c <HAL_RCC_ClockConfig+0x26c>)
 8001b5c:	5ccb      	ldrb	r3, [r1, r3]
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	fa22 f303 	lsr.w	r3, r2, r3
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <HAL_RCC_ClockConfig+0x270>)
 8001b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_RCC_ClockConfig+0x274>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe ffc8 	bl	8000b04 <HAL_InitTick>
 8001b74:	4603      	mov	r3, r0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40022000 	.word	0x40022000
 8001b84:	40021000 	.word	0x40021000
 8001b88:	04c4b400 	.word	0x04c4b400
 8001b8c:	08002f40 	.word	0x08002f40
 8001b90:	20000000 	.word	0x20000000
 8001b94:	20000004 	.word	0x20000004

08001b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b9e:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d102      	bne.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001baa:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	e047      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bb0:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d102      	bne.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bbc:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	e03e      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bc2:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	d136      	bne.n	8001c3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	3301      	adds	r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d10c      	bne.n	8001c06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bec:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf4:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bf6:	68d2      	ldr	r2, [r2, #12]
 8001bf8:	0a12      	lsrs	r2, r2, #8
 8001bfa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bfe:	fb02 f303 	mul.w	r3, r2, r3
 8001c02:	617b      	str	r3, [r7, #20]
      break;
 8001c04:	e00c      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c06:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	4a10      	ldr	r2, [pc, #64]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c10:	68d2      	ldr	r2, [r2, #12]
 8001c12:	0a12      	lsrs	r2, r2, #8
 8001c14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c18:	fb02 f303 	mul.w	r3, r2, r3
 8001c1c:	617b      	str	r3, [r7, #20]
      break;
 8001c1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	0e5b      	lsrs	r3, r3, #25
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	e001      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c40:	693b      	ldr	r3, [r7, #16]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	00f42400 	.word	0x00f42400
 8001c58:	016e3600 	.word	0x016e3600

08001c5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000000 	.word	0x20000000

08001c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c78:	f7ff fff0 	bl	8001c5c <HAL_RCC_GetHCLKFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	4904      	ldr	r1, [pc, #16]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	08002f50 	.word	0x08002f50

08001ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ca4:	f7ff ffda 	bl	8001c5c <HAL_RCC_GetHCLKFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	0adb      	lsrs	r3, r3, #11
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4904      	ldr	r1, [pc, #16]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	08002f50 	.word	0x08002f50

08001ccc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d10c      	bne.n	8001d0a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cf0:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf8:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cfa:	68d2      	ldr	r2, [r2, #12]
 8001cfc:	0a12      	lsrs	r2, r2, #8
 8001cfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	617b      	str	r3, [r7, #20]
    break;
 8001d08:	e00c      	b.n	8001d24 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d14:	68d2      	ldr	r2, [r2, #12]
 8001d16:	0a12      	lsrs	r2, r2, #8
 8001d18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d1c:	fb02 f303 	mul.w	r3, r2, r3
 8001d20:	617b      	str	r3, [r7, #20]
    break;
 8001d22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0e5b      	lsrs	r3, r3, #25
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d3e:	687b      	ldr	r3, [r7, #4]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	016e3600 	.word	0x016e3600
 8001d54:	00f42400 	.word	0x00f42400

08001d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d60:	2300      	movs	r3, #0
 8001d62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d64:	2300      	movs	r3, #0
 8001d66:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 8098 	beq.w	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7a:	4b43      	ldr	r3, [pc, #268]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10d      	bne.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b40      	ldr	r3, [pc, #256]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	4a3f      	ldr	r2, [pc, #252]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6593      	str	r3, [r2, #88]	; 0x58
 8001d92:	4b3d      	ldr	r3, [pc, #244]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001da2:	4b3a      	ldr	r3, [pc, #232]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a39      	ldr	r2, [pc, #228]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dae:	f7fe fef5 	bl	8000b9c <HAL_GetTick>
 8001db2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001db4:	e009      	b.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db6:	f7fe fef1 	bl	8000b9c <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d902      	bls.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	74fb      	strb	r3, [r7, #19]
        break;
 8001dc8:	e005      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dca:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0ef      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001dd6:	7cfb      	ldrb	r3, [r7, #19]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d159      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01e      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d019      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001df8:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e04:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0a:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e14:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1a:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e24:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d016      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e36:	f7fe feb1 	bl	8000b9c <HAL_GetTick>
 8001e3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e3c:	e00b      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7fe fead 	bl	8000b9c <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d902      	bls.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	74fb      	strb	r3, [r7, #19]
            break;
 8001e54:	e006      	b.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0ec      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001e64:	7cfb      	ldrb	r3, [r7, #19]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10b      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e78:	4903      	ldr	r1, [pc, #12]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e80:	e008      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e82:	7cfb      	ldrb	r3, [r7, #19]
 8001e84:	74bb      	strb	r3, [r7, #18]
 8001e86:	e005      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e90:	7cfb      	ldrb	r3, [r7, #19]
 8001e92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e94:	7c7b      	ldrb	r3, [r7, #17]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d105      	bne.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9a:	4ba7      	ldr	r3, [pc, #668]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	4aa6      	ldr	r2, [pc, #664]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00a      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eb2:	4ba1      	ldr	r3, [pc, #644]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb8:	f023 0203 	bic.w	r2, r3, #3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	499d      	ldr	r1, [pc, #628]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00a      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ed4:	4b98      	ldr	r3, [pc, #608]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eda:	f023 020c 	bic.w	r2, r3, #12
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	4995      	ldr	r1, [pc, #596]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00a      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ef6:	4b90      	ldr	r3, [pc, #576]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	498c      	ldr	r1, [pc, #560]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00a      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f18:	4b87      	ldr	r3, [pc, #540]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	4984      	ldr	r1, [pc, #528]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00a      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f3a:	4b7f      	ldr	r3, [pc, #508]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	497b      	ldr	r1, [pc, #492]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0320 	and.w	r3, r3, #32
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00a      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f5c:	4b76      	ldr	r3, [pc, #472]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	4973      	ldr	r1, [pc, #460]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00a      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f7e:	4b6e      	ldr	r3, [pc, #440]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	496a      	ldr	r1, [pc, #424]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fa0:	4b65      	ldr	r3, [pc, #404]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4962      	ldr	r1, [pc, #392]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fc2:	4b5d      	ldr	r3, [pc, #372]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	4959      	ldr	r1, [pc, #356]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001fe4:	4b54      	ldr	r3, [pc, #336]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fea:	f023 0203 	bic.w	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	4951      	ldr	r1, [pc, #324]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002006:	4b4c      	ldr	r3, [pc, #304]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	4948      	ldr	r1, [pc, #288]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002024:	2b00      	cmp	r3, #0
 8002026:	d015      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002028:	4b43      	ldr	r3, [pc, #268]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4940      	ldr	r1, [pc, #256]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002046:	d105      	bne.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002048:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a3a      	ldr	r2, [pc, #232]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800204e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002052:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800205c:	2b00      	cmp	r3, #0
 800205e:	d015      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002060:	4b35      	ldr	r3, [pc, #212]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002066:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206e:	4932      	ldr	r1, [pc, #200]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800207e:	d105      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002080:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a2c      	ldr	r2, [pc, #176]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800208a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d015      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002098:	4b27      	ldr	r3, [pc, #156]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	4924      	ldr	r1, [pc, #144]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b6:	d105      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b8:	4b1f      	ldr	r3, [pc, #124]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a1e      	ldr	r2, [pc, #120]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d015      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020de:	4916      	ldr	r1, [pc, #88]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020ee:	d105      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4a10      	ldr	r2, [pc, #64]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d019      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	4908      	ldr	r1, [pc, #32]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002126:	d109      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a02      	ldr	r2, [pc, #8]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002132:	60d3      	str	r3, [r2, #12]
 8002134:	e002      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d015      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002148:	4b29      	ldr	r3, [pc, #164]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	4926      	ldr	r1, [pc, #152]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002166:	d105      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002168:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4a20      	ldr	r2, [pc, #128]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800216e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002172:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d015      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218e:	4918      	ldr	r1, [pc, #96]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219e:	d105      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021aa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d015      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	490a      	ldr	r1, [pc, #40]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021d6:	d105      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80021e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000

080021f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e042      	b.n	800228c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220c:	2b00      	cmp	r3, #0
 800220e:	d106      	bne.n	800221e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7fe fb95 	bl	8000948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2224      	movs	r2, #36	; 0x24
 8002222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fb24 	bl	800288c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f825 	bl	8002294 <UART_SetConfig>
 800224a:	4603      	mov	r3, r0
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e01b      	b.n	800228c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002262:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002272:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fba3 	bl	80029d0 <UART_CheckIdleState>
 800228a:	4603      	mov	r3, r0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002298:	b08c      	sub	sp, #48	; 0x30
 800229a:	af00      	add	r7, sp, #0
 800229c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	431a      	orrs	r2, r3
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4baa      	ldr	r3, [pc, #680]	; (800256c <UART_SetConfig+0x2d8>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022cc:	430b      	orrs	r3, r1
 80022ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a9f      	ldr	r2, [pc, #636]	; (8002570 <UART_SetConfig+0x2dc>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d004      	beq.n	8002300 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022fc:	4313      	orrs	r3, r2
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800230a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002314:	430b      	orrs	r3, r1
 8002316:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	f023 010f 	bic.w	r1, r3, #15
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a90      	ldr	r2, [pc, #576]	; (8002574 <UART_SetConfig+0x2e0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d125      	bne.n	8002384 <UART_SetConfig+0xf0>
 8002338:	4b8f      	ldr	r3, [pc, #572]	; (8002578 <UART_SetConfig+0x2e4>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b03      	cmp	r3, #3
 8002344:	d81a      	bhi.n	800237c <UART_SetConfig+0xe8>
 8002346:	a201      	add	r2, pc, #4	; (adr r2, 800234c <UART_SetConfig+0xb8>)
 8002348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234c:	0800235d 	.word	0x0800235d
 8002350:	0800236d 	.word	0x0800236d
 8002354:	08002365 	.word	0x08002365
 8002358:	08002375 	.word	0x08002375
 800235c:	2301      	movs	r3, #1
 800235e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002362:	e116      	b.n	8002592 <UART_SetConfig+0x2fe>
 8002364:	2302      	movs	r3, #2
 8002366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800236a:	e112      	b.n	8002592 <UART_SetConfig+0x2fe>
 800236c:	2304      	movs	r3, #4
 800236e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002372:	e10e      	b.n	8002592 <UART_SetConfig+0x2fe>
 8002374:	2308      	movs	r3, #8
 8002376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800237a:	e10a      	b.n	8002592 <UART_SetConfig+0x2fe>
 800237c:	2310      	movs	r3, #16
 800237e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002382:	e106      	b.n	8002592 <UART_SetConfig+0x2fe>
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a7c      	ldr	r2, [pc, #496]	; (800257c <UART_SetConfig+0x2e8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d138      	bne.n	8002400 <UART_SetConfig+0x16c>
 800238e:	4b7a      	ldr	r3, [pc, #488]	; (8002578 <UART_SetConfig+0x2e4>)
 8002390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b0c      	cmp	r3, #12
 800239a:	d82d      	bhi.n	80023f8 <UART_SetConfig+0x164>
 800239c:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <UART_SetConfig+0x110>)
 800239e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a2:	bf00      	nop
 80023a4:	080023d9 	.word	0x080023d9
 80023a8:	080023f9 	.word	0x080023f9
 80023ac:	080023f9 	.word	0x080023f9
 80023b0:	080023f9 	.word	0x080023f9
 80023b4:	080023e9 	.word	0x080023e9
 80023b8:	080023f9 	.word	0x080023f9
 80023bc:	080023f9 	.word	0x080023f9
 80023c0:	080023f9 	.word	0x080023f9
 80023c4:	080023e1 	.word	0x080023e1
 80023c8:	080023f9 	.word	0x080023f9
 80023cc:	080023f9 	.word	0x080023f9
 80023d0:	080023f9 	.word	0x080023f9
 80023d4:	080023f1 	.word	0x080023f1
 80023d8:	2300      	movs	r3, #0
 80023da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023de:	e0d8      	b.n	8002592 <UART_SetConfig+0x2fe>
 80023e0:	2302      	movs	r3, #2
 80023e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023e6:	e0d4      	b.n	8002592 <UART_SetConfig+0x2fe>
 80023e8:	2304      	movs	r3, #4
 80023ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023ee:	e0d0      	b.n	8002592 <UART_SetConfig+0x2fe>
 80023f0:	2308      	movs	r3, #8
 80023f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023f6:	e0cc      	b.n	8002592 <UART_SetConfig+0x2fe>
 80023f8:	2310      	movs	r3, #16
 80023fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023fe:	e0c8      	b.n	8002592 <UART_SetConfig+0x2fe>
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a5e      	ldr	r2, [pc, #376]	; (8002580 <UART_SetConfig+0x2ec>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d125      	bne.n	8002456 <UART_SetConfig+0x1c2>
 800240a:	4b5b      	ldr	r3, [pc, #364]	; (8002578 <UART_SetConfig+0x2e4>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002410:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002414:	2b30      	cmp	r3, #48	; 0x30
 8002416:	d016      	beq.n	8002446 <UART_SetConfig+0x1b2>
 8002418:	2b30      	cmp	r3, #48	; 0x30
 800241a:	d818      	bhi.n	800244e <UART_SetConfig+0x1ba>
 800241c:	2b20      	cmp	r3, #32
 800241e:	d00a      	beq.n	8002436 <UART_SetConfig+0x1a2>
 8002420:	2b20      	cmp	r3, #32
 8002422:	d814      	bhi.n	800244e <UART_SetConfig+0x1ba>
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <UART_SetConfig+0x19a>
 8002428:	2b10      	cmp	r3, #16
 800242a:	d008      	beq.n	800243e <UART_SetConfig+0x1aa>
 800242c:	e00f      	b.n	800244e <UART_SetConfig+0x1ba>
 800242e:	2300      	movs	r3, #0
 8002430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002434:	e0ad      	b.n	8002592 <UART_SetConfig+0x2fe>
 8002436:	2302      	movs	r3, #2
 8002438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800243c:	e0a9      	b.n	8002592 <UART_SetConfig+0x2fe>
 800243e:	2304      	movs	r3, #4
 8002440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002444:	e0a5      	b.n	8002592 <UART_SetConfig+0x2fe>
 8002446:	2308      	movs	r3, #8
 8002448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800244c:	e0a1      	b.n	8002592 <UART_SetConfig+0x2fe>
 800244e:	2310      	movs	r3, #16
 8002450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002454:	e09d      	b.n	8002592 <UART_SetConfig+0x2fe>
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a4a      	ldr	r2, [pc, #296]	; (8002584 <UART_SetConfig+0x2f0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d125      	bne.n	80024ac <UART_SetConfig+0x218>
 8002460:	4b45      	ldr	r3, [pc, #276]	; (8002578 <UART_SetConfig+0x2e4>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800246a:	2bc0      	cmp	r3, #192	; 0xc0
 800246c:	d016      	beq.n	800249c <UART_SetConfig+0x208>
 800246e:	2bc0      	cmp	r3, #192	; 0xc0
 8002470:	d818      	bhi.n	80024a4 <UART_SetConfig+0x210>
 8002472:	2b80      	cmp	r3, #128	; 0x80
 8002474:	d00a      	beq.n	800248c <UART_SetConfig+0x1f8>
 8002476:	2b80      	cmp	r3, #128	; 0x80
 8002478:	d814      	bhi.n	80024a4 <UART_SetConfig+0x210>
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <UART_SetConfig+0x1f0>
 800247e:	2b40      	cmp	r3, #64	; 0x40
 8002480:	d008      	beq.n	8002494 <UART_SetConfig+0x200>
 8002482:	e00f      	b.n	80024a4 <UART_SetConfig+0x210>
 8002484:	2300      	movs	r3, #0
 8002486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800248a:	e082      	b.n	8002592 <UART_SetConfig+0x2fe>
 800248c:	2302      	movs	r3, #2
 800248e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002492:	e07e      	b.n	8002592 <UART_SetConfig+0x2fe>
 8002494:	2304      	movs	r3, #4
 8002496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800249a:	e07a      	b.n	8002592 <UART_SetConfig+0x2fe>
 800249c:	2308      	movs	r3, #8
 800249e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024a2:	e076      	b.n	8002592 <UART_SetConfig+0x2fe>
 80024a4:	2310      	movs	r3, #16
 80024a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024aa:	e072      	b.n	8002592 <UART_SetConfig+0x2fe>
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a35      	ldr	r2, [pc, #212]	; (8002588 <UART_SetConfig+0x2f4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d12a      	bne.n	800250c <UART_SetConfig+0x278>
 80024b6:	4b30      	ldr	r3, [pc, #192]	; (8002578 <UART_SetConfig+0x2e4>)
 80024b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024c4:	d01a      	beq.n	80024fc <UART_SetConfig+0x268>
 80024c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024ca:	d81b      	bhi.n	8002504 <UART_SetConfig+0x270>
 80024cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d0:	d00c      	beq.n	80024ec <UART_SetConfig+0x258>
 80024d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d6:	d815      	bhi.n	8002504 <UART_SetConfig+0x270>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <UART_SetConfig+0x250>
 80024dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e0:	d008      	beq.n	80024f4 <UART_SetConfig+0x260>
 80024e2:	e00f      	b.n	8002504 <UART_SetConfig+0x270>
 80024e4:	2300      	movs	r3, #0
 80024e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024ea:	e052      	b.n	8002592 <UART_SetConfig+0x2fe>
 80024ec:	2302      	movs	r3, #2
 80024ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024f2:	e04e      	b.n	8002592 <UART_SetConfig+0x2fe>
 80024f4:	2304      	movs	r3, #4
 80024f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024fa:	e04a      	b.n	8002592 <UART_SetConfig+0x2fe>
 80024fc:	2308      	movs	r3, #8
 80024fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002502:	e046      	b.n	8002592 <UART_SetConfig+0x2fe>
 8002504:	2310      	movs	r3, #16
 8002506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800250a:	e042      	b.n	8002592 <UART_SetConfig+0x2fe>
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a17      	ldr	r2, [pc, #92]	; (8002570 <UART_SetConfig+0x2dc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d13a      	bne.n	800258c <UART_SetConfig+0x2f8>
 8002516:	4b18      	ldr	r3, [pc, #96]	; (8002578 <UART_SetConfig+0x2e4>)
 8002518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002520:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002524:	d01a      	beq.n	800255c <UART_SetConfig+0x2c8>
 8002526:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800252a:	d81b      	bhi.n	8002564 <UART_SetConfig+0x2d0>
 800252c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002530:	d00c      	beq.n	800254c <UART_SetConfig+0x2b8>
 8002532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002536:	d815      	bhi.n	8002564 <UART_SetConfig+0x2d0>
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <UART_SetConfig+0x2b0>
 800253c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002540:	d008      	beq.n	8002554 <UART_SetConfig+0x2c0>
 8002542:	e00f      	b.n	8002564 <UART_SetConfig+0x2d0>
 8002544:	2300      	movs	r3, #0
 8002546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800254a:	e022      	b.n	8002592 <UART_SetConfig+0x2fe>
 800254c:	2302      	movs	r3, #2
 800254e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002552:	e01e      	b.n	8002592 <UART_SetConfig+0x2fe>
 8002554:	2304      	movs	r3, #4
 8002556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800255a:	e01a      	b.n	8002592 <UART_SetConfig+0x2fe>
 800255c:	2308      	movs	r3, #8
 800255e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002562:	e016      	b.n	8002592 <UART_SetConfig+0x2fe>
 8002564:	2310      	movs	r3, #16
 8002566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800256a:	e012      	b.n	8002592 <UART_SetConfig+0x2fe>
 800256c:	cfff69f3 	.word	0xcfff69f3
 8002570:	40008000 	.word	0x40008000
 8002574:	40013800 	.word	0x40013800
 8002578:	40021000 	.word	0x40021000
 800257c:	40004400 	.word	0x40004400
 8002580:	40004800 	.word	0x40004800
 8002584:	40004c00 	.word	0x40004c00
 8002588:	40005000 	.word	0x40005000
 800258c:	2310      	movs	r3, #16
 800258e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4aae      	ldr	r2, [pc, #696]	; (8002850 <UART_SetConfig+0x5bc>)
 8002598:	4293      	cmp	r3, r2
 800259a:	f040 8097 	bne.w	80026cc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800259e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d823      	bhi.n	80025ee <UART_SetConfig+0x35a>
 80025a6:	a201      	add	r2, pc, #4	; (adr r2, 80025ac <UART_SetConfig+0x318>)
 80025a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ac:	080025d1 	.word	0x080025d1
 80025b0:	080025ef 	.word	0x080025ef
 80025b4:	080025d9 	.word	0x080025d9
 80025b8:	080025ef 	.word	0x080025ef
 80025bc:	080025df 	.word	0x080025df
 80025c0:	080025ef 	.word	0x080025ef
 80025c4:	080025ef 	.word	0x080025ef
 80025c8:	080025ef 	.word	0x080025ef
 80025cc:	080025e7 	.word	0x080025e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025d0:	f7ff fb50 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 80025d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80025d6:	e010      	b.n	80025fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025d8:	4b9e      	ldr	r3, [pc, #632]	; (8002854 <UART_SetConfig+0x5c0>)
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80025dc:	e00d      	b.n	80025fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025de:	f7ff fadb 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 80025e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80025e4:	e009      	b.n	80025fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80025ec:	e005      	b.n	80025fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80025f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 8130 	beq.w	8002862 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	4a94      	ldr	r2, [pc, #592]	; (8002858 <UART_SetConfig+0x5c4>)
 8002608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800260c:	461a      	mov	r2, r3
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	fbb3 f3f2 	udiv	r3, r3, r2
 8002614:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	429a      	cmp	r2, r3
 8002624:	d305      	bcc.n	8002632 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	429a      	cmp	r2, r3
 8002630:	d903      	bls.n	800263a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002638:	e113      	b.n	8002862 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	2200      	movs	r2, #0
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	60fa      	str	r2, [r7, #12]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	4a84      	ldr	r2, [pc, #528]	; (8002858 <UART_SetConfig+0x5c4>)
 8002648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800264c:	b29b      	uxth	r3, r3
 800264e:	2200      	movs	r2, #0
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002658:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800265c:	f7fd fddc 	bl	8000218 <__aeabi_uldivmod>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	020b      	lsls	r3, r1, #8
 8002672:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002676:	0202      	lsls	r2, r0, #8
 8002678:	6979      	ldr	r1, [r7, #20]
 800267a:	6849      	ldr	r1, [r1, #4]
 800267c:	0849      	lsrs	r1, r1, #1
 800267e:	2000      	movs	r0, #0
 8002680:	460c      	mov	r4, r1
 8002682:	4605      	mov	r5, r0
 8002684:	eb12 0804 	adds.w	r8, r2, r4
 8002688:	eb43 0905 	adc.w	r9, r3, r5
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	469a      	mov	sl, r3
 8002694:	4693      	mov	fp, r2
 8002696:	4652      	mov	r2, sl
 8002698:	465b      	mov	r3, fp
 800269a:	4640      	mov	r0, r8
 800269c:	4649      	mov	r1, r9
 800269e:	f7fd fdbb 	bl	8000218 <__aeabi_uldivmod>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4613      	mov	r3, r2
 80026a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026b0:	d308      	bcc.n	80026c4 <UART_SetConfig+0x430>
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026b8:	d204      	bcs.n	80026c4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6a3a      	ldr	r2, [r7, #32]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	e0ce      	b.n	8002862 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80026ca:	e0ca      	b.n	8002862 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026d4:	d166      	bne.n	80027a4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80026d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d827      	bhi.n	800272e <UART_SetConfig+0x49a>
 80026de:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <UART_SetConfig+0x450>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	08002709 	.word	0x08002709
 80026e8:	08002711 	.word	0x08002711
 80026ec:	08002719 	.word	0x08002719
 80026f0:	0800272f 	.word	0x0800272f
 80026f4:	0800271f 	.word	0x0800271f
 80026f8:	0800272f 	.word	0x0800272f
 80026fc:	0800272f 	.word	0x0800272f
 8002700:	0800272f 	.word	0x0800272f
 8002704:	08002727 	.word	0x08002727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002708:	f7ff fab4 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 800270c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800270e:	e014      	b.n	800273a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002710:	f7ff fac6 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 8002714:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002716:	e010      	b.n	800273a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002718:	4b4e      	ldr	r3, [pc, #312]	; (8002854 <UART_SetConfig+0x5c0>)
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800271c:	e00d      	b.n	800273a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800271e:	f7ff fa3b 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 8002722:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002724:	e009      	b.n	800273a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800272c:	e005      	b.n	800273a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002738:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 8090 	beq.w	8002862 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	4a44      	ldr	r2, [pc, #272]	; (8002858 <UART_SetConfig+0x5c4>)
 8002748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800274c:	461a      	mov	r2, r3
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	fbb3 f3f2 	udiv	r3, r3, r2
 8002754:	005a      	lsls	r2, r3, #1
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	441a      	add	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	2b0f      	cmp	r3, #15
 800276c:	d916      	bls.n	800279c <UART_SetConfig+0x508>
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002774:	d212      	bcs.n	800279c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	b29b      	uxth	r3, r3
 800277a:	f023 030f 	bic.w	r3, r3, #15
 800277e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	085b      	lsrs	r3, r3, #1
 8002784:	b29b      	uxth	r3, r3
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	b29a      	uxth	r2, r3
 800278c:	8bfb      	ldrh	r3, [r7, #30]
 800278e:	4313      	orrs	r3, r2
 8002790:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	8bfa      	ldrh	r2, [r7, #30]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	e062      	b.n	8002862 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80027a2:	e05e      	b.n	8002862 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d828      	bhi.n	80027fe <UART_SetConfig+0x56a>
 80027ac:	a201      	add	r2, pc, #4	; (adr r2, 80027b4 <UART_SetConfig+0x520>)
 80027ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b2:	bf00      	nop
 80027b4:	080027d9 	.word	0x080027d9
 80027b8:	080027e1 	.word	0x080027e1
 80027bc:	080027e9 	.word	0x080027e9
 80027c0:	080027ff 	.word	0x080027ff
 80027c4:	080027ef 	.word	0x080027ef
 80027c8:	080027ff 	.word	0x080027ff
 80027cc:	080027ff 	.word	0x080027ff
 80027d0:	080027ff 	.word	0x080027ff
 80027d4:	080027f7 	.word	0x080027f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027d8:	f7ff fa4c 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 80027dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80027de:	e014      	b.n	800280a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027e0:	f7ff fa5e 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 80027e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80027e6:	e010      	b.n	800280a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027e8:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <UART_SetConfig+0x5c0>)
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80027ec:	e00d      	b.n	800280a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027ee:	f7ff f9d3 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 80027f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80027f4:	e009      	b.n	800280a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80027fc:	e005      	b.n	800280a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002808:	bf00      	nop
    }

    if (pclk != 0U)
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	2b00      	cmp	r3, #0
 800280e:	d028      	beq.n	8002862 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	4a10      	ldr	r2, [pc, #64]	; (8002858 <UART_SetConfig+0x5c4>)
 8002816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800281a:	461a      	mov	r2, r3
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	441a      	add	r2, r3
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002832:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	2b0f      	cmp	r3, #15
 8002838:	d910      	bls.n	800285c <UART_SetConfig+0x5c8>
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002840:	d20c      	bcs.n	800285c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	b29a      	uxth	r2, r3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60da      	str	r2, [r3, #12]
 800284c:	e009      	b.n	8002862 <UART_SetConfig+0x5ce>
 800284e:	bf00      	nop
 8002850:	40008000 	.word	0x40008000
 8002854:	00f42400 	.word	0x00f42400
 8002858:	08002f58 	.word	0x08002f58
      }
      else
      {
        ret = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2201      	movs	r2, #1
 8002866:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2201      	movs	r2, #1
 800286e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2200      	movs	r2, #0
 8002876:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2200      	movs	r2, #0
 800287c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800287e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002882:	4618      	mov	r0, r3
 8002884:	3730      	adds	r7, #48	; 0x30
 8002886:	46bd      	mov	sp, r7
 8002888:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800288c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01a      	beq.n	80029a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800298a:	d10a      	bne.n	80029a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	605a      	str	r2, [r3, #4]
  }
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b098      	sub	sp, #96	; 0x60
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029e0:	f7fe f8dc 	bl	8000b9c <HAL_GetTick>
 80029e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d12f      	bne.n	8002a54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fc:	2200      	movs	r2, #0
 80029fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f88e 	bl	8002b24 <UART_WaitOnFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d022      	beq.n	8002a54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a16:	e853 3f00 	ldrex	r3, [r3]
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a22:	653b      	str	r3, [r7, #80]	; 0x50
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a2e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a34:	e841 2300 	strex	r3, r2, [r1]
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e6      	bne.n	8002a0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e063      	b.n	8002b1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d149      	bne.n	8002af6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f857 	bl	8002b24 <UART_WaitOnFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d03c      	beq.n	8002af6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	e853 3f00 	ldrex	r3, [r3]
 8002a88:	623b      	str	r3, [r7, #32]
   return(result);
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a9c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa2:	e841 2300 	strex	r3, r2, [r1]
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1e6      	bne.n	8002a7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3308      	adds	r3, #8
 8002ab4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	e853 3f00 	ldrex	r3, [r3]
 8002abc:	60fb      	str	r3, [r7, #12]
   return(result);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3308      	adds	r3, #8
 8002acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ace:	61fa      	str	r2, [r7, #28]
 8002ad0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad2:	69b9      	ldr	r1, [r7, #24]
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	e841 2300 	strex	r3, r2, [r1]
 8002ada:	617b      	str	r3, [r7, #20]
   return(result);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e5      	bne.n	8002aae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e012      	b.n	8002b1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3758      	adds	r7, #88	; 0x58
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b34:	e04f      	b.n	8002bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d04b      	beq.n	8002bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3e:	f7fe f82d 	bl	8000b9c <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d302      	bcc.n	8002b54 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e04e      	b.n	8002bf6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d037      	beq.n	8002bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b80      	cmp	r3, #128	; 0x80
 8002b6a:	d034      	beq.n	8002bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d031      	beq.n	8002bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d110      	bne.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2208      	movs	r2, #8
 8002b86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f838 	bl	8002bfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2208      	movs	r2, #8
 8002b92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e029      	b.n	8002bf6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bb0:	d111      	bne.n	8002bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f81e 	bl	8002bfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e00f      	b.n	8002bf6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4013      	ands	r3, r2
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	bf0c      	ite	eq
 8002be6:	2301      	moveq	r3, #1
 8002be8:	2300      	movne	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d0a0      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b095      	sub	sp, #84	; 0x54
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0e:	e853 3f00 	ldrex	r3, [r3]
 8002c12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c24:	643b      	str	r3, [r7, #64]	; 0x40
 8002c26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c2c:	e841 2300 	strex	r3, r2, [r1]
 8002c30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e6      	bne.n	8002c06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	e853 3f00 	ldrex	r3, [r3]
 8002c46:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3308      	adds	r3, #8
 8002c5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c64:	e841 2300 	strex	r3, r2, [r1]
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e3      	bne.n	8002c38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d118      	bne.n	8002caa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	e853 3f00 	ldrex	r3, [r3]
 8002c84:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f023 0310 	bic.w	r3, r3, #16
 8002c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9a:	6979      	ldr	r1, [r7, #20]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	e841 2300 	strex	r3, r2, [r1]
 8002ca2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1e6      	bne.n	8002c78 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002cbe:	bf00      	nop
 8002cc0:	3754      	adds	r7, #84	; 0x54
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b085      	sub	sp, #20
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_UARTEx_DisableFifoMode+0x16>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e027      	b.n	8002d30 <HAL_UARTEx_DisableFifoMode+0x66>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2224      	movs	r2, #36	; 0x24
 8002cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002d0e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e02d      	b.n	8002db0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f84f 	bl	8002e34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e02d      	b.n	8002e2c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2224      	movs	r2, #36	; 0x24
 8002ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f811 	bl	8002e34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d108      	bne.n	8002e56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002e54:	e031      	b.n	8002eba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002e56:	2308      	movs	r3, #8
 8002e58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	0e5b      	lsrs	r3, r3, #25
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	0f5b      	lsrs	r3, r3, #29
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e7e:	7bbb      	ldrb	r3, [r7, #14]
 8002e80:	7b3a      	ldrb	r2, [r7, #12]
 8002e82:	4911      	ldr	r1, [pc, #68]	; (8002ec8 <UARTEx_SetNbDataToProcess+0x94>)
 8002e84:	5c8a      	ldrb	r2, [r1, r2]
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002e8a:	7b3a      	ldrb	r2, [r7, #12]
 8002e8c:	490f      	ldr	r1, [pc, #60]	; (8002ecc <UARTEx_SetNbDataToProcess+0x98>)
 8002e8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e90:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	7b7a      	ldrb	r2, [r7, #13]
 8002ea0:	4909      	ldr	r1, [pc, #36]	; (8002ec8 <UARTEx_SetNbDataToProcess+0x94>)
 8002ea2:	5c8a      	ldrb	r2, [r1, r2]
 8002ea4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002ea8:	7b7a      	ldrb	r2, [r7, #13]
 8002eaa:	4908      	ldr	r1, [pc, #32]	; (8002ecc <UARTEx_SetNbDataToProcess+0x98>)
 8002eac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002eae:	fb93 f3f2 	sdiv	r3, r3, r2
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	08002f70 	.word	0x08002f70
 8002ecc:	08002f78 	.word	0x08002f78

08002ed0 <memset>:
 8002ed0:	4402      	add	r2, r0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d100      	bne.n	8002eda <memset+0xa>
 8002ed8:	4770      	bx	lr
 8002eda:	f803 1b01 	strb.w	r1, [r3], #1
 8002ede:	e7f9      	b.n	8002ed4 <memset+0x4>

08002ee0 <__libc_init_array>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	4d0d      	ldr	r5, [pc, #52]	; (8002f18 <__libc_init_array+0x38>)
 8002ee4:	4c0d      	ldr	r4, [pc, #52]	; (8002f1c <__libc_init_array+0x3c>)
 8002ee6:	1b64      	subs	r4, r4, r5
 8002ee8:	10a4      	asrs	r4, r4, #2
 8002eea:	2600      	movs	r6, #0
 8002eec:	42a6      	cmp	r6, r4
 8002eee:	d109      	bne.n	8002f04 <__libc_init_array+0x24>
 8002ef0:	4d0b      	ldr	r5, [pc, #44]	; (8002f20 <__libc_init_array+0x40>)
 8002ef2:	4c0c      	ldr	r4, [pc, #48]	; (8002f24 <__libc_init_array+0x44>)
 8002ef4:	f000 f818 	bl	8002f28 <_init>
 8002ef8:	1b64      	subs	r4, r4, r5
 8002efa:	10a4      	asrs	r4, r4, #2
 8002efc:	2600      	movs	r6, #0
 8002efe:	42a6      	cmp	r6, r4
 8002f00:	d105      	bne.n	8002f0e <__libc_init_array+0x2e>
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f08:	4798      	blx	r3
 8002f0a:	3601      	adds	r6, #1
 8002f0c:	e7ee      	b.n	8002eec <__libc_init_array+0xc>
 8002f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f12:	4798      	blx	r3
 8002f14:	3601      	adds	r6, #1
 8002f16:	e7f2      	b.n	8002efe <__libc_init_array+0x1e>
 8002f18:	08002f88 	.word	0x08002f88
 8002f1c:	08002f88 	.word	0x08002f88
 8002f20:	08002f88 	.word	0x08002f88
 8002f24:	08002f8c 	.word	0x08002f8c

08002f28 <_init>:
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2a:	bf00      	nop
 8002f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2e:	bc08      	pop	{r3}
 8002f30:	469e      	mov	lr, r3
 8002f32:	4770      	bx	lr

08002f34 <_fini>:
 8002f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f36:	bf00      	nop
 8002f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f3a:	bc08      	pop	{r3}
 8002f3c:	469e      	mov	lr, r3
 8002f3e:	4770      	bx	lr
