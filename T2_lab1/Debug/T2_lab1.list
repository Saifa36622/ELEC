
T2_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054b4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056cc  080056cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080056cc  080056cc  000156cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056d4  080056d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056d4  080056d4  000156d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056d8  080056d8  000156d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080056dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  2000000c  080056e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  080056e8  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016912  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029a6  00000000  00000000  00036991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  00039338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe5  00000000  00000000  0003a790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003b775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017475  00000000  00000000  000631af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e989  00000000  00000000  0007a624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005880  00000000  00000000  00188fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0018e830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005674 	.word	0x08005674

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005674 	.word	0x08005674

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
int main(void)
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fbe9 	bl	8000cf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f81e 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f9c2 	bl	80008b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800052c:	f000 f996 	bl	800085c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000530:	f000 f8fc 	bl	800072c <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000534:	f000 f944 	bl	80007c0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000538:	f000 f860 	bl	80005fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800053c:	4806      	ldr	r0, [pc, #24]	; (8000558 <main+0x44>)
 800053e:	f003 fe8b 	bl	8004258 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000542:	217f      	movs	r1, #127	; 0x7f
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <main+0x48>)
 8000546:	f001 ff55 	bl	80023f4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
 800054a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800054e:	4904      	ldr	r1, [pc, #16]	; (8000560 <main+0x4c>)
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <main+0x48>)
 8000552:	f001 f841 	bl	80015d8 <HAL_ADC_Start_DMA>
  void micro()
   {
  	  real_time = __HAL_TIM_GET_COUNTER(&htim2) + (lower * 4294967295);

   }
  while (1)
 8000556:	e7fe      	b.n	8000556 <main+0x42>
 8000558:	20000188 	.word	0x20000188
 800055c:	20000028 	.word	0x20000028
 8000560:	200001d4 	.word	0x200001d4

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0318 	add.w	r3, r7, #24
 800056e:	2238      	movs	r2, #56	; 0x38
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f005 f852 	bl	800561c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000586:	2000      	movs	r0, #0
 8000588:	f002 fdde 	bl	8003148 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	2340      	movs	r3, #64	; 0x40
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059e:	2302      	movs	r3, #2
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005a2:	2304      	movs	r3, #4
 80005a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005a6:	2355      	movs	r3, #85	; 0x55
 80005a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0318 	add.w	r3, r7, #24
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fe78 	bl	80032b0 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005c6:	f000 f9e1 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2303      	movs	r3, #3
 80005d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2104      	movs	r1, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 f976 	bl	80038d4 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ee:	f000 f9cd 	bl	800098c <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3750      	adds	r7, #80	; 0x50
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08c      	sub	sp, #48	; 0x30
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2220      	movs	r2, #32
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f005 f801 	bl	800561c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800061a:	4b40      	ldr	r3, [pc, #256]	; (800071c <MX_ADC1_Init+0x120>)
 800061c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000620:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000622:	4b3e      	ldr	r3, [pc, #248]	; (800071c <MX_ADC1_Init+0x120>)
 8000624:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000628:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800062a:	4b3c      	ldr	r3, [pc, #240]	; (800071c <MX_ADC1_Init+0x120>)
 800062c:	2208      	movs	r2, #8
 800062e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000630:	4b3a      	ldr	r3, [pc, #232]	; (800071c <MX_ADC1_Init+0x120>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000636:	4b39      	ldr	r3, [pc, #228]	; (800071c <MX_ADC1_Init+0x120>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800063c:	4b37      	ldr	r3, [pc, #220]	; (800071c <MX_ADC1_Init+0x120>)
 800063e:	2201      	movs	r2, #1
 8000640:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	4b36      	ldr	r3, [pc, #216]	; (800071c <MX_ADC1_Init+0x120>)
 8000644:	2204      	movs	r2, #4
 8000646:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000648:	4b34      	ldr	r3, [pc, #208]	; (800071c <MX_ADC1_Init+0x120>)
 800064a:	2200      	movs	r2, #0
 800064c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800064e:	4b33      	ldr	r3, [pc, #204]	; (800071c <MX_ADC1_Init+0x120>)
 8000650:	2201      	movs	r2, #1
 8000652:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000654:	4b31      	ldr	r3, [pc, #196]	; (800071c <MX_ADC1_Init+0x120>)
 8000656:	2203      	movs	r2, #3
 8000658:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065a:	4b30      	ldr	r3, [pc, #192]	; (800071c <MX_ADC1_Init+0x120>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000662:	4b2e      	ldr	r3, [pc, #184]	; (800071c <MX_ADC1_Init+0x120>)
 8000664:	2200      	movs	r2, #0
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000668:	4b2c      	ldr	r3, [pc, #176]	; (800071c <MX_ADC1_Init+0x120>)
 800066a:	2200      	movs	r2, #0
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <MX_ADC1_Init+0x120>)
 8000670:	2201      	movs	r2, #1
 8000672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000676:	4b29      	ldr	r3, [pc, #164]	; (800071c <MX_ADC1_Init+0x120>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <MX_ADC1_Init+0x120>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000684:	4825      	ldr	r0, [pc, #148]	; (800071c <MX_ADC1_Init+0x120>)
 8000686:	f000 fdeb 	bl	8001260 <HAL_ADC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000690:	f000 f97c 	bl	800098c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069c:	4619      	mov	r1, r3
 800069e:	481f      	ldr	r0, [pc, #124]	; (800071c <MX_ADC1_Init+0x120>)
 80006a0:	f001 ff0a 	bl	80024b8 <HAL_ADCEx_MultiModeConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006aa:	f000 f96f 	bl	800098c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_ADC1_Init+0x124>)
 80006b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b2:	2306      	movs	r3, #6
 80006b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ba:	237f      	movs	r3, #127	; 0x7f
 80006bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006be:	2304      	movs	r3, #4
 80006c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4619      	mov	r1, r3
 80006ca:	4814      	ldr	r0, [pc, #80]	; (800071c <MX_ADC1_Init+0x120>)
 80006cc:	f001 f876 	bl	80017bc <HAL_ADC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006d6:	f000 f959 	bl	800098c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_ADC1_Init+0x128>)
 80006dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006de:	230c      	movs	r3, #12
 80006e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_ADC1_Init+0x120>)
 80006e8:	f001 f868 	bl	80017bc <HAL_ADC_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006f2:	f000 f94b 	bl	800098c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_ADC1_Init+0x12c>)
 80006f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006fa:	2312      	movs	r3, #18
 80006fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4619      	mov	r1, r3
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <MX_ADC1_Init+0x120>)
 8000704:	f001 f85a 	bl	80017bc <HAL_ADC_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800070e:	f000 f93d 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	3730      	adds	r7, #48	; 0x30
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000028 	.word	0x20000028
 8000720:	04300002 	.word	0x04300002
 8000724:	08600004 	.word	0x08600004
 8000728:	14f00020 	.word	0x14f00020

0800072c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000730:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000732:	4a22      	ldr	r2, [pc, #136]	; (80007bc <MX_LPUART1_UART_Init+0x90>)
 8000734:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000736:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000764:	2200      	movs	r2, #0
 8000766:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 800076a:	2200      	movs	r2, #0
 800076c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800076e:	4812      	ldr	r0, [pc, #72]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000770:	f004 f8e6 	bl	8004940 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 f907 	bl	800098c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077e:	2100      	movs	r1, #0
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000782:	f004 fe81 	bl	8005488 <HAL_UARTEx_SetTxFifoThreshold>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800078c:	f000 f8fe 	bl	800098c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000790:	2100      	movs	r1, #0
 8000792:	4809      	ldr	r0, [pc, #36]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 8000794:	f004 feb6 	bl	8005504 <HAL_UARTEx_SetRxFifoThreshold>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800079e:	f000 f8f5 	bl	800098c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_LPUART1_UART_Init+0x8c>)
 80007a4:	f004 fe37 	bl	8005416 <HAL_UARTEx_DisableFifoMode>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007ae:	f000 f8ed 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000f4 	.word	0x200000f4
 80007bc:	40008000 	.word	0x40008000

080007c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_TIM2_Init+0x98>)
 80007e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_TIM2_Init+0x98>)
 80007e8:	22a9      	movs	r2, #169	; 0xa9
 80007ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_TIM2_Init+0x98>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <MX_TIM2_Init+0x98>)
 80007f4:	f04f 32ff 	mov.w	r2, #4294967295
 80007f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_TIM2_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_TIM2_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000806:	4814      	ldr	r0, [pc, #80]	; (8000858 <MX_TIM2_Init+0x98>)
 8000808:	f003 fcce 	bl	80041a8 <HAL_TIM_Base_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000812:	f000 f8bb 	bl	800098c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4619      	mov	r1, r3
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <MX_TIM2_Init+0x98>)
 8000824:	f003 fd90 	bl	8004348 <HAL_TIM_ConfigClockSource>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800082e:	f000 f8ad 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	; (8000858 <MX_TIM2_Init+0x98>)
 8000840:	f003 ffe8 	bl	8004814 <HAL_TIMEx_MasterConfigSynchronization>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800084a:	f000 f89f 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	3720      	adds	r7, #32
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000188 	.word	0x20000188

0800085c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_DMA_Init+0x50>)
 8000864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000866:	4a11      	ldr	r2, [pc, #68]	; (80008ac <MX_DMA_Init+0x50>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6493      	str	r3, [r2, #72]	; 0x48
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_DMA_Init+0x50>)
 8000870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_DMA_Init+0x50>)
 800087c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <MX_DMA_Init+0x50>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6493      	str	r3, [r2, #72]	; 0x48
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_DMA_Init+0x50>)
 8000888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	200b      	movs	r0, #11
 8000898:	f001 fff1 	bl	800287e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800089c:	200b      	movs	r0, #11
 800089e:	f002 f808 	bl	80028b2 <HAL_NVIC_EnableIRQ>

}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b2f      	ldr	r3, [pc, #188]	; (8000984 <MX_GPIO_Init+0xd4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a2e      	ldr	r2, [pc, #184]	; (8000984 <MX_GPIO_Init+0xd4>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <MX_GPIO_Init+0xd4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008de:	4b29      	ldr	r3, [pc, #164]	; (8000984 <MX_GPIO_Init+0xd4>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a28      	ldr	r2, [pc, #160]	; (8000984 <MX_GPIO_Init+0xd4>)
 80008e4:	f043 0320 	orr.w	r3, r3, #32
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b26      	ldr	r3, [pc, #152]	; (8000984 <MX_GPIO_Init+0xd4>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0320 	and.w	r3, r3, #32
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b23      	ldr	r3, [pc, #140]	; (8000984 <MX_GPIO_Init+0xd4>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a22      	ldr	r2, [pc, #136]	; (8000984 <MX_GPIO_Init+0xd4>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b20      	ldr	r3, [pc, #128]	; (8000984 <MX_GPIO_Init+0xd4>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_GPIO_Init+0xd4>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <MX_GPIO_Init+0xd4>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_GPIO_Init+0xd4>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2120      	movs	r1, #32
 800092a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092e:	f002 fbcf 	bl	80030d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000938:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	480f      	ldr	r0, [pc, #60]	; (8000988 <MX_GPIO_Init+0xd8>)
 800094a:	f002 fa3f 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800094e:	2320      	movs	r3, #32
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000968:	f002 fa30 	bl	8002dcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	2028      	movs	r0, #40	; 0x28
 8000972:	f001 ff84 	bl	800287e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000976:	2028      	movs	r0, #40	; 0x28
 8000978:	f001 ff9b 	bl	80028b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40021000 	.word	0x40021000
 8000988:	48000800 	.word	0x48000800

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_MspInit+0x44>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a2:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <HAL_MspInit+0x44>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6613      	str	r3, [r2, #96]	; 0x60
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_MspInit+0x44>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x44>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x44>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6593      	str	r3, [r2, #88]	; 0x58
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x44>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009ce:	f002 fc5f 	bl	8003290 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0a0      	sub	sp, #128	; 0x80
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f8:	f107 0318 	add.w	r3, r7, #24
 80009fc:	2254      	movs	r2, #84	; 0x54
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f004 fe0b 	bl	800561c <memset>
  if(hadc->Instance==ADC1)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a0e:	d178      	bne.n	8000b02 <HAL_ADC_MspInit+0x122>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a14:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a16:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a1c:	f107 0318 	add.w	r3, r7, #24
 8000a20:	4618      	mov	r0, r3
 8000a22:	f003 f973 	bl	8003d0c <HAL_RCCEx_PeriphCLKConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a2c:	f7ff ffae 	bl	800098c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a30:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <HAL_ADC_MspInit+0x12c>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a34:	4a35      	ldr	r2, [pc, #212]	; (8000b0c <HAL_ADC_MspInit+0x12c>)
 8000a36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3c:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <HAL_ADC_MspInit+0x12c>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <HAL_ADC_MspInit+0x12c>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4c:	4a2f      	ldr	r2, [pc, #188]	; (8000b0c <HAL_ADC_MspInit+0x12c>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a54:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <HAL_ADC_MspInit+0x12c>)
 8000a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <HAL_ADC_MspInit+0x12c>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a64:	4a29      	ldr	r2, [pc, #164]	; (8000b0c <HAL_ADC_MspInit+0x12c>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6c:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <HAL_ADC_MspInit+0x12c>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8e:	f002 f99d 	bl	8002dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481a      	ldr	r0, [pc, #104]	; (8000b10 <HAL_ADC_MspInit+0x130>)
 8000aa8:	f002 f990 	bl	8002dcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <HAL_ADC_MspInit+0x134>)
 8000aae:	4a1a      	ldr	r2, [pc, #104]	; (8000b18 <HAL_ADC_MspInit+0x138>)
 8000ab0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <HAL_ADC_MspInit+0x134>)
 8000ab4:	2205      	movs	r2, #5
 8000ab6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_ADC_MspInit+0x134>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_ADC_MspInit+0x134>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <HAL_ADC_MspInit+0x134>)
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_ADC_MspInit+0x134>)
 8000acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ad0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_ADC_MspInit+0x134>)
 8000ad4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ad8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_ADC_MspInit+0x134>)
 8000adc:	2220      	movs	r2, #32
 8000ade:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_ADC_MspInit+0x134>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ae6:	480b      	ldr	r0, [pc, #44]	; (8000b14 <HAL_ADC_MspInit+0x134>)
 8000ae8:	f001 fefe 	bl	80028e8 <HAL_DMA_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 8000af2:	f7ff ff4b 	bl	800098c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_ADC_MspInit+0x134>)
 8000afa:	655a      	str	r2, [r3, #84]	; 0x54
 8000afc:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <HAL_ADC_MspInit+0x134>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	3780      	adds	r7, #128	; 0x80
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	48000400 	.word	0x48000400
 8000b14:	20000094 	.word	0x20000094
 8000b18:	40020008 	.word	0x40020008

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b09e      	sub	sp, #120	; 0x78
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	2254      	movs	r2, #84	; 0x54
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f004 fd6d 	bl	800561c <memset>
  if(huart->Instance==LPUART1)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a1f      	ldr	r2, [pc, #124]	; (8000bc4 <HAL_UART_MspInit+0xa8>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d136      	bne.n	8000bba <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b4c:	2320      	movs	r3, #32
 8000b4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 f8d7 	bl	8003d0c <HAL_RCCEx_PeriphCLKConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b64:	f7ff ff12 	bl	800098c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_UART_MspInit+0xac>)
 8000b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b6c:	4a16      	ldr	r2, [pc, #88]	; (8000bc8 <HAL_UART_MspInit+0xac>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <HAL_UART_MspInit+0xac>)
 8000b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_UART_MspInit+0xac>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b84:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_UART_MspInit+0xac>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_UART_MspInit+0xac>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b98:	230c      	movs	r3, #12
 8000b9a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ba8:	230c      	movs	r3, #12
 8000baa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f002 f909 	bl	8002dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3778      	adds	r7, #120	; 0x78
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40008000 	.word	0x40008000
 8000bc8:	40021000 	.word	0x40021000

08000bcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bdc:	d10b      	bne.n	8000bf6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_TIM_Base_MspInit+0x38>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_TIM_Base_MspInit+0x38>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_TIM_Base_MspInit+0x38>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c54:	f000 f8a2 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <DMA1_Channel1_IRQHandler+0x10>)
 8000c62:	f001 ff64 	bl	8002b2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000094 	.word	0x20000094

08000c70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c78:	f002 fa42 	bl	8003100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ca6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca8:	f7ff ffea 	bl	8000c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cae:	490d      	ldr	r1, [pc, #52]	; (8000ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <LoopForever+0xe>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc4:	4c0a      	ldr	r4, [pc, #40]	; (8000cf0 <LoopForever+0x16>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f004 fcab 	bl	800562c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cd6:	f7ff fc1d 	bl	8000514 <main>

08000cda <LoopForever>:

LoopForever:
    b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
  ldr   r0, =_estack
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ce8:	080056dc 	.word	0x080056dc
  ldr r2, =_sbss
 8000cec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cf0:	20000430 	.word	0x20000430

08000cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_2_IRQHandler>

08000cf6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d00:	2003      	movs	r0, #3
 8000d02:	f001 fdb1 	bl	8002868 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d06:	2000      	movs	r0, #0
 8000d08:	f000 f80e 	bl	8000d28 <HAL_InitTick>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	71fb      	strb	r3, [r7, #7]
 8000d16:	e001      	b.n	8000d1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d18:	f7ff fe3e 	bl	8000998 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d1c:	79fb      	ldrb	r3, [r7, #7]

}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_InitTick+0x68>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d022      	beq.n	8000d82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <HAL_InitTick+0x6c>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <HAL_InitTick+0x68>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fdbc 	bl	80028ce <HAL_SYSTICK_Config>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d10f      	bne.n	8000d7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b0f      	cmp	r3, #15
 8000d60:	d809      	bhi.n	8000d76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d62:	2200      	movs	r2, #0
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6a:	f001 fd88 	bl	800287e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_InitTick+0x70>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	e007      	b.n	8000d86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	73fb      	strb	r3, [r7, #15]
 8000d7a:	e004      	b.n	8000d86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e001      	b.n	8000d86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_IncTick+0x1c>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_IncTick+0x20>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a03      	ldr	r2, [pc, #12]	; (8000db8 <HAL_IncTick+0x1c>)
 8000dac:	6013      	str	r3, [r2, #0]
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	2000042c 	.word	0x2000042c
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000042c 	.word	0x2000042c

08000dd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	431a      	orrs	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	609a      	str	r2, [r3, #8]
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	431a      	orrs	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	609a      	str	r2, [r3, #8]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	3360      	adds	r3, #96	; 0x60
 8000e52:	461a      	mov	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <LL_ADC_SetOffset+0x44>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e78:	bf00      	nop
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	03fff000 	.word	0x03fff000

08000e88 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3360      	adds	r3, #96	; 0x60
 8000e96:	461a      	mov	r2, r3
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b087      	sub	sp, #28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	3360      	adds	r3, #96	; 0x60
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ede:	bf00      	nop
 8000ee0:	371c      	adds	r7, #28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b087      	sub	sp, #28
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	60f8      	str	r0, [r7, #12]
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	3360      	adds	r3, #96	; 0x60
 8000efa:	461a      	mov	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000f14:	bf00      	nop
 8000f16:	371c      	adds	r7, #28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b087      	sub	sp, #28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3360      	adds	r3, #96	; 0x60
 8000f30:	461a      	mov	r2, r3
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	431a      	orrs	r2, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000f4a:	bf00      	nop
 8000f4c:	371c      	adds	r7, #28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	615a      	str	r2, [r3, #20]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f90:	2301      	movs	r3, #1
 8000f92:	e000      	b.n	8000f96 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b087      	sub	sp, #28
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3330      	adds	r3, #48	; 0x30
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	0a1b      	lsrs	r3, r3, #8
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	4413      	add	r3, r2
 8000fc0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	f003 031f 	and.w	r3, r3, #31
 8000fcc:	211f      	movs	r1, #31
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	0e9b      	lsrs	r3, r3, #26
 8000fda:	f003 011f 	and.w	r1, r3, #31
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	f003 031f 	and.w	r3, r3, #31
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fee:	bf00      	nop
 8000ff0:	371c      	adds	r7, #28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b087      	sub	sp, #28
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3314      	adds	r3, #20
 800100a:	461a      	mov	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	0e5b      	lsrs	r3, r3, #25
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	4413      	add	r3, r2
 8001018:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	0d1b      	lsrs	r3, r3, #20
 8001022:	f003 031f 	and.w	r3, r3, #31
 8001026:	2107      	movs	r1, #7
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	401a      	ands	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	0d1b      	lsrs	r3, r3, #20
 8001034:	f003 031f 	and.w	r3, r3, #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	431a      	orrs	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001044:	bf00      	nop
 8001046:	371c      	adds	r7, #28
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001068:	43db      	mvns	r3, r3
 800106a:	401a      	ands	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0318 	and.w	r3, r3, #24
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001074:	40d9      	lsrs	r1, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	400b      	ands	r3, r1
 800107a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800107e:	431a      	orrs	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	0007ffff 	.word	0x0007ffff

08001098 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 031f 	and.w	r3, r3, #31
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80010c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6093      	str	r3, [r2, #8]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010ec:	d101      	bne.n	80010f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001110:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001114:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001138:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800113c:	d101      	bne.n	8001142 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001160:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001164:	f043 0201 	orr.w	r2, r3, #1
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001188:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800118c:	f043 0202 	orr.w	r2, r3, #2
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d101      	bne.n	80011b8 <LL_ADC_IsEnabled+0x18>
 80011b4:	2301      	movs	r3, #1
 80011b6:	e000      	b.n	80011ba <LL_ADC_IsEnabled+0x1a>
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d101      	bne.n	80011de <LL_ADC_IsDisableOngoing+0x18>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <LL_ADC_IsDisableOngoing+0x1a>
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001200:	f043 0204 	orr.w	r2, r3, #4
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b04      	cmp	r3, #4
 8001226:	d101      	bne.n	800122c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	2b08      	cmp	r3, #8
 800124c:	d101      	bne.n	8001252 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e1a9      	b.n	80015ce <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001284:	2b00      	cmp	r3, #0
 8001286:	d109      	bne.n	800129c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff fba9 	bl	80009e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff19 	bl	80010d8 <LL_ADC_IsDeepPowerDownEnabled>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d004      	beq.n	80012b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff feff 	bl	80010b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff34 	bl	8001128 <LL_ADC_IsInternalRegulatorEnabled>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d115      	bne.n	80012f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff18 	bl	8001100 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012d0:	4b9c      	ldr	r3, [pc, #624]	; (8001544 <HAL_ADC_Init+0x2e4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	099b      	lsrs	r3, r3, #6
 80012d6:	4a9c      	ldr	r2, [pc, #624]	; (8001548 <HAL_ADC_Init+0x2e8>)
 80012d8:	fba2 2303 	umull	r2, r3, r2, r3
 80012dc:	099b      	lsrs	r3, r3, #6
 80012de:	3301      	adds	r3, #1
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012e4:	e002      	b.n	80012ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f9      	bne.n	80012e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff16 	bl	8001128 <LL_ADC_IsInternalRegulatorEnabled>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10d      	bne.n	800131e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001306:	f043 0210 	orr.w	r2, r3, #16
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	f043 0201 	orr.w	r2, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff76 	bl	8001214 <LL_ADC_REG_IsConversionOngoing>
 8001328:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	2b00      	cmp	r3, #0
 8001334:	f040 8142 	bne.w	80015bc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	2b00      	cmp	r3, #0
 800133c:	f040 813e 	bne.w	80015bc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001344:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001348:	f043 0202 	orr.w	r2, r3, #2
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff23 	bl	80011a0 <LL_ADC_IsEnabled>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d141      	bne.n	80013e4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001368:	d004      	beq.n	8001374 <HAL_ADC_Init+0x114>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a77      	ldr	r2, [pc, #476]	; (800154c <HAL_ADC_Init+0x2ec>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d10f      	bne.n	8001394 <HAL_ADC_Init+0x134>
 8001374:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001378:	f7ff ff12 	bl	80011a0 <LL_ADC_IsEnabled>
 800137c:	4604      	mov	r4, r0
 800137e:	4873      	ldr	r0, [pc, #460]	; (800154c <HAL_ADC_Init+0x2ec>)
 8001380:	f7ff ff0e 	bl	80011a0 <LL_ADC_IsEnabled>
 8001384:	4603      	mov	r3, r0
 8001386:	4323      	orrs	r3, r4
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf0c      	ite	eq
 800138c:	2301      	moveq	r3, #1
 800138e:	2300      	movne	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	e012      	b.n	80013ba <HAL_ADC_Init+0x15a>
 8001394:	486e      	ldr	r0, [pc, #440]	; (8001550 <HAL_ADC_Init+0x2f0>)
 8001396:	f7ff ff03 	bl	80011a0 <LL_ADC_IsEnabled>
 800139a:	4604      	mov	r4, r0
 800139c:	486d      	ldr	r0, [pc, #436]	; (8001554 <HAL_ADC_Init+0x2f4>)
 800139e:	f7ff feff 	bl	80011a0 <LL_ADC_IsEnabled>
 80013a2:	4603      	mov	r3, r0
 80013a4:	431c      	orrs	r4, r3
 80013a6:	486c      	ldr	r0, [pc, #432]	; (8001558 <HAL_ADC_Init+0x2f8>)
 80013a8:	f7ff fefa 	bl	80011a0 <LL_ADC_IsEnabled>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4323      	orrs	r3, r4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf0c      	ite	eq
 80013b4:	2301      	moveq	r3, #1
 80013b6:	2300      	movne	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d012      	beq.n	80013e4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013c6:	d004      	beq.n	80013d2 <HAL_ADC_Init+0x172>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a5f      	ldr	r2, [pc, #380]	; (800154c <HAL_ADC_Init+0x2ec>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_ADC_Init+0x176>
 80013d2:	4a62      	ldr	r2, [pc, #392]	; (800155c <HAL_ADC_Init+0x2fc>)
 80013d4:	e000      	b.n	80013d8 <HAL_ADC_Init+0x178>
 80013d6:	4a62      	ldr	r2, [pc, #392]	; (8001560 <HAL_ADC_Init+0x300>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	4619      	mov	r1, r3
 80013de:	4610      	mov	r0, r2
 80013e0:	f7ff fcfa 	bl	8000dd8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7f5b      	ldrb	r3, [r3, #29]
 80013e8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013ee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80013f4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80013fa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001402:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800140e:	2b01      	cmp	r3, #1
 8001410:	d106      	bne.n	8001420 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001416:	3b01      	subs	r3, #1
 8001418:	045b      	lsls	r3, r3, #17
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	2b00      	cmp	r3, #0
 8001426:	d009      	beq.n	800143c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68da      	ldr	r2, [r3, #12]
 8001442:	4b48      	ldr	r3, [pc, #288]	; (8001564 <HAL_ADC_Init+0x304>)
 8001444:	4013      	ands	r3, r2
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	69b9      	ldr	r1, [r7, #24]
 800144c:	430b      	orrs	r3, r1
 800144e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fee5 	bl	800123a <LL_ADC_INJ_IsConversionOngoing>
 8001470:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d17f      	bne.n	8001578 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d17c      	bne.n	8001578 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001482:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800148a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800149a:	f023 0302 	bic.w	r3, r3, #2
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	69b9      	ldr	r1, [r7, #24]
 80014a4:	430b      	orrs	r3, r1
 80014a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d017      	beq.n	80014e0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	691a      	ldr	r2, [r3, #16]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80014be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80014c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6911      	ldr	r1, [r2, #16]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	430b      	orrs	r3, r1
 80014da:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80014de:	e013      	b.n	8001508 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	691a      	ldr	r2, [r3, #16]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001500:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001504:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800150e:	2b01      	cmp	r3, #1
 8001510:	d12a      	bne.n	8001568 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800151c:	f023 0304 	bic.w	r3, r3, #4
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001528:	4311      	orrs	r1, r2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800152e:	4311      	orrs	r1, r2
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001534:	430a      	orrs	r2, r1
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 0201 	orr.w	r2, r2, #1
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	e019      	b.n	8001578 <HAL_ADC_Init+0x318>
 8001544:	20000000 	.word	0x20000000
 8001548:	053e2d63 	.word	0x053e2d63
 800154c:	50000100 	.word	0x50000100
 8001550:	50000400 	.word	0x50000400
 8001554:	50000500 	.word	0x50000500
 8001558:	50000600 	.word	0x50000600
 800155c:	50000300 	.word	0x50000300
 8001560:	50000700 	.word	0x50000700
 8001564:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0201 	bic.w	r2, r2, #1
 8001576:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d10c      	bne.n	800159a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f023 010f 	bic.w	r1, r3, #15
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	1e5a      	subs	r2, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	631a      	str	r2, [r3, #48]	; 0x30
 8001598:	e007      	b.n	80015aa <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 020f 	bic.w	r2, r2, #15
 80015a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ae:	f023 0303 	bic.w	r3, r3, #3
 80015b2:	f043 0201 	orr.w	r2, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80015ba:	e007      	b.n	80015cc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	f043 0210 	orr.w	r2, r3, #16
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd90      	pop	{r4, r7, pc}
 80015d6:	bf00      	nop

080015d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ec:	d004      	beq.n	80015f8 <HAL_ADC_Start_DMA+0x20>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a5a      	ldr	r2, [pc, #360]	; (800175c <HAL_ADC_Start_DMA+0x184>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d101      	bne.n	80015fc <HAL_ADC_Start_DMA+0x24>
 80015f8:	4b59      	ldr	r3, [pc, #356]	; (8001760 <HAL_ADC_Start_DMA+0x188>)
 80015fa:	e000      	b.n	80015fe <HAL_ADC_Start_DMA+0x26>
 80015fc:	4b59      	ldr	r3, [pc, #356]	; (8001764 <HAL_ADC_Start_DMA+0x18c>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fd4a 	bl	8001098 <LL_ADC_GetMultimode>
 8001604:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fe02 	bl	8001214 <LL_ADC_REG_IsConversionOngoing>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 809b 	bne.w	800174e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800161e:	2b01      	cmp	r3, #1
 8001620:	d101      	bne.n	8001626 <HAL_ADC_Start_DMA+0x4e>
 8001622:	2302      	movs	r3, #2
 8001624:	e096      	b.n	8001754 <HAL_ADC_Start_DMA+0x17c>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a4d      	ldr	r2, [pc, #308]	; (8001768 <HAL_ADC_Start_DMA+0x190>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d008      	beq.n	800164a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	2b05      	cmp	r3, #5
 8001642:	d002      	beq.n	800164a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	2b09      	cmp	r3, #9
 8001648:	d17a      	bne.n	8001740 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 fcf6 	bl	800203c <ADC_Enable>
 8001650:	4603      	mov	r3, r0
 8001652:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d16d      	bne.n	8001736 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a3a      	ldr	r2, [pc, #232]	; (800175c <HAL_ADC_Start_DMA+0x184>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d009      	beq.n	800168c <HAL_ADC_Start_DMA+0xb4>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a3b      	ldr	r2, [pc, #236]	; (800176c <HAL_ADC_Start_DMA+0x194>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d002      	beq.n	8001688 <HAL_ADC_Start_DMA+0xb0>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	e003      	b.n	8001690 <HAL_ADC_Start_DMA+0xb8>
 8001688:	4b39      	ldr	r3, [pc, #228]	; (8001770 <HAL_ADC_Start_DMA+0x198>)
 800168a:	e001      	b.n	8001690 <HAL_ADC_Start_DMA+0xb8>
 800168c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	4293      	cmp	r3, r2
 8001696:	d002      	beq.n	800169e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d105      	bne.n	80016aa <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ba:	f023 0206 	bic.w	r2, r3, #6
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	661a      	str	r2, [r3, #96]	; 0x60
 80016c2:	e002      	b.n	80016ca <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ce:	4a29      	ldr	r2, [pc, #164]	; (8001774 <HAL_ADC_Start_DMA+0x19c>)
 80016d0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d6:	4a28      	ldr	r2, [pc, #160]	; (8001778 <HAL_ADC_Start_DMA+0x1a0>)
 80016d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016de:	4a27      	ldr	r2, [pc, #156]	; (800177c <HAL_ADC_Start_DMA+0x1a4>)
 80016e0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	221c      	movs	r2, #28
 80016e8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 0210 	orr.w	r2, r2, #16
 8001700:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f042 0201 	orr.w	r2, r2, #1
 8001710:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3340      	adds	r3, #64	; 0x40
 800171c:	4619      	mov	r1, r3
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f001 f989 	bl	8002a38 <HAL_DMA_Start_IT>
 8001726:	4603      	mov	r3, r0
 8001728:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fd5c 	bl	80011ec <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001734:	e00d      	b.n	8001752 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800173e:	e008      	b.n	8001752 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800174c:	e001      	b.n	8001752 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800174e:	2302      	movs	r3, #2
 8001750:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001752:	7dfb      	ldrb	r3, [r7, #23]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	50000100 	.word	0x50000100
 8001760:	50000300 	.word	0x50000300
 8001764:	50000700 	.word	0x50000700
 8001768:	50000600 	.word	0x50000600
 800176c:	50000500 	.word	0x50000500
 8001770:	50000400 	.word	0x50000400
 8001774:	08002227 	.word	0x08002227
 8001778:	080022ff 	.word	0x080022ff
 800177c:	0800231b 	.word	0x0800231b

08001780 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0b6      	sub	sp, #216	; 0xd8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d102      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x24>
 80017da:	2302      	movs	r3, #2
 80017dc:	f000 bc13 	b.w	8002006 <HAL_ADC_ConfigChannel+0x84a>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fd11 	bl	8001214 <LL_ADC_REG_IsConversionOngoing>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f040 83f3 	bne.w	8001fe0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	6859      	ldr	r1, [r3, #4]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	f7ff fbcb 	bl	8000fa2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fcff 	bl	8001214 <LL_ADC_REG_IsConversionOngoing>
 8001816:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fd0b 	bl	800123a <LL_ADC_INJ_IsConversionOngoing>
 8001824:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001828:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800182c:	2b00      	cmp	r3, #0
 800182e:	f040 81d9 	bne.w	8001be4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001832:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001836:	2b00      	cmp	r3, #0
 8001838:	f040 81d4 	bne.w	8001be4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001844:	d10f      	bne.n	8001866 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2200      	movs	r2, #0
 8001850:	4619      	mov	r1, r3
 8001852:	f7ff fbd2 	bl	8000ffa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fb79 	bl	8000f56 <LL_ADC_SetSamplingTimeCommonConfig>
 8001864:	e00e      	b.n	8001884 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	6819      	ldr	r1, [r3, #0]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	461a      	mov	r2, r3
 8001874:	f7ff fbc1 	bl	8000ffa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fb69 	bl	8000f56 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	08db      	lsrs	r3, r3, #3
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d022      	beq.n	80018ec <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	6919      	ldr	r1, [r3, #16]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018b6:	f7ff fac3 	bl	8000e40 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	6919      	ldr	r1, [r3, #16]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	461a      	mov	r2, r3
 80018c8:	f7ff fb0f 	bl	8000eea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d102      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x126>
 80018dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e0:	e000      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x128>
 80018e2:	2300      	movs	r3, #0
 80018e4:	461a      	mov	r2, r3
 80018e6:	f7ff fb1b 	bl	8000f20 <LL_ADC_SetOffsetSaturation>
 80018ea:	e17b      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fac8 	bl	8000e88 <LL_ADC_GetOffsetChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10a      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x15c>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fabd 	bl	8000e88 <LL_ADC_GetOffsetChannel>
 800190e:	4603      	mov	r3, r0
 8001910:	0e9b      	lsrs	r3, r3, #26
 8001912:	f003 021f 	and.w	r2, r3, #31
 8001916:	e01e      	b.n	8001956 <HAL_ADC_ConfigChannel+0x19a>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fab2 	bl	8000e88 <LL_ADC_GetOffsetChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001936:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800193a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800193e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001946:	2320      	movs	r3, #32
 8001948:	e004      	b.n	8001954 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800194a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800194e:	fab3 f383 	clz	r3, r3
 8001952:	b2db      	uxtb	r3, r3
 8001954:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800195e:	2b00      	cmp	r3, #0
 8001960:	d105      	bne.n	800196e <HAL_ADC_ConfigChannel+0x1b2>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	0e9b      	lsrs	r3, r3, #26
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	e018      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x1e4>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001986:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800198a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001992:	2320      	movs	r3, #32
 8001994:	e004      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d106      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2200      	movs	r2, #0
 80019aa:	2100      	movs	r1, #0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fa81 	bl	8000eb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2101      	movs	r1, #1
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fa65 	bl	8000e88 <LL_ADC_GetOffsetChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10a      	bne.n	80019de <HAL_ADC_ConfigChannel+0x222>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2101      	movs	r1, #1
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fa5a 	bl	8000e88 <LL_ADC_GetOffsetChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	0e9b      	lsrs	r3, r3, #26
 80019d8:	f003 021f 	and.w	r2, r3, #31
 80019dc:	e01e      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x260>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2101      	movs	r1, #1
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fa4f 	bl	8000e88 <LL_ADC_GetOffsetChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80019fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001a0c:	2320      	movs	r3, #32
 8001a0e:	e004      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001a10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a14:	fab3 f383 	clz	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x278>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0e9b      	lsrs	r3, r3, #26
 8001a2e:	f003 031f 	and.w	r3, r3, #31
 8001a32:	e018      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x2aa>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001a58:	2320      	movs	r3, #32
 8001a5a:	e004      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a60:	fab3 f383 	clz	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d106      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2101      	movs	r1, #1
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fa1e 	bl	8000eb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fa02 	bl	8000e88 <LL_ADC_GetOffsetChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10a      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x2e8>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2102      	movs	r1, #2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff f9f7 	bl	8000e88 <LL_ADC_GetOffsetChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	0e9b      	lsrs	r3, r3, #26
 8001a9e:	f003 021f 	and.w	r2, r3, #31
 8001aa2:	e01e      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x326>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f9ec 	bl	8000e88 <LL_ADC_GetOffsetChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ac2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ac6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001aca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001ad2:	2320      	movs	r3, #32
 8001ad4:	e004      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001ad6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d105      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x33e>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	0e9b      	lsrs	r3, r3, #26
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	e016      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x36c>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001b1a:	2320      	movs	r3, #32
 8001b1c:	e004      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001b1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b22:	fab3 f383 	clz	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d106      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2200      	movs	r2, #0
 8001b32:	2102      	movs	r1, #2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff f9bd 	bl	8000eb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2103      	movs	r1, #3
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff f9a1 	bl	8000e88 <LL_ADC_GetOffsetChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10a      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x3aa>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2103      	movs	r1, #3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f996 	bl	8000e88 <LL_ADC_GetOffsetChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	0e9b      	lsrs	r3, r3, #26
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	e017      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x3da>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2103      	movs	r1, #3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff f98b 	bl	8000e88 <LL_ADC_GetOffsetChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b78:	fa93 f3a3 	rbit	r3, r3
 8001b7c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b80:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001b88:	2320      	movs	r3, #32
 8001b8a:	e003      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d105      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x3f2>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	0e9b      	lsrs	r3, r3, #26
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	e011      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x416>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bb6:	fa93 f3a3 	rbit	r3, r3
 8001bba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001bc6:	2320      	movs	r3, #32
 8001bc8:	e003      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bcc:	fab3 f383 	clz	r3, r3
 8001bd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d106      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2103      	movs	r1, #3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff f968 	bl	8000eb4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fad9 	bl	80011a0 <LL_ADC_IsEnabled>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f040 813d 	bne.w	8001e70 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6819      	ldr	r1, [r3, #0]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	461a      	mov	r2, r3
 8001c04:	f7ff fa24 	bl	8001050 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4aa2      	ldr	r2, [pc, #648]	; (8001e98 <HAL_ADC_ConfigChannel+0x6dc>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	f040 812e 	bne.w	8001e70 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10b      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x480>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	0e9b      	lsrs	r3, r3, #26
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	2b09      	cmp	r3, #9
 8001c32:	bf94      	ite	ls
 8001c34:	2301      	movls	r3, #1
 8001c36:	2300      	movhi	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	e019      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x4b4>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c4c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001c54:	2320      	movs	r3, #32
 8001c56:	e003      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001c58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	3301      	adds	r3, #1
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	2b09      	cmp	r3, #9
 8001c68:	bf94      	ite	ls
 8001c6a:	2301      	movls	r3, #1
 8001c6c:	2300      	movhi	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d079      	beq.n	8001d68 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d107      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x4d4>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	0e9b      	lsrs	r3, r3, #26
 8001c86:	3301      	adds	r3, #1
 8001c88:	069b      	lsls	r3, r3, #26
 8001c8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c8e:	e015      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x500>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ca0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001ca8:	2320      	movs	r3, #32
 8001caa:	e003      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	069b      	lsls	r3, r3, #26
 8001cb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d109      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x520>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	0e9b      	lsrs	r3, r3, #26
 8001cce:	3301      	adds	r3, #1
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	e017      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x550>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	e003      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	3301      	adds	r3, #1
 8001d02:	f003 031f 	and.w	r3, r3, #31
 8001d06:	2101      	movs	r1, #1
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	ea42 0103 	orr.w	r1, r2, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10a      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x576>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0e9b      	lsrs	r3, r3, #26
 8001d22:	3301      	adds	r3, #1
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	051b      	lsls	r3, r3, #20
 8001d30:	e018      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x5a8>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	e003      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d64:	430b      	orrs	r3, r1
 8001d66:	e07e      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d107      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x5c8>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0e9b      	lsrs	r3, r3, #26
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	069b      	lsls	r3, r3, #26
 8001d7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d82:	e015      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x5f4>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d94:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001d9c:	2320      	movs	r3, #32
 8001d9e:	e003      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	3301      	adds	r3, #1
 8001daa:	069b      	lsls	r3, r3, #26
 8001dac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d109      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x614>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0e9b      	lsrs	r3, r3, #26
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	2101      	movs	r1, #1
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	e017      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x644>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	61fb      	str	r3, [r7, #28]
  return result;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001de8:	2320      	movs	r3, #32
 8001dea:	e003      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	3301      	adds	r3, #1
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	ea42 0103 	orr.w	r1, r2, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10d      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x670>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	0e9b      	lsrs	r3, r3, #26
 8001e16:	3301      	adds	r3, #1
 8001e18:	f003 021f 	and.w	r2, r3, #31
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	3b1e      	subs	r3, #30
 8001e24:	051b      	lsls	r3, r3, #20
 8001e26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	e01b      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x6a8>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	613b      	str	r3, [r7, #16]
  return result;
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001e44:	2320      	movs	r3, #32
 8001e46:	e003      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	3301      	adds	r3, #1
 8001e52:	f003 021f 	and.w	r2, r3, #31
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3b1e      	subs	r3, #30
 8001e5e:	051b      	lsls	r3, r3, #20
 8001e60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e64:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f7ff f8c5 	bl	8000ffa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_ADC_ConfigChannel+0x6e0>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80be 	beq.w	8001ffa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e86:	d004      	beq.n	8001e92 <HAL_ADC_ConfigChannel+0x6d6>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <HAL_ADC_ConfigChannel+0x6e4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10a      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x6ec>
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <HAL_ADC_ConfigChannel+0x6e8>)
 8001e94:	e009      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x6ee>
 8001e96:	bf00      	nop
 8001e98:	407f0000 	.word	0x407f0000
 8001e9c:	80080000 	.word	0x80080000
 8001ea0:	50000100 	.word	0x50000100
 8001ea4:	50000300 	.word	0x50000300
 8001ea8:	4b59      	ldr	r3, [pc, #356]	; (8002010 <HAL_ADC_ConfigChannel+0x854>)
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe ffba 	bl	8000e24 <LL_ADC_GetCommonPathInternalCh>
 8001eb0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a56      	ldr	r2, [pc, #344]	; (8002014 <HAL_ADC_ConfigChannel+0x858>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d004      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0x70c>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a55      	ldr	r2, [pc, #340]	; (8002018 <HAL_ADC_ConfigChannel+0x85c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d13a      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ecc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d134      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001edc:	d005      	beq.n	8001eea <HAL_ADC_ConfigChannel+0x72e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a4e      	ldr	r2, [pc, #312]	; (800201c <HAL_ADC_ConfigChannel+0x860>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	f040 8085 	bne.w	8001ff4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ef2:	d004      	beq.n	8001efe <HAL_ADC_ConfigChannel+0x742>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a49      	ldr	r2, [pc, #292]	; (8002020 <HAL_ADC_ConfigChannel+0x864>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x746>
 8001efe:	4a49      	ldr	r2, [pc, #292]	; (8002024 <HAL_ADC_ConfigChannel+0x868>)
 8001f00:	e000      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x748>
 8001f02:	4a43      	ldr	r2, [pc, #268]	; (8002010 <HAL_ADC_ConfigChannel+0x854>)
 8001f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4610      	mov	r0, r2
 8001f10:	f7fe ff75 	bl	8000dfe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f14:	4b44      	ldr	r3, [pc, #272]	; (8002028 <HAL_ADC_ConfigChannel+0x86c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	099b      	lsrs	r3, r3, #6
 8001f1a:	4a44      	ldr	r2, [pc, #272]	; (800202c <HAL_ADC_ConfigChannel+0x870>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	099b      	lsrs	r3, r3, #6
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f2e:	e002      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f9      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f3c:	e05a      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a3b      	ldr	r2, [pc, #236]	; (8002030 <HAL_ADC_ConfigChannel+0x874>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d125      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d11f      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a31      	ldr	r2, [pc, #196]	; (8002020 <HAL_ADC_ConfigChannel+0x864>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d104      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x7ac>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a34      	ldr	r2, [pc, #208]	; (8002034 <HAL_ADC_ConfigChannel+0x878>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d047      	beq.n	8001ff8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f70:	d004      	beq.n	8001f7c <HAL_ADC_ConfigChannel+0x7c0>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a2a      	ldr	r2, [pc, #168]	; (8002020 <HAL_ADC_ConfigChannel+0x864>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x7c4>
 8001f7c:	4a29      	ldr	r2, [pc, #164]	; (8002024 <HAL_ADC_ConfigChannel+0x868>)
 8001f7e:	e000      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x7c6>
 8001f80:	4a23      	ldr	r2, [pc, #140]	; (8002010 <HAL_ADC_ConfigChannel+0x854>)
 8001f82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	f7fe ff36 	bl	8000dfe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f92:	e031      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a27      	ldr	r2, [pc, #156]	; (8002038 <HAL_ADC_ConfigChannel+0x87c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d12d      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d127      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1c      	ldr	r2, [pc, #112]	; (8002020 <HAL_ADC_ConfigChannel+0x864>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d022      	beq.n	8001ffa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fbc:	d004      	beq.n	8001fc8 <HAL_ADC_ConfigChannel+0x80c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a17      	ldr	r2, [pc, #92]	; (8002020 <HAL_ADC_ConfigChannel+0x864>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d101      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x810>
 8001fc8:	4a16      	ldr	r2, [pc, #88]	; (8002024 <HAL_ADC_ConfigChannel+0x868>)
 8001fca:	e000      	b.n	8001fce <HAL_ADC_ConfigChannel+0x812>
 8001fcc:	4a10      	ldr	r2, [pc, #64]	; (8002010 <HAL_ADC_ConfigChannel+0x854>)
 8001fce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4610      	mov	r0, r2
 8001fda:	f7fe ff10 	bl	8000dfe <LL_ADC_SetCommonPathInternalCh>
 8001fde:	e00c      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	f043 0220 	orr.w	r2, r3, #32
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001ff2:	e002      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ff4:	bf00      	nop
 8001ff6:	e000      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ff8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002002:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002006:	4618      	mov	r0, r3
 8002008:	37d8      	adds	r7, #216	; 0xd8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	50000700 	.word	0x50000700
 8002014:	c3210000 	.word	0xc3210000
 8002018:	90c00010 	.word	0x90c00010
 800201c:	50000600 	.word	0x50000600
 8002020:	50000100 	.word	0x50000100
 8002024:	50000300 	.word	0x50000300
 8002028:	20000000 	.word	0x20000000
 800202c:	053e2d63 	.word	0x053e2d63
 8002030:	c7520000 	.word	0xc7520000
 8002034:	50000500 	.word	0x50000500
 8002038:	cb840000 	.word	0xcb840000

0800203c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff f8a7 	bl	80011a0 <LL_ADC_IsEnabled>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d176      	bne.n	8002146 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	4b3c      	ldr	r3, [pc, #240]	; (8002150 <ADC_Enable+0x114>)
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00d      	beq.n	8002082 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206a:	f043 0210 	orr.w	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002076:	f043 0201 	orr.w	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e062      	b.n	8002148 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff f862 	bl	8001150 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002094:	d004      	beq.n	80020a0 <ADC_Enable+0x64>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a2e      	ldr	r2, [pc, #184]	; (8002154 <ADC_Enable+0x118>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d101      	bne.n	80020a4 <ADC_Enable+0x68>
 80020a0:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <ADC_Enable+0x11c>)
 80020a2:	e000      	b.n	80020a6 <ADC_Enable+0x6a>
 80020a4:	4b2d      	ldr	r3, [pc, #180]	; (800215c <ADC_Enable+0x120>)
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe febc 	bl	8000e24 <LL_ADC_GetCommonPathInternalCh>
 80020ac:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80020ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d013      	beq.n	80020de <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020b6:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <ADC_Enable+0x124>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	099b      	lsrs	r3, r3, #6
 80020bc:	4a29      	ldr	r2, [pc, #164]	; (8002164 <ADC_Enable+0x128>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	099b      	lsrs	r3, r3, #6
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80020d0:	e002      	b.n	80020d8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f9      	bne.n	80020d2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80020de:	f7fe fe6f 	bl	8000dc0 <HAL_GetTick>
 80020e2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020e4:	e028      	b.n	8002138 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff f858 	bl	80011a0 <LL_ADC_IsEnabled>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d104      	bne.n	8002100 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff f828 	bl	8001150 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002100:	f7fe fe5e 	bl	8000dc0 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d914      	bls.n	8002138 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b01      	cmp	r3, #1
 800211a:	d00d      	beq.n	8002138 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	f043 0210 	orr.w	r2, r3, #16
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212c:	f043 0201 	orr.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e007      	b.n	8002148 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b01      	cmp	r3, #1
 8002144:	d1cf      	bne.n	80020e6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	8000003f 	.word	0x8000003f
 8002154:	50000100 	.word	0x50000100
 8002158:	50000300 	.word	0x50000300
 800215c:	50000700 	.word	0x50000700
 8002160:	20000000 	.word	0x20000000
 8002164:	053e2d63 	.word	0x053e2d63

08002168 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff f826 	bl	80011c6 <LL_ADC_IsDisableOngoing>
 800217a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff f80d 	bl	80011a0 <LL_ADC_IsEnabled>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d047      	beq.n	800221c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d144      	bne.n	800221c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030d 	and.w	r3, r3, #13
 800219c:	2b01      	cmp	r3, #1
 800219e:	d10c      	bne.n	80021ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe ffe7 	bl	8001178 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2203      	movs	r2, #3
 80021b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021b2:	f7fe fe05 	bl	8000dc0 <HAL_GetTick>
 80021b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021b8:	e029      	b.n	800220e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	f043 0210 	orr.w	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e023      	b.n	800221e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021d6:	f7fe fdf3 	bl	8000dc0 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d914      	bls.n	800220e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00d      	beq.n	800220e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f6:	f043 0210 	orr.w	r2, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002202:	f043 0201 	orr.w	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e007      	b.n	800221e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1dc      	bne.n	80021d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800223c:	2b00      	cmp	r3, #0
 800223e:	d14b      	bne.n	80022d8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002244:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d021      	beq.n	800229e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fe8c 	bl	8000f7c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d032      	beq.n	80022d0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d12b      	bne.n	80022d0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d11f      	bne.n	80022d0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	65da      	str	r2, [r3, #92]	; 0x5c
 800229c:	e018      	b.n	80022d0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d111      	bne.n	80022d0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c8:	f043 0201 	orr.w	r2, r3, #1
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f7ff fa55 	bl	8001780 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022d6:	e00e      	b.n	80022f6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f7ff fa5f 	bl	80017a8 <HAL_ADC_ErrorCallback>
}
 80022ea:	e004      	b.n	80022f6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7ff fa41 	bl	8001794 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002338:	f043 0204 	orr.w	r2, r3, #4
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f7ff fa31 	bl	80017a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <LL_ADC_IsEnabled>:
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <LL_ADC_IsEnabled+0x18>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <LL_ADC_IsEnabled+0x1a>
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_ADC_StartCalibration>:
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002386:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002390:	4313      	orrs	r3, r2
 8002392:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	609a      	str	r2, [r3, #8]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <LL_ADC_IsCalibrationOnGoing>:
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023ba:	d101      	bne.n	80023c0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <LL_ADC_REG_IsConversionOngoing>:
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d101      	bne.n	80023e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_ADCEx_Calibration_Start+0x1c>
 800240c:	2302      	movs	r3, #2
 800240e:	e04d      	b.n	80024ac <HAL_ADCEx_Calibration_Start+0xb8>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fea5 	bl	8002168 <ADC_Disable>
 800241e:	4603      	mov	r3, r0
 8002420:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d136      	bne.n	8002496 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002430:	f023 0302 	bic.w	r3, r3, #2
 8002434:	f043 0202 	orr.w	r2, r3, #2
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6839      	ldr	r1, [r7, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff96 	bl	8002374 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002448:	e014      	b.n	8002474 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	3301      	adds	r3, #1
 800244e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d90d      	bls.n	8002474 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245c:	f023 0312 	bic.w	r3, r3, #18
 8002460:	f043 0210 	orr.w	r2, r3, #16
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e01b      	b.n	80024ac <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff94 	bl	80023a6 <LL_ADC_IsCalibrationOnGoing>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1e2      	bne.n	800244a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002488:	f023 0303 	bic.w	r3, r3, #3
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	65da      	str	r2, [r3, #92]	; 0x5c
 8002494:	e005      	b.n	80024a2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249a:	f043 0210 	orr.w	r2, r3, #16
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	0004de01 	.word	0x0004de01

080024b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b0a1      	sub	sp, #132	; 0x84
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e0e7      	b.n	80026a6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80024de:	2300      	movs	r3, #0
 80024e0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80024e2:	2300      	movs	r3, #0
 80024e4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ee:	d102      	bne.n	80024f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024f0:	4b6f      	ldr	r3, [pc, #444]	; (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	e009      	b.n	800250a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a6e      	ldr	r2, [pc, #440]	; (80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d102      	bne.n	8002506 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002500:	4b6d      	ldr	r3, [pc, #436]	; (80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	e001      	b.n	800250a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10b      	bne.n	8002528 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002514:	f043 0220 	orr.w	r2, r3, #32
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0be      	b.n	80026a6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ff4f 	bl	80023ce <LL_ADC_REG_IsConversionOngoing>
 8002530:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ff49 	bl	80023ce <LL_ADC_REG_IsConversionOngoing>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 80a0 	bne.w	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 809c 	bne.w	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002554:	d004      	beq.n	8002560 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a55      	ldr	r2, [pc, #340]	; (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d101      	bne.n	8002564 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002560:	4b56      	ldr	r3, [pc, #344]	; (80026bc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002562:	e000      	b.n	8002566 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002564:	4b56      	ldr	r3, [pc, #344]	; (80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002566:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d04b      	beq.n	8002608 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002582:	035b      	lsls	r3, r3, #13
 8002584:	430b      	orrs	r3, r1
 8002586:	431a      	orrs	r2, r3
 8002588:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800258a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002594:	d004      	beq.n	80025a0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a45      	ldr	r2, [pc, #276]	; (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d10f      	bne.n	80025c0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80025a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80025a4:	f7ff fed3 	bl	800234e <LL_ADC_IsEnabled>
 80025a8:	4604      	mov	r4, r0
 80025aa:	4841      	ldr	r0, [pc, #260]	; (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025ac:	f7ff fecf 	bl	800234e <LL_ADC_IsEnabled>
 80025b0:	4603      	mov	r3, r0
 80025b2:	4323      	orrs	r3, r4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e012      	b.n	80025e6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80025c0:	483c      	ldr	r0, [pc, #240]	; (80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80025c2:	f7ff fec4 	bl	800234e <LL_ADC_IsEnabled>
 80025c6:	4604      	mov	r4, r0
 80025c8:	483b      	ldr	r0, [pc, #236]	; (80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80025ca:	f7ff fec0 	bl	800234e <LL_ADC_IsEnabled>
 80025ce:	4603      	mov	r3, r0
 80025d0:	431c      	orrs	r4, r3
 80025d2:	483c      	ldr	r0, [pc, #240]	; (80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80025d4:	f7ff febb 	bl	800234e <LL_ADC_IsEnabled>
 80025d8:	4603      	mov	r3, r0
 80025da:	4323      	orrs	r3, r4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d056      	beq.n	8002698 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025f2:	f023 030f 	bic.w	r3, r3, #15
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	6811      	ldr	r1, [r2, #0]
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	6892      	ldr	r2, [r2, #8]
 80025fe:	430a      	orrs	r2, r1
 8002600:	431a      	orrs	r2, r3
 8002602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002604:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002606:	e047      	b.n	8002698 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002612:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800261c:	d004      	beq.n	8002628 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a23      	ldr	r2, [pc, #140]	; (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d10f      	bne.n	8002648 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002628:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800262c:	f7ff fe8f 	bl	800234e <LL_ADC_IsEnabled>
 8002630:	4604      	mov	r4, r0
 8002632:	481f      	ldr	r0, [pc, #124]	; (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002634:	f7ff fe8b 	bl	800234e <LL_ADC_IsEnabled>
 8002638:	4603      	mov	r3, r0
 800263a:	4323      	orrs	r3, r4
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf0c      	ite	eq
 8002640:	2301      	moveq	r3, #1
 8002642:	2300      	movne	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	e012      	b.n	800266e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002648:	481a      	ldr	r0, [pc, #104]	; (80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800264a:	f7ff fe80 	bl	800234e <LL_ADC_IsEnabled>
 800264e:	4604      	mov	r4, r0
 8002650:	4819      	ldr	r0, [pc, #100]	; (80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002652:	f7ff fe7c 	bl	800234e <LL_ADC_IsEnabled>
 8002656:	4603      	mov	r3, r0
 8002658:	431c      	orrs	r4, r3
 800265a:	481a      	ldr	r0, [pc, #104]	; (80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800265c:	f7ff fe77 	bl	800234e <LL_ADC_IsEnabled>
 8002660:	4603      	mov	r3, r0
 8002662:	4323      	orrs	r3, r4
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf0c      	ite	eq
 8002668:	2301      	moveq	r3, #1
 800266a:	2300      	movne	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d012      	beq.n	8002698 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800267a:	f023 030f 	bic.w	r3, r3, #15
 800267e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002680:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002682:	e009      	b.n	8002698 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002688:	f043 0220 	orr.w	r2, r3, #32
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002696:	e000      	b.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002698:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80026a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3784      	adds	r7, #132	; 0x84
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd90      	pop	{r4, r7, pc}
 80026ae:	bf00      	nop
 80026b0:	50000100 	.word	0x50000100
 80026b4:	50000400 	.word	0x50000400
 80026b8:	50000500 	.word	0x50000500
 80026bc:	50000300 	.word	0x50000300
 80026c0:	50000700 	.word	0x50000700
 80026c4:	50000600 	.word	0x50000600

080026c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <__NVIC_SetPriorityGrouping+0x44>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e4:	4013      	ands	r3, r2
 80026e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026fa:	4a04      	ldr	r2, [pc, #16]	; (800270c <__NVIC_SetPriorityGrouping+0x44>)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	60d3      	str	r3, [r2, #12]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002714:	4b04      	ldr	r3, [pc, #16]	; (8002728 <__NVIC_GetPriorityGrouping+0x18>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	0a1b      	lsrs	r3, r3, #8
 800271a:	f003 0307 	and.w	r3, r3, #7
}
 800271e:	4618      	mov	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	2b00      	cmp	r3, #0
 800273c:	db0b      	blt.n	8002756 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	f003 021f 	and.w	r2, r3, #31
 8002744:	4907      	ldr	r1, [pc, #28]	; (8002764 <__NVIC_EnableIRQ+0x38>)
 8002746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	2001      	movs	r0, #1
 800274e:	fa00 f202 	lsl.w	r2, r0, r2
 8002752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000e100 	.word	0xe000e100

08002768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	6039      	str	r1, [r7, #0]
 8002772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002778:	2b00      	cmp	r3, #0
 800277a:	db0a      	blt.n	8002792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	b2da      	uxtb	r2, r3
 8002780:	490c      	ldr	r1, [pc, #48]	; (80027b4 <__NVIC_SetPriority+0x4c>)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	0112      	lsls	r2, r2, #4
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	440b      	add	r3, r1
 800278c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002790:	e00a      	b.n	80027a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	4908      	ldr	r1, [pc, #32]	; (80027b8 <__NVIC_SetPriority+0x50>)
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	3b04      	subs	r3, #4
 80027a0:	0112      	lsls	r2, r2, #4
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	440b      	add	r3, r1
 80027a6:	761a      	strb	r2, [r3, #24]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	e000e100 	.word	0xe000e100
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027bc:	b480      	push	{r7}
 80027be:	b089      	sub	sp, #36	; 0x24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f1c3 0307 	rsb	r3, r3, #7
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	bf28      	it	cs
 80027da:	2304      	movcs	r3, #4
 80027dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3304      	adds	r3, #4
 80027e2:	2b06      	cmp	r3, #6
 80027e4:	d902      	bls.n	80027ec <NVIC_EncodePriority+0x30>
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3b03      	subs	r3, #3
 80027ea:	e000      	b.n	80027ee <NVIC_EncodePriority+0x32>
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	f04f 32ff 	mov.w	r2, #4294967295
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43da      	mvns	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	401a      	ands	r2, r3
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002804:	f04f 31ff 	mov.w	r1, #4294967295
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	fa01 f303 	lsl.w	r3, r1, r3
 800280e:	43d9      	mvns	r1, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	4313      	orrs	r3, r2
         );
}
 8002816:	4618      	mov	r0, r3
 8002818:	3724      	adds	r7, #36	; 0x24
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3b01      	subs	r3, #1
 8002830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002834:	d301      	bcc.n	800283a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002836:	2301      	movs	r3, #1
 8002838:	e00f      	b.n	800285a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283a:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <SysTick_Config+0x40>)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002842:	210f      	movs	r1, #15
 8002844:	f04f 30ff 	mov.w	r0, #4294967295
 8002848:	f7ff ff8e 	bl	8002768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <SysTick_Config+0x40>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002852:	4b04      	ldr	r3, [pc, #16]	; (8002864 <SysTick_Config+0x40>)
 8002854:	2207      	movs	r2, #7
 8002856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	e000e010 	.word	0xe000e010

08002868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff29 	bl	80026c8 <__NVIC_SetPriorityGrouping>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b086      	sub	sp, #24
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800288c:	f7ff ff40 	bl	8002710 <__NVIC_GetPriorityGrouping>
 8002890:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	6978      	ldr	r0, [r7, #20]
 8002898:	f7ff ff90 	bl	80027bc <NVIC_EncodePriority>
 800289c:	4602      	mov	r2, r0
 800289e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff5f 	bl	8002768 <__NVIC_SetPriority>
}
 80028aa:	bf00      	nop
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	4603      	mov	r3, r0
 80028ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff33 	bl	800272c <__NVIC_EnableIRQ>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ffa4 	bl	8002824 <SysTick_Config>
 80028dc:	4603      	mov	r3, r0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e08d      	b.n	8002a16 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <HAL_DMA_Init+0x138>)
 8002902:	429a      	cmp	r2, r3
 8002904:	d80f      	bhi.n	8002926 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	4b45      	ldr	r3, [pc, #276]	; (8002a24 <HAL_DMA_Init+0x13c>)
 800290e:	4413      	add	r3, r2
 8002910:	4a45      	ldr	r2, [pc, #276]	; (8002a28 <HAL_DMA_Init+0x140>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	009a      	lsls	r2, r3, #2
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a42      	ldr	r2, [pc, #264]	; (8002a2c <HAL_DMA_Init+0x144>)
 8002922:	641a      	str	r2, [r3, #64]	; 0x40
 8002924:	e00e      	b.n	8002944 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	4b40      	ldr	r3, [pc, #256]	; (8002a30 <HAL_DMA_Init+0x148>)
 800292e:	4413      	add	r3, r2
 8002930:	4a3d      	ldr	r2, [pc, #244]	; (8002a28 <HAL_DMA_Init+0x140>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	091b      	lsrs	r3, r3, #4
 8002938:	009a      	lsls	r2, r3, #2
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a3c      	ldr	r2, [pc, #240]	; (8002a34 <HAL_DMA_Init+0x14c>)
 8002942:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800295a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002968:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002974:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002980:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f9b6 	bl	8002d08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a4:	d102      	bne.n	80029ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029c0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d010      	beq.n	80029ec <HAL_DMA_Init+0x104>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d80c      	bhi.n	80029ec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f9d6 	bl	8002d84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	e008      	b.n	80029fe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40020407 	.word	0x40020407
 8002a24:	bffdfff8 	.word	0xbffdfff8
 8002a28:	cccccccd 	.word	0xcccccccd
 8002a2c:	40020000 	.word	0x40020000
 8002a30:	bffdfbf8 	.word	0xbffdfbf8
 8002a34:	40020400 	.word	0x40020400

08002a38 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_DMA_Start_IT+0x20>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e066      	b.n	8002b26 <HAL_DMA_Start_IT+0xee>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d155      	bne.n	8002b18 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0201 	bic.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f8fb 	bl	8002c8c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f042 020e 	orr.w	r2, r2, #14
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	e00f      	b.n	8002ad0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0204 	bic.w	r2, r2, #4
 8002abe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 020a 	orr.w	r2, r2, #10
 8002ace:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e005      	b.n	8002b24 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
 8002b22:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	2204      	movs	r2, #4
 8002b50:	409a      	lsls	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d026      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x7a>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d021      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d107      	bne.n	8002b82 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0204 	bic.w	r2, r2, #4
 8002b80:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f003 021f 	and.w	r2, r3, #31
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	2104      	movs	r1, #4
 8002b90:	fa01 f202 	lsl.w	r2, r1, r2
 8002b94:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d071      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002ba6:	e06c      	b.n	8002c82 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d02e      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d029      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 020a 	bic.w	r2, r2, #10
 8002be2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	2102      	movs	r1, #2
 8002bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d038      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002c18:	e033      	b.n	8002c82 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	2208      	movs	r2, #8
 8002c24:	409a      	lsls	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d02a      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d025      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 020e 	bic.w	r2, r2, #14
 8002c46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4c:	f003 021f 	and.w	r2, r3, #31
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	2101      	movs	r1, #1
 8002c56:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c82:	bf00      	nop
 8002c84:	bf00      	nop
}
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ca2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d004      	beq.n	8002cb6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002cb4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f003 021f 	and.w	r2, r3, #31
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d108      	bne.n	8002cec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cea:	e007      	b.n	8002cfc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	60da      	str	r2, [r3, #12]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d802      	bhi.n	8002d22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002d1c:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	e001      	b.n	8002d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002d22:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002d24:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	3b08      	subs	r3, #8
 8002d32:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d40:	089b      	lsrs	r3, r3, #2
 8002d42:	009a      	lsls	r2, r3, #2
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4413      	add	r3, r2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002d52:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d62:	bf00      	nop
 8002d64:	371c      	adds	r7, #28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40020407 	.word	0x40020407
 8002d74:	40020800 	.word	0x40020800
 8002d78:	40020820 	.word	0x40020820
 8002d7c:	cccccccd 	.word	0xcccccccd
 8002d80:	40020880 	.word	0x40020880

08002d84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a08      	ldr	r2, [pc, #32]	; (8002dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002da6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	2201      	movs	r2, #1
 8002db2:	409a      	lsls	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	1000823f 	.word	0x1000823f
 8002dc8:	40020940 	.word	0x40020940

08002dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002dda:	e15a      	b.n	8003092 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2101      	movs	r1, #1
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	fa01 f303 	lsl.w	r3, r1, r3
 8002de8:	4013      	ands	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 814c 	beq.w	800308c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d005      	beq.n	8002e0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d130      	bne.n	8002e6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2203      	movs	r2, #3
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e42:	2201      	movs	r2, #1
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	f003 0201 	and.w	r2, r3, #1
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d017      	beq.n	8002eaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	2203      	movs	r2, #3
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d123      	bne.n	8002efe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	08da      	lsrs	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3208      	adds	r2, #8
 8002ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	220f      	movs	r2, #15
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	691a      	ldr	r2, [r3, #16]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	08da      	lsrs	r2, r3, #3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3208      	adds	r2, #8
 8002ef8:	6939      	ldr	r1, [r7, #16]
 8002efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	2203      	movs	r2, #3
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4013      	ands	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0203 	and.w	r2, r3, #3
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80a6 	beq.w	800308c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f40:	4b5b      	ldr	r3, [pc, #364]	; (80030b0 <HAL_GPIO_Init+0x2e4>)
 8002f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f44:	4a5a      	ldr	r2, [pc, #360]	; (80030b0 <HAL_GPIO_Init+0x2e4>)
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6613      	str	r3, [r2, #96]	; 0x60
 8002f4c:	4b58      	ldr	r3, [pc, #352]	; (80030b0 <HAL_GPIO_Init+0x2e4>)
 8002f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f58:	4a56      	ldr	r2, [pc, #344]	; (80030b4 <HAL_GPIO_Init+0x2e8>)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	089b      	lsrs	r3, r3, #2
 8002f5e:	3302      	adds	r3, #2
 8002f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	220f      	movs	r2, #15
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f82:	d01f      	beq.n	8002fc4 <HAL_GPIO_Init+0x1f8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a4c      	ldr	r2, [pc, #304]	; (80030b8 <HAL_GPIO_Init+0x2ec>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d019      	beq.n	8002fc0 <HAL_GPIO_Init+0x1f4>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a4b      	ldr	r2, [pc, #300]	; (80030bc <HAL_GPIO_Init+0x2f0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d013      	beq.n	8002fbc <HAL_GPIO_Init+0x1f0>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a4a      	ldr	r2, [pc, #296]	; (80030c0 <HAL_GPIO_Init+0x2f4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00d      	beq.n	8002fb8 <HAL_GPIO_Init+0x1ec>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a49      	ldr	r2, [pc, #292]	; (80030c4 <HAL_GPIO_Init+0x2f8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d007      	beq.n	8002fb4 <HAL_GPIO_Init+0x1e8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a48      	ldr	r2, [pc, #288]	; (80030c8 <HAL_GPIO_Init+0x2fc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d101      	bne.n	8002fb0 <HAL_GPIO_Init+0x1e4>
 8002fac:	2305      	movs	r3, #5
 8002fae:	e00a      	b.n	8002fc6 <HAL_GPIO_Init+0x1fa>
 8002fb0:	2306      	movs	r3, #6
 8002fb2:	e008      	b.n	8002fc6 <HAL_GPIO_Init+0x1fa>
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	e006      	b.n	8002fc6 <HAL_GPIO_Init+0x1fa>
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e004      	b.n	8002fc6 <HAL_GPIO_Init+0x1fa>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e002      	b.n	8002fc6 <HAL_GPIO_Init+0x1fa>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <HAL_GPIO_Init+0x1fa>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	f002 0203 	and.w	r2, r2, #3
 8002fcc:	0092      	lsls	r2, r2, #2
 8002fce:	4093      	lsls	r3, r2
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fd6:	4937      	ldr	r1, [pc, #220]	; (80030b4 <HAL_GPIO_Init+0x2e8>)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	3302      	adds	r3, #2
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fe4:	4b39      	ldr	r3, [pc, #228]	; (80030cc <HAL_GPIO_Init+0x300>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003008:	4a30      	ldr	r2, [pc, #192]	; (80030cc <HAL_GPIO_Init+0x300>)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800300e:	4b2f      	ldr	r3, [pc, #188]	; (80030cc <HAL_GPIO_Init+0x300>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	43db      	mvns	r3, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003032:	4a26      	ldr	r2, [pc, #152]	; (80030cc <HAL_GPIO_Init+0x300>)
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003038:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_GPIO_Init+0x300>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	43db      	mvns	r3, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800305c:	4a1b      	ldr	r2, [pc, #108]	; (80030cc <HAL_GPIO_Init+0x300>)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003062:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <HAL_GPIO_Init+0x300>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	43db      	mvns	r3, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003086:	4a11      	ldr	r2, [pc, #68]	; (80030cc <HAL_GPIO_Init+0x300>)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	3301      	adds	r3, #1
 8003090:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	fa22 f303 	lsr.w	r3, r2, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	f47f ae9d 	bne.w	8002ddc <HAL_GPIO_Init+0x10>
  }
}
 80030a2:	bf00      	nop
 80030a4:	bf00      	nop
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40010000 	.word	0x40010000
 80030b8:	48000400 	.word	0x48000400
 80030bc:	48000800 	.word	0x48000800
 80030c0:	48000c00 	.word	0x48000c00
 80030c4:	48001000 	.word	0x48001000
 80030c8:	48001400 	.word	0x48001400
 80030cc:	40010400 	.word	0x40010400

080030d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	807b      	strh	r3, [r7, #2]
 80030dc:	4613      	mov	r3, r2
 80030de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030e0:	787b      	ldrb	r3, [r7, #1]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030ec:	e002      	b.n	80030f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030ee:	887a      	ldrh	r2, [r7, #2]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800310a:	4b08      	ldr	r3, [pc, #32]	; (800312c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d006      	beq.n	8003124 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003116:	4a05      	ldr	r2, [pc, #20]	; (800312c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003118:	88fb      	ldrh	r3, [r7, #6]
 800311a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	4618      	mov	r0, r3
 8003120:	f000 f806 	bl	8003130 <HAL_GPIO_EXTI_Callback>
  }
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40010400 	.word	0x40010400

08003130 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d141      	bne.n	80031da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003156:	4b4b      	ldr	r3, [pc, #300]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800315e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003162:	d131      	bne.n	80031c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003164:	4b47      	ldr	r3, [pc, #284]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800316a:	4a46      	ldr	r2, [pc, #280]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003170:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003174:	4b43      	ldr	r3, [pc, #268]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800317c:	4a41      	ldr	r2, [pc, #260]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003182:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003184:	4b40      	ldr	r3, [pc, #256]	; (8003288 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2232      	movs	r2, #50	; 0x32
 800318a:	fb02 f303 	mul.w	r3, r2, r3
 800318e:	4a3f      	ldr	r2, [pc, #252]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	0c9b      	lsrs	r3, r3, #18
 8003196:	3301      	adds	r3, #1
 8003198:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800319a:	e002      	b.n	80031a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3b01      	subs	r3, #1
 80031a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031a2:	4b38      	ldr	r3, [pc, #224]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ae:	d102      	bne.n	80031b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f2      	bne.n	800319c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031b6:	4b33      	ldr	r3, [pc, #204]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c2:	d158      	bne.n	8003276 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e057      	b.n	8003278 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031c8:	4b2e      	ldr	r3, [pc, #184]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ce:	4a2d      	ldr	r2, [pc, #180]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031d8:	e04d      	b.n	8003276 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e0:	d141      	bne.n	8003266 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031e2:	4b28      	ldr	r3, [pc, #160]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ee:	d131      	bne.n	8003254 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031f0:	4b24      	ldr	r3, [pc, #144]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031f6:	4a23      	ldr	r2, [pc, #140]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003200:	4b20      	ldr	r3, [pc, #128]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003208:	4a1e      	ldr	r2, [pc, #120]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800320e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003210:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2232      	movs	r2, #50	; 0x32
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	4a1c      	ldr	r2, [pc, #112]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	0c9b      	lsrs	r3, r3, #18
 8003222:	3301      	adds	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003226:	e002      	b.n	800322e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3b01      	subs	r3, #1
 800322c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323a:	d102      	bne.n	8003242 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f2      	bne.n	8003228 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003242:	4b10      	ldr	r3, [pc, #64]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324e:	d112      	bne.n	8003276 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e011      	b.n	8003278 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800325a:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003260:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003264:	e007      	b.n	8003276 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003266:	4b07      	ldr	r3, [pc, #28]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800326e:	4a05      	ldr	r2, [pc, #20]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003270:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003274:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	40007000 	.word	0x40007000
 8003288:	20000000 	.word	0x20000000
 800328c:	431bde83 	.word	0x431bde83

08003290 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	4a04      	ldr	r2, [pc, #16]	; (80032ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800329a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800329e:	6093      	str	r3, [r2, #8]
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40007000 	.word	0x40007000

080032b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e2fe      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d075      	beq.n	80033ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ce:	4b97      	ldr	r3, [pc, #604]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 030c 	and.w	r3, r3, #12
 80032d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032d8:	4b94      	ldr	r3, [pc, #592]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	2b0c      	cmp	r3, #12
 80032e6:	d102      	bne.n	80032ee <HAL_RCC_OscConfig+0x3e>
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d002      	beq.n	80032f4 <HAL_RCC_OscConfig+0x44>
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d10b      	bne.n	800330c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f4:	4b8d      	ldr	r3, [pc, #564]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d05b      	beq.n	80033b8 <HAL_RCC_OscConfig+0x108>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d157      	bne.n	80033b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e2d9      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003314:	d106      	bne.n	8003324 <HAL_RCC_OscConfig+0x74>
 8003316:	4b85      	ldr	r3, [pc, #532]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a84      	ldr	r2, [pc, #528]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 800331c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	e01d      	b.n	8003360 <HAL_RCC_OscConfig+0xb0>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0x98>
 800332e:	4b7f      	ldr	r3, [pc, #508]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a7e      	ldr	r2, [pc, #504]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 8003334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	4b7c      	ldr	r3, [pc, #496]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a7b      	ldr	r2, [pc, #492]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 8003340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e00b      	b.n	8003360 <HAL_RCC_OscConfig+0xb0>
 8003348:	4b78      	ldr	r3, [pc, #480]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a77      	ldr	r2, [pc, #476]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 800334e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	4b75      	ldr	r3, [pc, #468]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a74      	ldr	r2, [pc, #464]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 800335a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d013      	beq.n	8003390 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fd fd2a 	bl	8000dc0 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003370:	f7fd fd26 	bl	8000dc0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	; 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e29e      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003382:	4b6a      	ldr	r3, [pc, #424]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCC_OscConfig+0xc0>
 800338e:	e014      	b.n	80033ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fd fd16 	bl	8000dc0 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003398:	f7fd fd12 	bl	8000dc0 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e28a      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033aa:	4b60      	ldr	r3, [pc, #384]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0xe8>
 80033b6:	e000      	b.n	80033ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d075      	beq.n	80034b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033c6:	4b59      	ldr	r3, [pc, #356]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033d0:	4b56      	ldr	r3, [pc, #344]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2b0c      	cmp	r3, #12
 80033de:	d102      	bne.n	80033e6 <HAL_RCC_OscConfig+0x136>
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d002      	beq.n	80033ec <HAL_RCC_OscConfig+0x13c>
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d11f      	bne.n	800342c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033ec:	4b4f      	ldr	r3, [pc, #316]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_OscConfig+0x154>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e25d      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003404:	4b49      	ldr	r3, [pc, #292]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	061b      	lsls	r3, r3, #24
 8003412:	4946      	ldr	r1, [pc, #280]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003418:	4b45      	ldr	r3, [pc, #276]	; (8003530 <HAL_RCC_OscConfig+0x280>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd fc83 	bl	8000d28 <HAL_InitTick>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d043      	beq.n	80034b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e249      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d023      	beq.n	800347c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003434:	4b3d      	ldr	r3, [pc, #244]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a3c      	ldr	r2, [pc, #240]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 800343a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fd fcbe 	bl	8000dc0 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003448:	f7fd fcba 	bl	8000dc0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e232      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800345a:	4b34      	ldr	r3, [pc, #208]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003466:	4b31      	ldr	r3, [pc, #196]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	061b      	lsls	r3, r3, #24
 8003474:	492d      	ldr	r1, [pc, #180]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
 800347a:	e01a      	b.n	80034b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800347c:	4b2b      	ldr	r3, [pc, #172]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a2a      	ldr	r2, [pc, #168]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 8003482:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fd fc9a 	bl	8000dc0 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003490:	f7fd fc96 	bl	8000dc0 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e20e      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034a2:	4b22      	ldr	r3, [pc, #136]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x1e0>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d041      	beq.n	8003542 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d01c      	beq.n	8003500 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c6:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 80034c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034cc:	4a17      	ldr	r2, [pc, #92]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d6:	f7fd fc73 	bl	8000dc0 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034de:	f7fd fc6f 	bl	8000dc0 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e1e7      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034f0:	4b0e      	ldr	r3, [pc, #56]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 80034f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0ef      	beq.n	80034de <HAL_RCC_OscConfig+0x22e>
 80034fe:	e020      	b.n	8003542 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003500:	4b0a      	ldr	r3, [pc, #40]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 8003502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003506:	4a09      	ldr	r2, [pc, #36]	; (800352c <HAL_RCC_OscConfig+0x27c>)
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003510:	f7fd fc56 	bl	8000dc0 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003516:	e00d      	b.n	8003534 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003518:	f7fd fc52 	bl	8000dc0 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d906      	bls.n	8003534 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e1ca      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000
 8003530:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003534:	4b8c      	ldr	r3, [pc, #560]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 8003536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1ea      	bne.n	8003518 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80a6 	beq.w	800369c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003550:	2300      	movs	r3, #0
 8003552:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003554:	4b84      	ldr	r3, [pc, #528]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 8003556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_OscConfig+0x2b4>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x2b6>
 8003564:	2300      	movs	r3, #0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00d      	beq.n	8003586 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356a:	4b7f      	ldr	r3, [pc, #508]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	4a7e      	ldr	r2, [pc, #504]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 8003570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003574:	6593      	str	r3, [r2, #88]	; 0x58
 8003576:	4b7c      	ldr	r3, [pc, #496]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 8003578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003582:	2301      	movs	r3, #1
 8003584:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003586:	4b79      	ldr	r3, [pc, #484]	; (800376c <HAL_RCC_OscConfig+0x4bc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d118      	bne.n	80035c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003592:	4b76      	ldr	r3, [pc, #472]	; (800376c <HAL_RCC_OscConfig+0x4bc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a75      	ldr	r2, [pc, #468]	; (800376c <HAL_RCC_OscConfig+0x4bc>)
 8003598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359e:	f7fd fc0f 	bl	8000dc0 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a6:	f7fd fc0b 	bl	8000dc0 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e183      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b8:	4b6c      	ldr	r3, [pc, #432]	; (800376c <HAL_RCC_OscConfig+0x4bc>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d108      	bne.n	80035de <HAL_RCC_OscConfig+0x32e>
 80035cc:	4b66      	ldr	r3, [pc, #408]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	4a65      	ldr	r2, [pc, #404]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035dc:	e024      	b.n	8003628 <HAL_RCC_OscConfig+0x378>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	d110      	bne.n	8003608 <HAL_RCC_OscConfig+0x358>
 80035e6:	4b60      	ldr	r3, [pc, #384]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ec:	4a5e      	ldr	r2, [pc, #376]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 80035ee:	f043 0304 	orr.w	r3, r3, #4
 80035f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035f6:	4b5c      	ldr	r3, [pc, #368]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fc:	4a5a      	ldr	r2, [pc, #360]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003606:	e00f      	b.n	8003628 <HAL_RCC_OscConfig+0x378>
 8003608:	4b57      	ldr	r3, [pc, #348]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	4a56      	ldr	r2, [pc, #344]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003618:	4b53      	ldr	r3, [pc, #332]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	4a52      	ldr	r2, [pc, #328]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 8003620:	f023 0304 	bic.w	r3, r3, #4
 8003624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d016      	beq.n	800365e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003630:	f7fd fbc6 	bl	8000dc0 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003636:	e00a      	b.n	800364e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003638:	f7fd fbc2 	bl	8000dc0 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e138      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800364e:	4b46      	ldr	r3, [pc, #280]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0ed      	beq.n	8003638 <HAL_RCC_OscConfig+0x388>
 800365c:	e015      	b.n	800368a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365e:	f7fd fbaf 	bl	8000dc0 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003664:	e00a      	b.n	800367c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003666:	f7fd fbab 	bl	8000dc0 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	f241 3288 	movw	r2, #5000	; 0x1388
 8003674:	4293      	cmp	r3, r2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e121      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800367c:	4b3a      	ldr	r3, [pc, #232]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ed      	bne.n	8003666 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800368a:	7ffb      	ldrb	r3, [r7, #31]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003690:	4b35      	ldr	r3, [pc, #212]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 8003692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003694:	4a34      	ldr	r2, [pc, #208]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 8003696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d03c      	beq.n	8003722 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01c      	beq.n	80036ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036b0:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 80036b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036b6:	4a2c      	ldr	r2, [pc, #176]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fd fb7e 	bl	8000dc0 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036c8:	f7fd fb7a 	bl	8000dc0 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e0f2      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036da:	4b23      	ldr	r3, [pc, #140]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 80036dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ef      	beq.n	80036c8 <HAL_RCC_OscConfig+0x418>
 80036e8:	e01b      	b.n	8003722 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036ea:	4b1f      	ldr	r3, [pc, #124]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 80036ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036f0:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7fd fb61 	bl	8000dc0 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003702:	f7fd fb5d 	bl	8000dc0 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e0d5      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003714:	4b14      	ldr	r3, [pc, #80]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 8003716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1ef      	bne.n	8003702 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80c9 	beq.w	80038be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 030c 	and.w	r3, r3, #12
 8003734:	2b0c      	cmp	r3, #12
 8003736:	f000 8083 	beq.w	8003840 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d15e      	bne.n	8003800 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003742:	4b09      	ldr	r3, [pc, #36]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a08      	ldr	r2, [pc, #32]	; (8003768 <HAL_RCC_OscConfig+0x4b8>)
 8003748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800374c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7fd fb37 	bl	8000dc0 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003754:	e00c      	b.n	8003770 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003756:	f7fd fb33 	bl	8000dc0 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d905      	bls.n	8003770 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0ab      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
 8003768:	40021000 	.word	0x40021000
 800376c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003770:	4b55      	ldr	r3, [pc, #340]	; (80038c8 <HAL_RCC_OscConfig+0x618>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ec      	bne.n	8003756 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800377c:	4b52      	ldr	r3, [pc, #328]	; (80038c8 <HAL_RCC_OscConfig+0x618>)
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	4b52      	ldr	r3, [pc, #328]	; (80038cc <HAL_RCC_OscConfig+0x61c>)
 8003782:	4013      	ands	r3, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6a11      	ldr	r1, [r2, #32]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800378c:	3a01      	subs	r2, #1
 800378e:	0112      	lsls	r2, r2, #4
 8003790:	4311      	orrs	r1, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003796:	0212      	lsls	r2, r2, #8
 8003798:	4311      	orrs	r1, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800379e:	0852      	lsrs	r2, r2, #1
 80037a0:	3a01      	subs	r2, #1
 80037a2:	0552      	lsls	r2, r2, #21
 80037a4:	4311      	orrs	r1, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037aa:	0852      	lsrs	r2, r2, #1
 80037ac:	3a01      	subs	r2, #1
 80037ae:	0652      	lsls	r2, r2, #25
 80037b0:	4311      	orrs	r1, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037b6:	06d2      	lsls	r2, r2, #27
 80037b8:	430a      	orrs	r2, r1
 80037ba:	4943      	ldr	r1, [pc, #268]	; (80038c8 <HAL_RCC_OscConfig+0x618>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c0:	4b41      	ldr	r3, [pc, #260]	; (80038c8 <HAL_RCC_OscConfig+0x618>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a40      	ldr	r2, [pc, #256]	; (80038c8 <HAL_RCC_OscConfig+0x618>)
 80037c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037cc:	4b3e      	ldr	r3, [pc, #248]	; (80038c8 <HAL_RCC_OscConfig+0x618>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4a3d      	ldr	r2, [pc, #244]	; (80038c8 <HAL_RCC_OscConfig+0x618>)
 80037d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fd faf2 	bl	8000dc0 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e0:	f7fd faee 	bl	8000dc0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e066      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f2:	4b35      	ldr	r3, [pc, #212]	; (80038c8 <HAL_RCC_OscConfig+0x618>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x530>
 80037fe:	e05e      	b.n	80038be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003800:	4b31      	ldr	r3, [pc, #196]	; (80038c8 <HAL_RCC_OscConfig+0x618>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a30      	ldr	r2, [pc, #192]	; (80038c8 <HAL_RCC_OscConfig+0x618>)
 8003806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800380a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fd fad8 	bl	8000dc0 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003814:	f7fd fad4 	bl	8000dc0 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e04c      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003826:	4b28      	ldr	r3, [pc, #160]	; (80038c8 <HAL_RCC_OscConfig+0x618>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003832:	4b25      	ldr	r3, [pc, #148]	; (80038c8 <HAL_RCC_OscConfig+0x618>)
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	4924      	ldr	r1, [pc, #144]	; (80038c8 <HAL_RCC_OscConfig+0x618>)
 8003838:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <HAL_RCC_OscConfig+0x620>)
 800383a:	4013      	ands	r3, r2
 800383c:	60cb      	str	r3, [r1, #12]
 800383e:	e03e      	b.n	80038be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e039      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800384c:	4b1e      	ldr	r3, [pc, #120]	; (80038c8 <HAL_RCC_OscConfig+0x618>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f003 0203 	and.w	r2, r3, #3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	429a      	cmp	r2, r3
 800385e:	d12c      	bne.n	80038ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	3b01      	subs	r3, #1
 800386c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d123      	bne.n	80038ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800387e:	429a      	cmp	r2, r3
 8003880:	d11b      	bne.n	80038ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d113      	bne.n	80038ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	3b01      	subs	r3, #1
 80038a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d109      	bne.n	80038ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b0:	085b      	lsrs	r3, r3, #1
 80038b2:	3b01      	subs	r3, #1
 80038b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d001      	beq.n	80038be <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3720      	adds	r7, #32
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000
 80038cc:	019f800c 	.word	0x019f800c
 80038d0:	feeefffc 	.word	0xfeeefffc

080038d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e11e      	b.n	8003b2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038ec:	4b91      	ldr	r3, [pc, #580]	; (8003b34 <HAL_RCC_ClockConfig+0x260>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d910      	bls.n	800391c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b8e      	ldr	r3, [pc, #568]	; (8003b34 <HAL_RCC_ClockConfig+0x260>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 020f 	bic.w	r2, r3, #15
 8003902:	498c      	ldr	r1, [pc, #560]	; (8003b34 <HAL_RCC_ClockConfig+0x260>)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b8a      	ldr	r3, [pc, #552]	; (8003b34 <HAL_RCC_ClockConfig+0x260>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e106      	b.n	8003b2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d073      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d129      	bne.n	8003984 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003930:	4b81      	ldr	r3, [pc, #516]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0f4      	b.n	8003b2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003940:	f000 f99e 	bl	8003c80 <RCC_GetSysClockFreqFromPLLSource>
 8003944:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4a7c      	ldr	r2, [pc, #496]	; (8003b3c <HAL_RCC_ClockConfig+0x268>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d93f      	bls.n	80039ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800394e:	4b7a      	ldr	r3, [pc, #488]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003962:	2b00      	cmp	r3, #0
 8003964:	d033      	beq.n	80039ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800396a:	2b00      	cmp	r3, #0
 800396c:	d12f      	bne.n	80039ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800396e:	4b72      	ldr	r3, [pc, #456]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003976:	4a70      	ldr	r2, [pc, #448]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800397c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800397e:	2380      	movs	r3, #128	; 0x80
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	e024      	b.n	80039ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d107      	bne.n	800399c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800398c:	4b6a      	ldr	r3, [pc, #424]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d109      	bne.n	80039ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0c6      	b.n	8003b2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800399c:	4b66      	ldr	r3, [pc, #408]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0be      	b.n	8003b2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80039ac:	f000 f8ce 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4a61      	ldr	r2, [pc, #388]	; (8003b3c <HAL_RCC_ClockConfig+0x268>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d909      	bls.n	80039ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039ba:	4b5f      	ldr	r3, [pc, #380]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039c2:	4a5d      	ldr	r2, [pc, #372]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 80039c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039ce:	4b5a      	ldr	r3, [pc, #360]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f023 0203 	bic.w	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4957      	ldr	r1, [pc, #348]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e0:	f7fd f9ee 	bl	8000dc0 <HAL_GetTick>
 80039e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	e00a      	b.n	80039fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e8:	f7fd f9ea 	bl	8000dc0 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e095      	b.n	8003b2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	4b4e      	ldr	r3, [pc, #312]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 020c 	and.w	r2, r3, #12
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d1eb      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d023      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a28:	4b43      	ldr	r3, [pc, #268]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a42      	ldr	r2, [pc, #264]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003a2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a32:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a40:	4b3d      	ldr	r3, [pc, #244]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a48:	4a3b      	ldr	r2, [pc, #236]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003a4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a50:	4b39      	ldr	r3, [pc, #228]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4936      	ldr	r1, [pc, #216]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	608b      	str	r3, [r1, #8]
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2b80      	cmp	r3, #128	; 0x80
 8003a68:	d105      	bne.n	8003a76 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a6a:	4b33      	ldr	r3, [pc, #204]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	4a32      	ldr	r2, [pc, #200]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003a70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a74:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a76:	4b2f      	ldr	r3, [pc, #188]	; (8003b34 <HAL_RCC_ClockConfig+0x260>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d21d      	bcs.n	8003ac0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a84:	4b2b      	ldr	r3, [pc, #172]	; (8003b34 <HAL_RCC_ClockConfig+0x260>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f023 020f 	bic.w	r2, r3, #15
 8003a8c:	4929      	ldr	r1, [pc, #164]	; (8003b34 <HAL_RCC_ClockConfig+0x260>)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a94:	f7fd f994 	bl	8000dc0 <HAL_GetTick>
 8003a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a9c:	f7fd f990 	bl	8000dc0 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e03b      	b.n	8003b2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab2:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <HAL_RCC_ClockConfig+0x260>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d1ed      	bne.n	8003a9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003acc:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4917      	ldr	r1, [pc, #92]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aea:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	490f      	ldr	r1, [pc, #60]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003afe:	f000 f825 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8003b02:	4602      	mov	r2, r0
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <HAL_RCC_ClockConfig+0x264>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	490c      	ldr	r1, [pc, #48]	; (8003b40 <HAL_RCC_ClockConfig+0x26c>)
 8003b10:	5ccb      	ldrb	r3, [r1, r3]
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <HAL_RCC_ClockConfig+0x270>)
 8003b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <HAL_RCC_ClockConfig+0x274>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fd f900 	bl	8000d28 <HAL_InitTick>
 8003b28:	4603      	mov	r3, r0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40022000 	.word	0x40022000
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	04c4b400 	.word	0x04c4b400
 8003b40:	0800568c 	.word	0x0800568c
 8003b44:	20000000 	.word	0x20000000
 8003b48:	20000004 	.word	0x20000004

08003b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b52:	4b2c      	ldr	r3, [pc, #176]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d102      	bne.n	8003b64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b5e:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	e047      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b64:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 030c 	and.w	r3, r3, #12
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d102      	bne.n	8003b76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b70:	4b26      	ldr	r3, [pc, #152]	; (8003c0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	e03e      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b76:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
 8003b7e:	2b0c      	cmp	r3, #12
 8003b80:	d136      	bne.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b8c:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	3301      	adds	r3, #1
 8003b98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d10c      	bne.n	8003bba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ba0:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	4a16      	ldr	r2, [pc, #88]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003baa:	68d2      	ldr	r2, [r2, #12]
 8003bac:	0a12      	lsrs	r2, r2, #8
 8003bae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	617b      	str	r3, [r7, #20]
      break;
 8003bb8:	e00c      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bba:	4a13      	ldr	r2, [pc, #76]	; (8003c08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc2:	4a10      	ldr	r2, [pc, #64]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc4:	68d2      	ldr	r2, [r2, #12]
 8003bc6:	0a12      	lsrs	r2, r2, #8
 8003bc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bcc:	fb02 f303 	mul.w	r3, r2, r3
 8003bd0:	617b      	str	r3, [r7, #20]
      break;
 8003bd2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	0e5b      	lsrs	r3, r3, #25
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	3301      	adds	r3, #1
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	e001      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bf4:	693b      	ldr	r3, [r7, #16]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
 8003c08:	00f42400 	.word	0x00f42400
 8003c0c:	016e3600 	.word	0x016e3600

08003c10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000000 	.word	0x20000000

08003c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c2c:	f7ff fff0 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	4904      	ldr	r1, [pc, #16]	; (8003c50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c3e:	5ccb      	ldrb	r3, [r1, r3]
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	0800569c 	.word	0x0800569c

08003c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c58:	f7ff ffda 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	0adb      	lsrs	r3, r3, #11
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	4904      	ldr	r1, [pc, #16]	; (8003c7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c6a:	5ccb      	ldrb	r3, [r1, r3]
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	0800569c 	.word	0x0800569c

08003c80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c86:	4b1e      	ldr	r3, [pc, #120]	; (8003d00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c90:	4b1b      	ldr	r3, [pc, #108]	; (8003d00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d10c      	bne.n	8003cbe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ca4:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cac:	4a14      	ldr	r2, [pc, #80]	; (8003d00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cae:	68d2      	ldr	r2, [r2, #12]
 8003cb0:	0a12      	lsrs	r2, r2, #8
 8003cb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
 8003cba:	617b      	str	r3, [r7, #20]
    break;
 8003cbc:	e00c      	b.n	8003cd8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cbe:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc6:	4a0e      	ldr	r2, [pc, #56]	; (8003d00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cc8:	68d2      	ldr	r2, [r2, #12]
 8003cca:	0a12      	lsrs	r2, r2, #8
 8003ccc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cd0:	fb02 f303 	mul.w	r3, r2, r3
 8003cd4:	617b      	str	r3, [r7, #20]
    break;
 8003cd6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	0e5b      	lsrs	r3, r3, #25
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003cf2:	687b      	ldr	r3, [r7, #4]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	371c      	adds	r7, #28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	40021000 	.word	0x40021000
 8003d04:	016e3600 	.word	0x016e3600
 8003d08:	00f42400 	.word	0x00f42400

08003d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d14:	2300      	movs	r3, #0
 8003d16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d18:	2300      	movs	r3, #0
 8003d1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8098 	beq.w	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d2e:	4b43      	ldr	r3, [pc, #268]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10d      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3a:	4b40      	ldr	r3, [pc, #256]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	4a3f      	ldr	r2, [pc, #252]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d44:	6593      	str	r3, [r2, #88]	; 0x58
 8003d46:	4b3d      	ldr	r3, [pc, #244]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d52:	2301      	movs	r3, #1
 8003d54:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d56:	4b3a      	ldr	r3, [pc, #232]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a39      	ldr	r2, [pc, #228]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d62:	f7fd f82d 	bl	8000dc0 <HAL_GetTick>
 8003d66:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d68:	e009      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6a:	f7fd f829 	bl	8000dc0 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d902      	bls.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	74fb      	strb	r3, [r7, #19]
        break;
 8003d7c:	e005      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d7e:	4b30      	ldr	r3, [pc, #192]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0ef      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d8a:	7cfb      	ldrb	r3, [r7, #19]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d159      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d90:	4b2a      	ldr	r3, [pc, #168]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d01e      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d019      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dac:	4b23      	ldr	r3, [pc, #140]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003db8:	4b20      	ldr	r3, [pc, #128]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc8:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	4a1b      	ldr	r2, [pc, #108]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dd8:	4a18      	ldr	r2, [pc, #96]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d016      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dea:	f7fc ffe9 	bl	8000dc0 <HAL_GetTick>
 8003dee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df0:	e00b      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df2:	f7fc ffe5 	bl	8000dc0 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d902      	bls.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	74fb      	strb	r3, [r7, #19]
            break;
 8003e08:	e006      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0ec      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10b      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e1e:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2c:	4903      	ldr	r1, [pc, #12]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e34:	e008      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e36:	7cfb      	ldrb	r3, [r7, #19]
 8003e38:	74bb      	strb	r3, [r7, #18]
 8003e3a:	e005      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e48:	7c7b      	ldrb	r3, [r7, #17]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d105      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4e:	4ba7      	ldr	r3, [pc, #668]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	4aa6      	ldr	r2, [pc, #664]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e66:	4ba1      	ldr	r3, [pc, #644]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6c:	f023 0203 	bic.w	r2, r3, #3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	499d      	ldr	r1, [pc, #628]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e88:	4b98      	ldr	r3, [pc, #608]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f023 020c 	bic.w	r2, r3, #12
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	4995      	ldr	r1, [pc, #596]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eaa:	4b90      	ldr	r3, [pc, #576]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	498c      	ldr	r1, [pc, #560]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ecc:	4b87      	ldr	r3, [pc, #540]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	4984      	ldr	r1, [pc, #528]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eee:	4b7f      	ldr	r3, [pc, #508]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	497b      	ldr	r1, [pc, #492]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f10:	4b76      	ldr	r3, [pc, #472]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	4973      	ldr	r1, [pc, #460]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f32:	4b6e      	ldr	r3, [pc, #440]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	496a      	ldr	r1, [pc, #424]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f54:	4b65      	ldr	r3, [pc, #404]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	4962      	ldr	r1, [pc, #392]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f76:	4b5d      	ldr	r3, [pc, #372]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	4959      	ldr	r1, [pc, #356]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f98:	4b54      	ldr	r3, [pc, #336]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f9e:	f023 0203 	bic.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	4951      	ldr	r1, [pc, #324]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fba:	4b4c      	ldr	r3, [pc, #304]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	4948      	ldr	r1, [pc, #288]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d015      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fdc:	4b43      	ldr	r3, [pc, #268]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	4940      	ldr	r1, [pc, #256]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ffa:	d105      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ffc:	4b3b      	ldr	r3, [pc, #236]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4a3a      	ldr	r2, [pc, #232]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004006:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004010:	2b00      	cmp	r3, #0
 8004012:	d015      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004014:	4b35      	ldr	r3, [pc, #212]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004022:	4932      	ldr	r1, [pc, #200]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004032:	d105      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004034:	4b2d      	ldr	r3, [pc, #180]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4a2c      	ldr	r2, [pc, #176]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800403a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800403e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d015      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800404c:	4b27      	ldr	r3, [pc, #156]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	4924      	ldr	r1, [pc, #144]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800406a:	d105      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800406c:	4b1f      	ldr	r3, [pc, #124]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4a1e      	ldr	r2, [pc, #120]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004076:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d015      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004084:	4b19      	ldr	r3, [pc, #100]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	4916      	ldr	r1, [pc, #88]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040a2:	d105      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4a10      	ldr	r2, [pc, #64]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d019      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	4908      	ldr	r1, [pc, #32]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040da:	d109      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4a02      	ldr	r2, [pc, #8]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040e6:	60d3      	str	r3, [r2, #12]
 80040e8:	e002      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80040ea:	bf00      	nop
 80040ec:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d015      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040fc:	4b29      	ldr	r3, [pc, #164]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	4926      	ldr	r1, [pc, #152]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800411a:	d105      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800411c:	4b21      	ldr	r3, [pc, #132]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4a20      	ldr	r2, [pc, #128]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004126:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d015      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004134:	4b1b      	ldr	r3, [pc, #108]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004142:	4918      	ldr	r1, [pc, #96]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004152:	d105      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004154:	4b13      	ldr	r3, [pc, #76]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	4a12      	ldr	r2, [pc, #72]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800415a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d015      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800416c:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800416e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004172:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	490a      	ldr	r1, [pc, #40]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800418a:	d105      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800418c:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	4a04      	ldr	r2, [pc, #16]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004196:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004198:	7cbb      	ldrb	r3, [r7, #18]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40021000 	.word	0x40021000

080041a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e049      	b.n	800424e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fc fcfc 	bl	8000bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4619      	mov	r1, r3
 80041e6:	4610      	mov	r0, r2
 80041e8:	f000 f9c4 	bl	8004574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b01      	cmp	r3, #1
 800426a:	d001      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e054      	b.n	800431a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a26      	ldr	r2, [pc, #152]	; (8004328 <HAL_TIM_Base_Start_IT+0xd0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d022      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x80>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429a:	d01d      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x80>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a22      	ldr	r2, [pc, #136]	; (800432c <HAL_TIM_Base_Start_IT+0xd4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d018      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x80>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a21      	ldr	r2, [pc, #132]	; (8004330 <HAL_TIM_Base_Start_IT+0xd8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d013      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x80>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <HAL_TIM_Base_Start_IT+0xdc>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00e      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x80>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1e      	ldr	r2, [pc, #120]	; (8004338 <HAL_TIM_Base_Start_IT+0xe0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d009      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x80>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a1c      	ldr	r2, [pc, #112]	; (800433c <HAL_TIM_Base_Start_IT+0xe4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x80>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a1b      	ldr	r2, [pc, #108]	; (8004340 <HAL_TIM_Base_Start_IT+0xe8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d115      	bne.n	8004304 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	4b19      	ldr	r3, [pc, #100]	; (8004344 <HAL_TIM_Base_Start_IT+0xec>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	d015      	beq.n	8004316 <HAL_TIM_Base_Start_IT+0xbe>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f0:	d011      	beq.n	8004316 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0201 	orr.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004302:	e008      	b.n	8004316 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	e000      	b.n	8004318 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004316:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40012c00 	.word	0x40012c00
 800432c:	40000400 	.word	0x40000400
 8004330:	40000800 	.word	0x40000800
 8004334:	40000c00 	.word	0x40000c00
 8004338:	40013400 	.word	0x40013400
 800433c:	40014000 	.word	0x40014000
 8004340:	40015000 	.word	0x40015000
 8004344:	00010007 	.word	0x00010007

08004348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_TIM_ConfigClockSource+0x1c>
 8004360:	2302      	movs	r3, #2
 8004362:	e0f6      	b.n	8004552 <HAL_TIM_ConfigClockSource+0x20a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004382:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800438e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a6f      	ldr	r2, [pc, #444]	; (800455c <HAL_TIM_ConfigClockSource+0x214>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	f000 80c1 	beq.w	8004526 <HAL_TIM_ConfigClockSource+0x1de>
 80043a4:	4a6d      	ldr	r2, [pc, #436]	; (800455c <HAL_TIM_ConfigClockSource+0x214>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	f200 80c6 	bhi.w	8004538 <HAL_TIM_ConfigClockSource+0x1f0>
 80043ac:	4a6c      	ldr	r2, [pc, #432]	; (8004560 <HAL_TIM_ConfigClockSource+0x218>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	f000 80b9 	beq.w	8004526 <HAL_TIM_ConfigClockSource+0x1de>
 80043b4:	4a6a      	ldr	r2, [pc, #424]	; (8004560 <HAL_TIM_ConfigClockSource+0x218>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	f200 80be 	bhi.w	8004538 <HAL_TIM_ConfigClockSource+0x1f0>
 80043bc:	4a69      	ldr	r2, [pc, #420]	; (8004564 <HAL_TIM_ConfigClockSource+0x21c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	f000 80b1 	beq.w	8004526 <HAL_TIM_ConfigClockSource+0x1de>
 80043c4:	4a67      	ldr	r2, [pc, #412]	; (8004564 <HAL_TIM_ConfigClockSource+0x21c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	f200 80b6 	bhi.w	8004538 <HAL_TIM_ConfigClockSource+0x1f0>
 80043cc:	4a66      	ldr	r2, [pc, #408]	; (8004568 <HAL_TIM_ConfigClockSource+0x220>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	f000 80a9 	beq.w	8004526 <HAL_TIM_ConfigClockSource+0x1de>
 80043d4:	4a64      	ldr	r2, [pc, #400]	; (8004568 <HAL_TIM_ConfigClockSource+0x220>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	f200 80ae 	bhi.w	8004538 <HAL_TIM_ConfigClockSource+0x1f0>
 80043dc:	4a63      	ldr	r2, [pc, #396]	; (800456c <HAL_TIM_ConfigClockSource+0x224>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	f000 80a1 	beq.w	8004526 <HAL_TIM_ConfigClockSource+0x1de>
 80043e4:	4a61      	ldr	r2, [pc, #388]	; (800456c <HAL_TIM_ConfigClockSource+0x224>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	f200 80a6 	bhi.w	8004538 <HAL_TIM_ConfigClockSource+0x1f0>
 80043ec:	4a60      	ldr	r2, [pc, #384]	; (8004570 <HAL_TIM_ConfigClockSource+0x228>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	f000 8099 	beq.w	8004526 <HAL_TIM_ConfigClockSource+0x1de>
 80043f4:	4a5e      	ldr	r2, [pc, #376]	; (8004570 <HAL_TIM_ConfigClockSource+0x228>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	f200 809e 	bhi.w	8004538 <HAL_TIM_ConfigClockSource+0x1f0>
 80043fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004400:	f000 8091 	beq.w	8004526 <HAL_TIM_ConfigClockSource+0x1de>
 8004404:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004408:	f200 8096 	bhi.w	8004538 <HAL_TIM_ConfigClockSource+0x1f0>
 800440c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004410:	f000 8089 	beq.w	8004526 <HAL_TIM_ConfigClockSource+0x1de>
 8004414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004418:	f200 808e 	bhi.w	8004538 <HAL_TIM_ConfigClockSource+0x1f0>
 800441c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004420:	d03e      	beq.n	80044a0 <HAL_TIM_ConfigClockSource+0x158>
 8004422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004426:	f200 8087 	bhi.w	8004538 <HAL_TIM_ConfigClockSource+0x1f0>
 800442a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442e:	f000 8086 	beq.w	800453e <HAL_TIM_ConfigClockSource+0x1f6>
 8004432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004436:	d87f      	bhi.n	8004538 <HAL_TIM_ConfigClockSource+0x1f0>
 8004438:	2b70      	cmp	r3, #112	; 0x70
 800443a:	d01a      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x12a>
 800443c:	2b70      	cmp	r3, #112	; 0x70
 800443e:	d87b      	bhi.n	8004538 <HAL_TIM_ConfigClockSource+0x1f0>
 8004440:	2b60      	cmp	r3, #96	; 0x60
 8004442:	d050      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0x19e>
 8004444:	2b60      	cmp	r3, #96	; 0x60
 8004446:	d877      	bhi.n	8004538 <HAL_TIM_ConfigClockSource+0x1f0>
 8004448:	2b50      	cmp	r3, #80	; 0x50
 800444a:	d03c      	beq.n	80044c6 <HAL_TIM_ConfigClockSource+0x17e>
 800444c:	2b50      	cmp	r3, #80	; 0x50
 800444e:	d873      	bhi.n	8004538 <HAL_TIM_ConfigClockSource+0x1f0>
 8004450:	2b40      	cmp	r3, #64	; 0x40
 8004452:	d058      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0x1be>
 8004454:	2b40      	cmp	r3, #64	; 0x40
 8004456:	d86f      	bhi.n	8004538 <HAL_TIM_ConfigClockSource+0x1f0>
 8004458:	2b30      	cmp	r3, #48	; 0x30
 800445a:	d064      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0x1de>
 800445c:	2b30      	cmp	r3, #48	; 0x30
 800445e:	d86b      	bhi.n	8004538 <HAL_TIM_ConfigClockSource+0x1f0>
 8004460:	2b20      	cmp	r3, #32
 8004462:	d060      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0x1de>
 8004464:	2b20      	cmp	r3, #32
 8004466:	d867      	bhi.n	8004538 <HAL_TIM_ConfigClockSource+0x1f0>
 8004468:	2b00      	cmp	r3, #0
 800446a:	d05c      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0x1de>
 800446c:	2b10      	cmp	r3, #16
 800446e:	d05a      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0x1de>
 8004470:	e062      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004482:	f000 f9a7 	bl	80047d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	609a      	str	r2, [r3, #8]
      break;
 800449e:	e04f      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044b0:	f000 f990 	bl	80047d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689a      	ldr	r2, [r3, #8]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044c2:	609a      	str	r2, [r3, #8]
      break;
 80044c4:	e03c      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d2:	461a      	mov	r2, r3
 80044d4:	f000 f902 	bl	80046dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2150      	movs	r1, #80	; 0x50
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 f95b 	bl	800479a <TIM_ITRx_SetConfig>
      break;
 80044e4:	e02c      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044f2:	461a      	mov	r2, r3
 80044f4:	f000 f921 	bl	800473a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2160      	movs	r1, #96	; 0x60
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 f94b 	bl	800479a <TIM_ITRx_SetConfig>
      break;
 8004504:	e01c      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004512:	461a      	mov	r2, r3
 8004514:	f000 f8e2 	bl	80046dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2140      	movs	r1, #64	; 0x40
 800451e:	4618      	mov	r0, r3
 8004520:	f000 f93b 	bl	800479a <TIM_ITRx_SetConfig>
      break;
 8004524:	e00c      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f000 f932 	bl	800479a <TIM_ITRx_SetConfig>
      break;
 8004536:	e003      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	73fb      	strb	r3, [r7, #15]
      break;
 800453c:	e000      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800453e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004550:	7bfb      	ldrb	r3, [r7, #15]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	00100070 	.word	0x00100070
 8004560:	00100060 	.word	0x00100060
 8004564:	00100050 	.word	0x00100050
 8004568:	00100040 	.word	0x00100040
 800456c:	00100030 	.word	0x00100030
 8004570:	00100020 	.word	0x00100020

08004574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a4c      	ldr	r2, [pc, #304]	; (80046b8 <TIM_Base_SetConfig+0x144>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d017      	beq.n	80045bc <TIM_Base_SetConfig+0x48>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004592:	d013      	beq.n	80045bc <TIM_Base_SetConfig+0x48>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a49      	ldr	r2, [pc, #292]	; (80046bc <TIM_Base_SetConfig+0x148>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00f      	beq.n	80045bc <TIM_Base_SetConfig+0x48>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a48      	ldr	r2, [pc, #288]	; (80046c0 <TIM_Base_SetConfig+0x14c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00b      	beq.n	80045bc <TIM_Base_SetConfig+0x48>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a47      	ldr	r2, [pc, #284]	; (80046c4 <TIM_Base_SetConfig+0x150>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d007      	beq.n	80045bc <TIM_Base_SetConfig+0x48>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a46      	ldr	r2, [pc, #280]	; (80046c8 <TIM_Base_SetConfig+0x154>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d003      	beq.n	80045bc <TIM_Base_SetConfig+0x48>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a45      	ldr	r2, [pc, #276]	; (80046cc <TIM_Base_SetConfig+0x158>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d108      	bne.n	80045ce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a39      	ldr	r2, [pc, #228]	; (80046b8 <TIM_Base_SetConfig+0x144>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d023      	beq.n	800461e <TIM_Base_SetConfig+0xaa>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045dc:	d01f      	beq.n	800461e <TIM_Base_SetConfig+0xaa>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a36      	ldr	r2, [pc, #216]	; (80046bc <TIM_Base_SetConfig+0x148>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01b      	beq.n	800461e <TIM_Base_SetConfig+0xaa>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a35      	ldr	r2, [pc, #212]	; (80046c0 <TIM_Base_SetConfig+0x14c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d017      	beq.n	800461e <TIM_Base_SetConfig+0xaa>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a34      	ldr	r2, [pc, #208]	; (80046c4 <TIM_Base_SetConfig+0x150>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <TIM_Base_SetConfig+0xaa>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a33      	ldr	r2, [pc, #204]	; (80046c8 <TIM_Base_SetConfig+0x154>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00f      	beq.n	800461e <TIM_Base_SetConfig+0xaa>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a33      	ldr	r2, [pc, #204]	; (80046d0 <TIM_Base_SetConfig+0x15c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00b      	beq.n	800461e <TIM_Base_SetConfig+0xaa>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a32      	ldr	r2, [pc, #200]	; (80046d4 <TIM_Base_SetConfig+0x160>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d007      	beq.n	800461e <TIM_Base_SetConfig+0xaa>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a31      	ldr	r2, [pc, #196]	; (80046d8 <TIM_Base_SetConfig+0x164>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d003      	beq.n	800461e <TIM_Base_SetConfig+0xaa>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a2c      	ldr	r2, [pc, #176]	; (80046cc <TIM_Base_SetConfig+0x158>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d108      	bne.n	8004630 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a18      	ldr	r2, [pc, #96]	; (80046b8 <TIM_Base_SetConfig+0x144>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d013      	beq.n	8004684 <TIM_Base_SetConfig+0x110>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a1a      	ldr	r2, [pc, #104]	; (80046c8 <TIM_Base_SetConfig+0x154>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00f      	beq.n	8004684 <TIM_Base_SetConfig+0x110>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a1a      	ldr	r2, [pc, #104]	; (80046d0 <TIM_Base_SetConfig+0x15c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00b      	beq.n	8004684 <TIM_Base_SetConfig+0x110>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a19      	ldr	r2, [pc, #100]	; (80046d4 <TIM_Base_SetConfig+0x160>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d007      	beq.n	8004684 <TIM_Base_SetConfig+0x110>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <TIM_Base_SetConfig+0x164>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <TIM_Base_SetConfig+0x110>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a13      	ldr	r2, [pc, #76]	; (80046cc <TIM_Base_SetConfig+0x158>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d103      	bne.n	800468c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b01      	cmp	r3, #1
 800469c:	d105      	bne.n	80046aa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f023 0201 	bic.w	r2, r3, #1
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	611a      	str	r2, [r3, #16]
  }
}
 80046aa:	bf00      	nop
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800
 80046c4:	40000c00 	.word	0x40000c00
 80046c8:	40013400 	.word	0x40013400
 80046cc:	40015000 	.word	0x40015000
 80046d0:	40014000 	.word	0x40014000
 80046d4:	40014400 	.word	0x40014400
 80046d8:	40014800 	.word	0x40014800

080046dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	f023 0201 	bic.w	r2, r3, #1
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f023 030a 	bic.w	r3, r3, #10
 8004718:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	621a      	str	r2, [r3, #32]
}
 800472e:	bf00      	nop
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800473a:	b480      	push	{r7}
 800473c:	b087      	sub	sp, #28
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f023 0210 	bic.w	r2, r3, #16
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004764:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	031b      	lsls	r3, r3, #12
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004776:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	621a      	str	r2, [r3, #32]
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80047b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f043 0307 	orr.w	r3, r3, #7
 80047c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	609a      	str	r2, [r3, #8]
}
 80047c8:	bf00      	nop
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	021a      	lsls	r2, r3, #8
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4313      	orrs	r3, r2
 8004800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	609a      	str	r2, [r3, #8]
}
 8004808:	bf00      	nop
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004828:	2302      	movs	r3, #2
 800482a:	e074      	b.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a34      	ldr	r2, [pc, #208]	; (8004924 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d009      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a33      	ldr	r2, [pc, #204]	; (8004928 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d004      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a31      	ldr	r2, [pc, #196]	; (800492c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d108      	bne.n	800487c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004870:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a21      	ldr	r2, [pc, #132]	; (8004924 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d022      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ac:	d01d      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a1f      	ldr	r2, [pc, #124]	; (8004930 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d018      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1d      	ldr	r2, [pc, #116]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d013      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1c      	ldr	r2, [pc, #112]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d00e      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a15      	ldr	r2, [pc, #84]	; (8004928 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d009      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a18      	ldr	r2, [pc, #96]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d004      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a11      	ldr	r2, [pc, #68]	; (800492c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d10c      	bne.n	8004904 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40012c00 	.word	0x40012c00
 8004928:	40013400 	.word	0x40013400
 800492c:	40015000 	.word	0x40015000
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800
 8004938:	40000c00 	.word	0x40000c00
 800493c:	40014000 	.word	0x40014000

08004940 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e042      	b.n	80049d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	2b00      	cmp	r3, #0
 800495a:	d106      	bne.n	800496a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7fc f8d9 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2224      	movs	r2, #36	; 0x24
 800496e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0201 	bic.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fb24 	bl	8004fd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f825 	bl	80049e0 <UART_SetConfig>
 8004996:	4603      	mov	r3, r0
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e01b      	b.n	80049d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fba3 	bl	800511c <UART_CheckIdleState>
 80049d6:	4603      	mov	r3, r0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e4:	b08c      	sub	sp, #48	; 0x30
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4baa      	ldr	r3, [pc, #680]	; (8004cb8 <UART_SetConfig+0x2d8>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a9f      	ldr	r2, [pc, #636]	; (8004cbc <UART_SetConfig+0x2dc>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d004      	beq.n	8004a4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004a56:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	6812      	ldr	r2, [r2, #0]
 8004a5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a60:	430b      	orrs	r3, r1
 8004a62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	f023 010f 	bic.w	r1, r3, #15
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a90      	ldr	r2, [pc, #576]	; (8004cc0 <UART_SetConfig+0x2e0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d125      	bne.n	8004ad0 <UART_SetConfig+0xf0>
 8004a84:	4b8f      	ldr	r3, [pc, #572]	; (8004cc4 <UART_SetConfig+0x2e4>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d81a      	bhi.n	8004ac8 <UART_SetConfig+0xe8>
 8004a92:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <UART_SetConfig+0xb8>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004aa9 	.word	0x08004aa9
 8004a9c:	08004ab9 	.word	0x08004ab9
 8004aa0:	08004ab1 	.word	0x08004ab1
 8004aa4:	08004ac1 	.word	0x08004ac1
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aae:	e116      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ab6:	e112      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004ab8:	2304      	movs	r3, #4
 8004aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004abe:	e10e      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004ac0:	2308      	movs	r3, #8
 8004ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ac6:	e10a      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004ac8:	2310      	movs	r3, #16
 8004aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ace:	e106      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a7c      	ldr	r2, [pc, #496]	; (8004cc8 <UART_SetConfig+0x2e8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d138      	bne.n	8004b4c <UART_SetConfig+0x16c>
 8004ada:	4b7a      	ldr	r3, [pc, #488]	; (8004cc4 <UART_SetConfig+0x2e4>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae0:	f003 030c 	and.w	r3, r3, #12
 8004ae4:	2b0c      	cmp	r3, #12
 8004ae6:	d82d      	bhi.n	8004b44 <UART_SetConfig+0x164>
 8004ae8:	a201      	add	r2, pc, #4	; (adr r2, 8004af0 <UART_SetConfig+0x110>)
 8004aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aee:	bf00      	nop
 8004af0:	08004b25 	.word	0x08004b25
 8004af4:	08004b45 	.word	0x08004b45
 8004af8:	08004b45 	.word	0x08004b45
 8004afc:	08004b45 	.word	0x08004b45
 8004b00:	08004b35 	.word	0x08004b35
 8004b04:	08004b45 	.word	0x08004b45
 8004b08:	08004b45 	.word	0x08004b45
 8004b0c:	08004b45 	.word	0x08004b45
 8004b10:	08004b2d 	.word	0x08004b2d
 8004b14:	08004b45 	.word	0x08004b45
 8004b18:	08004b45 	.word	0x08004b45
 8004b1c:	08004b45 	.word	0x08004b45
 8004b20:	08004b3d 	.word	0x08004b3d
 8004b24:	2300      	movs	r3, #0
 8004b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b2a:	e0d8      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b32:	e0d4      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b34:	2304      	movs	r3, #4
 8004b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3a:	e0d0      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b3c:	2308      	movs	r3, #8
 8004b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b42:	e0cc      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b44:	2310      	movs	r3, #16
 8004b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4a:	e0c8      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a5e      	ldr	r2, [pc, #376]	; (8004ccc <UART_SetConfig+0x2ec>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d125      	bne.n	8004ba2 <UART_SetConfig+0x1c2>
 8004b56:	4b5b      	ldr	r3, [pc, #364]	; (8004cc4 <UART_SetConfig+0x2e4>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b60:	2b30      	cmp	r3, #48	; 0x30
 8004b62:	d016      	beq.n	8004b92 <UART_SetConfig+0x1b2>
 8004b64:	2b30      	cmp	r3, #48	; 0x30
 8004b66:	d818      	bhi.n	8004b9a <UART_SetConfig+0x1ba>
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d00a      	beq.n	8004b82 <UART_SetConfig+0x1a2>
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d814      	bhi.n	8004b9a <UART_SetConfig+0x1ba>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <UART_SetConfig+0x19a>
 8004b74:	2b10      	cmp	r3, #16
 8004b76:	d008      	beq.n	8004b8a <UART_SetConfig+0x1aa>
 8004b78:	e00f      	b.n	8004b9a <UART_SetConfig+0x1ba>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b80:	e0ad      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b82:	2302      	movs	r3, #2
 8004b84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b88:	e0a9      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b8a:	2304      	movs	r3, #4
 8004b8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b90:	e0a5      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b92:	2308      	movs	r3, #8
 8004b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b98:	e0a1      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004b9a:	2310      	movs	r3, #16
 8004b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba0:	e09d      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a4a      	ldr	r2, [pc, #296]	; (8004cd0 <UART_SetConfig+0x2f0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d125      	bne.n	8004bf8 <UART_SetConfig+0x218>
 8004bac:	4b45      	ldr	r3, [pc, #276]	; (8004cc4 <UART_SetConfig+0x2e4>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bb6:	2bc0      	cmp	r3, #192	; 0xc0
 8004bb8:	d016      	beq.n	8004be8 <UART_SetConfig+0x208>
 8004bba:	2bc0      	cmp	r3, #192	; 0xc0
 8004bbc:	d818      	bhi.n	8004bf0 <UART_SetConfig+0x210>
 8004bbe:	2b80      	cmp	r3, #128	; 0x80
 8004bc0:	d00a      	beq.n	8004bd8 <UART_SetConfig+0x1f8>
 8004bc2:	2b80      	cmp	r3, #128	; 0x80
 8004bc4:	d814      	bhi.n	8004bf0 <UART_SetConfig+0x210>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <UART_SetConfig+0x1f0>
 8004bca:	2b40      	cmp	r3, #64	; 0x40
 8004bcc:	d008      	beq.n	8004be0 <UART_SetConfig+0x200>
 8004bce:	e00f      	b.n	8004bf0 <UART_SetConfig+0x210>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bd6:	e082      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bde:	e07e      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004be0:	2304      	movs	r3, #4
 8004be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004be6:	e07a      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004be8:	2308      	movs	r3, #8
 8004bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bee:	e076      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bf6:	e072      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a35      	ldr	r2, [pc, #212]	; (8004cd4 <UART_SetConfig+0x2f4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d12a      	bne.n	8004c58 <UART_SetConfig+0x278>
 8004c02:	4b30      	ldr	r3, [pc, #192]	; (8004cc4 <UART_SetConfig+0x2e4>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c10:	d01a      	beq.n	8004c48 <UART_SetConfig+0x268>
 8004c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c16:	d81b      	bhi.n	8004c50 <UART_SetConfig+0x270>
 8004c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c1c:	d00c      	beq.n	8004c38 <UART_SetConfig+0x258>
 8004c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c22:	d815      	bhi.n	8004c50 <UART_SetConfig+0x270>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <UART_SetConfig+0x250>
 8004c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c2c:	d008      	beq.n	8004c40 <UART_SetConfig+0x260>
 8004c2e:	e00f      	b.n	8004c50 <UART_SetConfig+0x270>
 8004c30:	2300      	movs	r3, #0
 8004c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c36:	e052      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c3e:	e04e      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004c40:	2304      	movs	r3, #4
 8004c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c46:	e04a      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004c48:	2308      	movs	r3, #8
 8004c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c4e:	e046      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004c50:	2310      	movs	r3, #16
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c56:	e042      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <UART_SetConfig+0x2dc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d13a      	bne.n	8004cd8 <UART_SetConfig+0x2f8>
 8004c62:	4b18      	ldr	r3, [pc, #96]	; (8004cc4 <UART_SetConfig+0x2e4>)
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c70:	d01a      	beq.n	8004ca8 <UART_SetConfig+0x2c8>
 8004c72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c76:	d81b      	bhi.n	8004cb0 <UART_SetConfig+0x2d0>
 8004c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7c:	d00c      	beq.n	8004c98 <UART_SetConfig+0x2b8>
 8004c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c82:	d815      	bhi.n	8004cb0 <UART_SetConfig+0x2d0>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <UART_SetConfig+0x2b0>
 8004c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8c:	d008      	beq.n	8004ca0 <UART_SetConfig+0x2c0>
 8004c8e:	e00f      	b.n	8004cb0 <UART_SetConfig+0x2d0>
 8004c90:	2300      	movs	r3, #0
 8004c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c96:	e022      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c9e:	e01e      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004ca0:	2304      	movs	r3, #4
 8004ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca6:	e01a      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004ca8:	2308      	movs	r3, #8
 8004caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cae:	e016      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004cb0:	2310      	movs	r3, #16
 8004cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cb6:	e012      	b.n	8004cde <UART_SetConfig+0x2fe>
 8004cb8:	cfff69f3 	.word	0xcfff69f3
 8004cbc:	40008000 	.word	0x40008000
 8004cc0:	40013800 	.word	0x40013800
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	40004400 	.word	0x40004400
 8004ccc:	40004800 	.word	0x40004800
 8004cd0:	40004c00 	.word	0x40004c00
 8004cd4:	40005000 	.word	0x40005000
 8004cd8:	2310      	movs	r3, #16
 8004cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4aae      	ldr	r2, [pc, #696]	; (8004f9c <UART_SetConfig+0x5bc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	f040 8097 	bne.w	8004e18 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d823      	bhi.n	8004d3a <UART_SetConfig+0x35a>
 8004cf2:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <UART_SetConfig+0x318>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	08004d1d 	.word	0x08004d1d
 8004cfc:	08004d3b 	.word	0x08004d3b
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d3b 	.word	0x08004d3b
 8004d08:	08004d2b 	.word	0x08004d2b
 8004d0c:	08004d3b 	.word	0x08004d3b
 8004d10:	08004d3b 	.word	0x08004d3b
 8004d14:	08004d3b 	.word	0x08004d3b
 8004d18:	08004d33 	.word	0x08004d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d1c:	f7fe ff84 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8004d20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d22:	e010      	b.n	8004d46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d24:	4b9e      	ldr	r3, [pc, #632]	; (8004fa0 <UART_SetConfig+0x5c0>)
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d28:	e00d      	b.n	8004d46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d2a:	f7fe ff0f 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8004d2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d30:	e009      	b.n	8004d46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d38:	e005      	b.n	8004d46 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8130 	beq.w	8004fae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	4a94      	ldr	r2, [pc, #592]	; (8004fa4 <UART_SetConfig+0x5c4>)
 8004d54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	4413      	add	r3, r2
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d305      	bcc.n	8004d7e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d903      	bls.n	8004d86 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d84:	e113      	b.n	8004fae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	2200      	movs	r2, #0
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	60fa      	str	r2, [r7, #12]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	4a84      	ldr	r2, [pc, #528]	; (8004fa4 <UART_SetConfig+0x5c4>)
 8004d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	603b      	str	r3, [r7, #0]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004da4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004da8:	f7fb fa36 	bl	8000218 <__aeabi_uldivmod>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4610      	mov	r0, r2
 8004db2:	4619      	mov	r1, r3
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	020b      	lsls	r3, r1, #8
 8004dbe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dc2:	0202      	lsls	r2, r0, #8
 8004dc4:	6979      	ldr	r1, [r7, #20]
 8004dc6:	6849      	ldr	r1, [r1, #4]
 8004dc8:	0849      	lsrs	r1, r1, #1
 8004dca:	2000      	movs	r0, #0
 8004dcc:	460c      	mov	r4, r1
 8004dce:	4605      	mov	r5, r0
 8004dd0:	eb12 0804 	adds.w	r8, r2, r4
 8004dd4:	eb43 0905 	adc.w	r9, r3, r5
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	469a      	mov	sl, r3
 8004de0:	4693      	mov	fp, r2
 8004de2:	4652      	mov	r2, sl
 8004de4:	465b      	mov	r3, fp
 8004de6:	4640      	mov	r0, r8
 8004de8:	4649      	mov	r1, r9
 8004dea:	f7fb fa15 	bl	8000218 <__aeabi_uldivmod>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4613      	mov	r3, r2
 8004df4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dfc:	d308      	bcc.n	8004e10 <UART_SetConfig+0x430>
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e04:	d204      	bcs.n	8004e10 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6a3a      	ldr	r2, [r7, #32]
 8004e0c:	60da      	str	r2, [r3, #12]
 8004e0e:	e0ce      	b.n	8004fae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e16:	e0ca      	b.n	8004fae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e20:	d166      	bne.n	8004ef0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004e22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e26:	2b08      	cmp	r3, #8
 8004e28:	d827      	bhi.n	8004e7a <UART_SetConfig+0x49a>
 8004e2a:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <UART_SetConfig+0x450>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004e55 	.word	0x08004e55
 8004e34:	08004e5d 	.word	0x08004e5d
 8004e38:	08004e65 	.word	0x08004e65
 8004e3c:	08004e7b 	.word	0x08004e7b
 8004e40:	08004e6b 	.word	0x08004e6b
 8004e44:	08004e7b 	.word	0x08004e7b
 8004e48:	08004e7b 	.word	0x08004e7b
 8004e4c:	08004e7b 	.word	0x08004e7b
 8004e50:	08004e73 	.word	0x08004e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e54:	f7fe fee8 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8004e58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e5a:	e014      	b.n	8004e86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e5c:	f7fe fefa 	bl	8003c54 <HAL_RCC_GetPCLK2Freq>
 8004e60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e62:	e010      	b.n	8004e86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e64:	4b4e      	ldr	r3, [pc, #312]	; (8004fa0 <UART_SetConfig+0x5c0>)
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e68:	e00d      	b.n	8004e86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e6a:	f7fe fe6f 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8004e6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e70:	e009      	b.n	8004e86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e78:	e005      	b.n	8004e86 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 8090 	beq.w	8004fae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	4a44      	ldr	r2, [pc, #272]	; (8004fa4 <UART_SetConfig+0x5c4>)
 8004e94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ea0:	005a      	lsls	r2, r3, #1
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	085b      	lsrs	r3, r3, #1
 8004ea8:	441a      	add	r2, r3
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	2b0f      	cmp	r3, #15
 8004eb8:	d916      	bls.n	8004ee8 <UART_SetConfig+0x508>
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec0:	d212      	bcs.n	8004ee8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	f023 030f 	bic.w	r3, r3, #15
 8004eca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	8bfb      	ldrh	r3, [r7, #30]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	8bfa      	ldrh	r2, [r7, #30]
 8004ee4:	60da      	str	r2, [r3, #12]
 8004ee6:	e062      	b.n	8004fae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004eee:	e05e      	b.n	8004fae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ef0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d828      	bhi.n	8004f4a <UART_SetConfig+0x56a>
 8004ef8:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <UART_SetConfig+0x520>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f25 	.word	0x08004f25
 8004f04:	08004f2d 	.word	0x08004f2d
 8004f08:	08004f35 	.word	0x08004f35
 8004f0c:	08004f4b 	.word	0x08004f4b
 8004f10:	08004f3b 	.word	0x08004f3b
 8004f14:	08004f4b 	.word	0x08004f4b
 8004f18:	08004f4b 	.word	0x08004f4b
 8004f1c:	08004f4b 	.word	0x08004f4b
 8004f20:	08004f43 	.word	0x08004f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f24:	f7fe fe80 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8004f28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f2a:	e014      	b.n	8004f56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f2c:	f7fe fe92 	bl	8003c54 <HAL_RCC_GetPCLK2Freq>
 8004f30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f32:	e010      	b.n	8004f56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f34:	4b1a      	ldr	r3, [pc, #104]	; (8004fa0 <UART_SetConfig+0x5c0>)
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f38:	e00d      	b.n	8004f56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f3a:	f7fe fe07 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8004f3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f40:	e009      	b.n	8004f56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f48:	e005      	b.n	8004f56 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f54:	bf00      	nop
    }

    if (pclk != 0U)
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d028      	beq.n	8004fae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	4a10      	ldr	r2, [pc, #64]	; (8004fa4 <UART_SetConfig+0x5c4>)
 8004f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f66:	461a      	mov	r2, r3
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	085b      	lsrs	r3, r3, #1
 8004f74:	441a      	add	r2, r3
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	2b0f      	cmp	r3, #15
 8004f84:	d910      	bls.n	8004fa8 <UART_SetConfig+0x5c8>
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f8c:	d20c      	bcs.n	8004fa8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60da      	str	r2, [r3, #12]
 8004f98:	e009      	b.n	8004fae <UART_SetConfig+0x5ce>
 8004f9a:	bf00      	nop
 8004f9c:	40008000 	.word	0x40008000
 8004fa0:	00f42400 	.word	0x00f42400
 8004fa4:	080056a4 	.word	0x080056a4
      }
      else
      {
        ret = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004fca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3730      	adds	r7, #48	; 0x30
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004fd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	f003 0320 	and.w	r3, r3, #32
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01a      	beq.n	80050ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050d6:	d10a      	bne.n	80050ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	605a      	str	r2, [r3, #4]
  }
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b098      	sub	sp, #96	; 0x60
 8005120:	af02      	add	r7, sp, #8
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800512c:	f7fb fe48 	bl	8000dc0 <HAL_GetTick>
 8005130:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b08      	cmp	r3, #8
 800513e:	d12f      	bne.n	80051a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005140:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005148:	2200      	movs	r2, #0
 800514a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f88e 	bl	8005270 <UART_WaitOnFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d022      	beq.n	80051a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516e:	653b      	str	r3, [r7, #80]	; 0x50
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005178:	647b      	str	r3, [r7, #68]	; 0x44
 800517a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800517e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e6      	bne.n	800515a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2220      	movs	r2, #32
 8005190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e063      	b.n	8005268 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d149      	bne.n	8005242 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051b6:	2200      	movs	r2, #0
 80051b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f857 	bl	8005270 <UART_WaitOnFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d03c      	beq.n	8005242 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	623b      	str	r3, [r7, #32]
   return(result);
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e6:	633b      	str	r3, [r7, #48]	; 0x30
 80051e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e6      	bne.n	80051c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3308      	adds	r3, #8
 8005200:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	60fb      	str	r3, [r7, #12]
   return(result);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	64bb      	str	r3, [r7, #72]	; 0x48
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3308      	adds	r3, #8
 8005218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800521a:	61fa      	str	r2, [r7, #28]
 800521c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	69b9      	ldr	r1, [r7, #24]
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	617b      	str	r3, [r7, #20]
   return(result);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e5      	bne.n	80051fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e012      	b.n	8005268 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2220      	movs	r2, #32
 800524e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3758      	adds	r7, #88	; 0x58
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	603b      	str	r3, [r7, #0]
 800527c:	4613      	mov	r3, r2
 800527e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005280:	e04f      	b.n	8005322 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005288:	d04b      	beq.n	8005322 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528a:	f7fb fd99 	bl	8000dc0 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	429a      	cmp	r2, r3
 8005298:	d302      	bcc.n	80052a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e04e      	b.n	8005342 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d037      	beq.n	8005322 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b80      	cmp	r3, #128	; 0x80
 80052b6:	d034      	beq.n	8005322 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b40      	cmp	r3, #64	; 0x40
 80052bc:	d031      	beq.n	8005322 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d110      	bne.n	80052ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2208      	movs	r2, #8
 80052d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f838 	bl	800534a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2208      	movs	r2, #8
 80052de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e029      	b.n	8005342 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052fc:	d111      	bne.n	8005322 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005306:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f81e 	bl	800534a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2220      	movs	r2, #32
 8005312:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e00f      	b.n	8005342 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69da      	ldr	r2, [r3, #28]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4013      	ands	r3, r2
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	429a      	cmp	r2, r3
 8005330:	bf0c      	ite	eq
 8005332:	2301      	moveq	r3, #1
 8005334:	2300      	movne	r3, #0
 8005336:	b2db      	uxtb	r3, r3
 8005338:	461a      	mov	r2, r3
 800533a:	79fb      	ldrb	r3, [r7, #7]
 800533c:	429a      	cmp	r2, r3
 800533e:	d0a0      	beq.n	8005282 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800534a:	b480      	push	{r7}
 800534c:	b095      	sub	sp, #84	; 0x54
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535a:	e853 3f00 	ldrex	r3, [r3]
 800535e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005370:	643b      	str	r3, [r7, #64]	; 0x40
 8005372:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005374:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005376:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005378:	e841 2300 	strex	r3, r2, [r1]
 800537c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e6      	bne.n	8005352 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3308      	adds	r3, #8
 800538a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	e853 3f00 	ldrex	r3, [r3]
 8005392:	61fb      	str	r3, [r7, #28]
   return(result);
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800539a:	f023 0301 	bic.w	r3, r3, #1
 800539e:	64bb      	str	r3, [r7, #72]	; 0x48
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3308      	adds	r3, #8
 80053a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e3      	bne.n	8005384 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d118      	bne.n	80053f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f023 0310 	bic.w	r3, r3, #16
 80053d8:	647b      	str	r3, [r7, #68]	; 0x44
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	6979      	ldr	r1, [r7, #20]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	613b      	str	r3, [r7, #16]
   return(result);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e6      	bne.n	80053c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	675a      	str	r2, [r3, #116]	; 0x74
}
 800540a:	bf00      	nop
 800540c:	3754      	adds	r7, #84	; 0x54
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005416:	b480      	push	{r7}
 8005418:	b085      	sub	sp, #20
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_UARTEx_DisableFifoMode+0x16>
 8005428:	2302      	movs	r3, #2
 800542a:	e027      	b.n	800547c <HAL_UARTEx_DisableFifoMode+0x66>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2224      	movs	r2, #36	; 0x24
 8005438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0201 	bic.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800545a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800549c:	2302      	movs	r3, #2
 800549e:	e02d      	b.n	80054fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2224      	movs	r2, #36	; 0x24
 80054ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0201 	bic.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f84f 	bl	8005580 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005518:	2302      	movs	r3, #2
 800551a:	e02d      	b.n	8005578 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2224      	movs	r2, #36	; 0x24
 8005528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0201 	bic.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f811 	bl	8005580 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800558c:	2b00      	cmp	r3, #0
 800558e:	d108      	bne.n	80055a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80055a0:	e031      	b.n	8005606 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80055a2:	2308      	movs	r3, #8
 80055a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055a6:	2308      	movs	r3, #8
 80055a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	0e5b      	lsrs	r3, r3, #25
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	0f5b      	lsrs	r3, r3, #29
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055ca:	7bbb      	ldrb	r3, [r7, #14]
 80055cc:	7b3a      	ldrb	r2, [r7, #12]
 80055ce:	4911      	ldr	r1, [pc, #68]	; (8005614 <UARTEx_SetNbDataToProcess+0x94>)
 80055d0:	5c8a      	ldrb	r2, [r1, r2]
 80055d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80055d6:	7b3a      	ldrb	r2, [r7, #12]
 80055d8:	490f      	ldr	r1, [pc, #60]	; (8005618 <UARTEx_SetNbDataToProcess+0x98>)
 80055da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	7b7a      	ldrb	r2, [r7, #13]
 80055ec:	4909      	ldr	r1, [pc, #36]	; (8005614 <UARTEx_SetNbDataToProcess+0x94>)
 80055ee:	5c8a      	ldrb	r2, [r1, r2]
 80055f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80055f4:	7b7a      	ldrb	r2, [r7, #13]
 80055f6:	4908      	ldr	r1, [pc, #32]	; (8005618 <UARTEx_SetNbDataToProcess+0x98>)
 80055f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80055fe:	b29a      	uxth	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005606:	bf00      	nop
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	080056bc 	.word	0x080056bc
 8005618:	080056c4 	.word	0x080056c4

0800561c <memset>:
 800561c:	4402      	add	r2, r0
 800561e:	4603      	mov	r3, r0
 8005620:	4293      	cmp	r3, r2
 8005622:	d100      	bne.n	8005626 <memset+0xa>
 8005624:	4770      	bx	lr
 8005626:	f803 1b01 	strb.w	r1, [r3], #1
 800562a:	e7f9      	b.n	8005620 <memset+0x4>

0800562c <__libc_init_array>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	4d0d      	ldr	r5, [pc, #52]	; (8005664 <__libc_init_array+0x38>)
 8005630:	4c0d      	ldr	r4, [pc, #52]	; (8005668 <__libc_init_array+0x3c>)
 8005632:	1b64      	subs	r4, r4, r5
 8005634:	10a4      	asrs	r4, r4, #2
 8005636:	2600      	movs	r6, #0
 8005638:	42a6      	cmp	r6, r4
 800563a:	d109      	bne.n	8005650 <__libc_init_array+0x24>
 800563c:	4d0b      	ldr	r5, [pc, #44]	; (800566c <__libc_init_array+0x40>)
 800563e:	4c0c      	ldr	r4, [pc, #48]	; (8005670 <__libc_init_array+0x44>)
 8005640:	f000 f818 	bl	8005674 <_init>
 8005644:	1b64      	subs	r4, r4, r5
 8005646:	10a4      	asrs	r4, r4, #2
 8005648:	2600      	movs	r6, #0
 800564a:	42a6      	cmp	r6, r4
 800564c:	d105      	bne.n	800565a <__libc_init_array+0x2e>
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	f855 3b04 	ldr.w	r3, [r5], #4
 8005654:	4798      	blx	r3
 8005656:	3601      	adds	r6, #1
 8005658:	e7ee      	b.n	8005638 <__libc_init_array+0xc>
 800565a:	f855 3b04 	ldr.w	r3, [r5], #4
 800565e:	4798      	blx	r3
 8005660:	3601      	adds	r6, #1
 8005662:	e7f2      	b.n	800564a <__libc_init_array+0x1e>
 8005664:	080056d4 	.word	0x080056d4
 8005668:	080056d4 	.word	0x080056d4
 800566c:	080056d4 	.word	0x080056d4
 8005670:	080056d8 	.word	0x080056d8

08005674 <_init>:
 8005674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005676:	bf00      	nop
 8005678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567a:	bc08      	pop	{r3}
 800567c:	469e      	mov	lr, r3
 800567e:	4770      	bx	lr

08005680 <_fini>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	bf00      	nop
 8005684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005686:	bc08      	pop	{r3}
 8005688:	469e      	mov	lr, r3
 800568a:	4770      	bx	lr
