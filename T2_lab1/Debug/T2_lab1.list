
T2_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e8c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007064  08007064  00017064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070a4  080070a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080070a4  080070a4  000170a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070ac  080070ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070ac  080070ac  000170ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070b0  080070b0  000170b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080070b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000010  080070c0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  080070c0  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016c55  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a36  00000000  00000000  00036cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  00039710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000100c  00000000  00000000  0003ab98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003bba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017678  00000000  00000000  000635de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ea27  00000000  00000000  0007ac56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ad0  00000000  00000000  00189680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0018f150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800704c 	.word	0x0800704c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	0800704c 	.word	0x0800704c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b98e 	b.w	8000ce8 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f824 	bl	8000a20 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_d2ulz>:
 80009e4:	b5d0      	push	{r4, r6, r7, lr}
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <__aeabi_d2ulz+0x34>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	4606      	mov	r6, r0
 80009ec:	460f      	mov	r7, r1
 80009ee:	f7ff fdcf 	bl	8000590 <__aeabi_dmul>
 80009f2:	f000 f97b 	bl	8000cec <__aeabi_d2uiz>
 80009f6:	4604      	mov	r4, r0
 80009f8:	f7ff fd50 	bl	800049c <__aeabi_ui2d>
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <__aeabi_d2ulz+0x38>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	f7ff fdc6 	bl	8000590 <__aeabi_dmul>
 8000a04:	4602      	mov	r2, r0
 8000a06:	460b      	mov	r3, r1
 8000a08:	4630      	mov	r0, r6
 8000a0a:	4639      	mov	r1, r7
 8000a0c:	f7ff fc08 	bl	8000220 <__aeabi_dsub>
 8000a10:	f000 f96c 	bl	8000cec <__aeabi_d2uiz>
 8000a14:	4621      	mov	r1, r4
 8000a16:	bdd0      	pop	{r4, r6, r7, pc}
 8000a18:	3df00000 	.word	0x3df00000
 8000a1c:	41f00000 	.word	0x41f00000

08000a20 <__udivmoddi4>:
 8000a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a24:	9e08      	ldr	r6, [sp, #32]
 8000a26:	460d      	mov	r5, r1
 8000a28:	4604      	mov	r4, r0
 8000a2a:	460f      	mov	r7, r1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d14a      	bne.n	8000ac6 <__udivmoddi4+0xa6>
 8000a30:	428a      	cmp	r2, r1
 8000a32:	4694      	mov	ip, r2
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0xe2>
 8000a36:	fab2 f382 	clz	r3, r2
 8000a3a:	b143      	cbz	r3, 8000a4e <__udivmoddi4+0x2e>
 8000a3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a40:	f1c3 0220 	rsb	r2, r3, #32
 8000a44:	409f      	lsls	r7, r3
 8000a46:	fa20 f202 	lsr.w	r2, r0, r2
 8000a4a:	4317      	orrs	r7, r2
 8000a4c:	409c      	lsls	r4, r3
 8000a4e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a52:	fa1f f58c 	uxth.w	r5, ip
 8000a56:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a5a:	0c22      	lsrs	r2, r4, #16
 8000a5c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a60:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a64:	fb01 f005 	mul.w	r0, r1, r5
 8000a68:	4290      	cmp	r0, r2
 8000a6a:	d90a      	bls.n	8000a82 <__udivmoddi4+0x62>
 8000a6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000a70:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a74:	f080 811c 	bcs.w	8000cb0 <__udivmoddi4+0x290>
 8000a78:	4290      	cmp	r0, r2
 8000a7a:	f240 8119 	bls.w	8000cb0 <__udivmoddi4+0x290>
 8000a7e:	3902      	subs	r1, #2
 8000a80:	4462      	add	r2, ip
 8000a82:	1a12      	subs	r2, r2, r0
 8000a84:	b2a4      	uxth	r4, r4
 8000a86:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a8e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a92:	fb00 f505 	mul.w	r5, r0, r5
 8000a96:	42a5      	cmp	r5, r4
 8000a98:	d90a      	bls.n	8000ab0 <__udivmoddi4+0x90>
 8000a9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000a9e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa2:	f080 8107 	bcs.w	8000cb4 <__udivmoddi4+0x294>
 8000aa6:	42a5      	cmp	r5, r4
 8000aa8:	f240 8104 	bls.w	8000cb4 <__udivmoddi4+0x294>
 8000aac:	4464      	add	r4, ip
 8000aae:	3802      	subs	r0, #2
 8000ab0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab4:	1b64      	subs	r4, r4, r5
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	b11e      	cbz	r6, 8000ac2 <__udivmoddi4+0xa2>
 8000aba:	40dc      	lsrs	r4, r3
 8000abc:	2300      	movs	r3, #0
 8000abe:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0xbc>
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	f000 80ed 	beq.w	8000caa <__udivmoddi4+0x28a>
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	e9c6 0500 	strd	r0, r5, [r6]
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000adc:	fab3 f183 	clz	r1, r3
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	d149      	bne.n	8000b78 <__udivmoddi4+0x158>
 8000ae4:	42ab      	cmp	r3, r5
 8000ae6:	d302      	bcc.n	8000aee <__udivmoddi4+0xce>
 8000ae8:	4282      	cmp	r2, r0
 8000aea:	f200 80f8 	bhi.w	8000cde <__udivmoddi4+0x2be>
 8000aee:	1a84      	subs	r4, r0, r2
 8000af0:	eb65 0203 	sbc.w	r2, r5, r3
 8000af4:	2001      	movs	r0, #1
 8000af6:	4617      	mov	r7, r2
 8000af8:	2e00      	cmp	r6, #0
 8000afa:	d0e2      	beq.n	8000ac2 <__udivmoddi4+0xa2>
 8000afc:	e9c6 4700 	strd	r4, r7, [r6]
 8000b00:	e7df      	b.n	8000ac2 <__udivmoddi4+0xa2>
 8000b02:	b902      	cbnz	r2, 8000b06 <__udivmoddi4+0xe6>
 8000b04:	deff      	udf	#255	; 0xff
 8000b06:	fab2 f382 	clz	r3, r2
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f040 8090 	bne.w	8000c30 <__udivmoddi4+0x210>
 8000b10:	1a8a      	subs	r2, r1, r2
 8000b12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b16:	fa1f fe8c 	uxth.w	lr, ip
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b20:	fb07 2015 	mls	r0, r7, r5, r2
 8000b24:	0c22      	lsrs	r2, r4, #16
 8000b26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b2a:	fb0e f005 	mul.w	r0, lr, r5
 8000b2e:	4290      	cmp	r0, r2
 8000b30:	d908      	bls.n	8000b44 <__udivmoddi4+0x124>
 8000b32:	eb1c 0202 	adds.w	r2, ip, r2
 8000b36:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b3a:	d202      	bcs.n	8000b42 <__udivmoddi4+0x122>
 8000b3c:	4290      	cmp	r0, r2
 8000b3e:	f200 80cb 	bhi.w	8000cd8 <__udivmoddi4+0x2b8>
 8000b42:	4645      	mov	r5, r8
 8000b44:	1a12      	subs	r2, r2, r0
 8000b46:	b2a4      	uxth	r4, r4
 8000b48:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b4c:	fb07 2210 	mls	r2, r7, r0, r2
 8000b50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b54:	fb0e fe00 	mul.w	lr, lr, r0
 8000b58:	45a6      	cmp	lr, r4
 8000b5a:	d908      	bls.n	8000b6e <__udivmoddi4+0x14e>
 8000b5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b64:	d202      	bcs.n	8000b6c <__udivmoddi4+0x14c>
 8000b66:	45a6      	cmp	lr, r4
 8000b68:	f200 80bb 	bhi.w	8000ce2 <__udivmoddi4+0x2c2>
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	eba4 040e 	sub.w	r4, r4, lr
 8000b72:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b76:	e79f      	b.n	8000ab8 <__udivmoddi4+0x98>
 8000b78:	f1c1 0720 	rsb	r7, r1, #32
 8000b7c:	408b      	lsls	r3, r1
 8000b7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b86:	fa05 f401 	lsl.w	r4, r5, r1
 8000b8a:	fa20 f307 	lsr.w	r3, r0, r7
 8000b8e:	40fd      	lsrs	r5, r7
 8000b90:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b94:	4323      	orrs	r3, r4
 8000b96:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	fb09 5518 	mls	r5, r9, r8, r5
 8000ba2:	0c1c      	lsrs	r4, r3, #16
 8000ba4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ba8:	fb08 f50e 	mul.w	r5, r8, lr
 8000bac:	42a5      	cmp	r5, r4
 8000bae:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb2:	fa00 f001 	lsl.w	r0, r0, r1
 8000bb6:	d90b      	bls.n	8000bd0 <__udivmoddi4+0x1b0>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc0:	f080 8088 	bcs.w	8000cd4 <__udivmoddi4+0x2b4>
 8000bc4:	42a5      	cmp	r5, r4
 8000bc6:	f240 8085 	bls.w	8000cd4 <__udivmoddi4+0x2b4>
 8000bca:	f1a8 0802 	sub.w	r8, r8, #2
 8000bce:	4464      	add	r4, ip
 8000bd0:	1b64      	subs	r4, r4, r5
 8000bd2:	b29d      	uxth	r5, r3
 8000bd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000bdc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000be0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x1da>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bf0:	d26c      	bcs.n	8000ccc <__udivmoddi4+0x2ac>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	d96a      	bls.n	8000ccc <__udivmoddi4+0x2ac>
 8000bf6:	3b02      	subs	r3, #2
 8000bf8:	4464      	add	r4, ip
 8000bfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bfe:	fba3 9502 	umull	r9, r5, r3, r2
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	42ac      	cmp	r4, r5
 8000c08:	46c8      	mov	r8, r9
 8000c0a:	46ae      	mov	lr, r5
 8000c0c:	d356      	bcc.n	8000cbc <__udivmoddi4+0x29c>
 8000c0e:	d053      	beq.n	8000cb8 <__udivmoddi4+0x298>
 8000c10:	b156      	cbz	r6, 8000c28 <__udivmoddi4+0x208>
 8000c12:	ebb0 0208 	subs.w	r2, r0, r8
 8000c16:	eb64 040e 	sbc.w	r4, r4, lr
 8000c1a:	fa04 f707 	lsl.w	r7, r4, r7
 8000c1e:	40ca      	lsrs	r2, r1
 8000c20:	40cc      	lsrs	r4, r1
 8000c22:	4317      	orrs	r7, r2
 8000c24:	e9c6 7400 	strd	r7, r4, [r6]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c30:	f1c3 0120 	rsb	r1, r3, #32
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	fa20 f201 	lsr.w	r2, r0, r1
 8000c3c:	fa25 f101 	lsr.w	r1, r5, r1
 8000c40:	409d      	lsls	r5, r3
 8000c42:	432a      	orrs	r2, r5
 8000c44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c48:	fa1f fe8c 	uxth.w	lr, ip
 8000c4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c50:	fb07 1510 	mls	r5, r7, r0, r1
 8000c54:	0c11      	lsrs	r1, r2, #16
 8000c56:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c5a:	fb00 f50e 	mul.w	r5, r0, lr
 8000c5e:	428d      	cmp	r5, r1
 8000c60:	fa04 f403 	lsl.w	r4, r4, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x258>
 8000c66:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c6e:	d22f      	bcs.n	8000cd0 <__udivmoddi4+0x2b0>
 8000c70:	428d      	cmp	r5, r1
 8000c72:	d92d      	bls.n	8000cd0 <__udivmoddi4+0x2b0>
 8000c74:	3802      	subs	r0, #2
 8000c76:	4461      	add	r1, ip
 8000c78:	1b49      	subs	r1, r1, r5
 8000c7a:	b292      	uxth	r2, r2
 8000c7c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c80:	fb07 1115 	mls	r1, r7, r5, r1
 8000c84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c88:	fb05 f10e 	mul.w	r1, r5, lr
 8000c8c:	4291      	cmp	r1, r2
 8000c8e:	d908      	bls.n	8000ca2 <__udivmoddi4+0x282>
 8000c90:	eb1c 0202 	adds.w	r2, ip, r2
 8000c94:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c98:	d216      	bcs.n	8000cc8 <__udivmoddi4+0x2a8>
 8000c9a:	4291      	cmp	r1, r2
 8000c9c:	d914      	bls.n	8000cc8 <__udivmoddi4+0x2a8>
 8000c9e:	3d02      	subs	r5, #2
 8000ca0:	4462      	add	r2, ip
 8000ca2:	1a52      	subs	r2, r2, r1
 8000ca4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ca8:	e738      	b.n	8000b1c <__udivmoddi4+0xfc>
 8000caa:	4631      	mov	r1, r6
 8000cac:	4630      	mov	r0, r6
 8000cae:	e708      	b.n	8000ac2 <__udivmoddi4+0xa2>
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e6e6      	b.n	8000a82 <__udivmoddi4+0x62>
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	e6fb      	b.n	8000ab0 <__udivmoddi4+0x90>
 8000cb8:	4548      	cmp	r0, r9
 8000cba:	d2a9      	bcs.n	8000c10 <__udivmoddi4+0x1f0>
 8000cbc:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	e7a3      	b.n	8000c10 <__udivmoddi4+0x1f0>
 8000cc8:	4645      	mov	r5, r8
 8000cca:	e7ea      	b.n	8000ca2 <__udivmoddi4+0x282>
 8000ccc:	462b      	mov	r3, r5
 8000cce:	e794      	b.n	8000bfa <__udivmoddi4+0x1da>
 8000cd0:	4640      	mov	r0, r8
 8000cd2:	e7d1      	b.n	8000c78 <__udivmoddi4+0x258>
 8000cd4:	46d0      	mov	r8, sl
 8000cd6:	e77b      	b.n	8000bd0 <__udivmoddi4+0x1b0>
 8000cd8:	3d02      	subs	r5, #2
 8000cda:	4462      	add	r2, ip
 8000cdc:	e732      	b.n	8000b44 <__udivmoddi4+0x124>
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e70a      	b.n	8000af8 <__udivmoddi4+0xd8>
 8000ce2:	4464      	add	r4, ip
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	e742      	b.n	8000b6e <__udivmoddi4+0x14e>

08000ce8 <__aeabi_idiv0>:
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <__aeabi_d2uiz>:
 8000cec:	004a      	lsls	r2, r1, #1
 8000cee:	d211      	bcs.n	8000d14 <__aeabi_d2uiz+0x28>
 8000cf0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cf4:	d211      	bcs.n	8000d1a <__aeabi_d2uiz+0x2e>
 8000cf6:	d50d      	bpl.n	8000d14 <__aeabi_d2uiz+0x28>
 8000cf8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d00:	d40e      	bmi.n	8000d20 <__aeabi_d2uiz+0x34>
 8000d02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000d12:	4770      	bx	lr
 8000d14:	f04f 0000 	mov.w	r0, #0
 8000d18:	4770      	bx	lr
 8000d1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d1e:	d102      	bne.n	8000d26 <__aeabi_d2uiz+0x3a>
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	4770      	bx	lr
 8000d26:	f04f 0000 	mov.w	r0, #0
 8000d2a:	4770      	bx	lr

08000d2c <micro.1>:
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  void micro()
   {
 8000d2c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000d30:	b089      	sub	sp, #36	; 0x24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	f8c7 c01c 	str.w	ip, [r7, #28]
  	  real_time = __HAL_TIM_GET_COUNTER(&htim2) + (lower * 4294967295);
 8000d38:	491c      	ldr	r1, [pc, #112]	; (8000dac <micro.1+0x80>)
 8000d3a:	6809      	ldr	r1, [r1, #0]
 8000d3c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8000d3e:	2000      	movs	r0, #0
 8000d40:	6139      	str	r1, [r7, #16]
 8000d42:	6178      	str	r0, [r7, #20]
 8000d44:	491a      	ldr	r1, [pc, #104]	; (8000db0 <micro.1+0x84>)
 8000d46:	e9d1 4500 	ldrd	r4, r5, [r1]
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	4629      	mov	r1, r5
 8000d4e:	f04f 0800 	mov.w	r8, #0
 8000d52:	f04f 0900 	mov.w	r9, #0
 8000d56:	ea4f 79c1 	mov.w	r9, r1, lsl #31
 8000d5a:	ea49 0950 	orr.w	r9, r9, r0, lsr #1
 8000d5e:	ea4f 78c0 	mov.w	r8, r0, lsl #31
 8000d62:	4640      	mov	r0, r8
 8000d64:	4649      	mov	r1, r9
 8000d66:	1b02      	subs	r2, r0, r4
 8000d68:	eb61 0305 	sbc.w	r3, r1, r5
 8000d6c:	1891      	adds	r1, r2, r2
 8000d6e:	6039      	str	r1, [r7, #0]
 8000d70:	415b      	adcs	r3, r3
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d78:	eb12 0a04 	adds.w	sl, r2, r4
 8000d7c:	eb43 0b05 	adc.w	fp, r3, r5
 8000d80:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000d84:	460b      	mov	r3, r1
 8000d86:	eb13 030a 	adds.w	r3, r3, sl
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	eb43 030b 	adc.w	r3, r3, fp
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <micro.1+0x88>)
 8000d96:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000d9a:	e9c3 1200 	strd	r1, r2, [r3]

   }
 8000d9e:	bf00      	nop
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	2000018c 	.word	0x2000018c
 8000db0:	20000480 	.word	0x20000480
 8000db4:	20000488 	.word	0x20000488

08000db8 <main>:
{
 8000db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000dbc:	b08e      	sub	sp, #56	; 0x38
 8000dbe:	af02      	add	r7, sp, #8
int main(void)
 8000dc0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dc4:	623b      	str	r3, [r7, #32]
  HAL_Init();
 8000dc6:	f000 fe44 	bl	8001a52 <HAL_Init>
  SystemClock_Config();
 8000dca:	f000 f9c5 	bl	8001158 <SystemClock_Config>
  MX_GPIO_Init();
 8000dce:	f000 fbc5 	bl	800155c <MX_GPIO_Init>
  MX_DMA_Init();
 8000dd2:	f000 fb99 	bl	8001508 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000dd6:	f000 faa3 	bl	8001320 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000dda:	f000 faeb 	bl	80013b4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000dde:	f000 fa07 	bl	80011f0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000de2:	f000 fb35 	bl	8001450 <MX_TIM3_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000de6:	48be      	ldr	r0, [pc, #760]	; (80010e0 <main+0x328>)
 8000de8:	f004 f954 	bl	8005094 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8000dec:	48bd      	ldr	r0, [pc, #756]	; (80010e4 <main+0x32c>)
 8000dee:	f004 f8e1 	bl	8004fb4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000df2:	2100      	movs	r1, #0
 8000df4:	48bb      	ldr	r0, [pc, #748]	; (80010e4 <main+0x32c>)
 8000df6:	f004 fa1d 	bl	8005234 <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000dfa:	217f      	movs	r1, #127	; 0x7f
 8000dfc:	48ba      	ldr	r0, [pc, #744]	; (80010e8 <main+0x330>)
 8000dfe:	f002 f9a7 	bl	8003150 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
 8000e02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e06:	49b9      	ldr	r1, [pc, #740]	; (80010ec <main+0x334>)
 8000e08:	48b7      	ldr	r0, [pc, #732]	; (80010e8 <main+0x330>)
 8000e0a:	f001 fa93 	bl	8002334 <HAL_ADC_Start_DMA>
  {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  while (1)
  {
	  micro();
 8000e0e:	f107 0320 	add.w	r3, r7, #32
 8000e12:	469c      	mov	ip, r3
 8000e14:	f7ff ff8a 	bl	8000d2c <micro.1>
  	  if (real_time - timestamp < 1000)
 8000e18:	4bb5      	ldr	r3, [pc, #724]	; (80010f0 <main+0x338>)
 8000e1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e1e:	4bb5      	ldr	r3, [pc, #724]	; (80010f4 <main+0x33c>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	1a84      	subs	r4, r0, r2
 8000e26:	eb61 0503 	sbc.w	r5, r1, r3
 8000e2a:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8000e2e:	f175 0300 	sbcs.w	r3, r5, #0
 8000e32:	f0c0 8171 	bcc.w	8001118 <main+0x360>
  	  {
  		  continue;
  	  }
	  sensor1 = 0;
 8000e36:	49b0      	ldr	r1, [pc, #704]	; (80010f8 <main+0x340>)
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e9c1 2300 	strd	r2, r3, [r1]
	  for(int i=0;i <= 299 ;i += 3)
 8000e44:	2300      	movs	r3, #0
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e48:	e018      	b.n	8000e7c <main+0xc4>
	  {
		  sensor1 += ADC_RawRead[i];
 8000e4a:	4aa8      	ldr	r2, [pc, #672]	; (80010ec <main+0x334>)
 8000e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	2200      	movs	r2, #0
 8000e56:	4698      	mov	r8, r3
 8000e58:	4691      	mov	r9, r2
 8000e5a:	4ba7      	ldr	r3, [pc, #668]	; (80010f8 <main+0x340>)
 8000e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e60:	eb18 0102 	adds.w	r1, r8, r2
 8000e64:	6139      	str	r1, [r7, #16]
 8000e66:	eb49 0303 	adc.w	r3, r9, r3
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	4ba2      	ldr	r3, [pc, #648]	; (80010f8 <main+0x340>)
 8000e6e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000e72:	e9c3 1200 	strd	r1, r2, [r3]
	  for(int i=0;i <= 299 ;i += 3)
 8000e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e78:	3303      	adds	r3, #3
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000e82:	dbe2      	blt.n	8000e4a <main+0x92>
	  }

	  real_sensor1 = sensor1/102.3;
 8000e84:	4b9c      	ldr	r3, [pc, #624]	; (80010f8 <main+0x340>)
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f7ff fb49 	bl	8000524 <__aeabi_ul2d>
 8000e92:	a391      	add	r3, pc, #580	; (adr r3, 80010d8 <main+0x320>)
 8000e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e98:	f7ff fca4 	bl	80007e4 <__aeabi_ddiv>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f7ff fd9e 	bl	80009e4 <__aeabi_d2ulz>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4993      	ldr	r1, [pc, #588]	; (80010fc <main+0x344>)
 8000eae:	e9c1 2300 	strd	r2, r3, [r1]

	  sensor2 = 0;
 8000eb2:	4993      	ldr	r1, [pc, #588]	; (8001100 <main+0x348>)
 8000eb4:	f04f 0200 	mov.w	r2, #0
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	e9c1 2300 	strd	r2, r3, [r1]
	  for(int i2=1;i2 <= 299 ;i2 += 3)
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ec4:	e018      	b.n	8000ef8 <main+0x140>
	  {
	  	  sensor2 += ADC_RawRead[i2];
 8000ec6:	4a89      	ldr	r2, [pc, #548]	; (80010ec <main+0x334>)
 8000ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	4693      	mov	fp, r2
 8000ed6:	4b8a      	ldr	r3, [pc, #552]	; (8001100 <main+0x348>)
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	eb1a 0102 	adds.w	r1, sl, r2
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	eb4b 0303 	adc.w	r3, fp, r3
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	4b85      	ldr	r3, [pc, #532]	; (8001100 <main+0x348>)
 8000eea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000eee:	e9c3 1200 	strd	r1, r2, [r3]
	  for(int i2=1;i2 <= 299 ;i2 += 3)
 8000ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef4:	3303      	adds	r3, #3
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000efe:	dbe2      	blt.n	8000ec6 <main+0x10e>
	  }
	  real_sensor2 = sensor2/102.3;
 8000f00:	4b7f      	ldr	r3, [pc, #508]	; (8001100 <main+0x348>)
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	4610      	mov	r0, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f7ff fb0b 	bl	8000524 <__aeabi_ul2d>
 8000f0e:	a372      	add	r3, pc, #456	; (adr r3, 80010d8 <main+0x320>)
 8000f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f14:	f7ff fc66 	bl	80007e4 <__aeabi_ddiv>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f7ff fd60 	bl	80009e4 <__aeabi_d2ulz>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4976      	ldr	r1, [pc, #472]	; (8001104 <main+0x34c>)
 8000f2a:	e9c1 2300 	strd	r2, r3, [r1]
	  sensor3 = 0;
 8000f2e:	4976      	ldr	r1, [pc, #472]	; (8001108 <main+0x350>)
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	f04f 0300 	mov.w	r3, #0
 8000f38:	e9c1 2300 	strd	r2, r3, [r1]
	  for(int i3=2;i3 <= 299 ;i3 += 3)
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f40:	e019      	b.n	8000f76 <main+0x1be>
	  {
	  	  	sensor3 += ADC_RawRead[i3];
 8000f42:	4a6a      	ldr	r2, [pc, #424]	; (80010ec <main+0x334>)
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	61fa      	str	r2, [r7, #28]
 8000f52:	4b6d      	ldr	r3, [pc, #436]	; (8001108 <main+0x350>)
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	69b9      	ldr	r1, [r7, #24]
 8000f5a:	1889      	adds	r1, r1, r2
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	69f9      	ldr	r1, [r7, #28]
 8000f60:	eb41 0303 	adc.w	r3, r1, r3
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	4b68      	ldr	r3, [pc, #416]	; (8001108 <main+0x350>)
 8000f68:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000f6c:	e9c3 1200 	strd	r1, r2, [r3]
	  for(int i3=2;i3 <= 299 ;i3 += 3)
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	3303      	adds	r3, #3
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f7c:	dbe1      	blt.n	8000f42 <main+0x18a>
	  }

	  real_sensor3 = sensor3/102.3;
 8000f7e:	4b62      	ldr	r3, [pc, #392]	; (8001108 <main+0x350>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f7ff facc 	bl	8000524 <__aeabi_ul2d>
 8000f8c:	a352      	add	r3, pc, #328	; (adr r3, 80010d8 <main+0x320>)
 8000f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f92:	f7ff fc27 	bl	80007e4 <__aeabi_ddiv>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f7ff fd21 	bl	80009e4 <__aeabi_d2ulz>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4959      	ldr	r1, [pc, #356]	; (800110c <main+0x354>)
 8000fa8:	e9c1 2300 	strd	r2, r3, [r1]
	  if (real_sensor1 >= 0 && real_sensor1 <= 255)
 8000fac:	4b53      	ldr	r3, [pc, #332]	; (80010fc <main+0x344>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000fb6:	f173 0300 	sbcs.w	r3, r3, #0
 8000fba:	d208      	bcs.n	8000fce <main+0x216>
	  {
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 8000fbc:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <main+0x32c>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fc4:	6353      	str	r3, [r2, #52]	; 0x34
		  check_case = 1;
 8000fc6:	4a52      	ldr	r2, [pc, #328]	; (8001110 <main+0x358>)
 8000fc8:	2301      	movs	r3, #1
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	e075      	b.n	80010ba <main+0x302>
	  }
	  else if (real_sensor1 > 255 && real_sensor1 <= 511)
 8000fce:	4b4b      	ldr	r3, [pc, #300]	; (80010fc <main+0x344>)
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000fd8:	f173 0300 	sbcs.w	r3, r3, #0
 8000fdc:	d325      	bcc.n	800102a <main+0x272>
 8000fde:	4b47      	ldr	r3, [pc, #284]	; (80010fc <main+0x344>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000fe8:	f173 0300 	sbcs.w	r3, r3, #0
 8000fec:	d21d      	bcs.n	800102a <main+0x272>
	  {
		  map_value = map(real_sensor2,0,1023,500,2500);
 8000fee:	4b45      	ldr	r3, [pc, #276]	; (8001104 <main+0x34c>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	f107 0220 	add.w	r2, r7, #32
 8000ffa:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	4694      	mov	ip, r2
 8001002:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001006:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800100a:	2100      	movs	r1, #0
 800100c:	f000 f886 	bl	800111c <map.0>
 8001010:	4602      	mov	r2, r0
 8001012:	4b40      	ldr	r3, [pc, #256]	; (8001114 <main+0x35c>)
 8001014:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, map_value);
 8001016:	4b3f      	ldr	r3, [pc, #252]	; (8001114 <main+0x35c>)
 8001018:	6819      	ldr	r1, [r3, #0]
 800101a:	4b32      	ldr	r3, [pc, #200]	; (80010e4 <main+0x32c>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	460b      	mov	r3, r1
 8001020:	6353      	str	r3, [r2, #52]	; 0x34
		  check_case = 2;
 8001022:	4a3b      	ldr	r2, [pc, #236]	; (8001110 <main+0x358>)
 8001024:	2302      	movs	r3, #2
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	e047      	b.n	80010ba <main+0x302>
	  }
	  else if (real_sensor1 > 511 && real_sensor1 <= 766)
 800102a:	4b34      	ldr	r3, [pc, #208]	; (80010fc <main+0x344>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001034:	f173 0300 	sbcs.w	r3, r3, #0
 8001038:	d326      	bcc.n	8001088 <main+0x2d0>
 800103a:	4b30      	ldr	r3, [pc, #192]	; (80010fc <main+0x344>)
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	f240 21ff 	movw	r1, #767	; 0x2ff
 8001044:	428a      	cmp	r2, r1
 8001046:	f173 0300 	sbcs.w	r3, r3, #0
 800104a:	d21d      	bcs.n	8001088 <main+0x2d0>
	  {
		  map_value = map(real_sensor3,0,1023,500,2500);
 800104c:	4b2f      	ldr	r3, [pc, #188]	; (800110c <main+0x354>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	4610      	mov	r0, r2
 8001054:	f107 0220 	add.w	r2, r7, #32
 8001058:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4694      	mov	ip, r2
 8001060:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001064:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001068:	2100      	movs	r1, #0
 800106a:	f000 f857 	bl	800111c <map.0>
 800106e:	4602      	mov	r2, r0
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <main+0x35c>)
 8001072:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, map_value);
 8001074:	4b27      	ldr	r3, [pc, #156]	; (8001114 <main+0x35c>)
 8001076:	6819      	ldr	r1, [r3, #0]
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <main+0x32c>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	460b      	mov	r3, r1
 800107e:	6353      	str	r3, [r2, #52]	; 0x34
		  check_case =3;
 8001080:	4a23      	ldr	r2, [pc, #140]	; (8001110 <main+0x358>)
 8001082:	2303      	movs	r3, #3
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e018      	b.n	80010ba <main+0x302>
	  }
	  else if (real_sensor1 > 766 && real_sensor1 <= 1023)
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <main+0x344>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f240 21ff 	movw	r1, #767	; 0x2ff
 8001092:	428a      	cmp	r2, r1
 8001094:	f173 0300 	sbcs.w	r3, r3, #0
 8001098:	d30f      	bcc.n	80010ba <main+0x302>
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <main+0x344>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80010a4:	f173 0300 	sbcs.w	r3, r3, #0
 80010a8:	d207      	bcs.n	80010ba <main+0x302>
	  	  {
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2500);
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <main+0x32c>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80010b2:	6353      	str	r3, [r2, #52]	; 0x34
		  check_case = 4;
 80010b4:	4a16      	ldr	r2, [pc, #88]	; (8001110 <main+0x358>)
 80010b6:	2304      	movs	r3, #4
 80010b8:	6013      	str	r3, [r2, #0]
	  	  }
	  micro();
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	469c      	mov	ip, r3
 80010c0:	f7ff fe34 	bl	8000d2c <micro.1>
	  timestamp = real_time;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <main+0x338>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	490a      	ldr	r1, [pc, #40]	; (80010f4 <main+0x33c>)
 80010cc:	e9c1 2300 	strd	r2, r3, [r1]
 80010d0:	e69d      	b.n	8000e0e <main+0x56>
 80010d2:	bf00      	nop
 80010d4:	f3af 8000 	nop.w
 80010d8:	33333333 	.word	0x33333333
 80010dc:	40599333 	.word	0x40599333
 80010e0:	2000018c 	.word	0x2000018c
 80010e4:	200001d8 	.word	0x200001d8
 80010e8:	2000002c 	.word	0x2000002c
 80010ec:	20000224 	.word	0x20000224
 80010f0:	20000488 	.word	0x20000488
 80010f4:	200004c0 	.word	0x200004c0
 80010f8:	20000490 	.word	0x20000490
 80010fc:	20000498 	.word	0x20000498
 8001100:	200004a0 	.word	0x200004a0
 8001104:	200004a8 	.word	0x200004a8
 8001108:	200004b0 	.word	0x200004b0
 800110c:	200004b8 	.word	0x200004b8
 8001110:	200004c8 	.word	0x200004c8
 8001114:	200004cc 	.word	0x200004cc
  		  continue;
 8001118:	bf00      	nop
	  micro();
 800111a:	e678      	b.n	8000e0e <main+0x56>

0800111c <map.0>:
  {
 800111c:	b480      	push	{r7}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6178      	str	r0, [r7, #20]
 8001124:	6139      	str	r1, [r7, #16]
 8001126:	60fa      	str	r2, [r7, #12]
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	f8c7 c004 	str.w	ip, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	6a39      	ldr	r1, [r7, #32]
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	1a8a      	subs	r2, r1, r2
 800113a:	fb03 f202 	mul.w	r2, r3, r2
 800113e:	68f9      	ldr	r1, [r7, #12]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1acb      	subs	r3, r1, r3
 8001144:	fb92 f2f3 	sdiv	r2, r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4413      	add	r3, r2
  }
 800114c:	4618      	mov	r0, r3
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b094      	sub	sp, #80	; 0x50
 800115c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 0318 	add.w	r3, r7, #24
 8001162:	2238      	movs	r2, #56	; 0x38
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f005 ff44 	bl	8006ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800117a:	2000      	movs	r0, #0
 800117c:	f002 fe92 	bl	8003ea4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001180:	2302      	movs	r3, #2
 8001182:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800118a:	2340      	movs	r3, #64	; 0x40
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118e:	2302      	movs	r3, #2
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001192:	2302      	movs	r3, #2
 8001194:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001196:	2304      	movs	r3, #4
 8001198:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800119a:	2355      	movs	r3, #85	; 0x55
 800119c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800119e:	2302      	movs	r3, #2
 80011a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011aa:	f107 0318 	add.w	r3, r7, #24
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 ff2c 	bl	800400c <HAL_RCC_OscConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011ba:	f000 fa3d 	bl	8001638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011be:	230f      	movs	r3, #15
 80011c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c2:	2303      	movs	r3, #3
 80011c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2104      	movs	r1, #4
 80011d6:	4618      	mov	r0, r3
 80011d8:	f003 fa2a 	bl	8004630 <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011e2:	f000 fa29 	bl	8001638 <Error_Handler>
  }
}
 80011e6:	bf00      	nop
 80011e8:	3750      	adds	r7, #80	; 0x50
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	; 0x30
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2220      	movs	r2, #32
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f005 fef3 	bl	8006ff4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800120e:	4b40      	ldr	r3, [pc, #256]	; (8001310 <MX_ADC1_Init+0x120>)
 8001210:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001214:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001216:	4b3e      	ldr	r3, [pc, #248]	; (8001310 <MX_ADC1_Init+0x120>)
 8001218:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800121c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800121e:	4b3c      	ldr	r3, [pc, #240]	; (8001310 <MX_ADC1_Init+0x120>)
 8001220:	2208      	movs	r2, #8
 8001222:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001224:	4b3a      	ldr	r3, [pc, #232]	; (8001310 <MX_ADC1_Init+0x120>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800122a:	4b39      	ldr	r3, [pc, #228]	; (8001310 <MX_ADC1_Init+0x120>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001230:	4b37      	ldr	r3, [pc, #220]	; (8001310 <MX_ADC1_Init+0x120>)
 8001232:	2201      	movs	r2, #1
 8001234:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001236:	4b36      	ldr	r3, [pc, #216]	; (8001310 <MX_ADC1_Init+0x120>)
 8001238:	2204      	movs	r2, #4
 800123a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800123c:	4b34      	ldr	r3, [pc, #208]	; (8001310 <MX_ADC1_Init+0x120>)
 800123e:	2200      	movs	r2, #0
 8001240:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001242:	4b33      	ldr	r3, [pc, #204]	; (8001310 <MX_ADC1_Init+0x120>)
 8001244:	2201      	movs	r2, #1
 8001246:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001248:	4b31      	ldr	r3, [pc, #196]	; (8001310 <MX_ADC1_Init+0x120>)
 800124a:	2203      	movs	r2, #3
 800124c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800124e:	4b30      	ldr	r3, [pc, #192]	; (8001310 <MX_ADC1_Init+0x120>)
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001256:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <MX_ADC1_Init+0x120>)
 8001258:	2200      	movs	r2, #0
 800125a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800125c:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <MX_ADC1_Init+0x120>)
 800125e:	2200      	movs	r2, #0
 8001260:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001262:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <MX_ADC1_Init+0x120>)
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800126a:	4b29      	ldr	r3, [pc, #164]	; (8001310 <MX_ADC1_Init+0x120>)
 800126c:	2200      	movs	r2, #0
 800126e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <MX_ADC1_Init+0x120>)
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001278:	4825      	ldr	r0, [pc, #148]	; (8001310 <MX_ADC1_Init+0x120>)
 800127a:	f000 fe9f 	bl	8001fbc <HAL_ADC_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001284:	f000 f9d8 	bl	8001638 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	4619      	mov	r1, r3
 8001292:	481f      	ldr	r0, [pc, #124]	; (8001310 <MX_ADC1_Init+0x120>)
 8001294:	f001 ffbe 	bl	8003214 <HAL_ADCEx_MultiModeConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800129e:	f000 f9cb 	bl	8001638 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MX_ADC1_Init+0x124>)
 80012a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a6:	2306      	movs	r3, #6
 80012a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012ae:	237f      	movs	r3, #127	; 0x7f
 80012b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012b2:	2304      	movs	r3, #4
 80012b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	4814      	ldr	r0, [pc, #80]	; (8001310 <MX_ADC1_Init+0x120>)
 80012c0:	f001 f92a 	bl	8002518 <HAL_ADC_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80012ca:	f000 f9b5 	bl	8001638 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_ADC1_Init+0x128>)
 80012d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012d2:	230c      	movs	r3, #12
 80012d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_ADC1_Init+0x120>)
 80012dc:	f001 f91c 	bl	8002518 <HAL_ADC_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80012e6:	f000 f9a7 	bl	8001638 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_ADC1_Init+0x12c>)
 80012ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012ee:	2312      	movs	r3, #18
 80012f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <MX_ADC1_Init+0x120>)
 80012f8:	f001 f90e 	bl	8002518 <HAL_ADC_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001302:	f000 f999 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	3730      	adds	r7, #48	; 0x30
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000002c 	.word	0x2000002c
 8001314:	04300002 	.word	0x04300002
 8001318:	08600004 	.word	0x08600004
 800131c:	14f00020 	.word	0x14f00020

08001320 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_LPUART1_UART_Init+0x8c>)
 8001326:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <MX_LPUART1_UART_Init+0x90>)
 8001328:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <MX_LPUART1_UART_Init+0x8c>)
 800132c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001330:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_LPUART1_UART_Init+0x8c>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_LPUART1_UART_Init+0x8c>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800133e:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_LPUART1_UART_Init+0x8c>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_LPUART1_UART_Init+0x8c>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_LPUART1_UART_Init+0x8c>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001350:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_LPUART1_UART_Init+0x8c>)
 8001352:	2200      	movs	r2, #0
 8001354:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_LPUART1_UART_Init+0x8c>)
 8001358:	2200      	movs	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_LPUART1_UART_Init+0x8c>)
 800135e:	2200      	movs	r2, #0
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001362:	4812      	ldr	r0, [pc, #72]	; (80013ac <MX_LPUART1_UART_Init+0x8c>)
 8001364:	f004 ffd8 	bl	8006318 <HAL_UART_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800136e:	f000 f963 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001372:	2100      	movs	r1, #0
 8001374:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_LPUART1_UART_Init+0x8c>)
 8001376:	f005 fd73 	bl	8006e60 <HAL_UARTEx_SetTxFifoThreshold>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001380:	f000 f95a 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001384:	2100      	movs	r1, #0
 8001386:	4809      	ldr	r0, [pc, #36]	; (80013ac <MX_LPUART1_UART_Init+0x8c>)
 8001388:	f005 fda8 	bl	8006edc <HAL_UARTEx_SetRxFifoThreshold>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001392:	f000 f951 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_LPUART1_UART_Init+0x8c>)
 8001398:	f005 fd29 	bl	8006dee <HAL_UARTEx_DisableFifoMode>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80013a2:	f000 f949 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200000f8 	.word	0x200000f8
 80013b0:	40008000 	.word	0x40008000

080013b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <MX_TIM2_Init+0x98>)
 80013d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_TIM2_Init+0x98>)
 80013dc:	22a9      	movs	r2, #169	; 0xa9
 80013de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_TIM2_Init+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <MX_TIM2_Init+0x98>)
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <MX_TIM2_Init+0x98>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <MX_TIM2_Init+0x98>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013fa:	4814      	ldr	r0, [pc, #80]	; (800144c <MX_TIM2_Init+0x98>)
 80013fc:	f003 fd82 	bl	8004f04 <HAL_TIM_Base_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001406:	f000 f917 	bl	8001638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	4619      	mov	r1, r3
 8001416:	480d      	ldr	r0, [pc, #52]	; (800144c <MX_TIM2_Init+0x98>)
 8001418:	f004 f932 	bl	8005680 <HAL_TIM_ConfigClockSource>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001422:	f000 f909 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	4619      	mov	r1, r3
 8001432:	4806      	ldr	r0, [pc, #24]	; (800144c <MX_TIM2_Init+0x98>)
 8001434:	f004 feda 	bl	80061ec <HAL_TIMEx_MasterConfigSynchronization>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800143e:	f000 f8fb 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	3720      	adds	r7, #32
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000018c 	.word	0x2000018c

08001450 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001462:	463b      	mov	r3, r7
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	615a      	str	r2, [r3, #20]
 8001472:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <MX_TIM3_Init+0xb0>)
 8001476:	4a23      	ldr	r2, [pc, #140]	; (8001504 <MX_TIM3_Init+0xb4>)
 8001478:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <MX_TIM3_Init+0xb0>)
 800147c:	22a9      	movs	r2, #169	; 0xa9
 800147e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <MX_TIM3_Init+0xb0>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <MX_TIM3_Init+0xb0>)
 8001488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800148c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <MX_TIM3_Init+0xb0>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_TIM3_Init+0xb0>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800149a:	4819      	ldr	r0, [pc, #100]	; (8001500 <MX_TIM3_Init+0xb0>)
 800149c:	f003 fe72 	bl	8005184 <HAL_TIM_PWM_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80014a6:	f000 f8c7 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	4619      	mov	r1, r3
 80014b8:	4811      	ldr	r0, [pc, #68]	; (8001500 <MX_TIM3_Init+0xb0>)
 80014ba:	f004 fe97 	bl	80061ec <HAL_TIMEx_MasterConfigSynchronization>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80014c4:	f000 f8b8 	bl	8001638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c8:	2360      	movs	r3, #96	; 0x60
 80014ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 80014cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80014d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014da:	463b      	mov	r3, r7
 80014dc:	2200      	movs	r2, #0
 80014de:	4619      	mov	r1, r3
 80014e0:	4807      	ldr	r0, [pc, #28]	; (8001500 <MX_TIM3_Init+0xb0>)
 80014e2:	f003 ffb9 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80014ec:	f000 f8a4 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014f0:	4803      	ldr	r0, [pc, #12]	; (8001500 <MX_TIM3_Init+0xb0>)
 80014f2:	f000 f9ff 	bl	80018f4 <HAL_TIM_MspPostInit>

}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	; 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200001d8 	.word	0x200001d8
 8001504:	40000400 	.word	0x40000400

08001508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <MX_DMA_Init+0x50>)
 8001510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001512:	4a11      	ldr	r2, [pc, #68]	; (8001558 <MX_DMA_Init+0x50>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	6493      	str	r3, [r2, #72]	; 0x48
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <MX_DMA_Init+0x50>)
 800151c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <MX_DMA_Init+0x50>)
 8001528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <MX_DMA_Init+0x50>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6493      	str	r3, [r2, #72]	; 0x48
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <MX_DMA_Init+0x50>)
 8001534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	200b      	movs	r0, #11
 8001544:	f002 f849 	bl	80035da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001548:	200b      	movs	r0, #11
 800154a:	f002 f860 	bl	800360e <HAL_NVIC_EnableIRQ>

}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000

0800155c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001572:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <MX_GPIO_Init+0xd4>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	4a2e      	ldr	r2, [pc, #184]	; (8001630 <MX_GPIO_Init+0xd4>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <MX_GPIO_Init+0xd4>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800158a:	4b29      	ldr	r3, [pc, #164]	; (8001630 <MX_GPIO_Init+0xd4>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	4a28      	ldr	r2, [pc, #160]	; (8001630 <MX_GPIO_Init+0xd4>)
 8001590:	f043 0320 	orr.w	r3, r3, #32
 8001594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <MX_GPIO_Init+0xd4>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	f003 0320 	and.w	r3, r3, #32
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4b23      	ldr	r3, [pc, #140]	; (8001630 <MX_GPIO_Init+0xd4>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	4a22      	ldr	r2, [pc, #136]	; (8001630 <MX_GPIO_Init+0xd4>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <MX_GPIO_Init+0xd4>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <MX_GPIO_Init+0xd4>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <MX_GPIO_Init+0xd4>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_GPIO_Init+0xd4>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2120      	movs	r1, #32
 80015d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015da:	f002 fc27 	bl	8003e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	480f      	ldr	r0, [pc, #60]	; (8001634 <MX_GPIO_Init+0xd8>)
 80015f6:	f002 fa97 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015fa:	2320      	movs	r3, #32
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001614:	f002 fa88 	bl	8003b28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	2028      	movs	r0, #40	; 0x28
 800161e:	f001 ffdc 	bl	80035da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001622:	2028      	movs	r0, #40	; 0x28
 8001624:	f001 fff3 	bl	800360e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	; 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000
 8001634:	48000800 	.word	0x48000800

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800163c:	b672      	cpsid	i
}
 800163e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001640:	e7fe      	b.n	8001640 <Error_Handler+0x8>
	...

08001644 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_MspInit+0x44>)
 800164c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <HAL_MspInit+0x44>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6613      	str	r3, [r2, #96]	; 0x60
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <HAL_MspInit+0x44>)
 8001658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_MspInit+0x44>)
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_MspInit+0x44>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6593      	str	r3, [r2, #88]	; 0x58
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_MspInit+0x44>)
 8001670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800167a:	f002 fcb7 	bl	8003fec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000

0800168c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b0a0      	sub	sp, #128	; 0x80
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a4:	f107 0318 	add.w	r3, r7, #24
 80016a8:	2254      	movs	r2, #84	; 0x54
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f005 fca1 	bl	8006ff4 <memset>
  if(hadc->Instance==ADC1)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016ba:	d178      	bne.n	80017ae <HAL_ADC_MspInit+0x122>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80016bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80016c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c8:	f107 0318 	add.w	r3, r7, #24
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 f9cb 	bl	8004a68 <HAL_RCCEx_PeriphCLKConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80016d8:	f7ff ffae 	bl	8001638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80016dc:	4b36      	ldr	r3, [pc, #216]	; (80017b8 <HAL_ADC_MspInit+0x12c>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	4a35      	ldr	r2, [pc, #212]	; (80017b8 <HAL_ADC_MspInit+0x12c>)
 80016e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e8:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <HAL_ADC_MspInit+0x12c>)
 80016ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <HAL_ADC_MspInit+0x12c>)
 80016f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f8:	4a2f      	ldr	r2, [pc, #188]	; (80017b8 <HAL_ADC_MspInit+0x12c>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001700:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <HAL_ADC_MspInit+0x12c>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170c:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <HAL_ADC_MspInit+0x12c>)
 800170e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001710:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <HAL_ADC_MspInit+0x12c>)
 8001712:	f043 0302 	orr.w	r3, r3, #2
 8001716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001718:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <HAL_ADC_MspInit+0x12c>)
 800171a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001724:	2303      	movs	r3, #3
 8001726:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001728:	2303      	movs	r3, #3
 800172a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173a:	f002 f9f5 	bl	8003b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800173e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001742:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001744:	2303      	movs	r3, #3
 8001746:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001750:	4619      	mov	r1, r3
 8001752:	481a      	ldr	r0, [pc, #104]	; (80017bc <HAL_ADC_MspInit+0x130>)
 8001754:	f002 f9e8 	bl	8003b28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_ADC_MspInit+0x134>)
 800175a:	4a1a      	ldr	r2, [pc, #104]	; (80017c4 <HAL_ADC_MspInit+0x138>)
 800175c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800175e:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <HAL_ADC_MspInit+0x134>)
 8001760:	2205      	movs	r2, #5
 8001762:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <HAL_ADC_MspInit+0x134>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_ADC_MspInit+0x134>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <HAL_ADC_MspInit+0x134>)
 8001772:	2280      	movs	r2, #128	; 0x80
 8001774:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_ADC_MspInit+0x134>)
 8001778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800177c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <HAL_ADC_MspInit+0x134>)
 8001780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001784:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_ADC_MspInit+0x134>)
 8001788:	2220      	movs	r2, #32
 800178a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_ADC_MspInit+0x134>)
 800178e:	2200      	movs	r2, #0
 8001790:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001792:	480b      	ldr	r0, [pc, #44]	; (80017c0 <HAL_ADC_MspInit+0x134>)
 8001794:	f001 ff56 	bl	8003644 <HAL_DMA_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 800179e:	f7ff ff4b 	bl	8001638 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a06      	ldr	r2, [pc, #24]	; (80017c0 <HAL_ADC_MspInit+0x134>)
 80017a6:	655a      	str	r2, [r3, #84]	; 0x54
 80017a8:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <HAL_ADC_MspInit+0x134>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3780      	adds	r7, #128	; 0x80
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000
 80017bc:	48000400 	.word	0x48000400
 80017c0:	20000098 	.word	0x20000098
 80017c4:	40020008 	.word	0x40020008

080017c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b09e      	sub	sp, #120	; 0x78
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	2254      	movs	r2, #84	; 0x54
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f005 fc03 	bl	8006ff4 <memset>
  if(huart->Instance==LPUART1)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a1f      	ldr	r2, [pc, #124]	; (8001870 <HAL_UART_MspInit+0xa8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d136      	bne.n	8001866 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017f8:	2320      	movs	r3, #32
 80017fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	4618      	mov	r0, r3
 8001806:	f003 f92f 	bl	8004a68 <HAL_RCCEx_PeriphCLKConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001810:	f7ff ff12 	bl	8001638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <HAL_UART_MspInit+0xac>)
 8001816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001818:	4a16      	ldr	r2, [pc, #88]	; (8001874 <HAL_UART_MspInit+0xac>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <HAL_UART_MspInit+0xac>)
 8001822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_UART_MspInit+0xac>)
 800182e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001830:	4a10      	ldr	r2, [pc, #64]	; (8001874 <HAL_UART_MspInit+0xac>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_UART_MspInit+0xac>)
 800183a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001844:	230c      	movs	r3, #12
 8001846:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001854:	230c      	movs	r3, #12
 8001856:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800185c:	4619      	mov	r1, r3
 800185e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001862:	f002 f961 	bl	8003b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001866:	bf00      	nop
 8001868:	3778      	adds	r7, #120	; 0x78
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40008000 	.word	0x40008000
 8001874:	40021000 	.word	0x40021000

08001878 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001888:	d10b      	bne.n	80018a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_TIM_Base_MspInit+0x38>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_TIM_Base_MspInit+0x38>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6593      	str	r3, [r2, #88]	; 0x58
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_TIM_Base_MspInit+0x38>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000

080018b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <HAL_TIM_PWM_MspInit+0x38>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10b      	bne.n	80018de <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	6593      	str	r3, [r2, #88]	; 0x58
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40000400 	.word	0x40000400
 80018f0:	40021000 	.word	0x40021000

080018f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a11      	ldr	r2, [pc, #68]	; (8001958 <HAL_TIM_MspPostInit+0x64>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d11b      	bne.n	800194e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_TIM_MspPostInit+0x68>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	4a10      	ldr	r2, [pc, #64]	; (800195c <HAL_TIM_MspPostInit+0x68>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_TIM_MspPostInit+0x68>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800192e:	2310      	movs	r3, #16
 8001930:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800193e:	2302      	movs	r3, #2
 8001940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <HAL_TIM_MspPostInit+0x6c>)
 800194a:	f002 f8ed 	bl	8003b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	3720      	adds	r7, #32
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40000400 	.word	0x40000400
 800195c:	40021000 	.word	0x40021000
 8001960:	48000400 	.word	0x48000400

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <NMI_Handler+0x4>

0800196a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <MemManage_Handler+0x4>

08001976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <UsageFault_Handler+0x4>

08001982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b0:	f000 f8a2 	bl	8001af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <DMA1_Channel1_IRQHandler+0x10>)
 80019be:	f001 ff64 	bl	800388a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000098 	.word	0x20000098

080019cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019d4:	f002 fa42 	bl	8003e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}

080019dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a00:	480d      	ldr	r0, [pc, #52]	; (8001a38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a04:	f7ff ffea 	bl	80019dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a0a:	490d      	ldr	r1, [pc, #52]	; (8001a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <LoopForever+0xe>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a20:	4c0a      	ldr	r4, [pc, #40]	; (8001a4c <LoopForever+0x16>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f005 fae9 	bl	8007004 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a32:	f7ff f9c1 	bl	8000db8 <main>

08001a36 <LoopForever>:

LoopForever:
    b LoopForever
 8001a36:	e7fe      	b.n	8001a36 <LoopForever>
  ldr   r0, =_estack
 8001a38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a44:	080070b4 	.word	0x080070b4
  ldr r2, =_sbss
 8001a48:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001a4c:	200004d4 	.word	0x200004d4

08001a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC1_2_IRQHandler>

08001a52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f001 fdb1 	bl	80035c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a62:	2000      	movs	r0, #0
 8001a64:	f000 f80e 	bl	8001a84 <HAL_InitTick>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	e001      	b.n	8001a78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a74:	f7ff fde6 	bl	8001644 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a78:	79fb      	ldrb	r3, [r7, #7]

}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <HAL_InitTick+0x68>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d022      	beq.n	8001ade <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a98:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_InitTick+0x6c>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <HAL_InitTick+0x68>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aac:	4618      	mov	r0, r3
 8001aae:	f001 fdbc 	bl	800362a <HAL_SYSTICK_Config>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10f      	bne.n	8001ad8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b0f      	cmp	r3, #15
 8001abc:	d809      	bhi.n	8001ad2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac6:	f001 fd88 	bl	80035da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <HAL_InitTick+0x70>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	e007      	b.n	8001ae2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	e004      	b.n	8001ae2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
 8001adc:	e001      	b.n	8001ae2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000008 	.word	0x20000008
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000004 	.word	0x20000004

08001af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_IncTick+0x1c>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_IncTick+0x20>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4413      	add	r3, r2
 8001b06:	4a03      	ldr	r2, [pc, #12]	; (8001b14 <HAL_IncTick+0x1c>)
 8001b08:	6013      	str	r3, [r2, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	200004d0 	.word	0x200004d0
 8001b18:	20000008 	.word	0x20000008

08001b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_GetTick+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	200004d0 	.word	0x200004d0

08001b34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	609a      	str	r2, [r3, #8]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
 8001ba8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	3360      	adds	r3, #96	; 0x60
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <LL_ADC_SetOffset+0x44>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bd4:	bf00      	nop
 8001bd6:	371c      	adds	r7, #28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	03fff000 	.word	0x03fff000

08001be4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3360      	adds	r3, #96	; 0x60
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	3360      	adds	r3, #96	; 0x60
 8001c20:	461a      	mov	r2, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c3a:	bf00      	nop
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b087      	sub	sp, #28
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3360      	adds	r3, #96	; 0x60
 8001c56:	461a      	mov	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c70:	bf00      	nop
 8001c72:	371c      	adds	r7, #28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3360      	adds	r3, #96	; 0x60
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001ca6:	bf00      	nop
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	615a      	str	r2, [r3, #20]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b087      	sub	sp, #28
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3330      	adds	r3, #48	; 0x30
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	4413      	add	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	211f      	movs	r1, #31
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	401a      	ands	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	0e9b      	lsrs	r3, r3, #26
 8001d36:	f003 011f 	and.w	r1, r3, #31
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	fa01 f303 	lsl.w	r3, r1, r3
 8001d44:	431a      	orrs	r2, r3
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d4a:	bf00      	nop
 8001d4c:	371c      	adds	r7, #28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b087      	sub	sp, #28
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3314      	adds	r3, #20
 8001d66:	461a      	mov	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	0e5b      	lsrs	r3, r3, #25
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	4413      	add	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	0d1b      	lsrs	r3, r3, #20
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	2107      	movs	r1, #7
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	0d1b      	lsrs	r3, r3, #20
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001da0:	bf00      	nop
 8001da2:	371c      	adds	r7, #28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0318 	and.w	r3, r3, #24
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001dd0:	40d9      	lsrs	r1, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	400b      	ands	r3, r1
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	0007ffff 	.word	0x0007ffff

08001df4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 031f 	and.w	r3, r3, #31
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6093      	str	r3, [r2, #8]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e48:	d101      	bne.n	8001e4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e98:	d101      	bne.n	8001e9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ebc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ee4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ee8:	f043 0202 	orr.w	r2, r3, #2
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <LL_ADC_IsEnabled+0x18>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <LL_ADC_IsEnabled+0x1a>
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d101      	bne.n	8001f3a <LL_ADC_IsDisableOngoing+0x18>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <LL_ADC_IsDisableOngoing+0x1a>
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f5c:	f043 0204 	orr.w	r2, r3, #4
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d101      	bne.n	8001f88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d101      	bne.n	8001fae <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e1a9      	b.n	800232a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d109      	bne.n	8001ff8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fb51 	bl	800168c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff19 	bl	8001e34 <LL_ADC_IsDeepPowerDownEnabled>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff feff 	bl	8001e10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff34 	bl	8001e84 <LL_ADC_IsInternalRegulatorEnabled>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d115      	bne.n	800204e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff ff18 	bl	8001e5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800202c:	4b9c      	ldr	r3, [pc, #624]	; (80022a0 <HAL_ADC_Init+0x2e4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	099b      	lsrs	r3, r3, #6
 8002032:	4a9c      	ldr	r2, [pc, #624]	; (80022a4 <HAL_ADC_Init+0x2e8>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	099b      	lsrs	r3, r3, #6
 800203a:	3301      	adds	r3, #1
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002040:	e002      	b.n	8002048 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3b01      	subs	r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f9      	bne.n	8002042 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ff16 	bl	8001e84 <LL_ADC_IsInternalRegulatorEnabled>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10d      	bne.n	800207a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002062:	f043 0210 	orr.w	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206e:	f043 0201 	orr.w	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff76 	bl	8001f70 <LL_ADC_REG_IsConversionOngoing>
 8002084:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	2b00      	cmp	r3, #0
 8002090:	f040 8142 	bne.w	8002318 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f040 813e 	bne.w	8002318 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020a4:	f043 0202 	orr.w	r2, r3, #2
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff23 	bl	8001efc <LL_ADC_IsEnabled>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d141      	bne.n	8002140 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020c4:	d004      	beq.n	80020d0 <HAL_ADC_Init+0x114>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a77      	ldr	r2, [pc, #476]	; (80022a8 <HAL_ADC_Init+0x2ec>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d10f      	bne.n	80020f0 <HAL_ADC_Init+0x134>
 80020d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020d4:	f7ff ff12 	bl	8001efc <LL_ADC_IsEnabled>
 80020d8:	4604      	mov	r4, r0
 80020da:	4873      	ldr	r0, [pc, #460]	; (80022a8 <HAL_ADC_Init+0x2ec>)
 80020dc:	f7ff ff0e 	bl	8001efc <LL_ADC_IsEnabled>
 80020e0:	4603      	mov	r3, r0
 80020e2:	4323      	orrs	r3, r4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	e012      	b.n	8002116 <HAL_ADC_Init+0x15a>
 80020f0:	486e      	ldr	r0, [pc, #440]	; (80022ac <HAL_ADC_Init+0x2f0>)
 80020f2:	f7ff ff03 	bl	8001efc <LL_ADC_IsEnabled>
 80020f6:	4604      	mov	r4, r0
 80020f8:	486d      	ldr	r0, [pc, #436]	; (80022b0 <HAL_ADC_Init+0x2f4>)
 80020fa:	f7ff feff 	bl	8001efc <LL_ADC_IsEnabled>
 80020fe:	4603      	mov	r3, r0
 8002100:	431c      	orrs	r4, r3
 8002102:	486c      	ldr	r0, [pc, #432]	; (80022b4 <HAL_ADC_Init+0x2f8>)
 8002104:	f7ff fefa 	bl	8001efc <LL_ADC_IsEnabled>
 8002108:	4603      	mov	r3, r0
 800210a:	4323      	orrs	r3, r4
 800210c:	2b00      	cmp	r3, #0
 800210e:	bf0c      	ite	eq
 8002110:	2301      	moveq	r3, #1
 8002112:	2300      	movne	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d012      	beq.n	8002140 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002122:	d004      	beq.n	800212e <HAL_ADC_Init+0x172>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a5f      	ldr	r2, [pc, #380]	; (80022a8 <HAL_ADC_Init+0x2ec>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_ADC_Init+0x176>
 800212e:	4a62      	ldr	r2, [pc, #392]	; (80022b8 <HAL_ADC_Init+0x2fc>)
 8002130:	e000      	b.n	8002134 <HAL_ADC_Init+0x178>
 8002132:	4a62      	ldr	r2, [pc, #392]	; (80022bc <HAL_ADC_Init+0x300>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4619      	mov	r1, r3
 800213a:	4610      	mov	r0, r2
 800213c:	f7ff fcfa 	bl	8001b34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7f5b      	ldrb	r3, [r3, #29]
 8002144:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800214a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002150:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002156:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800215e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800216a:	2b01      	cmp	r3, #1
 800216c:	d106      	bne.n	800217c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	3b01      	subs	r3, #1
 8002174:	045b      	lsls	r3, r3, #17
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	2b00      	cmp	r3, #0
 8002182:	d009      	beq.n	8002198 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	4b48      	ldr	r3, [pc, #288]	; (80022c0 <HAL_ADC_Init+0x304>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	69b9      	ldr	r1, [r7, #24]
 80021a8:	430b      	orrs	r3, r1
 80021aa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fee5 	bl	8001f96 <LL_ADC_INJ_IsConversionOngoing>
 80021cc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d17f      	bne.n	80022d4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d17c      	bne.n	80022d4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021de:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021e6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021f6:	f023 0302 	bic.w	r3, r3, #2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	69b9      	ldr	r1, [r7, #24]
 8002200:	430b      	orrs	r3, r1
 8002202:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d017      	beq.n	800223c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800221a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002224:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002228:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6911      	ldr	r1, [r2, #16]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	430b      	orrs	r3, r1
 8002236:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800223a:	e013      	b.n	8002264 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800224a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800225c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002260:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800226a:	2b01      	cmp	r3, #1
 800226c:	d12a      	bne.n	80022c4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002278:	f023 0304 	bic.w	r3, r3, #4
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002284:	4311      	orrs	r1, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800228a:	4311      	orrs	r1, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002290:	430a      	orrs	r2, r1
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0201 	orr.w	r2, r2, #1
 800229c:	611a      	str	r2, [r3, #16]
 800229e:	e019      	b.n	80022d4 <HAL_ADC_Init+0x318>
 80022a0:	20000000 	.word	0x20000000
 80022a4:	053e2d63 	.word	0x053e2d63
 80022a8:	50000100 	.word	0x50000100
 80022ac:	50000400 	.word	0x50000400
 80022b0:	50000500 	.word	0x50000500
 80022b4:	50000600 	.word	0x50000600
 80022b8:	50000300 	.word	0x50000300
 80022bc:	50000700 	.word	0x50000700
 80022c0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d10c      	bne.n	80022f6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f023 010f 	bic.w	r1, r3, #15
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	1e5a      	subs	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
 80022f4:	e007      	b.n	8002306 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 020f 	bic.w	r2, r2, #15
 8002304:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230a:	f023 0303 	bic.w	r3, r3, #3
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	65da      	str	r2, [r3, #92]	; 0x5c
 8002316:	e007      	b.n	8002328 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	f043 0210 	orr.w	r2, r3, #16
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002328:	7ffb      	ldrb	r3, [r7, #31]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3724      	adds	r7, #36	; 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd90      	pop	{r4, r7, pc}
 8002332:	bf00      	nop

08002334 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002348:	d004      	beq.n	8002354 <HAL_ADC_Start_DMA+0x20>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a5a      	ldr	r2, [pc, #360]	; (80024b8 <HAL_ADC_Start_DMA+0x184>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d101      	bne.n	8002358 <HAL_ADC_Start_DMA+0x24>
 8002354:	4b59      	ldr	r3, [pc, #356]	; (80024bc <HAL_ADC_Start_DMA+0x188>)
 8002356:	e000      	b.n	800235a <HAL_ADC_Start_DMA+0x26>
 8002358:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_ADC_Start_DMA+0x18c>)
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fd4a 	bl	8001df4 <LL_ADC_GetMultimode>
 8002360:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fe02 	bl	8001f70 <LL_ADC_REG_IsConversionOngoing>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 809b 	bne.w	80024aa <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_ADC_Start_DMA+0x4e>
 800237e:	2302      	movs	r3, #2
 8002380:	e096      	b.n	80024b0 <HAL_ADC_Start_DMA+0x17c>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a4d      	ldr	r2, [pc, #308]	; (80024c4 <HAL_ADC_Start_DMA+0x190>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d008      	beq.n	80023a6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	2b05      	cmp	r3, #5
 800239e:	d002      	beq.n	80023a6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	2b09      	cmp	r3, #9
 80023a4:	d17a      	bne.n	800249c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fcf6 	bl	8002d98 <ADC_Enable>
 80023ac:	4603      	mov	r3, r0
 80023ae:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d16d      	bne.n	8002492 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a3a      	ldr	r2, [pc, #232]	; (80024b8 <HAL_ADC_Start_DMA+0x184>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d009      	beq.n	80023e8 <HAL_ADC_Start_DMA+0xb4>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a3b      	ldr	r2, [pc, #236]	; (80024c8 <HAL_ADC_Start_DMA+0x194>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d002      	beq.n	80023e4 <HAL_ADC_Start_DMA+0xb0>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	e003      	b.n	80023ec <HAL_ADC_Start_DMA+0xb8>
 80023e4:	4b39      	ldr	r3, [pc, #228]	; (80024cc <HAL_ADC_Start_DMA+0x198>)
 80023e6:	e001      	b.n	80023ec <HAL_ADC_Start_DMA+0xb8>
 80023e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d002      	beq.n	80023fa <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002416:	f023 0206 	bic.w	r2, r3, #6
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	661a      	str	r2, [r3, #96]	; 0x60
 800241e:	e002      	b.n	8002426 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	4a29      	ldr	r2, [pc, #164]	; (80024d0 <HAL_ADC_Start_DMA+0x19c>)
 800242c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	4a28      	ldr	r2, [pc, #160]	; (80024d4 <HAL_ADC_Start_DMA+0x1a0>)
 8002434:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	4a27      	ldr	r2, [pc, #156]	; (80024d8 <HAL_ADC_Start_DMA+0x1a4>)
 800243c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	221c      	movs	r2, #28
 8002444:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 0210 	orr.w	r2, r2, #16
 800245c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0201 	orr.w	r2, r2, #1
 800246c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	3340      	adds	r3, #64	; 0x40
 8002478:	4619      	mov	r1, r3
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f001 f989 	bl	8003794 <HAL_DMA_Start_IT>
 8002482:	4603      	mov	r3, r0
 8002484:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fd5c 	bl	8001f48 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002490:	e00d      	b.n	80024ae <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800249a:	e008      	b.n	80024ae <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80024a8:	e001      	b.n	80024ae <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024aa:	2302      	movs	r3, #2
 80024ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	50000100 	.word	0x50000100
 80024bc:	50000300 	.word	0x50000300
 80024c0:	50000700 	.word	0x50000700
 80024c4:	50000600 	.word	0x50000600
 80024c8:	50000500 	.word	0x50000500
 80024cc:	50000400 	.word	0x50000400
 80024d0:	08002f83 	.word	0x08002f83
 80024d4:	0800305b 	.word	0x0800305b
 80024d8:	08003077 	.word	0x08003077

080024dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b0b6      	sub	sp, #216	; 0xd8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002532:	2b01      	cmp	r3, #1
 8002534:	d102      	bne.n	800253c <HAL_ADC_ConfigChannel+0x24>
 8002536:	2302      	movs	r3, #2
 8002538:	f000 bc13 	b.w	8002d62 <HAL_ADC_ConfigChannel+0x84a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fd11 	bl	8001f70 <LL_ADC_REG_IsConversionOngoing>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	f040 83f3 	bne.w	8002d3c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6859      	ldr	r1, [r3, #4]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	f7ff fbcb 	bl	8001cfe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fcff 	bl	8001f70 <LL_ADC_REG_IsConversionOngoing>
 8002572:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fd0b 	bl	8001f96 <LL_ADC_INJ_IsConversionOngoing>
 8002580:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002584:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002588:	2b00      	cmp	r3, #0
 800258a:	f040 81d9 	bne.w	8002940 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800258e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002592:	2b00      	cmp	r3, #0
 8002594:	f040 81d4 	bne.w	8002940 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025a0:	d10f      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2200      	movs	r2, #0
 80025ac:	4619      	mov	r1, r3
 80025ae:	f7ff fbd2 	bl	8001d56 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fb79 	bl	8001cb2 <LL_ADC_SetSamplingTimeCommonConfig>
 80025c0:	e00e      	b.n	80025e0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6819      	ldr	r1, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	461a      	mov	r2, r3
 80025d0:	f7ff fbc1 	bl	8001d56 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fb69 	bl	8001cb2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	08db      	lsrs	r3, r3, #3
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d022      	beq.n	8002648 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6919      	ldr	r1, [r3, #16]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002612:	f7ff fac3 	bl	8001b9c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	6919      	ldr	r1, [r3, #16]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	461a      	mov	r2, r3
 8002624:	f7ff fb0f 	bl	8001c46 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002634:	2b01      	cmp	r3, #1
 8002636:	d102      	bne.n	800263e <HAL_ADC_ConfigChannel+0x126>
 8002638:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800263c:	e000      	b.n	8002640 <HAL_ADC_ConfigChannel+0x128>
 800263e:	2300      	movs	r3, #0
 8002640:	461a      	mov	r2, r3
 8002642:	f7ff fb1b 	bl	8001c7c <LL_ADC_SetOffsetSaturation>
 8002646:	e17b      	b.n	8002940 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fac8 	bl	8001be4 <LL_ADC_GetOffsetChannel>
 8002654:	4603      	mov	r3, r0
 8002656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10a      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x15c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fabd 	bl	8001be4 <LL_ADC_GetOffsetChannel>
 800266a:	4603      	mov	r3, r0
 800266c:	0e9b      	lsrs	r3, r3, #26
 800266e:	f003 021f 	and.w	r2, r3, #31
 8002672:	e01e      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x19a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fab2 	bl	8001be4 <LL_ADC_GetOffsetChannel>
 8002680:	4603      	mov	r3, r0
 8002682:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002692:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002696:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800269a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80026a2:	2320      	movs	r3, #32
 80026a4:	e004      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80026a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d105      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x1b2>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0e9b      	lsrs	r3, r3, #26
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	e018      	b.n	80026fc <HAL_ADC_ConfigChannel+0x1e4>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80026de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80026e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80026ee:	2320      	movs	r3, #32
 80026f0:	e004      	b.n	80026fc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80026f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d106      	bne.n	800270e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2200      	movs	r2, #0
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fa81 	bl	8001c10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2101      	movs	r1, #1
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fa65 	bl	8001be4 <LL_ADC_GetOffsetChannel>
 800271a:	4603      	mov	r3, r0
 800271c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10a      	bne.n	800273a <HAL_ADC_ConfigChannel+0x222>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2101      	movs	r1, #1
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fa5a 	bl	8001be4 <LL_ADC_GetOffsetChannel>
 8002730:	4603      	mov	r3, r0
 8002732:	0e9b      	lsrs	r3, r3, #26
 8002734:	f003 021f 	and.w	r2, r3, #31
 8002738:	e01e      	b.n	8002778 <HAL_ADC_ConfigChannel+0x260>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2101      	movs	r1, #1
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fa4f 	bl	8001be4 <LL_ADC_GetOffsetChannel>
 8002746:	4603      	mov	r3, r0
 8002748:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002750:	fa93 f3a3 	rbit	r3, r3
 8002754:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002758:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800275c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002760:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002768:	2320      	movs	r3, #32
 800276a:	e004      	b.n	8002776 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800276c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002780:	2b00      	cmp	r3, #0
 8002782:	d105      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x278>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	0e9b      	lsrs	r3, r3, #26
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	e018      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x2aa>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80027a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80027ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80027b4:	2320      	movs	r3, #32
 80027b6:	e004      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80027b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d106      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2200      	movs	r2, #0
 80027cc:	2101      	movs	r1, #1
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fa1e 	bl	8001c10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2102      	movs	r1, #2
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fa02 	bl	8001be4 <LL_ADC_GetOffsetChannel>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10a      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x2e8>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2102      	movs	r1, #2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff f9f7 	bl	8001be4 <LL_ADC_GetOffsetChannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	0e9b      	lsrs	r3, r3, #26
 80027fa:	f003 021f 	and.w	r2, r3, #31
 80027fe:	e01e      	b.n	800283e <HAL_ADC_ConfigChannel+0x326>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2102      	movs	r1, #2
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff f9ec 	bl	8001be4 <LL_ADC_GetOffsetChannel>
 800280c:	4603      	mov	r3, r0
 800280e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800281e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002826:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800282e:	2320      	movs	r3, #32
 8002830:	e004      	b.n	800283c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002832:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002846:	2b00      	cmp	r3, #0
 8002848:	d105      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x33e>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	0e9b      	lsrs	r3, r3, #26
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	e016      	b.n	8002884 <HAL_ADC_ConfigChannel+0x36c>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002868:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800286a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800286e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002876:	2320      	movs	r3, #32
 8002878:	e004      	b.n	8002884 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800287a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002884:	429a      	cmp	r2, r3
 8002886:	d106      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2200      	movs	r2, #0
 800288e:	2102      	movs	r1, #2
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff f9bd 	bl	8001c10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2103      	movs	r1, #3
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff f9a1 	bl	8001be4 <LL_ADC_GetOffsetChannel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x3aa>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2103      	movs	r1, #3
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff f996 	bl	8001be4 <LL_ADC_GetOffsetChannel>
 80028b8:	4603      	mov	r3, r0
 80028ba:	0e9b      	lsrs	r3, r3, #26
 80028bc:	f003 021f 	and.w	r2, r3, #31
 80028c0:	e017      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x3da>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2103      	movs	r1, #3
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff f98b 	bl	8001be4 <LL_ADC_GetOffsetChannel>
 80028ce:	4603      	mov	r3, r0
 80028d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80028da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028dc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80028de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80028e4:	2320      	movs	r3, #32
 80028e6:	e003      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80028e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d105      	bne.n	800290a <HAL_ADC_ConfigChannel+0x3f2>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	0e9b      	lsrs	r3, r3, #26
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	e011      	b.n	800292e <HAL_ADC_ConfigChannel+0x416>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800291a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800291c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002922:	2320      	movs	r3, #32
 8002924:	e003      	b.n	800292e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002928:	fab3 f383 	clz	r3, r3
 800292c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800292e:	429a      	cmp	r2, r3
 8002930:	d106      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2200      	movs	r2, #0
 8002938:	2103      	movs	r1, #3
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff f968 	bl	8001c10 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fad9 	bl	8001efc <LL_ADC_IsEnabled>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	f040 813d 	bne.w	8002bcc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6819      	ldr	r1, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	461a      	mov	r2, r3
 8002960:	f7ff fa24 	bl	8001dac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4aa2      	ldr	r2, [pc, #648]	; (8002bf4 <HAL_ADC_ConfigChannel+0x6dc>)
 800296a:	4293      	cmp	r3, r2
 800296c:	f040 812e 	bne.w	8002bcc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10b      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x480>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	0e9b      	lsrs	r3, r3, #26
 8002986:	3301      	adds	r3, #1
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	2b09      	cmp	r3, #9
 800298e:	bf94      	ite	ls
 8002990:	2301      	movls	r3, #1
 8002992:	2300      	movhi	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e019      	b.n	80029cc <HAL_ADC_ConfigChannel+0x4b4>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80029a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80029aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80029b0:	2320      	movs	r3, #32
 80029b2:	e003      	b.n	80029bc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80029b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	2b09      	cmp	r3, #9
 80029c4:	bf94      	ite	ls
 80029c6:	2301      	movls	r3, #1
 80029c8:	2300      	movhi	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d079      	beq.n	8002ac4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d107      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x4d4>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	0e9b      	lsrs	r3, r3, #26
 80029e2:	3301      	adds	r3, #1
 80029e4:	069b      	lsls	r3, r3, #26
 80029e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ea:	e015      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x500>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80029fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002a04:	2320      	movs	r3, #32
 8002a06:	e003      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	3301      	adds	r3, #1
 8002a12:	069b      	lsls	r3, r3, #26
 8002a14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d109      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x520>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	0e9b      	lsrs	r3, r3, #26
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	2101      	movs	r1, #1
 8002a32:	fa01 f303 	lsl.w	r3, r1, r3
 8002a36:	e017      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x550>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002a50:	2320      	movs	r3, #32
 8002a52:	e003      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	2101      	movs	r1, #1
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	ea42 0103 	orr.w	r1, r2, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10a      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x576>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	0e9b      	lsrs	r3, r3, #26
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f003 021f 	and.w	r2, r3, #31
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	051b      	lsls	r3, r3, #20
 8002a8c:	e018      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x5a8>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002aa6:	2320      	movs	r3, #32
 8002aa8:	e003      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aac:	fab3 f383 	clz	r3, r3
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	e07e      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d107      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x5c8>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	0e9b      	lsrs	r3, r3, #26
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	069b      	lsls	r3, r3, #26
 8002ada:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ade:	e015      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x5f4>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002af8:	2320      	movs	r3, #32
 8002afa:	e003      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	069b      	lsls	r3, r3, #26
 8002b08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x614>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	0e9b      	lsrs	r3, r3, #26
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	2101      	movs	r1, #1
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	e017      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x644>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	61fb      	str	r3, [r7, #28]
  return result;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002b44:	2320      	movs	r3, #32
 8002b46:	e003      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	3301      	adds	r3, #1
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	2101      	movs	r1, #1
 8002b58:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5c:	ea42 0103 	orr.w	r1, r2, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10d      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x670>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0e9b      	lsrs	r3, r3, #26
 8002b72:	3301      	adds	r3, #1
 8002b74:	f003 021f 	and.w	r2, r3, #31
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3b1e      	subs	r3, #30
 8002b80:	051b      	lsls	r3, r3, #20
 8002b82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b86:	e01b      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x6a8>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	613b      	str	r3, [r7, #16]
  return result;
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002ba0:	2320      	movs	r3, #32
 8002ba2:	e003      	b.n	8002bac <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	3301      	adds	r3, #1
 8002bae:	f003 021f 	and.w	r2, r3, #31
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3b1e      	subs	r3, #30
 8002bba:	051b      	lsls	r3, r3, #20
 8002bbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f7ff f8c5 	bl	8001d56 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <HAL_ADC_ConfigChannel+0x6e0>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80be 	beq.w	8002d56 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002be2:	d004      	beq.n	8002bee <HAL_ADC_ConfigChannel+0x6d6>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <HAL_ADC_ConfigChannel+0x6e4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d10a      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x6ec>
 8002bee:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <HAL_ADC_ConfigChannel+0x6e8>)
 8002bf0:	e009      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x6ee>
 8002bf2:	bf00      	nop
 8002bf4:	407f0000 	.word	0x407f0000
 8002bf8:	80080000 	.word	0x80080000
 8002bfc:	50000100 	.word	0x50000100
 8002c00:	50000300 	.word	0x50000300
 8002c04:	4b59      	ldr	r3, [pc, #356]	; (8002d6c <HAL_ADC_ConfigChannel+0x854>)
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe ffba 	bl	8001b80 <LL_ADC_GetCommonPathInternalCh>
 8002c0c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a56      	ldr	r2, [pc, #344]	; (8002d70 <HAL_ADC_ConfigChannel+0x858>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d004      	beq.n	8002c24 <HAL_ADC_ConfigChannel+0x70c>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a55      	ldr	r2, [pc, #340]	; (8002d74 <HAL_ADC_ConfigChannel+0x85c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d13a      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d134      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c38:	d005      	beq.n	8002c46 <HAL_ADC_ConfigChannel+0x72e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a4e      	ldr	r2, [pc, #312]	; (8002d78 <HAL_ADC_ConfigChannel+0x860>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	f040 8085 	bne.w	8002d50 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c4e:	d004      	beq.n	8002c5a <HAL_ADC_ConfigChannel+0x742>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a49      	ldr	r2, [pc, #292]	; (8002d7c <HAL_ADC_ConfigChannel+0x864>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x746>
 8002c5a:	4a49      	ldr	r2, [pc, #292]	; (8002d80 <HAL_ADC_ConfigChannel+0x868>)
 8002c5c:	e000      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x748>
 8002c5e:	4a43      	ldr	r2, [pc, #268]	; (8002d6c <HAL_ADC_ConfigChannel+0x854>)
 8002c60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	f7fe ff75 	bl	8001b5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c70:	4b44      	ldr	r3, [pc, #272]	; (8002d84 <HAL_ADC_ConfigChannel+0x86c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	099b      	lsrs	r3, r3, #6
 8002c76:	4a44      	ldr	r2, [pc, #272]	; (8002d88 <HAL_ADC_ConfigChannel+0x870>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	099b      	lsrs	r3, r3, #6
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c8a:	e002      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f9      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c98:	e05a      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a3b      	ldr	r2, [pc, #236]	; (8002d8c <HAL_ADC_ConfigChannel+0x874>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d125      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ca4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d11f      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a31      	ldr	r2, [pc, #196]	; (8002d7c <HAL_ADC_ConfigChannel+0x864>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d104      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x7ac>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a34      	ldr	r2, [pc, #208]	; (8002d90 <HAL_ADC_ConfigChannel+0x878>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d047      	beq.n	8002d54 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ccc:	d004      	beq.n	8002cd8 <HAL_ADC_ConfigChannel+0x7c0>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a2a      	ldr	r2, [pc, #168]	; (8002d7c <HAL_ADC_ConfigChannel+0x864>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x7c4>
 8002cd8:	4a29      	ldr	r2, [pc, #164]	; (8002d80 <HAL_ADC_ConfigChannel+0x868>)
 8002cda:	e000      	b.n	8002cde <HAL_ADC_ConfigChannel+0x7c6>
 8002cdc:	4a23      	ldr	r2, [pc, #140]	; (8002d6c <HAL_ADC_ConfigChannel+0x854>)
 8002cde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4610      	mov	r0, r2
 8002cea:	f7fe ff36 	bl	8001b5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cee:	e031      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a27      	ldr	r2, [pc, #156]	; (8002d94 <HAL_ADC_ConfigChannel+0x87c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d12d      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d127      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <HAL_ADC_ConfigChannel+0x864>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d022      	beq.n	8002d56 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d18:	d004      	beq.n	8002d24 <HAL_ADC_ConfigChannel+0x80c>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a17      	ldr	r2, [pc, #92]	; (8002d7c <HAL_ADC_ConfigChannel+0x864>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d101      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x810>
 8002d24:	4a16      	ldr	r2, [pc, #88]	; (8002d80 <HAL_ADC_ConfigChannel+0x868>)
 8002d26:	e000      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x812>
 8002d28:	4a10      	ldr	r2, [pc, #64]	; (8002d6c <HAL_ADC_ConfigChannel+0x854>)
 8002d2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d32:	4619      	mov	r1, r3
 8002d34:	4610      	mov	r0, r2
 8002d36:	f7fe ff10 	bl	8001b5a <LL_ADC_SetCommonPathInternalCh>
 8002d3a:	e00c      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d40:	f043 0220 	orr.w	r2, r3, #32
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d4e:	e002      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d50:	bf00      	nop
 8002d52:	e000      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	37d8      	adds	r7, #216	; 0xd8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	50000700 	.word	0x50000700
 8002d70:	c3210000 	.word	0xc3210000
 8002d74:	90c00010 	.word	0x90c00010
 8002d78:	50000600 	.word	0x50000600
 8002d7c:	50000100 	.word	0x50000100
 8002d80:	50000300 	.word	0x50000300
 8002d84:	20000000 	.word	0x20000000
 8002d88:	053e2d63 	.word	0x053e2d63
 8002d8c:	c7520000 	.word	0xc7520000
 8002d90:	50000500 	.word	0x50000500
 8002d94:	cb840000 	.word	0xcb840000

08002d98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff f8a7 	bl	8001efc <LL_ADC_IsEnabled>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d176      	bne.n	8002ea2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	4b3c      	ldr	r3, [pc, #240]	; (8002eac <ADC_Enable+0x114>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc6:	f043 0210 	orr.w	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd2:	f043 0201 	orr.w	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e062      	b.n	8002ea4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff f862 	bl	8001eac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002df0:	d004      	beq.n	8002dfc <ADC_Enable+0x64>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a2e      	ldr	r2, [pc, #184]	; (8002eb0 <ADC_Enable+0x118>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d101      	bne.n	8002e00 <ADC_Enable+0x68>
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	; (8002eb4 <ADC_Enable+0x11c>)
 8002dfe:	e000      	b.n	8002e02 <ADC_Enable+0x6a>
 8002e00:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <ADC_Enable+0x120>)
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe febc 	bl	8001b80 <LL_ADC_GetCommonPathInternalCh>
 8002e08:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d013      	beq.n	8002e3a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e12:	4b2a      	ldr	r3, [pc, #168]	; (8002ebc <ADC_Enable+0x124>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	099b      	lsrs	r3, r3, #6
 8002e18:	4a29      	ldr	r2, [pc, #164]	; (8002ec0 <ADC_Enable+0x128>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	099b      	lsrs	r3, r3, #6
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	4613      	mov	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e2c:	e002      	b.n	8002e34 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f9      	bne.n	8002e2e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e3a:	f7fe fe6f 	bl	8001b1c <HAL_GetTick>
 8002e3e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e40:	e028      	b.n	8002e94 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff f858 	bl	8001efc <LL_ADC_IsEnabled>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d104      	bne.n	8002e5c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f828 	bl	8001eac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e5c:	f7fe fe5e 	bl	8001b1c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d914      	bls.n	8002e94 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d00d      	beq.n	8002e94 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	f043 0210 	orr.w	r2, r3, #16
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e88:	f043 0201 	orr.w	r2, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e007      	b.n	8002ea4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d1cf      	bne.n	8002e42 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	8000003f 	.word	0x8000003f
 8002eb0:	50000100 	.word	0x50000100
 8002eb4:	50000300 	.word	0x50000300
 8002eb8:	50000700 	.word	0x50000700
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	053e2d63 	.word	0x053e2d63

08002ec4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff f826 	bl	8001f22 <LL_ADC_IsDisableOngoing>
 8002ed6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff f80d 	bl	8001efc <LL_ADC_IsEnabled>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d047      	beq.n	8002f78 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d144      	bne.n	8002f78 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 030d 	and.w	r3, r3, #13
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d10c      	bne.n	8002f16 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fe ffe7 	bl	8001ed4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f0e:	f7fe fe05 	bl	8001b1c <HAL_GetTick>
 8002f12:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f14:	e029      	b.n	8002f6a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	f043 0210 	orr.w	r2, r3, #16
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f26:	f043 0201 	orr.w	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e023      	b.n	8002f7a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f32:	f7fe fdf3 	bl	8001b1c <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d914      	bls.n	8002f6a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00d      	beq.n	8002f6a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f52:	f043 0210 	orr.w	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e007      	b.n	8002f7a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1dc      	bne.n	8002f32 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d14b      	bne.n	8003034 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d021      	beq.n	8002ffa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe fe8c 	bl	8001cd8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d032      	beq.n	800302c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d12b      	bne.n	800302c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d11f      	bne.n	800302c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	f043 0201 	orr.w	r2, r3, #1
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ff8:	e018      	b.n	800302c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d111      	bne.n	800302c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d105      	bne.n	800302c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003024:	f043 0201 	orr.w	r2, r3, #1
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7ff fa55 	bl	80024dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003032:	e00e      	b.n	8003052 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7ff fa5f 	bl	8002504 <HAL_ADC_ErrorCallback>
}
 8003046:	e004      	b.n	8003052 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	4798      	blx	r3
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003066:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f7ff fa41 	bl	80024f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003094:	f043 0204 	orr.w	r2, r3, #4
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f7ff fa31 	bl	8002504 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <LL_ADC_IsEnabled>:
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <LL_ADC_IsEnabled+0x18>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <LL_ADC_IsEnabled+0x1a>
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_ADC_StartCalibration>:
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80030e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	609a      	str	r2, [r3, #8]
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <LL_ADC_IsCalibrationOnGoing>:
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003116:	d101      	bne.n	800311c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <LL_ADC_REG_IsConversionOngoing>:
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b04      	cmp	r3, #4
 800313c:	d101      	bne.n	8003142 <LL_ADC_REG_IsConversionOngoing+0x18>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_ADCEx_Calibration_Start+0x1c>
 8003168:	2302      	movs	r3, #2
 800316a:	e04d      	b.n	8003208 <HAL_ADCEx_Calibration_Start+0xb8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff fea5 	bl	8002ec4 <ADC_Disable>
 800317a:	4603      	mov	r3, r0
 800317c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d136      	bne.n	80031f2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003188:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800318c:	f023 0302 	bic.w	r3, r3, #2
 8003190:	f043 0202 	orr.w	r2, r3, #2
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6839      	ldr	r1, [r7, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff96 	bl	80030d0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031a4:	e014      	b.n	80031d0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	3301      	adds	r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4a18      	ldr	r2, [pc, #96]	; (8003210 <HAL_ADCEx_Calibration_Start+0xc0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d90d      	bls.n	80031d0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	f023 0312 	bic.w	r3, r3, #18
 80031bc:	f043 0210 	orr.w	r2, r3, #16
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e01b      	b.n	8003208 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff94 	bl	8003102 <LL_ADC_IsCalibrationOnGoing>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e2      	bne.n	80031a6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e4:	f023 0303 	bic.w	r3, r3, #3
 80031e8:	f043 0201 	orr.w	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80031f0:	e005      	b.n	80031fe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f6:	f043 0210 	orr.w	r2, r3, #16
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	0004de01 	.word	0x0004de01

08003214 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b0a1      	sub	sp, #132	; 0x84
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800322e:	2302      	movs	r3, #2
 8003230:	e0e7      	b.n	8003402 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800323a:	2300      	movs	r3, #0
 800323c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800323e:	2300      	movs	r3, #0
 8003240:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800324a:	d102      	bne.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800324c:	4b6f      	ldr	r3, [pc, #444]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	e009      	b.n	8003266 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6e      	ldr	r2, [pc, #440]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d102      	bne.n	8003262 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800325c:	4b6d      	ldr	r3, [pc, #436]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	e001      	b.n	8003266 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10b      	bne.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003270:	f043 0220 	orr.w	r2, r3, #32
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0be      	b.n	8003402 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ff4f 	bl	800312a <LL_ADC_REG_IsConversionOngoing>
 800328c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff ff49 	bl	800312a <LL_ADC_REG_IsConversionOngoing>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	f040 80a0 	bne.w	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80032a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 809c 	bne.w	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032b0:	d004      	beq.n	80032bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a55      	ldr	r2, [pc, #340]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d101      	bne.n	80032c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80032bc:	4b56      	ldr	r3, [pc, #344]	; (8003418 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80032be:	e000      	b.n	80032c2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80032c0:	4b56      	ldr	r3, [pc, #344]	; (800341c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80032c2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d04b      	beq.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032de:	035b      	lsls	r3, r3, #13
 80032e0:	430b      	orrs	r3, r1
 80032e2:	431a      	orrs	r2, r3
 80032e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032f0:	d004      	beq.n	80032fc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a45      	ldr	r2, [pc, #276]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d10f      	bne.n	800331c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80032fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003300:	f7ff fed3 	bl	80030aa <LL_ADC_IsEnabled>
 8003304:	4604      	mov	r4, r0
 8003306:	4841      	ldr	r0, [pc, #260]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003308:	f7ff fecf 	bl	80030aa <LL_ADC_IsEnabled>
 800330c:	4603      	mov	r3, r0
 800330e:	4323      	orrs	r3, r4
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	e012      	b.n	8003342 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800331c:	483c      	ldr	r0, [pc, #240]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800331e:	f7ff fec4 	bl	80030aa <LL_ADC_IsEnabled>
 8003322:	4604      	mov	r4, r0
 8003324:	483b      	ldr	r0, [pc, #236]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003326:	f7ff fec0 	bl	80030aa <LL_ADC_IsEnabled>
 800332a:	4603      	mov	r3, r0
 800332c:	431c      	orrs	r4, r3
 800332e:	483c      	ldr	r0, [pc, #240]	; (8003420 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003330:	f7ff febb 	bl	80030aa <LL_ADC_IsEnabled>
 8003334:	4603      	mov	r3, r0
 8003336:	4323      	orrs	r3, r4
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d056      	beq.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800334e:	f023 030f 	bic.w	r3, r3, #15
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	6811      	ldr	r1, [r2, #0]
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	6892      	ldr	r2, [r2, #8]
 800335a:	430a      	orrs	r2, r1
 800335c:	431a      	orrs	r2, r3
 800335e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003360:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003362:	e047      	b.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800336c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800336e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003378:	d004      	beq.n	8003384 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a23      	ldr	r2, [pc, #140]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d10f      	bne.n	80033a4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003384:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003388:	f7ff fe8f 	bl	80030aa <LL_ADC_IsEnabled>
 800338c:	4604      	mov	r4, r0
 800338e:	481f      	ldr	r0, [pc, #124]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003390:	f7ff fe8b 	bl	80030aa <LL_ADC_IsEnabled>
 8003394:	4603      	mov	r3, r0
 8003396:	4323      	orrs	r3, r4
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	e012      	b.n	80033ca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80033a4:	481a      	ldr	r0, [pc, #104]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033a6:	f7ff fe80 	bl	80030aa <LL_ADC_IsEnabled>
 80033aa:	4604      	mov	r4, r0
 80033ac:	4819      	ldr	r0, [pc, #100]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033ae:	f7ff fe7c 	bl	80030aa <LL_ADC_IsEnabled>
 80033b2:	4603      	mov	r3, r0
 80033b4:	431c      	orrs	r4, r3
 80033b6:	481a      	ldr	r0, [pc, #104]	; (8003420 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80033b8:	f7ff fe77 	bl	80030aa <LL_ADC_IsEnabled>
 80033bc:	4603      	mov	r3, r0
 80033be:	4323      	orrs	r3, r4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d012      	beq.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033d6:	f023 030f 	bic.w	r3, r3, #15
 80033da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80033dc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033de:	e009      	b.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	f043 0220 	orr.w	r2, r3, #32
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80033f2:	e000      	b.n	80033f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80033fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003402:	4618      	mov	r0, r3
 8003404:	3784      	adds	r7, #132	; 0x84
 8003406:	46bd      	mov	sp, r7
 8003408:	bd90      	pop	{r4, r7, pc}
 800340a:	bf00      	nop
 800340c:	50000100 	.word	0x50000100
 8003410:	50000400 	.word	0x50000400
 8003414:	50000500 	.word	0x50000500
 8003418:	50000300 	.word	0x50000300
 800341c:	50000700 	.word	0x50000700
 8003420:	50000600 	.word	0x50000600

08003424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003434:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <__NVIC_SetPriorityGrouping+0x44>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003440:	4013      	ands	r3, r2
 8003442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800344c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003456:	4a04      	ldr	r2, [pc, #16]	; (8003468 <__NVIC_SetPriorityGrouping+0x44>)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	60d3      	str	r3, [r2, #12]
}
 800345c:	bf00      	nop
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <__NVIC_GetPriorityGrouping+0x18>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	0a1b      	lsrs	r3, r3, #8
 8003476:	f003 0307 	and.w	r3, r3, #7
}
 800347a:	4618      	mov	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003496:	2b00      	cmp	r3, #0
 8003498:	db0b      	blt.n	80034b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	f003 021f 	and.w	r2, r3, #31
 80034a0:	4907      	ldr	r1, [pc, #28]	; (80034c0 <__NVIC_EnableIRQ+0x38>)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	2001      	movs	r0, #1
 80034aa:	fa00 f202 	lsl.w	r2, r0, r2
 80034ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	e000e100 	.word	0xe000e100

080034c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	6039      	str	r1, [r7, #0]
 80034ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	db0a      	blt.n	80034ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	490c      	ldr	r1, [pc, #48]	; (8003510 <__NVIC_SetPriority+0x4c>)
 80034de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e2:	0112      	lsls	r2, r2, #4
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	440b      	add	r3, r1
 80034e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034ec:	e00a      	b.n	8003504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	4908      	ldr	r1, [pc, #32]	; (8003514 <__NVIC_SetPriority+0x50>)
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	3b04      	subs	r3, #4
 80034fc:	0112      	lsls	r2, r2, #4
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	440b      	add	r3, r1
 8003502:	761a      	strb	r2, [r3, #24]
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000e100 	.word	0xe000e100
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f1c3 0307 	rsb	r3, r3, #7
 8003532:	2b04      	cmp	r3, #4
 8003534:	bf28      	it	cs
 8003536:	2304      	movcs	r3, #4
 8003538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3304      	adds	r3, #4
 800353e:	2b06      	cmp	r3, #6
 8003540:	d902      	bls.n	8003548 <NVIC_EncodePriority+0x30>
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3b03      	subs	r3, #3
 8003546:	e000      	b.n	800354a <NVIC_EncodePriority+0x32>
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800354c:	f04f 32ff 	mov.w	r2, #4294967295
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43da      	mvns	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	401a      	ands	r2, r3
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003560:	f04f 31ff 	mov.w	r1, #4294967295
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	43d9      	mvns	r1, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003570:	4313      	orrs	r3, r2
         );
}
 8003572:	4618      	mov	r0, r3
 8003574:	3724      	adds	r7, #36	; 0x24
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003590:	d301      	bcc.n	8003596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003592:	2301      	movs	r3, #1
 8003594:	e00f      	b.n	80035b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003596:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <SysTick_Config+0x40>)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359e:	210f      	movs	r1, #15
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295
 80035a4:	f7ff ff8e 	bl	80034c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <SysTick_Config+0x40>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <SysTick_Config+0x40>)
 80035b0:	2207      	movs	r2, #7
 80035b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	e000e010 	.word	0xe000e010

080035c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff ff29 	bl	8003424 <__NVIC_SetPriorityGrouping>
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	4603      	mov	r3, r0
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035e8:	f7ff ff40 	bl	800346c <__NVIC_GetPriorityGrouping>
 80035ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	6978      	ldr	r0, [r7, #20]
 80035f4:	f7ff ff90 	bl	8003518 <NVIC_EncodePriority>
 80035f8:	4602      	mov	r2, r0
 80035fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff5f 	bl	80034c4 <__NVIC_SetPriority>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	4603      	mov	r3, r0
 8003616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff33 	bl	8003488 <__NVIC_EnableIRQ>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ffa4 	bl	8003580 <SysTick_Config>
 8003638:	4603      	mov	r3, r0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e08d      	b.n	8003772 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_DMA_Init+0x138>)
 800365e:	429a      	cmp	r2, r3
 8003660:	d80f      	bhi.n	8003682 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	4b45      	ldr	r3, [pc, #276]	; (8003780 <HAL_DMA_Init+0x13c>)
 800366a:	4413      	add	r3, r2
 800366c:	4a45      	ldr	r2, [pc, #276]	; (8003784 <HAL_DMA_Init+0x140>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	009a      	lsls	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a42      	ldr	r2, [pc, #264]	; (8003788 <HAL_DMA_Init+0x144>)
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
 8003680:	e00e      	b.n	80036a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	4b40      	ldr	r3, [pc, #256]	; (800378c <HAL_DMA_Init+0x148>)
 800368a:	4413      	add	r3, r2
 800368c:	4a3d      	ldr	r2, [pc, #244]	; (8003784 <HAL_DMA_Init+0x140>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	091b      	lsrs	r3, r3, #4
 8003694:	009a      	lsls	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a3c      	ldr	r2, [pc, #240]	; (8003790 <HAL_DMA_Init+0x14c>)
 800369e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f9b6 	bl	8003a64 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003700:	d102      	bne.n	8003708 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800371c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d010      	beq.n	8003748 <HAL_DMA_Init+0x104>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b04      	cmp	r3, #4
 800372c:	d80c      	bhi.n	8003748 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f9d6 	bl	8003ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	e008      	b.n	800375a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40020407 	.word	0x40020407
 8003780:	bffdfff8 	.word	0xbffdfff8
 8003784:	cccccccd 	.word	0xcccccccd
 8003788:	40020000 	.word	0x40020000
 800378c:	bffdfbf8 	.word	0xbffdfbf8
 8003790:	40020400 	.word	0x40020400

08003794 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_DMA_Start_IT+0x20>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e066      	b.n	8003882 <HAL_DMA_Start_IT+0xee>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d155      	bne.n	8003874 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f8fb 	bl	80039e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 020e 	orr.w	r2, r2, #14
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e00f      	b.n	800382c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 020a 	orr.w	r2, r2, #10
 800382a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003848:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003860:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0201 	orr.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	e005      	b.n	8003880 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800387c:	2302      	movs	r3, #2
 800387e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003880:	7dfb      	ldrb	r3, [r7, #23]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	2204      	movs	r2, #4
 80038ac:	409a      	lsls	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d026      	beq.n	8003904 <HAL_DMA_IRQHandler+0x7a>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d021      	beq.n	8003904 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d107      	bne.n	80038de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0204 	bic.w	r2, r2, #4
 80038dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f003 021f 	and.w	r2, r3, #31
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2104      	movs	r1, #4
 80038ec:	fa01 f202 	lsl.w	r2, r1, r2
 80038f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d071      	beq.n	80039de <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003902:	e06c      	b.n	80039de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	2202      	movs	r2, #2
 800390e:	409a      	lsls	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4013      	ands	r3, r2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d02e      	beq.n	8003976 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d029      	beq.n	8003976 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 020a 	bic.w	r2, r2, #10
 800393e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394c:	f003 021f 	and.w	r2, r3, #31
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	2102      	movs	r1, #2
 8003956:	fa01 f202 	lsl.w	r2, r1, r2
 800395a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d038      	beq.n	80039de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003974:	e033      	b.n	80039de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	2208      	movs	r2, #8
 8003980:	409a      	lsls	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d02a      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d025      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 020e 	bic.w	r2, r2, #14
 80039a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	f003 021f 	and.w	r2, r3, #31
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	2101      	movs	r1, #1
 80039b2:	fa01 f202 	lsl.w	r2, r1, r2
 80039b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d004      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039de:	bf00      	nop
 80039e0:	bf00      	nop
}
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039fe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d004      	beq.n	8003a12 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a10:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	f003 021f 	and.w	r2, r3, #31
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	2101      	movs	r1, #1
 8003a20:	fa01 f202 	lsl.w	r2, r1, r2
 8003a24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b10      	cmp	r3, #16
 8003a34:	d108      	bne.n	8003a48 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a46:	e007      	b.n	8003a58 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	60da      	str	r2, [r3, #12]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	4b16      	ldr	r3, [pc, #88]	; (8003acc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d802      	bhi.n	8003a7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003a78:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	e001      	b.n	8003a82 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a80:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	3b08      	subs	r3, #8
 8003a8e:	4a12      	ldr	r2, [pc, #72]	; (8003ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9c:	089b      	lsrs	r3, r3, #2
 8003a9e:	009a      	lsls	r2, r3, #2
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a0b      	ldr	r2, [pc, #44]	; (8003adc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003aae:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 031f 	and.w	r3, r3, #31
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40020407 	.word	0x40020407
 8003ad0:	40020800 	.word	0x40020800
 8003ad4:	40020820 	.word	0x40020820
 8003ad8:	cccccccd 	.word	0xcccccccd
 8003adc:	40020880 	.word	0x40020880

08003ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	461a      	mov	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a08      	ldr	r2, [pc, #32]	; (8003b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b02:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	1000823f 	.word	0x1000823f
 8003b24:	40020940 	.word	0x40020940

08003b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b36:	e15a      	b.n	8003dee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	4013      	ands	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 814c 	beq.w	8003de8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 0303 	and.w	r3, r3, #3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d005      	beq.n	8003b68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d130      	bne.n	8003bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	2203      	movs	r2, #3
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4013      	ands	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	f003 0201 	and.w	r2, r3, #1
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d017      	beq.n	8003c06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	2203      	movs	r2, #3
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4013      	ands	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d123      	bne.n	8003c5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	08da      	lsrs	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3208      	adds	r2, #8
 8003c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	220f      	movs	r2, #15
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	08da      	lsrs	r2, r3, #3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3208      	adds	r2, #8
 8003c54:	6939      	ldr	r1, [r7, #16]
 8003c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	2203      	movs	r2, #3
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f003 0203 	and.w	r2, r3, #3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80a6 	beq.w	8003de8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c9c:	4b5b      	ldr	r3, [pc, #364]	; (8003e0c <HAL_GPIO_Init+0x2e4>)
 8003c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca0:	4a5a      	ldr	r2, [pc, #360]	; (8003e0c <HAL_GPIO_Init+0x2e4>)
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	6613      	str	r3, [r2, #96]	; 0x60
 8003ca8:	4b58      	ldr	r3, [pc, #352]	; (8003e0c <HAL_GPIO_Init+0x2e4>)
 8003caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cb4:	4a56      	ldr	r2, [pc, #344]	; (8003e10 <HAL_GPIO_Init+0x2e8>)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	089b      	lsrs	r3, r3, #2
 8003cba:	3302      	adds	r3, #2
 8003cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	220f      	movs	r2, #15
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cde:	d01f      	beq.n	8003d20 <HAL_GPIO_Init+0x1f8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a4c      	ldr	r2, [pc, #304]	; (8003e14 <HAL_GPIO_Init+0x2ec>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d019      	beq.n	8003d1c <HAL_GPIO_Init+0x1f4>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a4b      	ldr	r2, [pc, #300]	; (8003e18 <HAL_GPIO_Init+0x2f0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d013      	beq.n	8003d18 <HAL_GPIO_Init+0x1f0>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a4a      	ldr	r2, [pc, #296]	; (8003e1c <HAL_GPIO_Init+0x2f4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00d      	beq.n	8003d14 <HAL_GPIO_Init+0x1ec>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a49      	ldr	r2, [pc, #292]	; (8003e20 <HAL_GPIO_Init+0x2f8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d007      	beq.n	8003d10 <HAL_GPIO_Init+0x1e8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a48      	ldr	r2, [pc, #288]	; (8003e24 <HAL_GPIO_Init+0x2fc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d101      	bne.n	8003d0c <HAL_GPIO_Init+0x1e4>
 8003d08:	2305      	movs	r3, #5
 8003d0a:	e00a      	b.n	8003d22 <HAL_GPIO_Init+0x1fa>
 8003d0c:	2306      	movs	r3, #6
 8003d0e:	e008      	b.n	8003d22 <HAL_GPIO_Init+0x1fa>
 8003d10:	2304      	movs	r3, #4
 8003d12:	e006      	b.n	8003d22 <HAL_GPIO_Init+0x1fa>
 8003d14:	2303      	movs	r3, #3
 8003d16:	e004      	b.n	8003d22 <HAL_GPIO_Init+0x1fa>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e002      	b.n	8003d22 <HAL_GPIO_Init+0x1fa>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <HAL_GPIO_Init+0x1fa>
 8003d20:	2300      	movs	r3, #0
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	f002 0203 	and.w	r2, r2, #3
 8003d28:	0092      	lsls	r2, r2, #2
 8003d2a:	4093      	lsls	r3, r2
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d32:	4937      	ldr	r1, [pc, #220]	; (8003e10 <HAL_GPIO_Init+0x2e8>)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	089b      	lsrs	r3, r3, #2
 8003d38:	3302      	adds	r3, #2
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d40:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <HAL_GPIO_Init+0x300>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d64:	4a30      	ldr	r2, [pc, #192]	; (8003e28 <HAL_GPIO_Init+0x300>)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d6a:	4b2f      	ldr	r3, [pc, #188]	; (8003e28 <HAL_GPIO_Init+0x300>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4013      	ands	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d8e:	4a26      	ldr	r2, [pc, #152]	; (8003e28 <HAL_GPIO_Init+0x300>)
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003d94:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <HAL_GPIO_Init+0x300>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4013      	ands	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003db8:	4a1b      	ldr	r2, [pc, #108]	; (8003e28 <HAL_GPIO_Init+0x300>)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003dbe:	4b1a      	ldr	r3, [pc, #104]	; (8003e28 <HAL_GPIO_Init+0x300>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003de2:	4a11      	ldr	r2, [pc, #68]	; (8003e28 <HAL_GPIO_Init+0x300>)
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	3301      	adds	r3, #1
 8003dec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f47f ae9d 	bne.w	8003b38 <HAL_GPIO_Init+0x10>
  }
}
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40010000 	.word	0x40010000
 8003e14:	48000400 	.word	0x48000400
 8003e18:	48000800 	.word	0x48000800
 8003e1c:	48000c00 	.word	0x48000c00
 8003e20:	48001000 	.word	0x48001000
 8003e24:	48001400 	.word	0x48001400
 8003e28:	40010400 	.word	0x40010400

08003e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	807b      	strh	r3, [r7, #2]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e3c:	787b      	ldrb	r3, [r7, #1]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e42:	887a      	ldrh	r2, [r7, #2]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e48:	e002      	b.n	8003e50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e4a:	887a      	ldrh	r2, [r7, #2]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e66:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e68:	695a      	ldr	r2, [r3, #20]
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d006      	beq.n	8003e80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e72:	4a05      	ldr	r2, [pc, #20]	; (8003e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e78:	88fb      	ldrh	r3, [r7, #6]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f806 	bl	8003e8c <HAL_GPIO_EXTI_Callback>
  }
}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40010400 	.word	0x40010400

08003e8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d141      	bne.n	8003f36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eb2:	4b4b      	ldr	r3, [pc, #300]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ebe:	d131      	bne.n	8003f24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ec0:	4b47      	ldr	r3, [pc, #284]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ec6:	4a46      	ldr	r2, [pc, #280]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ecc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ed0:	4b43      	ldr	r3, [pc, #268]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ed8:	4a41      	ldr	r2, [pc, #260]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ede:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ee0:	4b40      	ldr	r3, [pc, #256]	; (8003fe4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2232      	movs	r2, #50	; 0x32
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	4a3f      	ldr	r2, [pc, #252]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003eec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef0:	0c9b      	lsrs	r3, r3, #18
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ef6:	e002      	b.n	8003efe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003efe:	4b38      	ldr	r3, [pc, #224]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0a:	d102      	bne.n	8003f12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f2      	bne.n	8003ef8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f12:	4b33      	ldr	r3, [pc, #204]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1e:	d158      	bne.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e057      	b.n	8003fd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f24:	4b2e      	ldr	r3, [pc, #184]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f2a:	4a2d      	ldr	r2, [pc, #180]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f34:	e04d      	b.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f3c:	d141      	bne.n	8003fc2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f3e:	4b28      	ldr	r3, [pc, #160]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4a:	d131      	bne.n	8003fb0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f4c:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f52:	4a23      	ldr	r2, [pc, #140]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f5c:	4b20      	ldr	r3, [pc, #128]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f64:	4a1e      	ldr	r2, [pc, #120]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f6c:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2232      	movs	r2, #50	; 0x32
 8003f72:	fb02 f303 	mul.w	r3, r2, r3
 8003f76:	4a1c      	ldr	r2, [pc, #112]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f78:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7c:	0c9b      	lsrs	r3, r3, #18
 8003f7e:	3301      	adds	r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f82:	e002      	b.n	8003f8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f8a:	4b15      	ldr	r3, [pc, #84]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f96:	d102      	bne.n	8003f9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f2      	bne.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f9e:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003faa:	d112      	bne.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e011      	b.n	8003fd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fb6:	4a0a      	ldr	r2, [pc, #40]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003fc0:	e007      	b.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fc2:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fca:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fd0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	40007000 	.word	0x40007000
 8003fe4:	20000000 	.word	0x20000000
 8003fe8:	431bde83 	.word	0x431bde83

08003fec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ff0:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4a04      	ldr	r2, [pc, #16]	; (8004008 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ffa:	6093      	str	r3, [r2, #8]
}
 8003ffc:	bf00      	nop
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40007000 	.word	0x40007000

0800400c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e2fe      	b.n	800461c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d075      	beq.n	8004116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800402a:	4b97      	ldr	r3, [pc, #604]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004034:	4b94      	ldr	r3, [pc, #592]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b0c      	cmp	r3, #12
 8004042:	d102      	bne.n	800404a <HAL_RCC_OscConfig+0x3e>
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2b03      	cmp	r3, #3
 8004048:	d002      	beq.n	8004050 <HAL_RCC_OscConfig+0x44>
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d10b      	bne.n	8004068 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004050:	4b8d      	ldr	r3, [pc, #564]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d05b      	beq.n	8004114 <HAL_RCC_OscConfig+0x108>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d157      	bne.n	8004114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e2d9      	b.n	800461c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004070:	d106      	bne.n	8004080 <HAL_RCC_OscConfig+0x74>
 8004072:	4b85      	ldr	r3, [pc, #532]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a84      	ldr	r2, [pc, #528]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 8004078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e01d      	b.n	80040bc <HAL_RCC_OscConfig+0xb0>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004088:	d10c      	bne.n	80040a4 <HAL_RCC_OscConfig+0x98>
 800408a:	4b7f      	ldr	r3, [pc, #508]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a7e      	ldr	r2, [pc, #504]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 8004090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	4b7c      	ldr	r3, [pc, #496]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a7b      	ldr	r2, [pc, #492]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e00b      	b.n	80040bc <HAL_RCC_OscConfig+0xb0>
 80040a4:	4b78      	ldr	r3, [pc, #480]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a77      	ldr	r2, [pc, #476]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 80040aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	4b75      	ldr	r3, [pc, #468]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a74      	ldr	r2, [pc, #464]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 80040b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d013      	beq.n	80040ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fd fd2a 	bl	8001b1c <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fd fd26 	bl	8001b1c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	; 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e29e      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040de:	4b6a      	ldr	r3, [pc, #424]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0xc0>
 80040ea:	e014      	b.n	8004116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fd fd16 	bl	8001b1c <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f4:	f7fd fd12 	bl	8001b1c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	; 0x64
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e28a      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004106:	4b60      	ldr	r3, [pc, #384]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0xe8>
 8004112:	e000      	b.n	8004116 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d075      	beq.n	800420e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004122:	4b59      	ldr	r3, [pc, #356]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 030c 	and.w	r3, r3, #12
 800412a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800412c:	4b56      	ldr	r3, [pc, #344]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	2b0c      	cmp	r3, #12
 800413a:	d102      	bne.n	8004142 <HAL_RCC_OscConfig+0x136>
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d002      	beq.n	8004148 <HAL_RCC_OscConfig+0x13c>
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b04      	cmp	r3, #4
 8004146:	d11f      	bne.n	8004188 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004148:	4b4f      	ldr	r3, [pc, #316]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_OscConfig+0x154>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e25d      	b.n	800461c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004160:	4b49      	ldr	r3, [pc, #292]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	061b      	lsls	r3, r3, #24
 800416e:	4946      	ldr	r1, [pc, #280]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004174:	4b45      	ldr	r3, [pc, #276]	; (800428c <HAL_RCC_OscConfig+0x280>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f7fd fc83 	bl	8001a84 <HAL_InitTick>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d043      	beq.n	800420c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e249      	b.n	800461c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d023      	beq.n	80041d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004190:	4b3d      	ldr	r3, [pc, #244]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a3c      	ldr	r2, [pc, #240]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 8004196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fd fcbe 	bl	8001b1c <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a4:	f7fd fcba 	bl	8001b1c <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e232      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041b6:	4b34      	ldr	r3, [pc, #208]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c2:	4b31      	ldr	r3, [pc, #196]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	061b      	lsls	r3, r3, #24
 80041d0:	492d      	ldr	r1, [pc, #180]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	604b      	str	r3, [r1, #4]
 80041d6:	e01a      	b.n	800420e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041d8:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a2a      	ldr	r2, [pc, #168]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 80041de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fd fc9a 	bl	8001b1c <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ec:	f7fd fc96 	bl	8001b1c <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e20e      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041fe:	4b22      	ldr	r3, [pc, #136]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0x1e0>
 800420a:	e000      	b.n	800420e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800420c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d041      	beq.n	800429e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d01c      	beq.n	800425c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004222:	4b19      	ldr	r3, [pc, #100]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 8004224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004228:	4a17      	ldr	r2, [pc, #92]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004232:	f7fd fc73 	bl	8001b1c <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800423a:	f7fd fc6f 	bl	8001b1c <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e1e7      	b.n	800461c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800424c:	4b0e      	ldr	r3, [pc, #56]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 800424e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0ef      	beq.n	800423a <HAL_RCC_OscConfig+0x22e>
 800425a:	e020      	b.n	800429e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800425c:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 800425e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004262:	4a09      	ldr	r2, [pc, #36]	; (8004288 <HAL_RCC_OscConfig+0x27c>)
 8004264:	f023 0301 	bic.w	r3, r3, #1
 8004268:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426c:	f7fd fc56 	bl	8001b1c <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004272:	e00d      	b.n	8004290 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004274:	f7fd fc52 	bl	8001b1c <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d906      	bls.n	8004290 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e1ca      	b.n	800461c <HAL_RCC_OscConfig+0x610>
 8004286:	bf00      	nop
 8004288:	40021000 	.word	0x40021000
 800428c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004290:	4b8c      	ldr	r3, [pc, #560]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 8004292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1ea      	bne.n	8004274 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80a6 	beq.w	80043f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ac:	2300      	movs	r3, #0
 80042ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042b0:	4b84      	ldr	r3, [pc, #528]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 80042b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_OscConfig+0x2b4>
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <HAL_RCC_OscConfig+0x2b6>
 80042c0:	2300      	movs	r3, #0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00d      	beq.n	80042e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c6:	4b7f      	ldr	r3, [pc, #508]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	4a7e      	ldr	r2, [pc, #504]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 80042cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d0:	6593      	str	r3, [r2, #88]	; 0x58
 80042d2:	4b7c      	ldr	r3, [pc, #496]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 80042d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80042de:	2301      	movs	r3, #1
 80042e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e2:	4b79      	ldr	r3, [pc, #484]	; (80044c8 <HAL_RCC_OscConfig+0x4bc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d118      	bne.n	8004320 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042ee:	4b76      	ldr	r3, [pc, #472]	; (80044c8 <HAL_RCC_OscConfig+0x4bc>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a75      	ldr	r2, [pc, #468]	; (80044c8 <HAL_RCC_OscConfig+0x4bc>)
 80042f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042fa:	f7fd fc0f 	bl	8001b1c <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004302:	f7fd fc0b 	bl	8001b1c <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e183      	b.n	800461c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004314:	4b6c      	ldr	r3, [pc, #432]	; (80044c8 <HAL_RCC_OscConfig+0x4bc>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f0      	beq.n	8004302 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d108      	bne.n	800433a <HAL_RCC_OscConfig+0x32e>
 8004328:	4b66      	ldr	r3, [pc, #408]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	4a65      	ldr	r2, [pc, #404]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004338:	e024      	b.n	8004384 <HAL_RCC_OscConfig+0x378>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b05      	cmp	r3, #5
 8004340:	d110      	bne.n	8004364 <HAL_RCC_OscConfig+0x358>
 8004342:	4b60      	ldr	r3, [pc, #384]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 8004344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004348:	4a5e      	ldr	r2, [pc, #376]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 800434a:	f043 0304 	orr.w	r3, r3, #4
 800434e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004352:	4b5c      	ldr	r3, [pc, #368]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 8004354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004358:	4a5a      	ldr	r2, [pc, #360]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004362:	e00f      	b.n	8004384 <HAL_RCC_OscConfig+0x378>
 8004364:	4b57      	ldr	r3, [pc, #348]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 8004366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436a:	4a56      	ldr	r2, [pc, #344]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004374:	4b53      	ldr	r3, [pc, #332]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437a:	4a52      	ldr	r2, [pc, #328]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 800437c:	f023 0304 	bic.w	r3, r3, #4
 8004380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d016      	beq.n	80043ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438c:	f7fd fbc6 	bl	8001b1c <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004392:	e00a      	b.n	80043aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004394:	f7fd fbc2 	bl	8001b1c <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e138      	b.n	800461c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043aa:	4b46      	ldr	r3, [pc, #280]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0ed      	beq.n	8004394 <HAL_RCC_OscConfig+0x388>
 80043b8:	e015      	b.n	80043e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ba:	f7fd fbaf 	bl	8001b1c <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043c0:	e00a      	b.n	80043d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c2:	f7fd fbab 	bl	8001b1c <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e121      	b.n	800461c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043d8:	4b3a      	ldr	r3, [pc, #232]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1ed      	bne.n	80043c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043e6:	7ffb      	ldrb	r3, [r7, #31]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d105      	bne.n	80043f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ec:	4b35      	ldr	r3, [pc, #212]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	4a34      	ldr	r2, [pc, #208]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 80043f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d03c      	beq.n	800447e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01c      	beq.n	8004446 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800440c:	4b2d      	ldr	r3, [pc, #180]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 800440e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004412:	4a2c      	ldr	r2, [pc, #176]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 8004414:	f043 0301 	orr.w	r3, r3, #1
 8004418:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441c:	f7fd fb7e 	bl	8001b1c <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004424:	f7fd fb7a 	bl	8001b1c <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e0f2      	b.n	800461c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004436:	4b23      	ldr	r3, [pc, #140]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 8004438:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0ef      	beq.n	8004424 <HAL_RCC_OscConfig+0x418>
 8004444:	e01b      	b.n	800447e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004446:	4b1f      	ldr	r3, [pc, #124]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 8004448:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800444c:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004456:	f7fd fb61 	bl	8001b1c <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800445e:	f7fd fb5d 	bl	8001b1c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e0d5      	b.n	800461c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004470:	4b14      	ldr	r3, [pc, #80]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 8004472:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1ef      	bne.n	800445e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 80c9 	beq.w	800461a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004488:	4b0e      	ldr	r3, [pc, #56]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 030c 	and.w	r3, r3, #12
 8004490:	2b0c      	cmp	r3, #12
 8004492:	f000 8083 	beq.w	800459c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d15e      	bne.n	800455c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a08      	ldr	r2, [pc, #32]	; (80044c4 <HAL_RCC_OscConfig+0x4b8>)
 80044a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044aa:	f7fd fb37 	bl	8001b1c <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b0:	e00c      	b.n	80044cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b2:	f7fd fb33 	bl	8001b1c <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d905      	bls.n	80044cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e0ab      	b.n	800461c <HAL_RCC_OscConfig+0x610>
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044cc:	4b55      	ldr	r3, [pc, #340]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1ec      	bne.n	80044b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044d8:	4b52      	ldr	r3, [pc, #328]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	4b52      	ldr	r3, [pc, #328]	; (8004628 <HAL_RCC_OscConfig+0x61c>)
 80044de:	4013      	ands	r3, r2
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6a11      	ldr	r1, [r2, #32]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044e8:	3a01      	subs	r2, #1
 80044ea:	0112      	lsls	r2, r2, #4
 80044ec:	4311      	orrs	r1, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80044f2:	0212      	lsls	r2, r2, #8
 80044f4:	4311      	orrs	r1, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044fa:	0852      	lsrs	r2, r2, #1
 80044fc:	3a01      	subs	r2, #1
 80044fe:	0552      	lsls	r2, r2, #21
 8004500:	4311      	orrs	r1, r2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004506:	0852      	lsrs	r2, r2, #1
 8004508:	3a01      	subs	r2, #1
 800450a:	0652      	lsls	r2, r2, #25
 800450c:	4311      	orrs	r1, r2
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004512:	06d2      	lsls	r2, r2, #27
 8004514:	430a      	orrs	r2, r1
 8004516:	4943      	ldr	r1, [pc, #268]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004518:	4313      	orrs	r3, r2
 800451a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800451c:	4b41      	ldr	r3, [pc, #260]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a40      	ldr	r2, [pc, #256]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004526:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004528:	4b3e      	ldr	r3, [pc, #248]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4a3d      	ldr	r2, [pc, #244]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 800452e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004532:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fd faf2 	bl	8001b1c <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453c:	f7fd faee 	bl	8001b1c <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e066      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800454e:	4b35      	ldr	r3, [pc, #212]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x530>
 800455a:	e05e      	b.n	800461a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455c:	4b31      	ldr	r3, [pc, #196]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a30      	ldr	r2, [pc, #192]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fd fad8 	bl	8001b1c <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004570:	f7fd fad4 	bl	8001b1c <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e04c      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004582:	4b28      	ldr	r3, [pc, #160]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800458e:	4b25      	ldr	r3, [pc, #148]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	4924      	ldr	r1, [pc, #144]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004594:	4b25      	ldr	r3, [pc, #148]	; (800462c <HAL_RCC_OscConfig+0x620>)
 8004596:	4013      	ands	r3, r2
 8004598:	60cb      	str	r3, [r1, #12]
 800459a:	e03e      	b.n	800461a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e039      	b.n	800461c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80045a8:	4b1e      	ldr	r3, [pc, #120]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f003 0203 	and.w	r2, r3, #3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d12c      	bne.n	8004616 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	3b01      	subs	r3, #1
 80045c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d123      	bne.n	8004616 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045da:	429a      	cmp	r2, r3
 80045dc:	d11b      	bne.n	8004616 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d113      	bne.n	8004616 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	085b      	lsrs	r3, r3, #1
 80045fa:	3b01      	subs	r3, #1
 80045fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045fe:	429a      	cmp	r2, r3
 8004600:	d109      	bne.n	8004616 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460c:	085b      	lsrs	r3, r3, #1
 800460e:	3b01      	subs	r3, #1
 8004610:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004612:	429a      	cmp	r2, r3
 8004614:	d001      	beq.n	800461a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3720      	adds	r7, #32
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40021000 	.word	0x40021000
 8004628:	019f800c 	.word	0x019f800c
 800462c:	feeefffc 	.word	0xfeeefffc

08004630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e11e      	b.n	8004886 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004648:	4b91      	ldr	r3, [pc, #580]	; (8004890 <HAL_RCC_ClockConfig+0x260>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d910      	bls.n	8004678 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004656:	4b8e      	ldr	r3, [pc, #568]	; (8004890 <HAL_RCC_ClockConfig+0x260>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f023 020f 	bic.w	r2, r3, #15
 800465e:	498c      	ldr	r1, [pc, #560]	; (8004890 <HAL_RCC_ClockConfig+0x260>)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	4313      	orrs	r3, r2
 8004664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004666:	4b8a      	ldr	r3, [pc, #552]	; (8004890 <HAL_RCC_ClockConfig+0x260>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d001      	beq.n	8004678 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e106      	b.n	8004886 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d073      	beq.n	800476c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d129      	bne.n	80046e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800468c:	4b81      	ldr	r3, [pc, #516]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0f4      	b.n	8004886 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800469c:	f000 f99e 	bl	80049dc <RCC_GetSysClockFreqFromPLLSource>
 80046a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4a7c      	ldr	r2, [pc, #496]	; (8004898 <HAL_RCC_ClockConfig+0x268>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d93f      	bls.n	800472a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046aa:	4b7a      	ldr	r3, [pc, #488]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d009      	beq.n	80046ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d033      	beq.n	800472a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d12f      	bne.n	800472a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046ca:	4b72      	ldr	r3, [pc, #456]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046d2:	4a70      	ldr	r2, [pc, #448]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80046d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80046da:	2380      	movs	r3, #128	; 0x80
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	e024      	b.n	800472a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046e8:	4b6a      	ldr	r3, [pc, #424]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0c6      	b.n	8004886 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f8:	4b66      	ldr	r3, [pc, #408]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0be      	b.n	8004886 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004708:	f000 f8ce 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 800470c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	4a61      	ldr	r2, [pc, #388]	; (8004898 <HAL_RCC_ClockConfig+0x268>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d909      	bls.n	800472a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004716:	4b5f      	ldr	r3, [pc, #380]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800471e:	4a5d      	ldr	r2, [pc, #372]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 8004720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004724:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004726:	2380      	movs	r3, #128	; 0x80
 8004728:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800472a:	4b5a      	ldr	r3, [pc, #360]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f023 0203 	bic.w	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4957      	ldr	r1, [pc, #348]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 8004738:	4313      	orrs	r3, r2
 800473a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473c:	f7fd f9ee 	bl	8001b1c <HAL_GetTick>
 8004740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004742:	e00a      	b.n	800475a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004744:	f7fd f9ea 	bl	8001b1c <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e095      	b.n	8004886 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475a:	4b4e      	ldr	r3, [pc, #312]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 020c 	and.w	r2, r3, #12
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	429a      	cmp	r2, r3
 800476a:	d1eb      	bne.n	8004744 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d023      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004784:	4b43      	ldr	r3, [pc, #268]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4a42      	ldr	r2, [pc, #264]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 800478a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800478e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d007      	beq.n	80047ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800479c:	4b3d      	ldr	r3, [pc, #244]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047a4:	4a3b      	ldr	r2, [pc, #236]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80047a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ac:	4b39      	ldr	r3, [pc, #228]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4936      	ldr	r1, [pc, #216]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
 80047be:	e008      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2b80      	cmp	r3, #128	; 0x80
 80047c4:	d105      	bne.n	80047d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80047c6:	4b33      	ldr	r3, [pc, #204]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	4a32      	ldr	r2, [pc, #200]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 80047cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047d2:	4b2f      	ldr	r3, [pc, #188]	; (8004890 <HAL_RCC_ClockConfig+0x260>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d21d      	bcs.n	800481c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e0:	4b2b      	ldr	r3, [pc, #172]	; (8004890 <HAL_RCC_ClockConfig+0x260>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f023 020f 	bic.w	r2, r3, #15
 80047e8:	4929      	ldr	r1, [pc, #164]	; (8004890 <HAL_RCC_ClockConfig+0x260>)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047f0:	f7fd f994 	bl	8001b1c <HAL_GetTick>
 80047f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f6:	e00a      	b.n	800480e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f8:	f7fd f990 	bl	8001b1c <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	; 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e03b      	b.n	8004886 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480e:	4b20      	ldr	r3, [pc, #128]	; (8004890 <HAL_RCC_ClockConfig+0x260>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d1ed      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004828:	4b1a      	ldr	r3, [pc, #104]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	4917      	ldr	r1, [pc, #92]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004846:	4b13      	ldr	r3, [pc, #76]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	490f      	ldr	r1, [pc, #60]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800485a:	f000 f825 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 800485e:	4602      	mov	r2, r0
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <HAL_RCC_ClockConfig+0x264>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	490c      	ldr	r1, [pc, #48]	; (800489c <HAL_RCC_ClockConfig+0x26c>)
 800486c:	5ccb      	ldrb	r3, [r1, r3]
 800486e:	f003 031f 	and.w	r3, r3, #31
 8004872:	fa22 f303 	lsr.w	r3, r2, r3
 8004876:	4a0a      	ldr	r2, [pc, #40]	; (80048a0 <HAL_RCC_ClockConfig+0x270>)
 8004878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <HAL_RCC_ClockConfig+0x274>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fd f900 	bl	8001a84 <HAL_InitTick>
 8004884:	4603      	mov	r3, r0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40022000 	.word	0x40022000
 8004894:	40021000 	.word	0x40021000
 8004898:	04c4b400 	.word	0x04c4b400
 800489c:	08007064 	.word	0x08007064
 80048a0:	20000000 	.word	0x20000000
 80048a4:	20000004 	.word	0x20000004

080048a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80048ae:	4b2c      	ldr	r3, [pc, #176]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 030c 	and.w	r3, r3, #12
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d102      	bne.n	80048c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048ba:	4b2a      	ldr	r3, [pc, #168]	; (8004964 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	e047      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80048c0:	4b27      	ldr	r3, [pc, #156]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 030c 	and.w	r3, r3, #12
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d102      	bne.n	80048d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048cc:	4b26      	ldr	r3, [pc, #152]	; (8004968 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	e03e      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80048d2:	4b23      	ldr	r3, [pc, #140]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	d136      	bne.n	800494c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048de:	4b20      	ldr	r3, [pc, #128]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048e8:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	3301      	adds	r3, #1
 80048f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d10c      	bne.n	8004916 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048fc:	4a1a      	ldr	r2, [pc, #104]	; (8004968 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	fbb2 f3f3 	udiv	r3, r2, r3
 8004904:	4a16      	ldr	r2, [pc, #88]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004906:	68d2      	ldr	r2, [r2, #12]
 8004908:	0a12      	lsrs	r2, r2, #8
 800490a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800490e:	fb02 f303 	mul.w	r3, r2, r3
 8004912:	617b      	str	r3, [r7, #20]
      break;
 8004914:	e00c      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004916:	4a13      	ldr	r2, [pc, #76]	; (8004964 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	fbb2 f3f3 	udiv	r3, r2, r3
 800491e:	4a10      	ldr	r2, [pc, #64]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004920:	68d2      	ldr	r2, [r2, #12]
 8004922:	0a12      	lsrs	r2, r2, #8
 8004924:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004928:	fb02 f303 	mul.w	r3, r2, r3
 800492c:	617b      	str	r3, [r7, #20]
      break;
 800492e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	0e5b      	lsrs	r3, r3, #25
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	3301      	adds	r3, #1
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	e001      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004950:	693b      	ldr	r3, [r7, #16]
}
 8004952:	4618      	mov	r0, r3
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000
 8004964:	00f42400 	.word	0x00f42400
 8004968:	016e3600 	.word	0x016e3600

0800496c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <HAL_RCC_GetHCLKFreq+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000000 	.word	0x20000000

08004984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004988:	f7ff fff0 	bl	800496c <HAL_RCC_GetHCLKFreq>
 800498c:	4602      	mov	r2, r0
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	0a1b      	lsrs	r3, r3, #8
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4904      	ldr	r1, [pc, #16]	; (80049ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800499a:	5ccb      	ldrb	r3, [r1, r3]
 800499c:	f003 031f 	and.w	r3, r3, #31
 80049a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40021000 	.word	0x40021000
 80049ac:	08007074 	.word	0x08007074

080049b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049b4:	f7ff ffda 	bl	800496c <HAL_RCC_GetHCLKFreq>
 80049b8:	4602      	mov	r2, r0
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	0adb      	lsrs	r3, r3, #11
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	4904      	ldr	r1, [pc, #16]	; (80049d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049c6:	5ccb      	ldrb	r3, [r1, r3]
 80049c8:	f003 031f 	and.w	r3, r3, #31
 80049cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40021000 	.word	0x40021000
 80049d8:	08007074 	.word	0x08007074

080049dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049e2:	4b1e      	ldr	r3, [pc, #120]	; (8004a5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049ec:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	3301      	adds	r3, #1
 80049f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d10c      	bne.n	8004a1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a00:	4a17      	ldr	r2, [pc, #92]	; (8004a60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	4a14      	ldr	r2, [pc, #80]	; (8004a5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a0a:	68d2      	ldr	r2, [r2, #12]
 8004a0c:	0a12      	lsrs	r2, r2, #8
 8004a0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a12:	fb02 f303 	mul.w	r3, r2, r3
 8004a16:	617b      	str	r3, [r7, #20]
    break;
 8004a18:	e00c      	b.n	8004a34 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a1a:	4a12      	ldr	r2, [pc, #72]	; (8004a64 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a22:	4a0e      	ldr	r2, [pc, #56]	; (8004a5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a24:	68d2      	ldr	r2, [r2, #12]
 8004a26:	0a12      	lsrs	r2, r2, #8
 8004a28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a2c:	fb02 f303 	mul.w	r3, r2, r3
 8004a30:	617b      	str	r3, [r7, #20]
    break;
 8004a32:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a34:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	0e5b      	lsrs	r3, r3, #25
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004a4e:	687b      	ldr	r3, [r7, #4]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	016e3600 	.word	0x016e3600
 8004a64:	00f42400 	.word	0x00f42400

08004a68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a70:	2300      	movs	r3, #0
 8004a72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a74:	2300      	movs	r3, #0
 8004a76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 8098 	beq.w	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a86:	2300      	movs	r3, #0
 8004a88:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a8a:	4b43      	ldr	r3, [pc, #268]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10d      	bne.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a96:	4b40      	ldr	r3, [pc, #256]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	4a3f      	ldr	r2, [pc, #252]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8004aa2:	4b3d      	ldr	r3, [pc, #244]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	60bb      	str	r3, [r7, #8]
 8004aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ab2:	4b3a      	ldr	r3, [pc, #232]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a39      	ldr	r2, [pc, #228]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004abc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004abe:	f7fd f82d 	bl	8001b1c <HAL_GetTick>
 8004ac2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ac4:	e009      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac6:	f7fd f829 	bl	8001b1c <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d902      	bls.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	74fb      	strb	r3, [r7, #19]
        break;
 8004ad8:	e005      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ada:	4b30      	ldr	r3, [pc, #192]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0ef      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ae6:	7cfb      	ldrb	r3, [r7, #19]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d159      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004aec:	4b2a      	ldr	r3, [pc, #168]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01e      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d019      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b08:	4b23      	ldr	r3, [pc, #140]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b14:	4b20      	ldr	r3, [pc, #128]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	4a1f      	ldr	r2, [pc, #124]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b24:	4b1c      	ldr	r3, [pc, #112]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2a:	4a1b      	ldr	r2, [pc, #108]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b34:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d016      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b46:	f7fc ffe9 	bl	8001b1c <HAL_GetTick>
 8004b4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b4c:	e00b      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4e:	f7fc ffe5 	bl	8001b1c <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d902      	bls.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	74fb      	strb	r3, [r7, #19]
            break;
 8004b64:	e006      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b66:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0ec      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004b74:	7cfb      	ldrb	r3, [r7, #19]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10b      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b7a:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b88:	4903      	ldr	r1, [pc, #12]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b90:	e008      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b92:	7cfb      	ldrb	r3, [r7, #19]
 8004b94:	74bb      	strb	r3, [r7, #18]
 8004b96:	e005      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba0:	7cfb      	ldrb	r3, [r7, #19]
 8004ba2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ba4:	7c7b      	ldrb	r3, [r7, #17]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d105      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004baa:	4ba7      	ldr	r3, [pc, #668]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bae:	4aa6      	ldr	r2, [pc, #664]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bc2:	4ba1      	ldr	r3, [pc, #644]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	f023 0203 	bic.w	r2, r3, #3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	499d      	ldr	r1, [pc, #628]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004be4:	4b98      	ldr	r3, [pc, #608]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	f023 020c 	bic.w	r2, r3, #12
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	4995      	ldr	r1, [pc, #596]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c06:	4b90      	ldr	r3, [pc, #576]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	498c      	ldr	r1, [pc, #560]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c28:	4b87      	ldr	r3, [pc, #540]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	4984      	ldr	r1, [pc, #528]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c4a:	4b7f      	ldr	r3, [pc, #508]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	497b      	ldr	r1, [pc, #492]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c6c:	4b76      	ldr	r3, [pc, #472]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	4973      	ldr	r1, [pc, #460]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c8e:	4b6e      	ldr	r3, [pc, #440]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	496a      	ldr	r1, [pc, #424]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cb0:	4b65      	ldr	r3, [pc, #404]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	4962      	ldr	r1, [pc, #392]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cd2:	4b5d      	ldr	r3, [pc, #372]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	4959      	ldr	r1, [pc, #356]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cf4:	4b54      	ldr	r3, [pc, #336]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cfa:	f023 0203 	bic.w	r2, r3, #3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	4951      	ldr	r1, [pc, #324]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d16:	4b4c      	ldr	r3, [pc, #304]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	4948      	ldr	r1, [pc, #288]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d015      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d38:	4b43      	ldr	r3, [pc, #268]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	4940      	ldr	r1, [pc, #256]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d56:	d105      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d58:	4b3b      	ldr	r3, [pc, #236]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4a3a      	ldr	r2, [pc, #232]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d015      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d70:	4b35      	ldr	r3, [pc, #212]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	4932      	ldr	r1, [pc, #200]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d8e:	d105      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d90:	4b2d      	ldr	r3, [pc, #180]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4a2c      	ldr	r2, [pc, #176]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d9a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d015      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004da8:	4b27      	ldr	r3, [pc, #156]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	4924      	ldr	r1, [pc, #144]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dc6:	d105      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dc8:	4b1f      	ldr	r3, [pc, #124]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	4a1e      	ldr	r2, [pc, #120]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dd2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d015      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004de0:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dee:	4916      	ldr	r1, [pc, #88]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dfe:	d105      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e00:	4b11      	ldr	r3, [pc, #68]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	4a10      	ldr	r2, [pc, #64]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e0a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d019      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e18:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	4908      	ldr	r1, [pc, #32]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e36:	d109      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e38:	4b03      	ldr	r3, [pc, #12]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	4a02      	ldr	r2, [pc, #8]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e42:	60d3      	str	r3, [r2, #12]
 8004e44:	e002      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004e46:	bf00      	nop
 8004e48:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d015      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e58:	4b29      	ldr	r3, [pc, #164]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e66:	4926      	ldr	r1, [pc, #152]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e76:	d105      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e78:	4b21      	ldr	r3, [pc, #132]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4a20      	ldr	r2, [pc, #128]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e82:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d015      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004e90:	4b1b      	ldr	r3, [pc, #108]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e96:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9e:	4918      	ldr	r1, [pc, #96]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eae:	d105      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004eb0:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	4a12      	ldr	r2, [pc, #72]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d015      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004ec8:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ece:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed6:	490a      	ldr	r1, [pc, #40]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ee6:	d105      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4a04      	ldr	r2, [pc, #16]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ef2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004ef4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40021000 	.word	0x40021000

08004f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e049      	b.n	8004faa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fc fca4 	bl	8001878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	4619      	mov	r1, r3
 8004f42:	4610      	mov	r0, r2
 8004f44:	f000 fcb2 	bl	80058ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d001      	beq.n	8004fcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e04c      	b.n	8005066 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a26      	ldr	r2, [pc, #152]	; (8005074 <HAL_TIM_Base_Start+0xc0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d022      	beq.n	8005024 <HAL_TIM_Base_Start+0x70>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe6:	d01d      	beq.n	8005024 <HAL_TIM_Base_Start+0x70>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a22      	ldr	r2, [pc, #136]	; (8005078 <HAL_TIM_Base_Start+0xc4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d018      	beq.n	8005024 <HAL_TIM_Base_Start+0x70>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a21      	ldr	r2, [pc, #132]	; (800507c <HAL_TIM_Base_Start+0xc8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d013      	beq.n	8005024 <HAL_TIM_Base_Start+0x70>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1f      	ldr	r2, [pc, #124]	; (8005080 <HAL_TIM_Base_Start+0xcc>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00e      	beq.n	8005024 <HAL_TIM_Base_Start+0x70>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1e      	ldr	r2, [pc, #120]	; (8005084 <HAL_TIM_Base_Start+0xd0>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d009      	beq.n	8005024 <HAL_TIM_Base_Start+0x70>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1c      	ldr	r2, [pc, #112]	; (8005088 <HAL_TIM_Base_Start+0xd4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <HAL_TIM_Base_Start+0x70>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1b      	ldr	r2, [pc, #108]	; (800508c <HAL_TIM_Base_Start+0xd8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d115      	bne.n	8005050 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	4b19      	ldr	r3, [pc, #100]	; (8005090 <HAL_TIM_Base_Start+0xdc>)
 800502c:	4013      	ands	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b06      	cmp	r3, #6
 8005034:	d015      	beq.n	8005062 <HAL_TIM_Base_Start+0xae>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800503c:	d011      	beq.n	8005062 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0201 	orr.w	r2, r2, #1
 800504c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504e:	e008      	b.n	8005062 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	e000      	b.n	8005064 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005062:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40000400 	.word	0x40000400
 800507c:	40000800 	.word	0x40000800
 8005080:	40000c00 	.word	0x40000c00
 8005084:	40013400 	.word	0x40013400
 8005088:	40014000 	.word	0x40014000
 800508c:	40015000 	.word	0x40015000
 8005090:	00010007 	.word	0x00010007

08005094 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d001      	beq.n	80050ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e054      	b.n	8005156 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a26      	ldr	r2, [pc, #152]	; (8005164 <HAL_TIM_Base_Start_IT+0xd0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d022      	beq.n	8005114 <HAL_TIM_Base_Start_IT+0x80>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d6:	d01d      	beq.n	8005114 <HAL_TIM_Base_Start_IT+0x80>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a22      	ldr	r2, [pc, #136]	; (8005168 <HAL_TIM_Base_Start_IT+0xd4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d018      	beq.n	8005114 <HAL_TIM_Base_Start_IT+0x80>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a21      	ldr	r2, [pc, #132]	; (800516c <HAL_TIM_Base_Start_IT+0xd8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d013      	beq.n	8005114 <HAL_TIM_Base_Start_IT+0x80>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1f      	ldr	r2, [pc, #124]	; (8005170 <HAL_TIM_Base_Start_IT+0xdc>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00e      	beq.n	8005114 <HAL_TIM_Base_Start_IT+0x80>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <HAL_TIM_Base_Start_IT+0xe0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d009      	beq.n	8005114 <HAL_TIM_Base_Start_IT+0x80>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1c      	ldr	r2, [pc, #112]	; (8005178 <HAL_TIM_Base_Start_IT+0xe4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_TIM_Base_Start_IT+0x80>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1b      	ldr	r2, [pc, #108]	; (800517c <HAL_TIM_Base_Start_IT+0xe8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d115      	bne.n	8005140 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	4b19      	ldr	r3, [pc, #100]	; (8005180 <HAL_TIM_Base_Start_IT+0xec>)
 800511c:	4013      	ands	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b06      	cmp	r3, #6
 8005124:	d015      	beq.n	8005152 <HAL_TIM_Base_Start_IT+0xbe>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800512c:	d011      	beq.n	8005152 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0201 	orr.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513e:	e008      	b.n	8005152 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0201 	orr.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	e000      	b.n	8005154 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005152:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40012c00 	.word	0x40012c00
 8005168:	40000400 	.word	0x40000400
 800516c:	40000800 	.word	0x40000800
 8005170:	40000c00 	.word	0x40000c00
 8005174:	40013400 	.word	0x40013400
 8005178:	40014000 	.word	0x40014000
 800517c:	40015000 	.word	0x40015000
 8005180:	00010007 	.word	0x00010007

08005184 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e049      	b.n	800522a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fc fb82 	bl	80018b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3304      	adds	r3, #4
 80051c0:	4619      	mov	r1, r3
 80051c2:	4610      	mov	r0, r2
 80051c4:	f000 fb72 	bl	80058ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d109      	bne.n	8005258 <HAL_TIM_PWM_Start+0x24>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	bf14      	ite	ne
 8005250:	2301      	movne	r3, #1
 8005252:	2300      	moveq	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	e03c      	b.n	80052d2 <HAL_TIM_PWM_Start+0x9e>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2b04      	cmp	r3, #4
 800525c:	d109      	bne.n	8005272 <HAL_TIM_PWM_Start+0x3e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b01      	cmp	r3, #1
 8005268:	bf14      	ite	ne
 800526a:	2301      	movne	r3, #1
 800526c:	2300      	moveq	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	e02f      	b.n	80052d2 <HAL_TIM_PWM_Start+0x9e>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b08      	cmp	r3, #8
 8005276:	d109      	bne.n	800528c <HAL_TIM_PWM_Start+0x58>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	bf14      	ite	ne
 8005284:	2301      	movne	r3, #1
 8005286:	2300      	moveq	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	e022      	b.n	80052d2 <HAL_TIM_PWM_Start+0x9e>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b0c      	cmp	r3, #12
 8005290:	d109      	bne.n	80052a6 <HAL_TIM_PWM_Start+0x72>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b01      	cmp	r3, #1
 800529c:	bf14      	ite	ne
 800529e:	2301      	movne	r3, #1
 80052a0:	2300      	moveq	r3, #0
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	e015      	b.n	80052d2 <HAL_TIM_PWM_Start+0x9e>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	d109      	bne.n	80052c0 <HAL_TIM_PWM_Start+0x8c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	bf14      	ite	ne
 80052b8:	2301      	movne	r3, #1
 80052ba:	2300      	moveq	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	e008      	b.n	80052d2 <HAL_TIM_PWM_Start+0x9e>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	bf14      	ite	ne
 80052cc:	2301      	movne	r3, #1
 80052ce:	2300      	moveq	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e0a6      	b.n	8005428 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d104      	bne.n	80052ea <HAL_TIM_PWM_Start+0xb6>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052e8:	e023      	b.n	8005332 <HAL_TIM_PWM_Start+0xfe>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_PWM_Start+0xc6>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f8:	e01b      	b.n	8005332 <HAL_TIM_PWM_Start+0xfe>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d104      	bne.n	800530a <HAL_TIM_PWM_Start+0xd6>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005308:	e013      	b.n	8005332 <HAL_TIM_PWM_Start+0xfe>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b0c      	cmp	r3, #12
 800530e:	d104      	bne.n	800531a <HAL_TIM_PWM_Start+0xe6>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005318:	e00b      	b.n	8005332 <HAL_TIM_PWM_Start+0xfe>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b10      	cmp	r3, #16
 800531e:	d104      	bne.n	800532a <HAL_TIM_PWM_Start+0xf6>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005328:	e003      	b.n	8005332 <HAL_TIM_PWM_Start+0xfe>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2201      	movs	r2, #1
 8005338:	6839      	ldr	r1, [r7, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f000 ff30 	bl	80061a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a3a      	ldr	r2, [pc, #232]	; (8005430 <HAL_TIM_PWM_Start+0x1fc>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d018      	beq.n	800537c <HAL_TIM_PWM_Start+0x148>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a39      	ldr	r2, [pc, #228]	; (8005434 <HAL_TIM_PWM_Start+0x200>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d013      	beq.n	800537c <HAL_TIM_PWM_Start+0x148>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a37      	ldr	r2, [pc, #220]	; (8005438 <HAL_TIM_PWM_Start+0x204>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00e      	beq.n	800537c <HAL_TIM_PWM_Start+0x148>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a36      	ldr	r2, [pc, #216]	; (800543c <HAL_TIM_PWM_Start+0x208>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d009      	beq.n	800537c <HAL_TIM_PWM_Start+0x148>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a34      	ldr	r2, [pc, #208]	; (8005440 <HAL_TIM_PWM_Start+0x20c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d004      	beq.n	800537c <HAL_TIM_PWM_Start+0x148>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a33      	ldr	r2, [pc, #204]	; (8005444 <HAL_TIM_PWM_Start+0x210>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d101      	bne.n	8005380 <HAL_TIM_PWM_Start+0x14c>
 800537c:	2301      	movs	r3, #1
 800537e:	e000      	b.n	8005382 <HAL_TIM_PWM_Start+0x14e>
 8005380:	2300      	movs	r3, #0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d007      	beq.n	8005396 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005394:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a25      	ldr	r2, [pc, #148]	; (8005430 <HAL_TIM_PWM_Start+0x1fc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d022      	beq.n	80053e6 <HAL_TIM_PWM_Start+0x1b2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a8:	d01d      	beq.n	80053e6 <HAL_TIM_PWM_Start+0x1b2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a26      	ldr	r2, [pc, #152]	; (8005448 <HAL_TIM_PWM_Start+0x214>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d018      	beq.n	80053e6 <HAL_TIM_PWM_Start+0x1b2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a24      	ldr	r2, [pc, #144]	; (800544c <HAL_TIM_PWM_Start+0x218>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d013      	beq.n	80053e6 <HAL_TIM_PWM_Start+0x1b2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a23      	ldr	r2, [pc, #140]	; (8005450 <HAL_TIM_PWM_Start+0x21c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00e      	beq.n	80053e6 <HAL_TIM_PWM_Start+0x1b2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a19      	ldr	r2, [pc, #100]	; (8005434 <HAL_TIM_PWM_Start+0x200>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d009      	beq.n	80053e6 <HAL_TIM_PWM_Start+0x1b2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a18      	ldr	r2, [pc, #96]	; (8005438 <HAL_TIM_PWM_Start+0x204>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d004      	beq.n	80053e6 <HAL_TIM_PWM_Start+0x1b2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a18      	ldr	r2, [pc, #96]	; (8005444 <HAL_TIM_PWM_Start+0x210>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d115      	bne.n	8005412 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	4b19      	ldr	r3, [pc, #100]	; (8005454 <HAL_TIM_PWM_Start+0x220>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b06      	cmp	r3, #6
 80053f6:	d015      	beq.n	8005424 <HAL_TIM_PWM_Start+0x1f0>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fe:	d011      	beq.n	8005424 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0201 	orr.w	r2, r2, #1
 800540e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005410:	e008      	b.n	8005424 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f042 0201 	orr.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	e000      	b.n	8005426 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005424:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40012c00 	.word	0x40012c00
 8005434:	40013400 	.word	0x40013400
 8005438:	40014000 	.word	0x40014000
 800543c:	40014400 	.word	0x40014400
 8005440:	40014800 	.word	0x40014800
 8005444:	40015000 	.word	0x40015000
 8005448:	40000400 	.word	0x40000400
 800544c:	40000800 	.word	0x40000800
 8005450:	40000c00 	.word	0x40000c00
 8005454:	00010007 	.word	0x00010007

08005458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005472:	2302      	movs	r3, #2
 8005474:	e0ff      	b.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b14      	cmp	r3, #20
 8005482:	f200 80f0 	bhi.w	8005666 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005486:	a201      	add	r2, pc, #4	; (adr r2, 800548c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548c:	080054e1 	.word	0x080054e1
 8005490:	08005667 	.word	0x08005667
 8005494:	08005667 	.word	0x08005667
 8005498:	08005667 	.word	0x08005667
 800549c:	08005521 	.word	0x08005521
 80054a0:	08005667 	.word	0x08005667
 80054a4:	08005667 	.word	0x08005667
 80054a8:	08005667 	.word	0x08005667
 80054ac:	08005563 	.word	0x08005563
 80054b0:	08005667 	.word	0x08005667
 80054b4:	08005667 	.word	0x08005667
 80054b8:	08005667 	.word	0x08005667
 80054bc:	080055a3 	.word	0x080055a3
 80054c0:	08005667 	.word	0x08005667
 80054c4:	08005667 	.word	0x08005667
 80054c8:	08005667 	.word	0x08005667
 80054cc:	080055e5 	.word	0x080055e5
 80054d0:	08005667 	.word	0x08005667
 80054d4:	08005667 	.word	0x08005667
 80054d8:	08005667 	.word	0x08005667
 80054dc:	08005625 	.word	0x08005625
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fa94 	bl	8005a14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699a      	ldr	r2, [r3, #24]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0208 	orr.w	r2, r2, #8
 80054fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0204 	bic.w	r2, r2, #4
 800550a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6999      	ldr	r1, [r3, #24]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	619a      	str	r2, [r3, #24]
      break;
 800551e:	e0a5      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fb0e 	bl	8005b48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699a      	ldr	r2, [r3, #24]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800553a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800554a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6999      	ldr	r1, [r3, #24]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	021a      	lsls	r2, r3, #8
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	619a      	str	r2, [r3, #24]
      break;
 8005560:	e084      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	4618      	mov	r0, r3
 800556a:	f000 fb81 	bl	8005c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69da      	ldr	r2, [r3, #28]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0208 	orr.w	r2, r2, #8
 800557c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0204 	bic.w	r2, r2, #4
 800558c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69d9      	ldr	r1, [r3, #28]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	61da      	str	r2, [r3, #28]
      break;
 80055a0:	e064      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 fbf3 	bl	8005d94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69da      	ldr	r2, [r3, #28]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69da      	ldr	r2, [r3, #28]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69d9      	ldr	r1, [r3, #28]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	021a      	lsls	r2, r3, #8
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	61da      	str	r2, [r3, #28]
      break;
 80055e2:	e043      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fc66 	bl	8005ebc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0208 	orr.w	r2, r2, #8
 80055fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0204 	bic.w	r2, r2, #4
 800560e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005622:	e023      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68b9      	ldr	r1, [r7, #8]
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fcb0 	bl	8005f90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800563e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	021a      	lsls	r2, r3, #8
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005664:	e002      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	75fb      	strb	r3, [r7, #23]
      break;
 800566a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005674:	7dfb      	ldrb	r3, [r7, #23]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop

08005680 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_TIM_ConfigClockSource+0x1c>
 8005698:	2302      	movs	r3, #2
 800569a:	e0f6      	b.n	800588a <HAL_TIM_ConfigClockSource+0x20a>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80056ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a6f      	ldr	r2, [pc, #444]	; (8005894 <HAL_TIM_ConfigClockSource+0x214>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	f000 80c1 	beq.w	800585e <HAL_TIM_ConfigClockSource+0x1de>
 80056dc:	4a6d      	ldr	r2, [pc, #436]	; (8005894 <HAL_TIM_ConfigClockSource+0x214>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	f200 80c6 	bhi.w	8005870 <HAL_TIM_ConfigClockSource+0x1f0>
 80056e4:	4a6c      	ldr	r2, [pc, #432]	; (8005898 <HAL_TIM_ConfigClockSource+0x218>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	f000 80b9 	beq.w	800585e <HAL_TIM_ConfigClockSource+0x1de>
 80056ec:	4a6a      	ldr	r2, [pc, #424]	; (8005898 <HAL_TIM_ConfigClockSource+0x218>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	f200 80be 	bhi.w	8005870 <HAL_TIM_ConfigClockSource+0x1f0>
 80056f4:	4a69      	ldr	r2, [pc, #420]	; (800589c <HAL_TIM_ConfigClockSource+0x21c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	f000 80b1 	beq.w	800585e <HAL_TIM_ConfigClockSource+0x1de>
 80056fc:	4a67      	ldr	r2, [pc, #412]	; (800589c <HAL_TIM_ConfigClockSource+0x21c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	f200 80b6 	bhi.w	8005870 <HAL_TIM_ConfigClockSource+0x1f0>
 8005704:	4a66      	ldr	r2, [pc, #408]	; (80058a0 <HAL_TIM_ConfigClockSource+0x220>)
 8005706:	4293      	cmp	r3, r2
 8005708:	f000 80a9 	beq.w	800585e <HAL_TIM_ConfigClockSource+0x1de>
 800570c:	4a64      	ldr	r2, [pc, #400]	; (80058a0 <HAL_TIM_ConfigClockSource+0x220>)
 800570e:	4293      	cmp	r3, r2
 8005710:	f200 80ae 	bhi.w	8005870 <HAL_TIM_ConfigClockSource+0x1f0>
 8005714:	4a63      	ldr	r2, [pc, #396]	; (80058a4 <HAL_TIM_ConfigClockSource+0x224>)
 8005716:	4293      	cmp	r3, r2
 8005718:	f000 80a1 	beq.w	800585e <HAL_TIM_ConfigClockSource+0x1de>
 800571c:	4a61      	ldr	r2, [pc, #388]	; (80058a4 <HAL_TIM_ConfigClockSource+0x224>)
 800571e:	4293      	cmp	r3, r2
 8005720:	f200 80a6 	bhi.w	8005870 <HAL_TIM_ConfigClockSource+0x1f0>
 8005724:	4a60      	ldr	r2, [pc, #384]	; (80058a8 <HAL_TIM_ConfigClockSource+0x228>)
 8005726:	4293      	cmp	r3, r2
 8005728:	f000 8099 	beq.w	800585e <HAL_TIM_ConfigClockSource+0x1de>
 800572c:	4a5e      	ldr	r2, [pc, #376]	; (80058a8 <HAL_TIM_ConfigClockSource+0x228>)
 800572e:	4293      	cmp	r3, r2
 8005730:	f200 809e 	bhi.w	8005870 <HAL_TIM_ConfigClockSource+0x1f0>
 8005734:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005738:	f000 8091 	beq.w	800585e <HAL_TIM_ConfigClockSource+0x1de>
 800573c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005740:	f200 8096 	bhi.w	8005870 <HAL_TIM_ConfigClockSource+0x1f0>
 8005744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005748:	f000 8089 	beq.w	800585e <HAL_TIM_ConfigClockSource+0x1de>
 800574c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005750:	f200 808e 	bhi.w	8005870 <HAL_TIM_ConfigClockSource+0x1f0>
 8005754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005758:	d03e      	beq.n	80057d8 <HAL_TIM_ConfigClockSource+0x158>
 800575a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800575e:	f200 8087 	bhi.w	8005870 <HAL_TIM_ConfigClockSource+0x1f0>
 8005762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005766:	f000 8086 	beq.w	8005876 <HAL_TIM_ConfigClockSource+0x1f6>
 800576a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576e:	d87f      	bhi.n	8005870 <HAL_TIM_ConfigClockSource+0x1f0>
 8005770:	2b70      	cmp	r3, #112	; 0x70
 8005772:	d01a      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x12a>
 8005774:	2b70      	cmp	r3, #112	; 0x70
 8005776:	d87b      	bhi.n	8005870 <HAL_TIM_ConfigClockSource+0x1f0>
 8005778:	2b60      	cmp	r3, #96	; 0x60
 800577a:	d050      	beq.n	800581e <HAL_TIM_ConfigClockSource+0x19e>
 800577c:	2b60      	cmp	r3, #96	; 0x60
 800577e:	d877      	bhi.n	8005870 <HAL_TIM_ConfigClockSource+0x1f0>
 8005780:	2b50      	cmp	r3, #80	; 0x50
 8005782:	d03c      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0x17e>
 8005784:	2b50      	cmp	r3, #80	; 0x50
 8005786:	d873      	bhi.n	8005870 <HAL_TIM_ConfigClockSource+0x1f0>
 8005788:	2b40      	cmp	r3, #64	; 0x40
 800578a:	d058      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x1be>
 800578c:	2b40      	cmp	r3, #64	; 0x40
 800578e:	d86f      	bhi.n	8005870 <HAL_TIM_ConfigClockSource+0x1f0>
 8005790:	2b30      	cmp	r3, #48	; 0x30
 8005792:	d064      	beq.n	800585e <HAL_TIM_ConfigClockSource+0x1de>
 8005794:	2b30      	cmp	r3, #48	; 0x30
 8005796:	d86b      	bhi.n	8005870 <HAL_TIM_ConfigClockSource+0x1f0>
 8005798:	2b20      	cmp	r3, #32
 800579a:	d060      	beq.n	800585e <HAL_TIM_ConfigClockSource+0x1de>
 800579c:	2b20      	cmp	r3, #32
 800579e:	d867      	bhi.n	8005870 <HAL_TIM_ConfigClockSource+0x1f0>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d05c      	beq.n	800585e <HAL_TIM_ConfigClockSource+0x1de>
 80057a4:	2b10      	cmp	r3, #16
 80057a6:	d05a      	beq.n	800585e <HAL_TIM_ConfigClockSource+0x1de>
 80057a8:	e062      	b.n	8005870 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057ba:	f000 fcd1 	bl	8006160 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	609a      	str	r2, [r3, #8]
      break;
 80057d6:	e04f      	b.n	8005878 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057e8:	f000 fcba 	bl	8006160 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057fa:	609a      	str	r2, [r3, #8]
      break;
 80057fc:	e03c      	b.n	8005878 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800580a:	461a      	mov	r2, r3
 800580c:	f000 fc2c 	bl	8006068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2150      	movs	r1, #80	; 0x50
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fc85 	bl	8006126 <TIM_ITRx_SetConfig>
      break;
 800581c:	e02c      	b.n	8005878 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800582a:	461a      	mov	r2, r3
 800582c:	f000 fc4b 	bl	80060c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2160      	movs	r1, #96	; 0x60
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fc75 	bl	8006126 <TIM_ITRx_SetConfig>
      break;
 800583c:	e01c      	b.n	8005878 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800584a:	461a      	mov	r2, r3
 800584c:	f000 fc0c 	bl	8006068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2140      	movs	r1, #64	; 0x40
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fc65 	bl	8006126 <TIM_ITRx_SetConfig>
      break;
 800585c:	e00c      	b.n	8005878 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4619      	mov	r1, r3
 8005868:	4610      	mov	r0, r2
 800586a:	f000 fc5c 	bl	8006126 <TIM_ITRx_SetConfig>
      break;
 800586e:	e003      	b.n	8005878 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	73fb      	strb	r3, [r7, #15]
      break;
 8005874:	e000      	b.n	8005878 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005876:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005888:	7bfb      	ldrb	r3, [r7, #15]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	00100070 	.word	0x00100070
 8005898:	00100060 	.word	0x00100060
 800589c:	00100050 	.word	0x00100050
 80058a0:	00100040 	.word	0x00100040
 80058a4:	00100030 	.word	0x00100030
 80058a8:	00100020 	.word	0x00100020

080058ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a4c      	ldr	r2, [pc, #304]	; (80059f0 <TIM_Base_SetConfig+0x144>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d017      	beq.n	80058f4 <TIM_Base_SetConfig+0x48>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ca:	d013      	beq.n	80058f4 <TIM_Base_SetConfig+0x48>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a49      	ldr	r2, [pc, #292]	; (80059f4 <TIM_Base_SetConfig+0x148>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00f      	beq.n	80058f4 <TIM_Base_SetConfig+0x48>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a48      	ldr	r2, [pc, #288]	; (80059f8 <TIM_Base_SetConfig+0x14c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d00b      	beq.n	80058f4 <TIM_Base_SetConfig+0x48>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a47      	ldr	r2, [pc, #284]	; (80059fc <TIM_Base_SetConfig+0x150>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d007      	beq.n	80058f4 <TIM_Base_SetConfig+0x48>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a46      	ldr	r2, [pc, #280]	; (8005a00 <TIM_Base_SetConfig+0x154>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d003      	beq.n	80058f4 <TIM_Base_SetConfig+0x48>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a45      	ldr	r2, [pc, #276]	; (8005a04 <TIM_Base_SetConfig+0x158>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d108      	bne.n	8005906 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a39      	ldr	r2, [pc, #228]	; (80059f0 <TIM_Base_SetConfig+0x144>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d023      	beq.n	8005956 <TIM_Base_SetConfig+0xaa>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005914:	d01f      	beq.n	8005956 <TIM_Base_SetConfig+0xaa>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a36      	ldr	r2, [pc, #216]	; (80059f4 <TIM_Base_SetConfig+0x148>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01b      	beq.n	8005956 <TIM_Base_SetConfig+0xaa>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a35      	ldr	r2, [pc, #212]	; (80059f8 <TIM_Base_SetConfig+0x14c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d017      	beq.n	8005956 <TIM_Base_SetConfig+0xaa>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a34      	ldr	r2, [pc, #208]	; (80059fc <TIM_Base_SetConfig+0x150>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d013      	beq.n	8005956 <TIM_Base_SetConfig+0xaa>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a33      	ldr	r2, [pc, #204]	; (8005a00 <TIM_Base_SetConfig+0x154>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00f      	beq.n	8005956 <TIM_Base_SetConfig+0xaa>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a33      	ldr	r2, [pc, #204]	; (8005a08 <TIM_Base_SetConfig+0x15c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00b      	beq.n	8005956 <TIM_Base_SetConfig+0xaa>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a32      	ldr	r2, [pc, #200]	; (8005a0c <TIM_Base_SetConfig+0x160>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d007      	beq.n	8005956 <TIM_Base_SetConfig+0xaa>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a31      	ldr	r2, [pc, #196]	; (8005a10 <TIM_Base_SetConfig+0x164>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d003      	beq.n	8005956 <TIM_Base_SetConfig+0xaa>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a2c      	ldr	r2, [pc, #176]	; (8005a04 <TIM_Base_SetConfig+0x158>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d108      	bne.n	8005968 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800595c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a18      	ldr	r2, [pc, #96]	; (80059f0 <TIM_Base_SetConfig+0x144>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d013      	beq.n	80059bc <TIM_Base_SetConfig+0x110>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a1a      	ldr	r2, [pc, #104]	; (8005a00 <TIM_Base_SetConfig+0x154>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00f      	beq.n	80059bc <TIM_Base_SetConfig+0x110>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a1a      	ldr	r2, [pc, #104]	; (8005a08 <TIM_Base_SetConfig+0x15c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00b      	beq.n	80059bc <TIM_Base_SetConfig+0x110>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a19      	ldr	r2, [pc, #100]	; (8005a0c <TIM_Base_SetConfig+0x160>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d007      	beq.n	80059bc <TIM_Base_SetConfig+0x110>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a18      	ldr	r2, [pc, #96]	; (8005a10 <TIM_Base_SetConfig+0x164>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_Base_SetConfig+0x110>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a13      	ldr	r2, [pc, #76]	; (8005a04 <TIM_Base_SetConfig+0x158>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d103      	bne.n	80059c4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	691a      	ldr	r2, [r3, #16]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d105      	bne.n	80059e2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	f023 0201 	bic.w	r2, r3, #1
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	611a      	str	r2, [r3, #16]
  }
}
 80059e2:	bf00      	nop
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	40012c00 	.word	0x40012c00
 80059f4:	40000400 	.word	0x40000400
 80059f8:	40000800 	.word	0x40000800
 80059fc:	40000c00 	.word	0x40000c00
 8005a00:	40013400 	.word	0x40013400
 8005a04:	40015000 	.word	0x40015000
 8005a08:	40014000 	.word	0x40014000
 8005a0c:	40014400 	.word	0x40014400
 8005a10:	40014800 	.word	0x40014800

08005a14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	f023 0201 	bic.w	r2, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0303 	bic.w	r3, r3, #3
 8005a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f023 0302 	bic.w	r3, r3, #2
 8005a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a30      	ldr	r2, [pc, #192]	; (8005b30 <TIM_OC1_SetConfig+0x11c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d013      	beq.n	8005a9c <TIM_OC1_SetConfig+0x88>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a2f      	ldr	r2, [pc, #188]	; (8005b34 <TIM_OC1_SetConfig+0x120>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d00f      	beq.n	8005a9c <TIM_OC1_SetConfig+0x88>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a2e      	ldr	r2, [pc, #184]	; (8005b38 <TIM_OC1_SetConfig+0x124>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00b      	beq.n	8005a9c <TIM_OC1_SetConfig+0x88>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a2d      	ldr	r2, [pc, #180]	; (8005b3c <TIM_OC1_SetConfig+0x128>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d007      	beq.n	8005a9c <TIM_OC1_SetConfig+0x88>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a2c      	ldr	r2, [pc, #176]	; (8005b40 <TIM_OC1_SetConfig+0x12c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d003      	beq.n	8005a9c <TIM_OC1_SetConfig+0x88>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a2b      	ldr	r2, [pc, #172]	; (8005b44 <TIM_OC1_SetConfig+0x130>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d10c      	bne.n	8005ab6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f023 0308 	bic.w	r3, r3, #8
 8005aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f023 0304 	bic.w	r3, r3, #4
 8005ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a1d      	ldr	r2, [pc, #116]	; (8005b30 <TIM_OC1_SetConfig+0x11c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d013      	beq.n	8005ae6 <TIM_OC1_SetConfig+0xd2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a1c      	ldr	r2, [pc, #112]	; (8005b34 <TIM_OC1_SetConfig+0x120>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00f      	beq.n	8005ae6 <TIM_OC1_SetConfig+0xd2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a1b      	ldr	r2, [pc, #108]	; (8005b38 <TIM_OC1_SetConfig+0x124>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00b      	beq.n	8005ae6 <TIM_OC1_SetConfig+0xd2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a1a      	ldr	r2, [pc, #104]	; (8005b3c <TIM_OC1_SetConfig+0x128>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d007      	beq.n	8005ae6 <TIM_OC1_SetConfig+0xd2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a19      	ldr	r2, [pc, #100]	; (8005b40 <TIM_OC1_SetConfig+0x12c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d003      	beq.n	8005ae6 <TIM_OC1_SetConfig+0xd2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a18      	ldr	r2, [pc, #96]	; (8005b44 <TIM_OC1_SetConfig+0x130>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d111      	bne.n	8005b0a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	621a      	str	r2, [r3, #32]
}
 8005b24:	bf00      	nop
 8005b26:	371c      	adds	r7, #28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	40012c00 	.word	0x40012c00
 8005b34:	40013400 	.word	0x40013400
 8005b38:	40014000 	.word	0x40014000
 8005b3c:	40014400 	.word	0x40014400
 8005b40:	40014800 	.word	0x40014800
 8005b44:	40015000 	.word	0x40015000

08005b48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	f023 0210 	bic.w	r2, r3, #16
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	021b      	lsls	r3, r3, #8
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f023 0320 	bic.w	r3, r3, #32
 8005b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a2c      	ldr	r2, [pc, #176]	; (8005c58 <TIM_OC2_SetConfig+0x110>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d007      	beq.n	8005bbc <TIM_OC2_SetConfig+0x74>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a2b      	ldr	r2, [pc, #172]	; (8005c5c <TIM_OC2_SetConfig+0x114>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d003      	beq.n	8005bbc <TIM_OC2_SetConfig+0x74>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a2a      	ldr	r2, [pc, #168]	; (8005c60 <TIM_OC2_SetConfig+0x118>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d10d      	bne.n	8005bd8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a1f      	ldr	r2, [pc, #124]	; (8005c58 <TIM_OC2_SetConfig+0x110>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d013      	beq.n	8005c08 <TIM_OC2_SetConfig+0xc0>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a1e      	ldr	r2, [pc, #120]	; (8005c5c <TIM_OC2_SetConfig+0x114>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00f      	beq.n	8005c08 <TIM_OC2_SetConfig+0xc0>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a1e      	ldr	r2, [pc, #120]	; (8005c64 <TIM_OC2_SetConfig+0x11c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00b      	beq.n	8005c08 <TIM_OC2_SetConfig+0xc0>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a1d      	ldr	r2, [pc, #116]	; (8005c68 <TIM_OC2_SetConfig+0x120>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d007      	beq.n	8005c08 <TIM_OC2_SetConfig+0xc0>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a1c      	ldr	r2, [pc, #112]	; (8005c6c <TIM_OC2_SetConfig+0x124>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_OC2_SetConfig+0xc0>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a17      	ldr	r2, [pc, #92]	; (8005c60 <TIM_OC2_SetConfig+0x118>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d113      	bne.n	8005c30 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	621a      	str	r2, [r3, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40012c00 	.word	0x40012c00
 8005c5c:	40013400 	.word	0x40013400
 8005c60:	40015000 	.word	0x40015000
 8005c64:	40014000 	.word	0x40014000
 8005c68:	40014400 	.word	0x40014400
 8005c6c:	40014800 	.word	0x40014800

08005c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0303 	bic.w	r3, r3, #3
 8005caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a2b      	ldr	r2, [pc, #172]	; (8005d7c <TIM_OC3_SetConfig+0x10c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d007      	beq.n	8005ce2 <TIM_OC3_SetConfig+0x72>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a2a      	ldr	r2, [pc, #168]	; (8005d80 <TIM_OC3_SetConfig+0x110>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_OC3_SetConfig+0x72>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a29      	ldr	r2, [pc, #164]	; (8005d84 <TIM_OC3_SetConfig+0x114>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d10d      	bne.n	8005cfe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a1e      	ldr	r2, [pc, #120]	; (8005d7c <TIM_OC3_SetConfig+0x10c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <TIM_OC3_SetConfig+0xbe>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a1d      	ldr	r2, [pc, #116]	; (8005d80 <TIM_OC3_SetConfig+0x110>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00f      	beq.n	8005d2e <TIM_OC3_SetConfig+0xbe>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a1d      	ldr	r2, [pc, #116]	; (8005d88 <TIM_OC3_SetConfig+0x118>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00b      	beq.n	8005d2e <TIM_OC3_SetConfig+0xbe>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a1c      	ldr	r2, [pc, #112]	; (8005d8c <TIM_OC3_SetConfig+0x11c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d007      	beq.n	8005d2e <TIM_OC3_SetConfig+0xbe>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a1b      	ldr	r2, [pc, #108]	; (8005d90 <TIM_OC3_SetConfig+0x120>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d003      	beq.n	8005d2e <TIM_OC3_SetConfig+0xbe>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a16      	ldr	r2, [pc, #88]	; (8005d84 <TIM_OC3_SetConfig+0x114>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d113      	bne.n	8005d56 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	011b      	lsls	r3, r3, #4
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	621a      	str	r2, [r3, #32]
}
 8005d70:	bf00      	nop
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	40012c00 	.word	0x40012c00
 8005d80:	40013400 	.word	0x40013400
 8005d84:	40015000 	.word	0x40015000
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40014400 	.word	0x40014400
 8005d90:	40014800 	.word	0x40014800

08005d94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	021b      	lsls	r3, r3, #8
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005de2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	031b      	lsls	r3, r3, #12
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a2c      	ldr	r2, [pc, #176]	; (8005ea4 <TIM_OC4_SetConfig+0x110>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d007      	beq.n	8005e08 <TIM_OC4_SetConfig+0x74>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a2b      	ldr	r2, [pc, #172]	; (8005ea8 <TIM_OC4_SetConfig+0x114>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_OC4_SetConfig+0x74>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a2a      	ldr	r2, [pc, #168]	; (8005eac <TIM_OC4_SetConfig+0x118>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d10d      	bne.n	8005e24 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	031b      	lsls	r3, r3, #12
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a1f      	ldr	r2, [pc, #124]	; (8005ea4 <TIM_OC4_SetConfig+0x110>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d013      	beq.n	8005e54 <TIM_OC4_SetConfig+0xc0>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ea8 <TIM_OC4_SetConfig+0x114>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d00f      	beq.n	8005e54 <TIM_OC4_SetConfig+0xc0>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a1e      	ldr	r2, [pc, #120]	; (8005eb0 <TIM_OC4_SetConfig+0x11c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d00b      	beq.n	8005e54 <TIM_OC4_SetConfig+0xc0>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a1d      	ldr	r2, [pc, #116]	; (8005eb4 <TIM_OC4_SetConfig+0x120>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d007      	beq.n	8005e54 <TIM_OC4_SetConfig+0xc0>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a1c      	ldr	r2, [pc, #112]	; (8005eb8 <TIM_OC4_SetConfig+0x124>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d003      	beq.n	8005e54 <TIM_OC4_SetConfig+0xc0>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a17      	ldr	r2, [pc, #92]	; (8005eac <TIM_OC4_SetConfig+0x118>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d113      	bne.n	8005e7c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e5a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e62:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	019b      	lsls	r3, r3, #6
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	019b      	lsls	r3, r3, #6
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	621a      	str	r2, [r3, #32]
}
 8005e96:	bf00      	nop
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40012c00 	.word	0x40012c00
 8005ea8:	40013400 	.word	0x40013400
 8005eac:	40015000 	.word	0x40015000
 8005eb0:	40014000 	.word	0x40014000
 8005eb4:	40014400 	.word	0x40014400
 8005eb8:	40014800 	.word	0x40014800

08005ebc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	041b      	lsls	r3, r3, #16
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a19      	ldr	r2, [pc, #100]	; (8005f78 <TIM_OC5_SetConfig+0xbc>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d013      	beq.n	8005f3e <TIM_OC5_SetConfig+0x82>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a18      	ldr	r2, [pc, #96]	; (8005f7c <TIM_OC5_SetConfig+0xc0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00f      	beq.n	8005f3e <TIM_OC5_SetConfig+0x82>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a17      	ldr	r2, [pc, #92]	; (8005f80 <TIM_OC5_SetConfig+0xc4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00b      	beq.n	8005f3e <TIM_OC5_SetConfig+0x82>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a16      	ldr	r2, [pc, #88]	; (8005f84 <TIM_OC5_SetConfig+0xc8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d007      	beq.n	8005f3e <TIM_OC5_SetConfig+0x82>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a15      	ldr	r2, [pc, #84]	; (8005f88 <TIM_OC5_SetConfig+0xcc>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d003      	beq.n	8005f3e <TIM_OC5_SetConfig+0x82>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a14      	ldr	r2, [pc, #80]	; (8005f8c <TIM_OC5_SetConfig+0xd0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d109      	bne.n	8005f52 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	021b      	lsls	r3, r3, #8
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	621a      	str	r2, [r3, #32]
}
 8005f6c:	bf00      	nop
 8005f6e:	371c      	adds	r7, #28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	40012c00 	.word	0x40012c00
 8005f7c:	40013400 	.word	0x40013400
 8005f80:	40014000 	.word	0x40014000
 8005f84:	40014400 	.word	0x40014400
 8005f88:	40014800 	.word	0x40014800
 8005f8c:	40015000 	.word	0x40015000

08005f90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	051b      	lsls	r3, r3, #20
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a1a      	ldr	r2, [pc, #104]	; (8006050 <TIM_OC6_SetConfig+0xc0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d013      	beq.n	8006014 <TIM_OC6_SetConfig+0x84>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a19      	ldr	r2, [pc, #100]	; (8006054 <TIM_OC6_SetConfig+0xc4>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00f      	beq.n	8006014 <TIM_OC6_SetConfig+0x84>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a18      	ldr	r2, [pc, #96]	; (8006058 <TIM_OC6_SetConfig+0xc8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d00b      	beq.n	8006014 <TIM_OC6_SetConfig+0x84>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a17      	ldr	r2, [pc, #92]	; (800605c <TIM_OC6_SetConfig+0xcc>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d007      	beq.n	8006014 <TIM_OC6_SetConfig+0x84>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a16      	ldr	r2, [pc, #88]	; (8006060 <TIM_OC6_SetConfig+0xd0>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d003      	beq.n	8006014 <TIM_OC6_SetConfig+0x84>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a15      	ldr	r2, [pc, #84]	; (8006064 <TIM_OC6_SetConfig+0xd4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d109      	bne.n	8006028 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800601a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	029b      	lsls	r3, r3, #10
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	4313      	orrs	r3, r2
 8006026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	621a      	str	r2, [r3, #32]
}
 8006042:	bf00      	nop
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	40012c00 	.word	0x40012c00
 8006054:	40013400 	.word	0x40013400
 8006058:	40014000 	.word	0x40014000
 800605c:	40014400 	.word	0x40014400
 8006060:	40014800 	.word	0x40014800
 8006064:	40015000 	.word	0x40015000

08006068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	f023 0201 	bic.w	r2, r3, #1
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	011b      	lsls	r3, r3, #4
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	4313      	orrs	r3, r2
 800609c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f023 030a 	bic.w	r3, r3, #10
 80060a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	621a      	str	r2, [r3, #32]
}
 80060ba:	bf00      	nop
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b087      	sub	sp, #28
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	f023 0210 	bic.w	r2, r3, #16
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	031b      	lsls	r3, r3, #12
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006102:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	4313      	orrs	r3, r2
 800610c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006126:	b480      	push	{r7}
 8006128:	b085      	sub	sp, #20
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800613c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	f043 0307 	orr.w	r3, r3, #7
 800614c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	609a      	str	r2, [r3, #8]
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800617a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	021a      	lsls	r2, r3, #8
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	431a      	orrs	r2, r3
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4313      	orrs	r3, r2
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	609a      	str	r2, [r3, #8]
}
 8006194:	bf00      	nop
 8006196:	371c      	adds	r7, #28
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f003 031f 	and.w	r3, r3, #31
 80061b2:	2201      	movs	r2, #1
 80061b4:	fa02 f303 	lsl.w	r3, r2, r3
 80061b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a1a      	ldr	r2, [r3, #32]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	43db      	mvns	r3, r3
 80061c2:	401a      	ands	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a1a      	ldr	r2, [r3, #32]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f003 031f 	and.w	r3, r3, #31
 80061d2:	6879      	ldr	r1, [r7, #4]
 80061d4:	fa01 f303 	lsl.w	r3, r1, r3
 80061d8:	431a      	orrs	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
	...

080061ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d101      	bne.n	8006204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006200:	2302      	movs	r3, #2
 8006202:	e074      	b.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a34      	ldr	r2, [pc, #208]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d009      	beq.n	8006242 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a33      	ldr	r2, [pc, #204]	; (8006300 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d004      	beq.n	8006242 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a31      	ldr	r2, [pc, #196]	; (8006304 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d108      	bne.n	8006254 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006248:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	4313      	orrs	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a21      	ldr	r2, [pc, #132]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d022      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006284:	d01d      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a1f      	ldr	r2, [pc, #124]	; (8006308 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d018      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a1d      	ldr	r2, [pc, #116]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d013      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a1c      	ldr	r2, [pc, #112]	; (8006310 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00e      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a15      	ldr	r2, [pc, #84]	; (8006300 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d009      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a18      	ldr	r2, [pc, #96]	; (8006314 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d004      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a11      	ldr	r2, [pc, #68]	; (8006304 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d10c      	bne.n	80062dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40012c00 	.word	0x40012c00
 8006300:	40013400 	.word	0x40013400
 8006304:	40015000 	.word	0x40015000
 8006308:	40000400 	.word	0x40000400
 800630c:	40000800 	.word	0x40000800
 8006310:	40000c00 	.word	0x40000c00
 8006314:	40014000 	.word	0x40014000

08006318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e042      	b.n	80063b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006330:	2b00      	cmp	r3, #0
 8006332:	d106      	bne.n	8006342 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7fb fa43 	bl	80017c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2224      	movs	r2, #36	; 0x24
 8006346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0201 	bic.w	r2, r2, #1
 8006358:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fb24 	bl	80069b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f825 	bl	80063b8 <UART_SetConfig>
 800636e:	4603      	mov	r3, r0
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e01b      	b.n	80063b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006396:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fba3 	bl	8006af4 <UART_CheckIdleState>
 80063ae:	4603      	mov	r3, r0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063bc:	b08c      	sub	sp, #48	; 0x30
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	431a      	orrs	r2, r3
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	4313      	orrs	r3, r2
 80063de:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	4baa      	ldr	r3, [pc, #680]	; (8006690 <UART_SetConfig+0x2d8>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	6812      	ldr	r2, [r2, #0]
 80063ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f0:	430b      	orrs	r3, r1
 80063f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a9f      	ldr	r2, [pc, #636]	; (8006694 <UART_SetConfig+0x2dc>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006420:	4313      	orrs	r3, r2
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800642e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006438:	430b      	orrs	r3, r1
 800643a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006442:	f023 010f 	bic.w	r1, r3, #15
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a90      	ldr	r2, [pc, #576]	; (8006698 <UART_SetConfig+0x2e0>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d125      	bne.n	80064a8 <UART_SetConfig+0xf0>
 800645c:	4b8f      	ldr	r3, [pc, #572]	; (800669c <UART_SetConfig+0x2e4>)
 800645e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	2b03      	cmp	r3, #3
 8006468:	d81a      	bhi.n	80064a0 <UART_SetConfig+0xe8>
 800646a:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <UART_SetConfig+0xb8>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	08006481 	.word	0x08006481
 8006474:	08006491 	.word	0x08006491
 8006478:	08006489 	.word	0x08006489
 800647c:	08006499 	.word	0x08006499
 8006480:	2301      	movs	r3, #1
 8006482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006486:	e116      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006488:	2302      	movs	r3, #2
 800648a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800648e:	e112      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006490:	2304      	movs	r3, #4
 8006492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006496:	e10e      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006498:	2308      	movs	r3, #8
 800649a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800649e:	e10a      	b.n	80066b6 <UART_SetConfig+0x2fe>
 80064a0:	2310      	movs	r3, #16
 80064a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064a6:	e106      	b.n	80066b6 <UART_SetConfig+0x2fe>
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a7c      	ldr	r2, [pc, #496]	; (80066a0 <UART_SetConfig+0x2e8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d138      	bne.n	8006524 <UART_SetConfig+0x16c>
 80064b2:	4b7a      	ldr	r3, [pc, #488]	; (800669c <UART_SetConfig+0x2e4>)
 80064b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b8:	f003 030c 	and.w	r3, r3, #12
 80064bc:	2b0c      	cmp	r3, #12
 80064be:	d82d      	bhi.n	800651c <UART_SetConfig+0x164>
 80064c0:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <UART_SetConfig+0x110>)
 80064c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c6:	bf00      	nop
 80064c8:	080064fd 	.word	0x080064fd
 80064cc:	0800651d 	.word	0x0800651d
 80064d0:	0800651d 	.word	0x0800651d
 80064d4:	0800651d 	.word	0x0800651d
 80064d8:	0800650d 	.word	0x0800650d
 80064dc:	0800651d 	.word	0x0800651d
 80064e0:	0800651d 	.word	0x0800651d
 80064e4:	0800651d 	.word	0x0800651d
 80064e8:	08006505 	.word	0x08006505
 80064ec:	0800651d 	.word	0x0800651d
 80064f0:	0800651d 	.word	0x0800651d
 80064f4:	0800651d 	.word	0x0800651d
 80064f8:	08006515 	.word	0x08006515
 80064fc:	2300      	movs	r3, #0
 80064fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006502:	e0d8      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006504:	2302      	movs	r3, #2
 8006506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800650a:	e0d4      	b.n	80066b6 <UART_SetConfig+0x2fe>
 800650c:	2304      	movs	r3, #4
 800650e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006512:	e0d0      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006514:	2308      	movs	r3, #8
 8006516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800651a:	e0cc      	b.n	80066b6 <UART_SetConfig+0x2fe>
 800651c:	2310      	movs	r3, #16
 800651e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006522:	e0c8      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a5e      	ldr	r2, [pc, #376]	; (80066a4 <UART_SetConfig+0x2ec>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d125      	bne.n	800657a <UART_SetConfig+0x1c2>
 800652e:	4b5b      	ldr	r3, [pc, #364]	; (800669c <UART_SetConfig+0x2e4>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006534:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006538:	2b30      	cmp	r3, #48	; 0x30
 800653a:	d016      	beq.n	800656a <UART_SetConfig+0x1b2>
 800653c:	2b30      	cmp	r3, #48	; 0x30
 800653e:	d818      	bhi.n	8006572 <UART_SetConfig+0x1ba>
 8006540:	2b20      	cmp	r3, #32
 8006542:	d00a      	beq.n	800655a <UART_SetConfig+0x1a2>
 8006544:	2b20      	cmp	r3, #32
 8006546:	d814      	bhi.n	8006572 <UART_SetConfig+0x1ba>
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <UART_SetConfig+0x19a>
 800654c:	2b10      	cmp	r3, #16
 800654e:	d008      	beq.n	8006562 <UART_SetConfig+0x1aa>
 8006550:	e00f      	b.n	8006572 <UART_SetConfig+0x1ba>
 8006552:	2300      	movs	r3, #0
 8006554:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006558:	e0ad      	b.n	80066b6 <UART_SetConfig+0x2fe>
 800655a:	2302      	movs	r3, #2
 800655c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006560:	e0a9      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006562:	2304      	movs	r3, #4
 8006564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006568:	e0a5      	b.n	80066b6 <UART_SetConfig+0x2fe>
 800656a:	2308      	movs	r3, #8
 800656c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006570:	e0a1      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006572:	2310      	movs	r3, #16
 8006574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006578:	e09d      	b.n	80066b6 <UART_SetConfig+0x2fe>
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a4a      	ldr	r2, [pc, #296]	; (80066a8 <UART_SetConfig+0x2f0>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d125      	bne.n	80065d0 <UART_SetConfig+0x218>
 8006584:	4b45      	ldr	r3, [pc, #276]	; (800669c <UART_SetConfig+0x2e4>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800658e:	2bc0      	cmp	r3, #192	; 0xc0
 8006590:	d016      	beq.n	80065c0 <UART_SetConfig+0x208>
 8006592:	2bc0      	cmp	r3, #192	; 0xc0
 8006594:	d818      	bhi.n	80065c8 <UART_SetConfig+0x210>
 8006596:	2b80      	cmp	r3, #128	; 0x80
 8006598:	d00a      	beq.n	80065b0 <UART_SetConfig+0x1f8>
 800659a:	2b80      	cmp	r3, #128	; 0x80
 800659c:	d814      	bhi.n	80065c8 <UART_SetConfig+0x210>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <UART_SetConfig+0x1f0>
 80065a2:	2b40      	cmp	r3, #64	; 0x40
 80065a4:	d008      	beq.n	80065b8 <UART_SetConfig+0x200>
 80065a6:	e00f      	b.n	80065c8 <UART_SetConfig+0x210>
 80065a8:	2300      	movs	r3, #0
 80065aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ae:	e082      	b.n	80066b6 <UART_SetConfig+0x2fe>
 80065b0:	2302      	movs	r3, #2
 80065b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065b6:	e07e      	b.n	80066b6 <UART_SetConfig+0x2fe>
 80065b8:	2304      	movs	r3, #4
 80065ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065be:	e07a      	b.n	80066b6 <UART_SetConfig+0x2fe>
 80065c0:	2308      	movs	r3, #8
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c6:	e076      	b.n	80066b6 <UART_SetConfig+0x2fe>
 80065c8:	2310      	movs	r3, #16
 80065ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ce:	e072      	b.n	80066b6 <UART_SetConfig+0x2fe>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a35      	ldr	r2, [pc, #212]	; (80066ac <UART_SetConfig+0x2f4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d12a      	bne.n	8006630 <UART_SetConfig+0x278>
 80065da:	4b30      	ldr	r3, [pc, #192]	; (800669c <UART_SetConfig+0x2e4>)
 80065dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e8:	d01a      	beq.n	8006620 <UART_SetConfig+0x268>
 80065ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ee:	d81b      	bhi.n	8006628 <UART_SetConfig+0x270>
 80065f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f4:	d00c      	beq.n	8006610 <UART_SetConfig+0x258>
 80065f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065fa:	d815      	bhi.n	8006628 <UART_SetConfig+0x270>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <UART_SetConfig+0x250>
 8006600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006604:	d008      	beq.n	8006618 <UART_SetConfig+0x260>
 8006606:	e00f      	b.n	8006628 <UART_SetConfig+0x270>
 8006608:	2300      	movs	r3, #0
 800660a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800660e:	e052      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006610:	2302      	movs	r3, #2
 8006612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006616:	e04e      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006618:	2304      	movs	r3, #4
 800661a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800661e:	e04a      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006620:	2308      	movs	r3, #8
 8006622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006626:	e046      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006628:	2310      	movs	r3, #16
 800662a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800662e:	e042      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a17      	ldr	r2, [pc, #92]	; (8006694 <UART_SetConfig+0x2dc>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d13a      	bne.n	80066b0 <UART_SetConfig+0x2f8>
 800663a:	4b18      	ldr	r3, [pc, #96]	; (800669c <UART_SetConfig+0x2e4>)
 800663c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006640:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006644:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006648:	d01a      	beq.n	8006680 <UART_SetConfig+0x2c8>
 800664a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800664e:	d81b      	bhi.n	8006688 <UART_SetConfig+0x2d0>
 8006650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006654:	d00c      	beq.n	8006670 <UART_SetConfig+0x2b8>
 8006656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800665a:	d815      	bhi.n	8006688 <UART_SetConfig+0x2d0>
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <UART_SetConfig+0x2b0>
 8006660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006664:	d008      	beq.n	8006678 <UART_SetConfig+0x2c0>
 8006666:	e00f      	b.n	8006688 <UART_SetConfig+0x2d0>
 8006668:	2300      	movs	r3, #0
 800666a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800666e:	e022      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006670:	2302      	movs	r3, #2
 8006672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006676:	e01e      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006678:	2304      	movs	r3, #4
 800667a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800667e:	e01a      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006680:	2308      	movs	r3, #8
 8006682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006686:	e016      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006688:	2310      	movs	r3, #16
 800668a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800668e:	e012      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006690:	cfff69f3 	.word	0xcfff69f3
 8006694:	40008000 	.word	0x40008000
 8006698:	40013800 	.word	0x40013800
 800669c:	40021000 	.word	0x40021000
 80066a0:	40004400 	.word	0x40004400
 80066a4:	40004800 	.word	0x40004800
 80066a8:	40004c00 	.word	0x40004c00
 80066ac:	40005000 	.word	0x40005000
 80066b0:	2310      	movs	r3, #16
 80066b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4aae      	ldr	r2, [pc, #696]	; (8006974 <UART_SetConfig+0x5bc>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	f040 8097 	bne.w	80067f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d823      	bhi.n	8006712 <UART_SetConfig+0x35a>
 80066ca:	a201      	add	r2, pc, #4	; (adr r2, 80066d0 <UART_SetConfig+0x318>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	08006713 	.word	0x08006713
 80066d8:	080066fd 	.word	0x080066fd
 80066dc:	08006713 	.word	0x08006713
 80066e0:	08006703 	.word	0x08006703
 80066e4:	08006713 	.word	0x08006713
 80066e8:	08006713 	.word	0x08006713
 80066ec:	08006713 	.word	0x08006713
 80066f0:	0800670b 	.word	0x0800670b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066f4:	f7fe f946 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 80066f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066fa:	e010      	b.n	800671e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066fc:	4b9e      	ldr	r3, [pc, #632]	; (8006978 <UART_SetConfig+0x5c0>)
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006700:	e00d      	b.n	800671e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006702:	f7fe f8d1 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8006706:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006708:	e009      	b.n	800671e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800670a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006710:	e005      	b.n	800671e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800671c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8130 	beq.w	8006986 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	4a94      	ldr	r2, [pc, #592]	; (800697c <UART_SetConfig+0x5c4>)
 800672c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006730:	461a      	mov	r2, r3
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	fbb3 f3f2 	udiv	r3, r3, r2
 8006738:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	4413      	add	r3, r2
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	429a      	cmp	r2, r3
 8006748:	d305      	bcc.n	8006756 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	429a      	cmp	r2, r3
 8006754:	d903      	bls.n	800675e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800675c:	e113      	b.n	8006986 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	2200      	movs	r2, #0
 8006762:	60bb      	str	r3, [r7, #8]
 8006764:	60fa      	str	r2, [r7, #12]
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	4a84      	ldr	r2, [pc, #528]	; (800697c <UART_SetConfig+0x5c4>)
 800676c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006770:	b29b      	uxth	r3, r3
 8006772:	2200      	movs	r2, #0
 8006774:	603b      	str	r3, [r7, #0]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800677c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006780:	f7fa f918 	bl	80009b4 <__aeabi_uldivmod>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4610      	mov	r0, r2
 800678a:	4619      	mov	r1, r3
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	020b      	lsls	r3, r1, #8
 8006796:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800679a:	0202      	lsls	r2, r0, #8
 800679c:	6979      	ldr	r1, [r7, #20]
 800679e:	6849      	ldr	r1, [r1, #4]
 80067a0:	0849      	lsrs	r1, r1, #1
 80067a2:	2000      	movs	r0, #0
 80067a4:	460c      	mov	r4, r1
 80067a6:	4605      	mov	r5, r0
 80067a8:	eb12 0804 	adds.w	r8, r2, r4
 80067ac:	eb43 0905 	adc.w	r9, r3, r5
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	469a      	mov	sl, r3
 80067b8:	4693      	mov	fp, r2
 80067ba:	4652      	mov	r2, sl
 80067bc:	465b      	mov	r3, fp
 80067be:	4640      	mov	r0, r8
 80067c0:	4649      	mov	r1, r9
 80067c2:	f7fa f8f7 	bl	80009b4 <__aeabi_uldivmod>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4613      	mov	r3, r2
 80067cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067d4:	d308      	bcc.n	80067e8 <UART_SetConfig+0x430>
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067dc:	d204      	bcs.n	80067e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6a3a      	ldr	r2, [r7, #32]
 80067e4:	60da      	str	r2, [r3, #12]
 80067e6:	e0ce      	b.n	8006986 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80067ee:	e0ca      	b.n	8006986 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f8:	d166      	bne.n	80068c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80067fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067fe:	2b08      	cmp	r3, #8
 8006800:	d827      	bhi.n	8006852 <UART_SetConfig+0x49a>
 8006802:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <UART_SetConfig+0x450>)
 8006804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006808:	0800682d 	.word	0x0800682d
 800680c:	08006835 	.word	0x08006835
 8006810:	0800683d 	.word	0x0800683d
 8006814:	08006853 	.word	0x08006853
 8006818:	08006843 	.word	0x08006843
 800681c:	08006853 	.word	0x08006853
 8006820:	08006853 	.word	0x08006853
 8006824:	08006853 	.word	0x08006853
 8006828:	0800684b 	.word	0x0800684b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800682c:	f7fe f8aa 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8006830:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006832:	e014      	b.n	800685e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006834:	f7fe f8bc 	bl	80049b0 <HAL_RCC_GetPCLK2Freq>
 8006838:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800683a:	e010      	b.n	800685e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800683c:	4b4e      	ldr	r3, [pc, #312]	; (8006978 <UART_SetConfig+0x5c0>)
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006840:	e00d      	b.n	800685e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006842:	f7fe f831 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8006846:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006848:	e009      	b.n	800685e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006850:	e005      	b.n	800685e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800685c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 8090 	beq.w	8006986 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	4a44      	ldr	r2, [pc, #272]	; (800697c <UART_SetConfig+0x5c4>)
 800686c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006870:	461a      	mov	r2, r3
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	fbb3 f3f2 	udiv	r3, r3, r2
 8006878:	005a      	lsls	r2, r3, #1
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	085b      	lsrs	r3, r3, #1
 8006880:	441a      	add	r2, r3
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	fbb2 f3f3 	udiv	r3, r2, r3
 800688a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	2b0f      	cmp	r3, #15
 8006890:	d916      	bls.n	80068c0 <UART_SetConfig+0x508>
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006898:	d212      	bcs.n	80068c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	b29b      	uxth	r3, r3
 800689e:	f023 030f 	bic.w	r3, r3, #15
 80068a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	085b      	lsrs	r3, r3, #1
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	8bfb      	ldrh	r3, [r7, #30]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	8bfa      	ldrh	r2, [r7, #30]
 80068bc:	60da      	str	r2, [r3, #12]
 80068be:	e062      	b.n	8006986 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80068c6:	e05e      	b.n	8006986 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d828      	bhi.n	8006922 <UART_SetConfig+0x56a>
 80068d0:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <UART_SetConfig+0x520>)
 80068d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d6:	bf00      	nop
 80068d8:	080068fd 	.word	0x080068fd
 80068dc:	08006905 	.word	0x08006905
 80068e0:	0800690d 	.word	0x0800690d
 80068e4:	08006923 	.word	0x08006923
 80068e8:	08006913 	.word	0x08006913
 80068ec:	08006923 	.word	0x08006923
 80068f0:	08006923 	.word	0x08006923
 80068f4:	08006923 	.word	0x08006923
 80068f8:	0800691b 	.word	0x0800691b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068fc:	f7fe f842 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8006900:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006902:	e014      	b.n	800692e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006904:	f7fe f854 	bl	80049b0 <HAL_RCC_GetPCLK2Freq>
 8006908:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800690a:	e010      	b.n	800692e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800690c:	4b1a      	ldr	r3, [pc, #104]	; (8006978 <UART_SetConfig+0x5c0>)
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006910:	e00d      	b.n	800692e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006912:	f7fd ffc9 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8006916:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006918:	e009      	b.n	800692e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800691a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006920:	e005      	b.n	800692e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800692c:	bf00      	nop
    }

    if (pclk != 0U)
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	2b00      	cmp	r3, #0
 8006932:	d028      	beq.n	8006986 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	4a10      	ldr	r2, [pc, #64]	; (800697c <UART_SetConfig+0x5c4>)
 800693a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800693e:	461a      	mov	r2, r3
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	fbb3 f2f2 	udiv	r2, r3, r2
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	085b      	lsrs	r3, r3, #1
 800694c:	441a      	add	r2, r3
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	fbb2 f3f3 	udiv	r3, r2, r3
 8006956:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	2b0f      	cmp	r3, #15
 800695c:	d910      	bls.n	8006980 <UART_SetConfig+0x5c8>
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006964:	d20c      	bcs.n	8006980 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	b29a      	uxth	r2, r3
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	60da      	str	r2, [r3, #12]
 8006970:	e009      	b.n	8006986 <UART_SetConfig+0x5ce>
 8006972:	bf00      	nop
 8006974:	40008000 	.word	0x40008000
 8006978:	00f42400 	.word	0x00f42400
 800697c:	0800707c 	.word	0x0800707c
      }
      else
      {
        ret = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2201      	movs	r2, #1
 800698a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2201      	movs	r2, #1
 8006992:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2200      	movs	r2, #0
 800699a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	2200      	movs	r2, #0
 80069a0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80069a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3730      	adds	r7, #48	; 0x30
 80069aa:	46bd      	mov	sp, r7
 80069ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080069b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	f003 0308 	and.w	r3, r3, #8
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00a      	beq.n	80069da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00a      	beq.n	8006a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	f003 0320 	and.w	r3, r3, #32
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01a      	beq.n	8006ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aae:	d10a      	bne.n	8006ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	605a      	str	r2, [r3, #4]
  }
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b098      	sub	sp, #96	; 0x60
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b04:	f7fb f80a 	bl	8001b1c <HAL_GetTick>
 8006b08:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0308 	and.w	r3, r3, #8
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d12f      	bne.n	8006b78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b20:	2200      	movs	r2, #0
 8006b22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f88e 	bl	8006c48 <UART_WaitOnFlagUntilTimeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d022      	beq.n	8006b78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b46:	653b      	str	r3, [r7, #80]	; 0x50
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b50:	647b      	str	r3, [r7, #68]	; 0x44
 8006b52:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b58:	e841 2300 	strex	r3, r2, [r1]
 8006b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e6      	bne.n	8006b32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e063      	b.n	8006c40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0304 	and.w	r3, r3, #4
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d149      	bne.n	8006c1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f857 	bl	8006c48 <UART_WaitOnFlagUntilTimeout>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d03c      	beq.n	8006c1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	623b      	str	r3, [r7, #32]
   return(result);
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bbe:	633b      	str	r3, [r7, #48]	; 0x30
 8006bc0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e6      	bne.n	8006ba0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3308      	adds	r3, #8
 8006bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bf2:	61fa      	str	r2, [r7, #28]
 8006bf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	69b9      	ldr	r1, [r7, #24]
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	617b      	str	r3, [r7, #20]
   return(result);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e5      	bne.n	8006bd2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e012      	b.n	8006c40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3758      	adds	r7, #88	; 0x58
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	4613      	mov	r3, r2
 8006c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c58:	e04f      	b.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c60:	d04b      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c62:	f7fa ff5b 	bl	8001b1c <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d302      	bcc.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e04e      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d037      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2b80      	cmp	r3, #128	; 0x80
 8006c8e:	d034      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b40      	cmp	r3, #64	; 0x40
 8006c94:	d031      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	f003 0308 	and.w	r3, r3, #8
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d110      	bne.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2208      	movs	r2, #8
 8006caa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f838 	bl	8006d22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2208      	movs	r2, #8
 8006cb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e029      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd4:	d111      	bne.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f81e 	bl	8006d22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e00f      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	69da      	ldr	r2, [r3, #28]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4013      	ands	r3, r2
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	bf0c      	ite	eq
 8006d0a:	2301      	moveq	r3, #1
 8006d0c:	2300      	movne	r3, #0
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d0a0      	beq.n	8006c5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b095      	sub	sp, #84	; 0x54
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	461a      	mov	r2, r3
 8006d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d48:	643b      	str	r3, [r7, #64]	; 0x40
 8006d4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e6      	bne.n	8006d2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3308      	adds	r3, #8
 8006d62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	e853 3f00 	ldrex	r3, [r3]
 8006d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d72:	f023 0301 	bic.w	r3, r3, #1
 8006d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d88:	e841 2300 	strex	r3, r2, [r1]
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e3      	bne.n	8006d5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d118      	bne.n	8006dce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f023 0310 	bic.w	r3, r3, #16
 8006db0:	647b      	str	r3, [r7, #68]	; 0x44
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6979      	ldr	r1, [r7, #20]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	613b      	str	r3, [r7, #16]
   return(result);
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e6      	bne.n	8006d9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006de2:	bf00      	nop
 8006de4:	3754      	adds	r7, #84	; 0x54
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b085      	sub	sp, #20
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d101      	bne.n	8006e04 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e00:	2302      	movs	r3, #2
 8006e02:	e027      	b.n	8006e54 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2224      	movs	r2, #36	; 0x24
 8006e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0201 	bic.w	r2, r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2220      	movs	r2, #32
 8006e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e02d      	b.n	8006ed4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2224      	movs	r2, #36	; 0x24
 8006e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f84f 	bl	8006f58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d101      	bne.n	8006ef4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e02d      	b.n	8006f50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2224      	movs	r2, #36	; 0x24
 8006f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 0201 	bic.w	r2, r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f811 	bl	8006f58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d108      	bne.n	8006f7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f78:	e031      	b.n	8006fde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f7a:	2308      	movs	r3, #8
 8006f7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f7e:	2308      	movs	r3, #8
 8006f80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	0e5b      	lsrs	r3, r3, #25
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	f003 0307 	and.w	r3, r3, #7
 8006f90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	0f5b      	lsrs	r3, r3, #29
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	7b3a      	ldrb	r2, [r7, #12]
 8006fa6:	4911      	ldr	r1, [pc, #68]	; (8006fec <UARTEx_SetNbDataToProcess+0x94>)
 8006fa8:	5c8a      	ldrb	r2, [r1, r2]
 8006faa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006fae:	7b3a      	ldrb	r2, [r7, #12]
 8006fb0:	490f      	ldr	r1, [pc, #60]	; (8006ff0 <UARTEx_SetNbDataToProcess+0x98>)
 8006fb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	7b7a      	ldrb	r2, [r7, #13]
 8006fc4:	4909      	ldr	r1, [pc, #36]	; (8006fec <UARTEx_SetNbDataToProcess+0x94>)
 8006fc6:	5c8a      	ldrb	r2, [r1, r2]
 8006fc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006fcc:	7b7a      	ldrb	r2, [r7, #13]
 8006fce:	4908      	ldr	r1, [pc, #32]	; (8006ff0 <UARTEx_SetNbDataToProcess+0x98>)
 8006fd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006fde:	bf00      	nop
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	08007094 	.word	0x08007094
 8006ff0:	0800709c 	.word	0x0800709c

08006ff4 <memset>:
 8006ff4:	4402      	add	r2, r0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d100      	bne.n	8006ffe <memset+0xa>
 8006ffc:	4770      	bx	lr
 8006ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8007002:	e7f9      	b.n	8006ff8 <memset+0x4>

08007004 <__libc_init_array>:
 8007004:	b570      	push	{r4, r5, r6, lr}
 8007006:	4d0d      	ldr	r5, [pc, #52]	; (800703c <__libc_init_array+0x38>)
 8007008:	4c0d      	ldr	r4, [pc, #52]	; (8007040 <__libc_init_array+0x3c>)
 800700a:	1b64      	subs	r4, r4, r5
 800700c:	10a4      	asrs	r4, r4, #2
 800700e:	2600      	movs	r6, #0
 8007010:	42a6      	cmp	r6, r4
 8007012:	d109      	bne.n	8007028 <__libc_init_array+0x24>
 8007014:	4d0b      	ldr	r5, [pc, #44]	; (8007044 <__libc_init_array+0x40>)
 8007016:	4c0c      	ldr	r4, [pc, #48]	; (8007048 <__libc_init_array+0x44>)
 8007018:	f000 f818 	bl	800704c <_init>
 800701c:	1b64      	subs	r4, r4, r5
 800701e:	10a4      	asrs	r4, r4, #2
 8007020:	2600      	movs	r6, #0
 8007022:	42a6      	cmp	r6, r4
 8007024:	d105      	bne.n	8007032 <__libc_init_array+0x2e>
 8007026:	bd70      	pop	{r4, r5, r6, pc}
 8007028:	f855 3b04 	ldr.w	r3, [r5], #4
 800702c:	4798      	blx	r3
 800702e:	3601      	adds	r6, #1
 8007030:	e7ee      	b.n	8007010 <__libc_init_array+0xc>
 8007032:	f855 3b04 	ldr.w	r3, [r5], #4
 8007036:	4798      	blx	r3
 8007038:	3601      	adds	r6, #1
 800703a:	e7f2      	b.n	8007022 <__libc_init_array+0x1e>
 800703c:	080070ac 	.word	0x080070ac
 8007040:	080070ac 	.word	0x080070ac
 8007044:	080070ac 	.word	0x080070ac
 8007048:	080070b0 	.word	0x080070b0

0800704c <_init>:
 800704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704e:	bf00      	nop
 8007050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007052:	bc08      	pop	{r3}
 8007054:	469e      	mov	lr, r3
 8007056:	4770      	bx	lr

08007058 <_fini>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	bf00      	nop
 800705c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705e:	bc08      	pop	{r3}
 8007060:	469e      	mov	lr, r3
 8007062:	4770      	bx	lr
