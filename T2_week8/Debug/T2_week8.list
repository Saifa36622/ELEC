
T2_week8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004858  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004a38  08004a38  00014a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab8  08004ab8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ac0  08004ac0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000068  08004b30  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08004b30  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c33d  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bfe  00000000  00000000  0002c418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  0002e018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000758  00000000  00000000  0002e9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241f5  00000000  00000000  0002f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c0e4  00000000  00000000  000532fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7850  00000000  00000000  0005f3e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b54  00000000  00000000  00146c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00149788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004a20 	.word	0x08004a20

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08004a20 	.word	0x08004a20

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fac1 	bl	8000b56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f807 	bl	80005e6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f8a0 	bl	800071c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005dc:	f000 f84e 	bl	800067c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

//  HAL_UART_Transmit(&hlpuart1, text, 12, 10);
  UART_con();
 80005e0:	f000 f91c 	bl	800081c <UART_con>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x18>

080005e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b094      	sub	sp, #80	; 0x50
 80005ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ec:	f107 0318 	add.w	r3, r7, #24
 80005f0:	2238      	movs	r2, #56	; 0x38
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 fd8f 	bl	8004118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000608:	2000      	movs	r0, #0
 800060a:	f000 fdd7 	bl	80011bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060e:	2302      	movs	r3, #2
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000618:	2340      	movs	r3, #64	; 0x40
 800061a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000624:	2304      	movs	r3, #4
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000628:	2355      	movs	r3, #85	; 0x55
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0318 	add.w	r3, r7, #24
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fe71 	bl	8001324 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000648:	f000 f942 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2303      	movs	r3, #3
 8000652:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2104      	movs	r1, #4
 8000664:	4618      	mov	r0, r3
 8000666:	f001 f96f 	bl	8001948 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000670:	f000 f92e 	bl	80008d0 <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	3750      	adds	r7, #80	; 0x50
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <MX_USART1_UART_Init+0x98>)
 8000682:	4a25      	ldr	r2, [pc, #148]	; (8000718 <MX_USART1_UART_Init+0x9c>)
 8000684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000686:	4b23      	ldr	r3, [pc, #140]	; (8000714 <MX_USART1_UART_Init+0x98>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <MX_USART1_UART_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_USART1_UART_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069a:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_USART1_UART_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_USART1_UART_Init+0x98>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <MX_USART1_UART_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_USART1_UART_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b2:	4b18      	ldr	r3, [pc, #96]	; (8000714 <MX_USART1_UART_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_USART1_UART_Init+0x98>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_USART1_UART_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80006c4:	2300      	movs	r3, #0
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <MX_USART1_UART_Init+0x98>)
 80006cc:	f003 fb98 	bl	8003e00 <HAL_RS485Ex_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 80006d6:	f000 f8fb 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006da:	2100      	movs	r1, #0
 80006dc:	480d      	ldr	r0, [pc, #52]	; (8000714 <MX_USART1_UART_Init+0x98>)
 80006de:	f003 fc31 	bl	8003f44 <HAL_UARTEx_SetTxFifoThreshold>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 80006e8:	f000 f8f2 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ec:	2100      	movs	r1, #0
 80006ee:	4809      	ldr	r0, [pc, #36]	; (8000714 <MX_USART1_UART_Init+0x98>)
 80006f0:	f003 fc66 	bl	8003fc0 <HAL_UARTEx_SetRxFifoThreshold>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 80006fa:	f000 f8e9 	bl	80008d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_USART1_UART_Init+0x98>)
 8000700:	f003 fbe7 	bl	8003ed2 <HAL_UARTEx_DisableFifoMode>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 800070a:	f000 f8e1 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000084 	.word	0x20000084
 8000718:	40013800 	.word	0x40013800

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b38      	ldr	r3, [pc, #224]	; (8000814 <MX_GPIO_Init+0xf8>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a37      	ldr	r2, [pc, #220]	; (8000814 <MX_GPIO_Init+0xf8>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b35      	ldr	r3, [pc, #212]	; (8000814 <MX_GPIO_Init+0xf8>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074a:	4b32      	ldr	r3, [pc, #200]	; (8000814 <MX_GPIO_Init+0xf8>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a31      	ldr	r2, [pc, #196]	; (8000814 <MX_GPIO_Init+0xf8>)
 8000750:	f043 0320 	orr.w	r3, r3, #32
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_GPIO_Init+0xf8>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0320 	and.w	r3, r3, #32
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <MX_GPIO_Init+0xf8>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a2b      	ldr	r2, [pc, #172]	; (8000814 <MX_GPIO_Init+0xf8>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b29      	ldr	r3, [pc, #164]	; (8000814 <MX_GPIO_Init+0xf8>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <MX_GPIO_Init+0xf8>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a25      	ldr	r2, [pc, #148]	; (8000814 <MX_GPIO_Init+0xf8>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b23      	ldr	r3, [pc, #140]	; (8000814 <MX_GPIO_Init+0xf8>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2120      	movs	r1, #32
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f000 fcdf 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	4818      	ldr	r0, [pc, #96]	; (8000818 <MX_GPIO_Init+0xfc>)
 80007b6:	f000 fb4f 	bl	8000e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80007ba:	230c      	movs	r3, #12
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80007ca:	230c      	movs	r3, #12
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d8:	f000 fb3e 	bl	8000e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007dc:	2320      	movs	r3, #32
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f6:	f000 fb2f 	bl	8000e58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2028      	movs	r0, #40	; 0x28
 8000800:	f000 faf5 	bl	8000dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000804:	2028      	movs	r0, #40	; 0x28
 8000806:	f000 fb0c 	bl	8000e22 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080a:	bf00      	nop
 800080c:	3728      	adds	r7, #40	; 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000
 8000818:	48000800 	.word	0x48000800

0800081c <UART_con>:

/* USER CODE BEGIN 4 */
void UART_con()
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, RxBuff, 10);
 8000820:	220a      	movs	r2, #10
 8000822:	4903      	ldr	r1, [pc, #12]	; (8000830 <UART_con+0x14>)
 8000824:	4803      	ldr	r0, [pc, #12]	; (8000834 <UART_con+0x18>)
 8000826:	f001 fd8d 	bl	8002344 <HAL_UART_Receive_IT>
//	HAL_UART_Receive_DMA(&hlpuart1, RxBuff, 10);

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000118 	.word	0x20000118
 8000834:	20000084 	.word	0x20000084

08000838 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	80fb      	strh	r3, [r7, #6]
//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//
//}
//	if(GPIO_Pin == GPIO_PIN_5)
//	{
		state += 1;
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_GPIO_EXTI_Callback+0x34>)
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	b29a      	uxth	r2, r3
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_GPIO_EXTI_Callback+0x34>)
 800084c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, text,strlen((char *)text));
 800084e:	4808      	ldr	r0, [pc, #32]	; (8000870 <HAL_GPIO_EXTI_Callback+0x38>)
 8000850:	f7ff fce6 	bl	8000220 <strlen>
 8000854:	4603      	mov	r3, r0
 8000856:	b29b      	uxth	r3, r3
 8000858:	461a      	mov	r2, r3
 800085a:	4905      	ldr	r1, [pc, #20]	; (8000870 <HAL_GPIO_EXTI_Callback+0x38>)
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <HAL_GPIO_EXTI_Callback+0x3c>)
 800085e:	f001 fcdd 	bl	800221c <HAL_UART_Transmit_IT>
//	}

}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000154 	.word	0x20000154
 8000870:	20000000 	.word	0x20000000
 8000874:	20000084 	.word	0x20000084

08000878 <HAL_UART_RxCpltCallback>:
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
	}

}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	if (huart == &huart1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <HAL_UART_RxCpltCallback+0x48>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d116      	bne.n	80008b6 <HAL_UART_RxCpltCallback+0x3e>
	{
//		 IT
		RxBuff[10] = '\0';
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_UART_RxCpltCallback+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	729a      	strb	r2, [r3, #10]
		sprintf((char *)TxBuff,"Rab : %s\r\n",RxBuff);
 800088e:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <HAL_UART_RxCpltCallback+0x4c>)
 8000890:	490d      	ldr	r1, [pc, #52]	; (80008c8 <HAL_UART_RxCpltCallback+0x50>)
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <HAL_UART_RxCpltCallback+0x54>)
 8000894:	f003 fc20 	bl	80040d8 <siprintf>
		HAL_UART_Transmit_IT(&huart1, TxBuff,strlen((char *)TxBuff));
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <HAL_UART_RxCpltCallback+0x54>)
 800089a:	f7ff fcc1 	bl	8000220 <strlen>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	461a      	mov	r2, r3
 80008a4:	4909      	ldr	r1, [pc, #36]	; (80008cc <HAL_UART_RxCpltCallback+0x54>)
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <HAL_UART_RxCpltCallback+0x48>)
 80008a8:	f001 fcb8 	bl	800221c <HAL_UART_Transmit_IT>

		HAL_UART_Receive_IT(&huart1, RxBuff, 10);
 80008ac:	220a      	movs	r2, #10
 80008ae:	4905      	ldr	r1, [pc, #20]	; (80008c4 <HAL_UART_RxCpltCallback+0x4c>)
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <HAL_UART_RxCpltCallback+0x48>)
 80008b2:	f001 fd47 	bl	8002344 <HAL_UART_Receive_IT>
//		sprintf((char *)TxBuff,"Rab : %s\r\n",RxBuff);
//		HAL_UART_Transmit_DMA(&hlpuart1, TxBuff,strlen((char *)TxBuff));


	}
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000084 	.word	0x20000084
 80008c4:	20000118 	.word	0x20000118
 80008c8:	08004a38 	.word	0x08004a38
 80008cc:	2000012c 	.word	0x2000012c

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_MspInit+0x44>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <HAL_MspInit+0x44>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6613      	str	r3, [r2, #96]	; 0x60
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_MspInit+0x44>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_MspInit+0x44>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6593      	str	r3, [r2, #88]	; 0x58
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x44>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000912:	f000 fcf7 	bl	8001304 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b0a0      	sub	sp, #128	; 0x80
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800093c:	f107 0318 	add.w	r3, r7, #24
 8000940:	2254      	movs	r2, #84	; 0x54
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f003 fbe7 	bl	8004118 <memset>
  if(huart->Instance==USART1)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a2d      	ldr	r2, [pc, #180]	; (8000a04 <HAL_UART_MspInit+0xe0>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d153      	bne.n	80009fc <HAL_UART_MspInit+0xd8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000954:	2301      	movs	r3, #1
 8000956:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095c:	f107 0318 	add.w	r3, r7, #24
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fa0d 	bl	8001d80 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800096c:	f7ff ffb0 	bl	80008d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000970:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <HAL_UART_MspInit+0xe4>)
 8000972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000974:	4a24      	ldr	r2, [pc, #144]	; (8000a08 <HAL_UART_MspInit+0xe4>)
 8000976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097a:	6613      	str	r3, [r2, #96]	; 0x60
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <HAL_UART_MspInit+0xe4>)
 800097e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <HAL_UART_MspInit+0xe4>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098c:	4a1e      	ldr	r2, [pc, #120]	; (8000a08 <HAL_UART_MspInit+0xe4>)
 800098e:	f043 0304 	orr.w	r3, r3, #4
 8000992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000994:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <HAL_UART_MspInit+0xe4>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <HAL_UART_MspInit+0xe4>)
 80009a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a4:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <HAL_UART_MspInit+0xe4>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <HAL_UART_MspInit+0xe4>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009b8:	2330      	movs	r3, #48	; 0x30
 80009ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009c8:	2307      	movs	r3, #7
 80009ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009d0:	4619      	mov	r1, r3
 80009d2:	480e      	ldr	r0, [pc, #56]	; (8000a0c <HAL_UART_MspInit+0xe8>)
 80009d4:	f000 fa40 	bl	8000e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009ea:	2307      	movs	r3, #7
 80009ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009f2:	4619      	mov	r1, r3
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f8:	f000 fa2e 	bl	8000e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009fc:	bf00      	nop
 80009fe:	3780      	adds	r7, #128	; 0x80
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40013800 	.word	0x40013800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	48000800 	.word	0x48000800

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	e7fe      	b.n	8000a14 <NMI_Handler+0x4>

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler+0x4>

08000a22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5c:	f000 f8ce 	bl	8000bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a6c:	f000 fb8e 	bl	800118c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a7c:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <_sbrk+0x5c>)
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <_sbrk+0x60>)
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <_sbrk+0x64>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <_sbrk+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d207      	bcs.n	8000ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa4:	f003 fb40 	bl	8004128 <__errno>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	220c      	movs	r2, #12
 8000aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	e009      	b.n	8000ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <_sbrk+0x64>)
 8000ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20020000 	.word	0x20020000
 8000ad4:	00000400 	.word	0x00000400
 8000ad8:	20000158 	.word	0x20000158
 8000adc:	200002a8 	.word	0x200002a8

08000ae0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b08:	f7ff ffea 	bl	8000ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	; (8000b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <LoopForever+0xe>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	; (8000b50 <LoopForever+0x16>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b32:	f003 faff 	bl	8004134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b36:	f7ff fd49 	bl	80005cc <main>

08000b3a <LoopForever>:

LoopForever:
    b LoopForever
 8000b3a:	e7fe      	b.n	8000b3a <LoopForever>
  ldr   r0, =_estack
 8000b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b48:	08004ac8 	.word	0x08004ac8
  ldr r2, =_sbss
 8000b4c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b50:	200002a8 	.word	0x200002a8

08000b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_2_IRQHandler>

08000b56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f939 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b66:	2000      	movs	r0, #0
 8000b68:	f000 f80e 	bl	8000b88 <HAL_InitTick>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d002      	beq.n	8000b78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	e001      	b.n	8000b7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b78:	f7ff feb0 	bl	80008dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b7c:	79fb      	ldrb	r3, [r7, #7]

}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <HAL_InitTick+0x68>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d022      	beq.n	8000be2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_InitTick+0x6c>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <HAL_InitTick+0x68>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ba8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f944 	bl	8000e3e <HAL_SYSTICK_Config>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d10f      	bne.n	8000bdc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d809      	bhi.n	8000bd6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8000bca:	f000 f910 	bl	8000dee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_InitTick+0x70>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	e007      	b.n	8000be6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	e004      	b.n	8000be6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
 8000be0:	e001      	b.n	8000be6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000014 	.word	0x20000014
 8000bf4:	2000000c 	.word	0x2000000c
 8000bf8:	20000010 	.word	0x20000010

08000bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x1c>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_IncTick+0x20>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a03      	ldr	r2, [pc, #12]	; (8000c18 <HAL_IncTick+0x1c>)
 8000c0c:	6013      	str	r3, [r2, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	2000015c 	.word	0x2000015c
 8000c1c:	20000014 	.word	0x20000014

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	2000015c 	.word	0x2000015c

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db0b      	blt.n	8000cc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	f003 021f 	and.w	r2, r3, #31
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <__NVIC_EnableIRQ+0x38>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da4:	d301      	bcc.n	8000daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00f      	b.n	8000dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <SysTick_Config+0x40>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db2:	210f      	movs	r1, #15
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f7ff ff8e 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <SysTick_Config+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <SysTick_Config+0x40>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff29 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfc:	f7ff ff40 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000e00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	6978      	ldr	r0, [r7, #20]
 8000e08:	f7ff ff90 	bl	8000d2c <NVIC_EncodePriority>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff5f 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff33 	bl	8000c9c <__NVIC_EnableIRQ>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ffa4 	bl	8000d94 <SysTick_Config>
 8000e4c:	4603      	mov	r3, r0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e66:	e15a      	b.n	800111e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	4013      	ands	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 814c 	beq.w	8001118 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d005      	beq.n	8000e98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d130      	bne.n	8000efa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	091b      	lsrs	r3, r3, #4
 8000ee4:	f003 0201 	and.w	r2, r3, #1
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d017      	beq.n	8000f36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d123      	bne.n	8000f8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	08da      	lsrs	r2, r3, #3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3208      	adds	r2, #8
 8000f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	220f      	movs	r2, #15
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	691a      	ldr	r2, [r3, #16]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	08da      	lsrs	r2, r3, #3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3208      	adds	r2, #8
 8000f84:	6939      	ldr	r1, [r7, #16]
 8000f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0203 	and.w	r2, r3, #3
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 80a6 	beq.w	8001118 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fcc:	4b5b      	ldr	r3, [pc, #364]	; (800113c <HAL_GPIO_Init+0x2e4>)
 8000fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd0:	4a5a      	ldr	r2, [pc, #360]	; (800113c <HAL_GPIO_Init+0x2e4>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6613      	str	r3, [r2, #96]	; 0x60
 8000fd8:	4b58      	ldr	r3, [pc, #352]	; (800113c <HAL_GPIO_Init+0x2e4>)
 8000fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe4:	4a56      	ldr	r2, [pc, #344]	; (8001140 <HAL_GPIO_Init+0x2e8>)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800100e:	d01f      	beq.n	8001050 <HAL_GPIO_Init+0x1f8>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a4c      	ldr	r2, [pc, #304]	; (8001144 <HAL_GPIO_Init+0x2ec>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d019      	beq.n	800104c <HAL_GPIO_Init+0x1f4>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a4b      	ldr	r2, [pc, #300]	; (8001148 <HAL_GPIO_Init+0x2f0>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d013      	beq.n	8001048 <HAL_GPIO_Init+0x1f0>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a4a      	ldr	r2, [pc, #296]	; (800114c <HAL_GPIO_Init+0x2f4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d00d      	beq.n	8001044 <HAL_GPIO_Init+0x1ec>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a49      	ldr	r2, [pc, #292]	; (8001150 <HAL_GPIO_Init+0x2f8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d007      	beq.n	8001040 <HAL_GPIO_Init+0x1e8>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a48      	ldr	r2, [pc, #288]	; (8001154 <HAL_GPIO_Init+0x2fc>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d101      	bne.n	800103c <HAL_GPIO_Init+0x1e4>
 8001038:	2305      	movs	r3, #5
 800103a:	e00a      	b.n	8001052 <HAL_GPIO_Init+0x1fa>
 800103c:	2306      	movs	r3, #6
 800103e:	e008      	b.n	8001052 <HAL_GPIO_Init+0x1fa>
 8001040:	2304      	movs	r3, #4
 8001042:	e006      	b.n	8001052 <HAL_GPIO_Init+0x1fa>
 8001044:	2303      	movs	r3, #3
 8001046:	e004      	b.n	8001052 <HAL_GPIO_Init+0x1fa>
 8001048:	2302      	movs	r3, #2
 800104a:	e002      	b.n	8001052 <HAL_GPIO_Init+0x1fa>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <HAL_GPIO_Init+0x1fa>
 8001050:	2300      	movs	r3, #0
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	f002 0203 	and.w	r2, r2, #3
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	4093      	lsls	r3, r2
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001062:	4937      	ldr	r1, [pc, #220]	; (8001140 <HAL_GPIO_Init+0x2e8>)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001070:	4b39      	ldr	r3, [pc, #228]	; (8001158 <HAL_GPIO_Init+0x300>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001094:	4a30      	ldr	r2, [pc, #192]	; (8001158 <HAL_GPIO_Init+0x300>)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800109a:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <HAL_GPIO_Init+0x300>)
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010be:	4a26      	ldr	r2, [pc, #152]	; (8001158 <HAL_GPIO_Init+0x300>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <HAL_GPIO_Init+0x300>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010e8:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <HAL_GPIO_Init+0x300>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_GPIO_Init+0x300>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001112:	4a11      	ldr	r2, [pc, #68]	; (8001158 <HAL_GPIO_Init+0x300>)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3301      	adds	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fa22 f303 	lsr.w	r3, r2, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	f47f ae9d 	bne.w	8000e68 <HAL_GPIO_Init+0x10>
  }
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	371c      	adds	r7, #28
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40021000 	.word	0x40021000
 8001140:	40010000 	.word	0x40010000
 8001144:	48000400 	.word	0x48000400
 8001148:	48000800 	.word	0x48000800
 800114c:	48000c00 	.word	0x48000c00
 8001150:	48001000 	.word	0x48001000
 8001154:	48001400 	.word	0x48001400
 8001158:	40010400 	.word	0x40010400

0800115c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
 8001168:	4613      	mov	r3, r2
 800116a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800116c:	787b      	ldrb	r3, [r7, #1]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001178:	e002      	b.n	8001180 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001198:	695a      	ldr	r2, [r3, #20]
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fb44 	bl	8000838 <HAL_GPIO_EXTI_Callback>
  }
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40010400 	.word	0x40010400

080011bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d141      	bne.n	800124e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ca:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d6:	d131      	bne.n	800123c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011d8:	4b47      	ldr	r3, [pc, #284]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011de:	4a46      	ldr	r2, [pc, #280]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e8:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011f0:	4a41      	ldr	r2, [pc, #260]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011f8:	4b40      	ldr	r3, [pc, #256]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2232      	movs	r2, #50	; 0x32
 80011fe:	fb02 f303 	mul.w	r3, r2, r3
 8001202:	4a3f      	ldr	r2, [pc, #252]	; (8001300 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001204:	fba2 2303 	umull	r2, r3, r2, r3
 8001208:	0c9b      	lsrs	r3, r3, #18
 800120a:	3301      	adds	r3, #1
 800120c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800120e:	e002      	b.n	8001216 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3b01      	subs	r3, #1
 8001214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001216:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800121e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001222:	d102      	bne.n	800122a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f2      	bne.n	8001210 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800122a:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001236:	d158      	bne.n	80012ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e057      	b.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800123c:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001242:	4a2d      	ldr	r2, [pc, #180]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001248:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800124c:	e04d      	b.n	80012ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001254:	d141      	bne.n	80012da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001256:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800125e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001262:	d131      	bne.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800126a:	4a23      	ldr	r2, [pc, #140]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800126c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001270:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001274:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800127c:	4a1e      	ldr	r2, [pc, #120]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001282:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2232      	movs	r2, #50	; 0x32
 800128a:	fb02 f303 	mul.w	r3, r2, r3
 800128e:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001290:	fba2 2303 	umull	r2, r3, r2, r3
 8001294:	0c9b      	lsrs	r3, r3, #18
 8001296:	3301      	adds	r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800129a:	e002      	b.n	80012a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3b01      	subs	r3, #1
 80012a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ae:	d102      	bne.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f2      	bne.n	800129c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c2:	d112      	bne.n	80012ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e011      	b.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012d8:	e007      	b.n	80012ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40007000 	.word	0x40007000
 80012fc:	2000000c 	.word	0x2000000c
 8001300:	431bde83 	.word	0x431bde83

08001304 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800130e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001312:	6093      	str	r3, [r2, #8]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40007000 	.word	0x40007000

08001324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e2fe      	b.n	8001934 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d075      	beq.n	800142e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001342:	4b97      	ldr	r3, [pc, #604]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800134c:	4b94      	ldr	r3, [pc, #592]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	2b0c      	cmp	r3, #12
 800135a:	d102      	bne.n	8001362 <HAL_RCC_OscConfig+0x3e>
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	2b03      	cmp	r3, #3
 8001360:	d002      	beq.n	8001368 <HAL_RCC_OscConfig+0x44>
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	2b08      	cmp	r3, #8
 8001366:	d10b      	bne.n	8001380 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	4b8d      	ldr	r3, [pc, #564]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d05b      	beq.n	800142c <HAL_RCC_OscConfig+0x108>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d157      	bne.n	800142c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e2d9      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001388:	d106      	bne.n	8001398 <HAL_RCC_OscConfig+0x74>
 800138a:	4b85      	ldr	r3, [pc, #532]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a84      	ldr	r2, [pc, #528]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 8001390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e01d      	b.n	80013d4 <HAL_RCC_OscConfig+0xb0>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x98>
 80013a2:	4b7f      	ldr	r3, [pc, #508]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a7e      	ldr	r2, [pc, #504]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 80013a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b7c      	ldr	r3, [pc, #496]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a7b      	ldr	r2, [pc, #492]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 80013b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e00b      	b.n	80013d4 <HAL_RCC_OscConfig+0xb0>
 80013bc:	4b78      	ldr	r3, [pc, #480]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a77      	ldr	r2, [pc, #476]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 80013c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b75      	ldr	r3, [pc, #468]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a74      	ldr	r2, [pc, #464]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 80013ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d013      	beq.n	8001404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013dc:	f7ff fc20 	bl	8000c20 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e4:	f7ff fc1c 	bl	8000c20 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b64      	cmp	r3, #100	; 0x64
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e29e      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013f6:	4b6a      	ldr	r3, [pc, #424]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0xc0>
 8001402:	e014      	b.n	800142e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fc0c 	bl	8000c20 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800140c:	f7ff fc08 	bl	8000c20 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b64      	cmp	r3, #100	; 0x64
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e28a      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800141e:	4b60      	ldr	r3, [pc, #384]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0xe8>
 800142a:	e000      	b.n	800142e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d075      	beq.n	8001526 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800143a:	4b59      	ldr	r3, [pc, #356]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001444:	4b56      	ldr	r3, [pc, #344]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	2b0c      	cmp	r3, #12
 8001452:	d102      	bne.n	800145a <HAL_RCC_OscConfig+0x136>
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d002      	beq.n	8001460 <HAL_RCC_OscConfig+0x13c>
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	2b04      	cmp	r3, #4
 800145e:	d11f      	bne.n	80014a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001460:	4b4f      	ldr	r3, [pc, #316]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_RCC_OscConfig+0x154>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e25d      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001478:	4b49      	ldr	r3, [pc, #292]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	061b      	lsls	r3, r3, #24
 8001486:	4946      	ldr	r1, [pc, #280]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800148c:	4b45      	ldr	r3, [pc, #276]	; (80015a4 <HAL_RCC_OscConfig+0x280>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fb79 	bl	8000b88 <HAL_InitTick>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d043      	beq.n	8001524 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e249      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d023      	beq.n	80014f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a8:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a3c      	ldr	r2, [pc, #240]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 80014ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff fbb4 	bl	8000c20 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014bc:	f7ff fbb0 	bl	8000c20 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e232      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ce:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	061b      	lsls	r3, r3, #24
 80014e8:	492d      	ldr	r1, [pc, #180]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]
 80014ee:	e01a      	b.n	8001526 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a2a      	ldr	r2, [pc, #168]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 80014f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb90 	bl	8000c20 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001504:	f7ff fb8c 	bl	8000c20 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e20e      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x1e0>
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001524:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d041      	beq.n	80015b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d01c      	beq.n	8001574 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 800153c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001540:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154a:	f7ff fb69 	bl	8000c20 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001552:	f7ff fb65 	bl	8000c20 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e1e7      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 8001566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0ef      	beq.n	8001552 <HAL_RCC_OscConfig+0x22e>
 8001572:	e020      	b.n	80015b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 8001576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800157a:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <HAL_RCC_OscConfig+0x27c>)
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001584:	f7ff fb4c 	bl	8000c20 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800158a:	e00d      	b.n	80015a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff fb48 	bl	8000c20 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d906      	bls.n	80015a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1ca      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a8:	4b8c      	ldr	r3, [pc, #560]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 80015aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1ea      	bne.n	800158c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 80a6 	beq.w	8001710 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015c8:	4b84      	ldr	r3, [pc, #528]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_RCC_OscConfig+0x2b4>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x2b6>
 80015d8:	2300      	movs	r3, #0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00d      	beq.n	80015fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	4b7f      	ldr	r3, [pc, #508]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	4a7e      	ldr	r2, [pc, #504]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	6593      	str	r3, [r2, #88]	; 0x58
 80015ea:	4b7c      	ldr	r3, [pc, #496]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015f6:	2301      	movs	r3, #1
 80015f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015fa:	4b79      	ldr	r3, [pc, #484]	; (80017e0 <HAL_RCC_OscConfig+0x4bc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001602:	2b00      	cmp	r3, #0
 8001604:	d118      	bne.n	8001638 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001606:	4b76      	ldr	r3, [pc, #472]	; (80017e0 <HAL_RCC_OscConfig+0x4bc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a75      	ldr	r2, [pc, #468]	; (80017e0 <HAL_RCC_OscConfig+0x4bc>)
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001612:	f7ff fb05 	bl	8000c20 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161a:	f7ff fb01 	bl	8000c20 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e183      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162c:	4b6c      	ldr	r3, [pc, #432]	; (80017e0 <HAL_RCC_OscConfig+0x4bc>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d108      	bne.n	8001652 <HAL_RCC_OscConfig+0x32e>
 8001640:	4b66      	ldr	r3, [pc, #408]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 8001642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001646:	4a65      	ldr	r2, [pc, #404]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001650:	e024      	b.n	800169c <HAL_RCC_OscConfig+0x378>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b05      	cmp	r3, #5
 8001658:	d110      	bne.n	800167c <HAL_RCC_OscConfig+0x358>
 800165a:	4b60      	ldr	r3, [pc, #384]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 800165c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001660:	4a5e      	ldr	r2, [pc, #376]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 8001662:	f043 0304 	orr.w	r3, r3, #4
 8001666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800166a:	4b5c      	ldr	r3, [pc, #368]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 800166c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001670:	4a5a      	ldr	r2, [pc, #360]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800167a:	e00f      	b.n	800169c <HAL_RCC_OscConfig+0x378>
 800167c:	4b57      	ldr	r3, [pc, #348]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001682:	4a56      	ldr	r2, [pc, #344]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800168c:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 800168e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001692:	4a52      	ldr	r2, [pc, #328]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 8001694:	f023 0304 	bic.w	r3, r3, #4
 8001698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d016      	beq.n	80016d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a4:	f7ff fabc 	bl	8000c20 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f7ff fab8 	bl	8000c20 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e138      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016c2:	4b46      	ldr	r3, [pc, #280]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 80016c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0ed      	beq.n	80016ac <HAL_RCC_OscConfig+0x388>
 80016d0:	e015      	b.n	80016fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d2:	f7ff faa5 	bl	8000c20 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d8:	e00a      	b.n	80016f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016da:	f7ff faa1 	bl	8000c20 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e121      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f0:	4b3a      	ldr	r3, [pc, #232]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ed      	bne.n	80016da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016fe:	7ffb      	ldrb	r3, [r7, #31]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d105      	bne.n	8001710 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001704:	4b35      	ldr	r3, [pc, #212]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 8001706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001708:	4a34      	ldr	r2, [pc, #208]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 800170a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800170e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0320 	and.w	r3, r3, #32
 8001718:	2b00      	cmp	r3, #0
 800171a:	d03c      	beq.n	8001796 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d01c      	beq.n	800175e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001724:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 8001726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800172a:	4a2c      	ldr	r2, [pc, #176]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7ff fa74 	bl	8000c20 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800173c:	f7ff fa70 	bl	8000c20 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e0f2      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 8001750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0ef      	beq.n	800173c <HAL_RCC_OscConfig+0x418>
 800175c:	e01b      	b.n	8001796 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800175e:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 8001760:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001764:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176e:	f7ff fa57 	bl	8000c20 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001776:	f7ff fa53 	bl	8000c20 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e0d5      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 800178a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ef      	bne.n	8001776 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 80c9 	beq.w	8001932 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b0c      	cmp	r3, #12
 80017aa:	f000 8083 	beq.w	80018b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d15e      	bne.n	8001874 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a08      	ldr	r2, [pc, #32]	; (80017dc <HAL_RCC_OscConfig+0x4b8>)
 80017bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c2:	f7ff fa2d 	bl	8000c20 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c8:	e00c      	b.n	80017e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff fa29 	bl	8000c20 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d905      	bls.n	80017e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e0ab      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e4:	4b55      	ldr	r3, [pc, #340]	; (800193c <HAL_RCC_OscConfig+0x618>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1ec      	bne.n	80017ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f0:	4b52      	ldr	r3, [pc, #328]	; (800193c <HAL_RCC_OscConfig+0x618>)
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	4b52      	ldr	r3, [pc, #328]	; (8001940 <HAL_RCC_OscConfig+0x61c>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6a11      	ldr	r1, [r2, #32]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001800:	3a01      	subs	r2, #1
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	4311      	orrs	r1, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800180a:	0212      	lsls	r2, r2, #8
 800180c:	4311      	orrs	r1, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001812:	0852      	lsrs	r2, r2, #1
 8001814:	3a01      	subs	r2, #1
 8001816:	0552      	lsls	r2, r2, #21
 8001818:	4311      	orrs	r1, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800181e:	0852      	lsrs	r2, r2, #1
 8001820:	3a01      	subs	r2, #1
 8001822:	0652      	lsls	r2, r2, #25
 8001824:	4311      	orrs	r1, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800182a:	06d2      	lsls	r2, r2, #27
 800182c:	430a      	orrs	r2, r1
 800182e:	4943      	ldr	r1, [pc, #268]	; (800193c <HAL_RCC_OscConfig+0x618>)
 8001830:	4313      	orrs	r3, r2
 8001832:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001834:	4b41      	ldr	r3, [pc, #260]	; (800193c <HAL_RCC_OscConfig+0x618>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a40      	ldr	r2, [pc, #256]	; (800193c <HAL_RCC_OscConfig+0x618>)
 800183a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800183e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001840:	4b3e      	ldr	r3, [pc, #248]	; (800193c <HAL_RCC_OscConfig+0x618>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4a3d      	ldr	r2, [pc, #244]	; (800193c <HAL_RCC_OscConfig+0x618>)
 8001846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800184a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff f9e8 	bl	8000c20 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff f9e4 	bl	8000c20 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e066      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001866:	4b35      	ldr	r3, [pc, #212]	; (800193c <HAL_RCC_OscConfig+0x618>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x530>
 8001872:	e05e      	b.n	8001932 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001874:	4b31      	ldr	r3, [pc, #196]	; (800193c <HAL_RCC_OscConfig+0x618>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a30      	ldr	r2, [pc, #192]	; (800193c <HAL_RCC_OscConfig+0x618>)
 800187a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800187e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff f9ce 	bl	8000c20 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff f9ca 	bl	8000c20 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e04c      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189a:	4b28      	ldr	r3, [pc, #160]	; (800193c <HAL_RCC_OscConfig+0x618>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <HAL_RCC_OscConfig+0x618>)
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	4924      	ldr	r1, [pc, #144]	; (800193c <HAL_RCC_OscConfig+0x618>)
 80018ac:	4b25      	ldr	r3, [pc, #148]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	60cb      	str	r3, [r1, #12]
 80018b2:	e03e      	b.n	8001932 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e039      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <HAL_RCC_OscConfig+0x618>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f003 0203 	and.w	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d12c      	bne.n	800192e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	3b01      	subs	r3, #1
 80018e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d123      	bne.n	800192e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d11b      	bne.n	800192e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d113      	bne.n	800192e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	3b01      	subs	r3, #1
 8001914:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d109      	bne.n	800192e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001924:	085b      	lsrs	r3, r3, #1
 8001926:	3b01      	subs	r3, #1
 8001928:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3720      	adds	r7, #32
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000
 8001940:	019f800c 	.word	0x019f800c
 8001944:	feeefffc 	.word	0xfeeefffc

08001948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e11e      	b.n	8001b9e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001960:	4b91      	ldr	r3, [pc, #580]	; (8001ba8 <HAL_RCC_ClockConfig+0x260>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d910      	bls.n	8001990 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b8e      	ldr	r3, [pc, #568]	; (8001ba8 <HAL_RCC_ClockConfig+0x260>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 020f 	bic.w	r2, r3, #15
 8001976:	498c      	ldr	r1, [pc, #560]	; (8001ba8 <HAL_RCC_ClockConfig+0x260>)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b8a      	ldr	r3, [pc, #552]	; (8001ba8 <HAL_RCC_ClockConfig+0x260>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e106      	b.n	8001b9e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d073      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d129      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a4:	4b81      	ldr	r3, [pc, #516]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0f4      	b.n	8001b9e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80019b4:	f000 f99e 	bl	8001cf4 <RCC_GetSysClockFreqFromPLLSource>
 80019b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4a7c      	ldr	r2, [pc, #496]	; (8001bb0 <HAL_RCC_ClockConfig+0x268>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d93f      	bls.n	8001a42 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019c2:	4b7a      	ldr	r3, [pc, #488]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d033      	beq.n	8001a42 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d12f      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019e2:	4b72      	ldr	r3, [pc, #456]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019ea:	4a70      	ldr	r2, [pc, #448]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 80019ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e024      	b.n	8001a42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a00:	4b6a      	ldr	r3, [pc, #424]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d109      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0c6      	b.n	8001b9e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a10:	4b66      	ldr	r3, [pc, #408]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0be      	b.n	8001b9e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a20:	f000 f8ce 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4a61      	ldr	r2, [pc, #388]	; (8001bb0 <HAL_RCC_ClockConfig+0x268>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d909      	bls.n	8001a42 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a2e:	4b5f      	ldr	r3, [pc, #380]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a36:	4a5d      	ldr	r2, [pc, #372]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a3c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a42:	4b5a      	ldr	r3, [pc, #360]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f023 0203 	bic.w	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4957      	ldr	r1, [pc, #348]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a54:	f7ff f8e4 	bl	8000c20 <HAL_GetTick>
 8001a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5c:	f7ff f8e0 	bl	8000c20 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e095      	b.n	8001b9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 020c 	and.w	r2, r3, #12
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d1eb      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d023      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a9c:	4b43      	ldr	r3, [pc, #268]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	4a42      	ldr	r2, [pc, #264]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001aa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aa6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d007      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ab4:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001abc:	4a3b      	ldr	r2, [pc, #236]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001abe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ac2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac4:	4b39      	ldr	r3, [pc, #228]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4936      	ldr	r1, [pc, #216]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b80      	cmp	r3, #128	; 0x80
 8001adc:	d105      	bne.n	8001aea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ade:	4b33      	ldr	r3, [pc, #204]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	4a32      	ldr	r2, [pc, #200]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001ae4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ae8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aea:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <HAL_RCC_ClockConfig+0x260>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d21d      	bcs.n	8001b34 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af8:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <HAL_RCC_ClockConfig+0x260>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 020f 	bic.w	r2, r3, #15
 8001b00:	4929      	ldr	r1, [pc, #164]	; (8001ba8 <HAL_RCC_ClockConfig+0x260>)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b08:	f7ff f88a 	bl	8000c20 <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b10:	f7ff f886 	bl	8000c20 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e03b      	b.n	8001b9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_RCC_ClockConfig+0x260>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d1ed      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4917      	ldr	r1, [pc, #92]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d009      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	490f      	ldr	r1, [pc, #60]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b72:	f000 f825 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001b76:	4602      	mov	r2, r0
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_RCC_ClockConfig+0x264>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <HAL_RCC_ClockConfig+0x26c>)
 8001b84:	5ccb      	ldrb	r3, [r1, r3]
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_RCC_ClockConfig+0x270>)
 8001b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_RCC_ClockConfig+0x274>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fff6 	bl	8000b88 <HAL_InitTick>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40022000 	.word	0x40022000
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	04c4b400 	.word	0x04c4b400
 8001bb4:	08004a44 	.word	0x08004a44
 8001bb8:	2000000c 	.word	0x2000000c
 8001bbc:	20000010 	.word	0x20000010

08001bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bc6:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d102      	bne.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bd2:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	e047      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d102      	bne.n	8001bea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001be4:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	e03e      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bea:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	d136      	bne.n	8001c64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d10c      	bne.n	8001c2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c14:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1c:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c1e:	68d2      	ldr	r2, [r2, #12]
 8001c20:	0a12      	lsrs	r2, r2, #8
 8001c22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c26:	fb02 f303 	mul.w	r3, r2, r3
 8001c2a:	617b      	str	r3, [r7, #20]
      break;
 8001c2c:	e00c      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c2e:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c38:	68d2      	ldr	r2, [r2, #12]
 8001c3a:	0a12      	lsrs	r2, r2, #8
 8001c3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c40:	fb02 f303 	mul.w	r3, r2, r3
 8001c44:	617b      	str	r3, [r7, #20]
      break;
 8001c46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	0e5b      	lsrs	r3, r3, #25
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	3301      	adds	r3, #1
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	e001      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c68:	693b      	ldr	r3, [r7, #16]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	00f42400 	.word	0x00f42400
 8001c80:	016e3600 	.word	0x016e3600

08001c84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	2000000c 	.word	0x2000000c

08001c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ca0:	f7ff fff0 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	4904      	ldr	r1, [pc, #16]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	08004a54 	.word	0x08004a54

08001cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ccc:	f7ff ffda 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	0adb      	lsrs	r3, r3, #11
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	4904      	ldr	r1, [pc, #16]	; (8001cf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	08004a54 	.word	0x08004a54

08001cf4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3301      	adds	r3, #1
 8001d10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d10c      	bne.n	8001d32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d18:	4a17      	ldr	r2, [pc, #92]	; (8001d78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d20:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d22:	68d2      	ldr	r2, [r2, #12]
 8001d24:	0a12      	lsrs	r2, r2, #8
 8001d26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	617b      	str	r3, [r7, #20]
    break;
 8001d30:	e00c      	b.n	8001d4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d32:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d3c:	68d2      	ldr	r2, [r2, #12]
 8001d3e:	0a12      	lsrs	r2, r2, #8
 8001d40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d44:	fb02 f303 	mul.w	r3, r2, r3
 8001d48:	617b      	str	r3, [r7, #20]
    break;
 8001d4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0e5b      	lsrs	r3, r3, #25
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	3301      	adds	r3, #1
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d66:	687b      	ldr	r3, [r7, #4]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	371c      	adds	r7, #28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40021000 	.word	0x40021000
 8001d78:	016e3600 	.word	0x016e3600
 8001d7c:	00f42400 	.word	0x00f42400

08001d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d88:	2300      	movs	r3, #0
 8001d8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 8098 	beq.w	8001ece <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da2:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10d      	bne.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	4a3f      	ldr	r2, [pc, #252]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dba:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dca:	4b3a      	ldr	r3, [pc, #232]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a39      	ldr	r2, [pc, #228]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dd6:	f7fe ff23 	bl	8000c20 <HAL_GetTick>
 8001dda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ddc:	e009      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dde:	f7fe ff1f 	bl	8000c20 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d902      	bls.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	74fb      	strb	r3, [r7, #19]
        break;
 8001df0:	e005      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001df2:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0ef      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001dfe:	7cfb      	ldrb	r3, [r7, #19]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d159      	bne.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e04:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d01e      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d019      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e20:	4b23      	ldr	r3, [pc, #140]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e2c:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e3c:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	4a1b      	ldr	r2, [pc, #108]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e4c:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d016      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7fe fedf 	bl	8000c20 <HAL_GetTick>
 8001e62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e64:	e00b      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7fe fedb 	bl	8000c20 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d902      	bls.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	74fb      	strb	r3, [r7, #19]
            break;
 8001e7c:	e006      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0ec      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001e8c:	7cfb      	ldrb	r3, [r7, #19]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10b      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea0:	4903      	ldr	r1, [pc, #12]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ea8:	e008      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001eaa:	7cfb      	ldrb	r3, [r7, #19]
 8001eac:	74bb      	strb	r3, [r7, #18]
 8001eae:	e005      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ebc:	7c7b      	ldrb	r3, [r7, #17]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d105      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec2:	4ba7      	ldr	r3, [pc, #668]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	4aa6      	ldr	r2, [pc, #664]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eda:	4ba1      	ldr	r3, [pc, #644]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee0:	f023 0203 	bic.w	r2, r3, #3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	499d      	ldr	r1, [pc, #628]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001efc:	4b98      	ldr	r3, [pc, #608]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	f023 020c 	bic.w	r2, r3, #12
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	4995      	ldr	r1, [pc, #596]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f1e:	4b90      	ldr	r3, [pc, #576]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	498c      	ldr	r1, [pc, #560]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f40:	4b87      	ldr	r3, [pc, #540]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	4984      	ldr	r1, [pc, #528]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f62:	4b7f      	ldr	r3, [pc, #508]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	497b      	ldr	r1, [pc, #492]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f84:	4b76      	ldr	r3, [pc, #472]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	4973      	ldr	r1, [pc, #460]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fa6:	4b6e      	ldr	r3, [pc, #440]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	496a      	ldr	r1, [pc, #424]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fc8:	4b65      	ldr	r3, [pc, #404]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	4962      	ldr	r1, [pc, #392]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fea:	4b5d      	ldr	r3, [pc, #372]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	4959      	ldr	r1, [pc, #356]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800200c:	4b54      	ldr	r3, [pc, #336]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800200e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002012:	f023 0203 	bic.w	r2, r3, #3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	4951      	ldr	r1, [pc, #324]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800202e:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002034:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	4948      	ldr	r1, [pc, #288]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d015      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002050:	4b43      	ldr	r3, [pc, #268]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002056:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4940      	ldr	r1, [pc, #256]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800206e:	d105      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002070:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4a3a      	ldr	r2, [pc, #232]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002076:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800207a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002084:	2b00      	cmp	r3, #0
 8002086:	d015      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002088:	4b35      	ldr	r3, [pc, #212]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002096:	4932      	ldr	r1, [pc, #200]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a6:	d105      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a8:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4a2c      	ldr	r2, [pc, #176]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020b2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d015      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020c0:	4b27      	ldr	r3, [pc, #156]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ce:	4924      	ldr	r1, [pc, #144]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020de:	d105      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e0:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a1e      	ldr	r2, [pc, #120]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002106:	4916      	ldr	r1, [pc, #88]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002112:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002116:	d105      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4a10      	ldr	r2, [pc, #64]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002122:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d019      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4908      	ldr	r1, [pc, #32]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800214e:	d109      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a02      	ldr	r2, [pc, #8]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800215a:	60d3      	str	r3, [r2, #12]
 800215c:	e002      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d015      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002170:	4b29      	ldr	r3, [pc, #164]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002176:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	4926      	ldr	r1, [pc, #152]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800218e:	d105      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002190:	4b21      	ldr	r3, [pc, #132]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4a20      	ldr	r2, [pc, #128]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d015      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b6:	4918      	ldr	r1, [pc, #96]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c6:	d105      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80021c8:	4b13      	ldr	r3, [pc, #76]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4a12      	ldr	r2, [pc, #72]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d015      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80021e0:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	490a      	ldr	r1, [pc, #40]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021fe:	d105      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800220a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800220c:	7cbb      	ldrb	r3, [r7, #18]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000

0800221c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800221c:	b480      	push	{r7}
 800221e:	b091      	sub	sp, #68	; 0x44
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	4613      	mov	r3, r2
 8002228:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002230:	2b20      	cmp	r3, #32
 8002232:	d178      	bne.n	8002326 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <HAL_UART_Transmit_IT+0x24>
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e071      	b.n	8002328 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	88fa      	ldrh	r2, [r7, #6]
 800224e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	88fa      	ldrh	r2, [r7, #6]
 8002256:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2221      	movs	r2, #33	; 0x21
 800226c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002278:	d12a      	bne.n	80022d0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002282:	d107      	bne.n	8002294 <HAL_UART_Transmit_IT+0x78>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d103      	bne.n	8002294 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4a29      	ldr	r2, [pc, #164]	; (8002334 <HAL_UART_Transmit_IT+0x118>)
 8002290:	679a      	str	r2, [r3, #120]	; 0x78
 8002292:	e002      	b.n	800229a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4a28      	ldr	r2, [pc, #160]	; (8002338 <HAL_UART_Transmit_IT+0x11c>)
 8002298:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	3308      	adds	r3, #8
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a4:	e853 3f00 	ldrex	r3, [r3]
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3308      	adds	r3, #8
 80022b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022ba:	637a      	str	r2, [r7, #52]	; 0x34
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022c2:	e841 2300 	strex	r3, r2, [r1]
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1e5      	bne.n	800229a <HAL_UART_Transmit_IT+0x7e>
 80022ce:	e028      	b.n	8002322 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d8:	d107      	bne.n	80022ea <HAL_UART_Transmit_IT+0xce>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d103      	bne.n	80022ea <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4a15      	ldr	r2, [pc, #84]	; (800233c <HAL_UART_Transmit_IT+0x120>)
 80022e6:	679a      	str	r2, [r3, #120]	; 0x78
 80022e8:	e002      	b.n	80022f0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4a14      	ldr	r2, [pc, #80]	; (8002340 <HAL_UART_Transmit_IT+0x124>)
 80022ee:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	e853 3f00 	ldrex	r3, [r3]
 80022fc:	613b      	str	r3, [r7, #16]
   return(result);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002304:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800230e:	623b      	str	r3, [r7, #32]
 8002310:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002312:	69f9      	ldr	r1, [r7, #28]
 8002314:	6a3a      	ldr	r2, [r7, #32]
 8002316:	e841 2300 	strex	r3, r2, [r1]
 800231a:	61bb      	str	r3, [r7, #24]
   return(result);
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1e6      	bne.n	80022f0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e000      	b.n	8002328 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002326:	2302      	movs	r3, #2
  }
}
 8002328:	4618      	mov	r0, r3
 800232a:	3744      	adds	r7, #68	; 0x44
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	080032df 	.word	0x080032df
 8002338:	080031ff 	.word	0x080031ff
 800233c:	0800313d 	.word	0x0800313d
 8002340:	08003085 	.word	0x08003085

08002344 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	4613      	mov	r3, r2
 8002350:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002358:	2b20      	cmp	r3, #32
 800235a:	d137      	bne.n	80023cc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <HAL_UART_Receive_IT+0x24>
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e030      	b.n	80023ce <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <HAL_UART_Receive_IT+0x94>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d01f      	beq.n	80023bc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d018      	beq.n	80023bc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	e853 3f00 	ldrex	r3, [r3]
 8002396:	613b      	str	r3, [r7, #16]
   return(result);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	623b      	str	r3, [r7, #32]
 80023aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ac:	69f9      	ldr	r1, [r7, #28]
 80023ae:	6a3a      	ldr	r2, [r7, #32]
 80023b0:	e841 2300 	strex	r3, r2, [r1]
 80023b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1e6      	bne.n	800238a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	461a      	mov	r2, r3
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fcd6 	bl	8002d74 <UART_Start_Receive_IT>
 80023c8:	4603      	mov	r3, r0
 80023ca:	e000      	b.n	80023ce <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023cc:	2302      	movs	r3, #2
  }
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3728      	adds	r7, #40	; 0x28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40008000 	.word	0x40008000

080023dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800240c:	b08c      	sub	sp, #48	; 0x30
 800240e:	af00      	add	r7, sp, #0
 8002410:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	431a      	orrs	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	431a      	orrs	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	4313      	orrs	r3, r2
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	4baa      	ldr	r3, [pc, #680]	; (80026e0 <UART_SetConfig+0x2d8>)
 8002438:	4013      	ands	r3, r2
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002440:	430b      	orrs	r3, r1
 8002442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a9f      	ldr	r2, [pc, #636]	; (80026e4 <UART_SetConfig+0x2dc>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d004      	beq.n	8002474 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002470:	4313      	orrs	r3, r2
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800247e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002488:	430b      	orrs	r3, r1
 800248a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	f023 010f 	bic.w	r1, r3, #15
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a90      	ldr	r2, [pc, #576]	; (80026e8 <UART_SetConfig+0x2e0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d125      	bne.n	80024f8 <UART_SetConfig+0xf0>
 80024ac:	4b8f      	ldr	r3, [pc, #572]	; (80026ec <UART_SetConfig+0x2e4>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d81a      	bhi.n	80024f0 <UART_SetConfig+0xe8>
 80024ba:	a201      	add	r2, pc, #4	; (adr r2, 80024c0 <UART_SetConfig+0xb8>)
 80024bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c0:	080024d1 	.word	0x080024d1
 80024c4:	080024e1 	.word	0x080024e1
 80024c8:	080024d9 	.word	0x080024d9
 80024cc:	080024e9 	.word	0x080024e9
 80024d0:	2301      	movs	r3, #1
 80024d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024d6:	e116      	b.n	8002706 <UART_SetConfig+0x2fe>
 80024d8:	2302      	movs	r3, #2
 80024da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024de:	e112      	b.n	8002706 <UART_SetConfig+0x2fe>
 80024e0:	2304      	movs	r3, #4
 80024e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024e6:	e10e      	b.n	8002706 <UART_SetConfig+0x2fe>
 80024e8:	2308      	movs	r3, #8
 80024ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024ee:	e10a      	b.n	8002706 <UART_SetConfig+0x2fe>
 80024f0:	2310      	movs	r3, #16
 80024f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024f6:	e106      	b.n	8002706 <UART_SetConfig+0x2fe>
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a7c      	ldr	r2, [pc, #496]	; (80026f0 <UART_SetConfig+0x2e8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d138      	bne.n	8002574 <UART_SetConfig+0x16c>
 8002502:	4b7a      	ldr	r3, [pc, #488]	; (80026ec <UART_SetConfig+0x2e4>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b0c      	cmp	r3, #12
 800250e:	d82d      	bhi.n	800256c <UART_SetConfig+0x164>
 8002510:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <UART_SetConfig+0x110>)
 8002512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002516:	bf00      	nop
 8002518:	0800254d 	.word	0x0800254d
 800251c:	0800256d 	.word	0x0800256d
 8002520:	0800256d 	.word	0x0800256d
 8002524:	0800256d 	.word	0x0800256d
 8002528:	0800255d 	.word	0x0800255d
 800252c:	0800256d 	.word	0x0800256d
 8002530:	0800256d 	.word	0x0800256d
 8002534:	0800256d 	.word	0x0800256d
 8002538:	08002555 	.word	0x08002555
 800253c:	0800256d 	.word	0x0800256d
 8002540:	0800256d 	.word	0x0800256d
 8002544:	0800256d 	.word	0x0800256d
 8002548:	08002565 	.word	0x08002565
 800254c:	2300      	movs	r3, #0
 800254e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002552:	e0d8      	b.n	8002706 <UART_SetConfig+0x2fe>
 8002554:	2302      	movs	r3, #2
 8002556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800255a:	e0d4      	b.n	8002706 <UART_SetConfig+0x2fe>
 800255c:	2304      	movs	r3, #4
 800255e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002562:	e0d0      	b.n	8002706 <UART_SetConfig+0x2fe>
 8002564:	2308      	movs	r3, #8
 8002566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800256a:	e0cc      	b.n	8002706 <UART_SetConfig+0x2fe>
 800256c:	2310      	movs	r3, #16
 800256e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002572:	e0c8      	b.n	8002706 <UART_SetConfig+0x2fe>
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a5e      	ldr	r2, [pc, #376]	; (80026f4 <UART_SetConfig+0x2ec>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d125      	bne.n	80025ca <UART_SetConfig+0x1c2>
 800257e:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <UART_SetConfig+0x2e4>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002584:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002588:	2b30      	cmp	r3, #48	; 0x30
 800258a:	d016      	beq.n	80025ba <UART_SetConfig+0x1b2>
 800258c:	2b30      	cmp	r3, #48	; 0x30
 800258e:	d818      	bhi.n	80025c2 <UART_SetConfig+0x1ba>
 8002590:	2b20      	cmp	r3, #32
 8002592:	d00a      	beq.n	80025aa <UART_SetConfig+0x1a2>
 8002594:	2b20      	cmp	r3, #32
 8002596:	d814      	bhi.n	80025c2 <UART_SetConfig+0x1ba>
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <UART_SetConfig+0x19a>
 800259c:	2b10      	cmp	r3, #16
 800259e:	d008      	beq.n	80025b2 <UART_SetConfig+0x1aa>
 80025a0:	e00f      	b.n	80025c2 <UART_SetConfig+0x1ba>
 80025a2:	2300      	movs	r3, #0
 80025a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025a8:	e0ad      	b.n	8002706 <UART_SetConfig+0x2fe>
 80025aa:	2302      	movs	r3, #2
 80025ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025b0:	e0a9      	b.n	8002706 <UART_SetConfig+0x2fe>
 80025b2:	2304      	movs	r3, #4
 80025b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025b8:	e0a5      	b.n	8002706 <UART_SetConfig+0x2fe>
 80025ba:	2308      	movs	r3, #8
 80025bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025c0:	e0a1      	b.n	8002706 <UART_SetConfig+0x2fe>
 80025c2:	2310      	movs	r3, #16
 80025c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025c8:	e09d      	b.n	8002706 <UART_SetConfig+0x2fe>
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a4a      	ldr	r2, [pc, #296]	; (80026f8 <UART_SetConfig+0x2f0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d125      	bne.n	8002620 <UART_SetConfig+0x218>
 80025d4:	4b45      	ldr	r3, [pc, #276]	; (80026ec <UART_SetConfig+0x2e4>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80025de:	2bc0      	cmp	r3, #192	; 0xc0
 80025e0:	d016      	beq.n	8002610 <UART_SetConfig+0x208>
 80025e2:	2bc0      	cmp	r3, #192	; 0xc0
 80025e4:	d818      	bhi.n	8002618 <UART_SetConfig+0x210>
 80025e6:	2b80      	cmp	r3, #128	; 0x80
 80025e8:	d00a      	beq.n	8002600 <UART_SetConfig+0x1f8>
 80025ea:	2b80      	cmp	r3, #128	; 0x80
 80025ec:	d814      	bhi.n	8002618 <UART_SetConfig+0x210>
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <UART_SetConfig+0x1f0>
 80025f2:	2b40      	cmp	r3, #64	; 0x40
 80025f4:	d008      	beq.n	8002608 <UART_SetConfig+0x200>
 80025f6:	e00f      	b.n	8002618 <UART_SetConfig+0x210>
 80025f8:	2300      	movs	r3, #0
 80025fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025fe:	e082      	b.n	8002706 <UART_SetConfig+0x2fe>
 8002600:	2302      	movs	r3, #2
 8002602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002606:	e07e      	b.n	8002706 <UART_SetConfig+0x2fe>
 8002608:	2304      	movs	r3, #4
 800260a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800260e:	e07a      	b.n	8002706 <UART_SetConfig+0x2fe>
 8002610:	2308      	movs	r3, #8
 8002612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002616:	e076      	b.n	8002706 <UART_SetConfig+0x2fe>
 8002618:	2310      	movs	r3, #16
 800261a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800261e:	e072      	b.n	8002706 <UART_SetConfig+0x2fe>
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a35      	ldr	r2, [pc, #212]	; (80026fc <UART_SetConfig+0x2f4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d12a      	bne.n	8002680 <UART_SetConfig+0x278>
 800262a:	4b30      	ldr	r3, [pc, #192]	; (80026ec <UART_SetConfig+0x2e4>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002638:	d01a      	beq.n	8002670 <UART_SetConfig+0x268>
 800263a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800263e:	d81b      	bhi.n	8002678 <UART_SetConfig+0x270>
 8002640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002644:	d00c      	beq.n	8002660 <UART_SetConfig+0x258>
 8002646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800264a:	d815      	bhi.n	8002678 <UART_SetConfig+0x270>
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <UART_SetConfig+0x250>
 8002650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002654:	d008      	beq.n	8002668 <UART_SetConfig+0x260>
 8002656:	e00f      	b.n	8002678 <UART_SetConfig+0x270>
 8002658:	2300      	movs	r3, #0
 800265a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800265e:	e052      	b.n	8002706 <UART_SetConfig+0x2fe>
 8002660:	2302      	movs	r3, #2
 8002662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002666:	e04e      	b.n	8002706 <UART_SetConfig+0x2fe>
 8002668:	2304      	movs	r3, #4
 800266a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800266e:	e04a      	b.n	8002706 <UART_SetConfig+0x2fe>
 8002670:	2308      	movs	r3, #8
 8002672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002676:	e046      	b.n	8002706 <UART_SetConfig+0x2fe>
 8002678:	2310      	movs	r3, #16
 800267a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800267e:	e042      	b.n	8002706 <UART_SetConfig+0x2fe>
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a17      	ldr	r2, [pc, #92]	; (80026e4 <UART_SetConfig+0x2dc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d13a      	bne.n	8002700 <UART_SetConfig+0x2f8>
 800268a:	4b18      	ldr	r3, [pc, #96]	; (80026ec <UART_SetConfig+0x2e4>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002690:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002694:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002698:	d01a      	beq.n	80026d0 <UART_SetConfig+0x2c8>
 800269a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800269e:	d81b      	bhi.n	80026d8 <UART_SetConfig+0x2d0>
 80026a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026a4:	d00c      	beq.n	80026c0 <UART_SetConfig+0x2b8>
 80026a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026aa:	d815      	bhi.n	80026d8 <UART_SetConfig+0x2d0>
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <UART_SetConfig+0x2b0>
 80026b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b4:	d008      	beq.n	80026c8 <UART_SetConfig+0x2c0>
 80026b6:	e00f      	b.n	80026d8 <UART_SetConfig+0x2d0>
 80026b8:	2300      	movs	r3, #0
 80026ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026be:	e022      	b.n	8002706 <UART_SetConfig+0x2fe>
 80026c0:	2302      	movs	r3, #2
 80026c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026c6:	e01e      	b.n	8002706 <UART_SetConfig+0x2fe>
 80026c8:	2304      	movs	r3, #4
 80026ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026ce:	e01a      	b.n	8002706 <UART_SetConfig+0x2fe>
 80026d0:	2308      	movs	r3, #8
 80026d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026d6:	e016      	b.n	8002706 <UART_SetConfig+0x2fe>
 80026d8:	2310      	movs	r3, #16
 80026da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026de:	e012      	b.n	8002706 <UART_SetConfig+0x2fe>
 80026e0:	cfff69f3 	.word	0xcfff69f3
 80026e4:	40008000 	.word	0x40008000
 80026e8:	40013800 	.word	0x40013800
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40004400 	.word	0x40004400
 80026f4:	40004800 	.word	0x40004800
 80026f8:	40004c00 	.word	0x40004c00
 80026fc:	40005000 	.word	0x40005000
 8002700:	2310      	movs	r3, #16
 8002702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4aae      	ldr	r2, [pc, #696]	; (80029c4 <UART_SetConfig+0x5bc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	f040 8097 	bne.w	8002840 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002712:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002716:	2b08      	cmp	r3, #8
 8002718:	d823      	bhi.n	8002762 <UART_SetConfig+0x35a>
 800271a:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <UART_SetConfig+0x318>)
 800271c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002720:	08002745 	.word	0x08002745
 8002724:	08002763 	.word	0x08002763
 8002728:	0800274d 	.word	0x0800274d
 800272c:	08002763 	.word	0x08002763
 8002730:	08002753 	.word	0x08002753
 8002734:	08002763 	.word	0x08002763
 8002738:	08002763 	.word	0x08002763
 800273c:	08002763 	.word	0x08002763
 8002740:	0800275b 	.word	0x0800275b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002744:	f7ff faaa 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8002748:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800274a:	e010      	b.n	800276e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800274c:	4b9e      	ldr	r3, [pc, #632]	; (80029c8 <UART_SetConfig+0x5c0>)
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002750:	e00d      	b.n	800276e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002752:	f7ff fa35 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8002756:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002758:	e009      	b.n	800276e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800275a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002760:	e005      	b.n	800276e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800276c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 8130 	beq.w	80029d6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	4a94      	ldr	r2, [pc, #592]	; (80029cc <UART_SetConfig+0x5c4>)
 800277c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002780:	461a      	mov	r2, r3
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	fbb3 f3f2 	udiv	r3, r3, r2
 8002788:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4413      	add	r3, r2
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	429a      	cmp	r2, r3
 8002798:	d305      	bcc.n	80027a6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d903      	bls.n	80027ae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80027ac:	e113      	b.n	80029d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	2200      	movs	r2, #0
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	60fa      	str	r2, [r7, #12]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	4a84      	ldr	r2, [pc, #528]	; (80029cc <UART_SetConfig+0x5c4>)
 80027bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2200      	movs	r2, #0
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027d0:	f7fd fd7e 	bl	80002d0 <__aeabi_uldivmod>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	020b      	lsls	r3, r1, #8
 80027e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80027ea:	0202      	lsls	r2, r0, #8
 80027ec:	6979      	ldr	r1, [r7, #20]
 80027ee:	6849      	ldr	r1, [r1, #4]
 80027f0:	0849      	lsrs	r1, r1, #1
 80027f2:	2000      	movs	r0, #0
 80027f4:	460c      	mov	r4, r1
 80027f6:	4605      	mov	r5, r0
 80027f8:	eb12 0804 	adds.w	r8, r2, r4
 80027fc:	eb43 0905 	adc.w	r9, r3, r5
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	469a      	mov	sl, r3
 8002808:	4693      	mov	fp, r2
 800280a:	4652      	mov	r2, sl
 800280c:	465b      	mov	r3, fp
 800280e:	4640      	mov	r0, r8
 8002810:	4649      	mov	r1, r9
 8002812:	f7fd fd5d 	bl	80002d0 <__aeabi_uldivmod>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4613      	mov	r3, r2
 800281c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002824:	d308      	bcc.n	8002838 <UART_SetConfig+0x430>
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800282c:	d204      	bcs.n	8002838 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6a3a      	ldr	r2, [r7, #32]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	e0ce      	b.n	80029d6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800283e:	e0ca      	b.n	80029d6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002848:	d166      	bne.n	8002918 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800284a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800284e:	2b08      	cmp	r3, #8
 8002850:	d827      	bhi.n	80028a2 <UART_SetConfig+0x49a>
 8002852:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <UART_SetConfig+0x450>)
 8002854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002858:	0800287d 	.word	0x0800287d
 800285c:	08002885 	.word	0x08002885
 8002860:	0800288d 	.word	0x0800288d
 8002864:	080028a3 	.word	0x080028a3
 8002868:	08002893 	.word	0x08002893
 800286c:	080028a3 	.word	0x080028a3
 8002870:	080028a3 	.word	0x080028a3
 8002874:	080028a3 	.word	0x080028a3
 8002878:	0800289b 	.word	0x0800289b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800287c:	f7ff fa0e 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8002880:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002882:	e014      	b.n	80028ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002884:	f7ff fa20 	bl	8001cc8 <HAL_RCC_GetPCLK2Freq>
 8002888:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800288a:	e010      	b.n	80028ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800288c:	4b4e      	ldr	r3, [pc, #312]	; (80029c8 <UART_SetConfig+0x5c0>)
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002890:	e00d      	b.n	80028ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002892:	f7ff f995 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8002896:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002898:	e009      	b.n	80028ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800289a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80028a0:	e005      	b.n	80028ae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80028ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8090 	beq.w	80029d6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	4a44      	ldr	r2, [pc, #272]	; (80029cc <UART_SetConfig+0x5c4>)
 80028bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028c0:	461a      	mov	r2, r3
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80028c8:	005a      	lsls	r2, r3, #1
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	085b      	lsrs	r3, r3, #1
 80028d0:	441a      	add	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	2b0f      	cmp	r3, #15
 80028e0:	d916      	bls.n	8002910 <UART_SetConfig+0x508>
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e8:	d212      	bcs.n	8002910 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	f023 030f 	bic.w	r3, r3, #15
 80028f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	085b      	lsrs	r3, r3, #1
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	b29a      	uxth	r2, r3
 8002900:	8bfb      	ldrh	r3, [r7, #30]
 8002902:	4313      	orrs	r3, r2
 8002904:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	8bfa      	ldrh	r2, [r7, #30]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	e062      	b.n	80029d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002916:	e05e      	b.n	80029d6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002918:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800291c:	2b08      	cmp	r3, #8
 800291e:	d828      	bhi.n	8002972 <UART_SetConfig+0x56a>
 8002920:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <UART_SetConfig+0x520>)
 8002922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002926:	bf00      	nop
 8002928:	0800294d 	.word	0x0800294d
 800292c:	08002955 	.word	0x08002955
 8002930:	0800295d 	.word	0x0800295d
 8002934:	08002973 	.word	0x08002973
 8002938:	08002963 	.word	0x08002963
 800293c:	08002973 	.word	0x08002973
 8002940:	08002973 	.word	0x08002973
 8002944:	08002973 	.word	0x08002973
 8002948:	0800296b 	.word	0x0800296b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800294c:	f7ff f9a6 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8002950:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002952:	e014      	b.n	800297e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002954:	f7ff f9b8 	bl	8001cc8 <HAL_RCC_GetPCLK2Freq>
 8002958:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800295a:	e010      	b.n	800297e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800295c:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <UART_SetConfig+0x5c0>)
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002960:	e00d      	b.n	800297e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002962:	f7ff f92d 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8002966:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002968:	e009      	b.n	800297e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800296a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002970:	e005      	b.n	800297e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800297c:	bf00      	nop
    }

    if (pclk != 0U)
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	2b00      	cmp	r3, #0
 8002982:	d028      	beq.n	80029d6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	4a10      	ldr	r2, [pc, #64]	; (80029cc <UART_SetConfig+0x5c4>)
 800298a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800298e:	461a      	mov	r2, r3
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	fbb3 f2f2 	udiv	r2, r3, r2
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	441a      	add	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	2b0f      	cmp	r3, #15
 80029ac:	d910      	bls.n	80029d0 <UART_SetConfig+0x5c8>
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b4:	d20c      	bcs.n	80029d0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	e009      	b.n	80029d6 <UART_SetConfig+0x5ce>
 80029c2:	bf00      	nop
 80029c4:	40008000 	.word	0x40008000
 80029c8:	00f42400 	.word	0x00f42400
 80029cc:	08004a5c 	.word	0x08004a5c
      }
      else
      {
        ret = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2201      	movs	r2, #1
 80029da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2200      	movs	r2, #0
 80029ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2200      	movs	r2, #0
 80029f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80029f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3730      	adds	r7, #48	; 0x30
 80029fa:	46bd      	mov	sp, r7
 80029fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002a00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01a      	beq.n	8002b16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002afe:	d10a      	bne.n	8002b16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	605a      	str	r2, [r3, #4]
  }
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b098      	sub	sp, #96	; 0x60
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b54:	f7fe f864 	bl	8000c20 <HAL_GetTick>
 8002b58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d12f      	bne.n	8002bc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b70:	2200      	movs	r2, #0
 8002b72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f88e 	bl	8002c98 <UART_WaitOnFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d022      	beq.n	8002bc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8a:	e853 3f00 	ldrex	r3, [r3]
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b96:	653b      	str	r3, [r7, #80]	; 0x50
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ba2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ba6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ba8:	e841 2300 	strex	r3, r2, [r1]
 8002bac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e6      	bne.n	8002b82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e063      	b.n	8002c90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d149      	bne.n	8002c6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bde:	2200      	movs	r2, #0
 8002be0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f857 	bl	8002c98 <UART_WaitOnFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d03c      	beq.n	8002c6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	e853 3f00 	ldrex	r3, [r3]
 8002bfc:	623b      	str	r3, [r7, #32]
   return(result);
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8002c10:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c16:	e841 2300 	strex	r3, r2, [r1]
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1e6      	bne.n	8002bf0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3308      	adds	r3, #8
 8002c28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	e853 3f00 	ldrex	r3, [r3]
 8002c30:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3308      	adds	r3, #8
 8002c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c42:	61fa      	str	r2, [r7, #28]
 8002c44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c46:	69b9      	ldr	r1, [r7, #24]
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	e841 2300 	strex	r3, r2, [r1]
 8002c4e:	617b      	str	r3, [r7, #20]
   return(result);
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e5      	bne.n	8002c22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e012      	b.n	8002c90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3758      	adds	r7, #88	; 0x58
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ca8:	e04f      	b.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d04b      	beq.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb2:	f7fd ffb5 	bl	8000c20 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d302      	bcc.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e04e      	b.n	8002d6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d037      	beq.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b80      	cmp	r3, #128	; 0x80
 8002cde:	d034      	beq.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	d031      	beq.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d110      	bne.n	8002d16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2208      	movs	r2, #8
 8002cfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f95b 	bl	8002fb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2208      	movs	r2, #8
 8002d06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e029      	b.n	8002d6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d24:	d111      	bne.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f941 	bl	8002fb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e00f      	b.n	8002d6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4013      	ands	r3, r2
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	bf0c      	ite	eq
 8002d5a:	2301      	moveq	r3, #1
 8002d5c:	2300      	movne	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d0a0      	beq.n	8002caa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b0a3      	sub	sp, #140	; 0x8c
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	88fa      	ldrh	r2, [r7, #6]
 8002d94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da6:	d10e      	bne.n	8002dc6 <UART_Start_Receive_IT+0x52>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <UART_Start_Receive_IT+0x48>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002db6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002dba:	e02d      	b.n	8002e18 <UART_Start_Receive_IT+0xa4>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	22ff      	movs	r2, #255	; 0xff
 8002dc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002dc4:	e028      	b.n	8002e18 <UART_Start_Receive_IT+0xa4>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10d      	bne.n	8002dea <UART_Start_Receive_IT+0x76>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d104      	bne.n	8002de0 <UART_Start_Receive_IT+0x6c>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	22ff      	movs	r2, #255	; 0xff
 8002dda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002dde:	e01b      	b.n	8002e18 <UART_Start_Receive_IT+0xa4>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	227f      	movs	r2, #127	; 0x7f
 8002de4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002de8:	e016      	b.n	8002e18 <UART_Start_Receive_IT+0xa4>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002df2:	d10d      	bne.n	8002e10 <UART_Start_Receive_IT+0x9c>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d104      	bne.n	8002e06 <UART_Start_Receive_IT+0x92>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	227f      	movs	r2, #127	; 0x7f
 8002e00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002e04:	e008      	b.n	8002e18 <UART_Start_Receive_IT+0xa4>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	223f      	movs	r2, #63	; 0x3f
 8002e0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002e0e:	e003      	b.n	8002e18 <UART_Start_Receive_IT+0xa4>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2222      	movs	r2, #34	; 0x22
 8002e24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e32:	e853 3f00 	ldrex	r3, [r3]
 8002e36:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8002e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3308      	adds	r3, #8
 8002e48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002e4c:	673a      	str	r2, [r7, #112]	; 0x70
 8002e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e50:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002e52:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002e54:	e841 2300 	strex	r3, r2, [r1]
 8002e58:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8002e5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e3      	bne.n	8002e28 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e68:	d14f      	bne.n	8002f0a <UART_Start_Receive_IT+0x196>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002e70:	88fa      	ldrh	r2, [r7, #6]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d349      	bcc.n	8002f0a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7e:	d107      	bne.n	8002e90 <UART_Start_Receive_IT+0x11c>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d103      	bne.n	8002e90 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4a47      	ldr	r2, [pc, #284]	; (8002fa8 <UART_Start_Receive_IT+0x234>)
 8002e8c:	675a      	str	r2, [r3, #116]	; 0x74
 8002e8e:	e002      	b.n	8002e96 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4a46      	ldr	r2, [pc, #280]	; (8002fac <UART_Start_Receive_IT+0x238>)
 8002e94:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01a      	beq.n	8002ed4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea6:	e853 3f00 	ldrex	r3, [r3]
 8002eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ec2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002ec6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ec8:	e841 2300 	strex	r3, r2, [r1]
 8002ecc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e4      	bne.n	8002e9e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3308      	adds	r3, #8
 8002eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ede:	e853 3f00 	ldrex	r3, [r3]
 8002ee2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3308      	adds	r3, #8
 8002ef2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002ef4:	64ba      	str	r2, [r7, #72]	; 0x48
 8002ef6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002efa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002efc:	e841 2300 	strex	r3, r2, [r1]
 8002f00:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e5      	bne.n	8002ed4 <UART_Start_Receive_IT+0x160>
 8002f08:	e046      	b.n	8002f98 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f12:	d107      	bne.n	8002f24 <UART_Start_Receive_IT+0x1b0>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d103      	bne.n	8002f24 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4a24      	ldr	r2, [pc, #144]	; (8002fb0 <UART_Start_Receive_IT+0x23c>)
 8002f20:	675a      	str	r2, [r3, #116]	; 0x74
 8002f22:	e002      	b.n	8002f2a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a23      	ldr	r2, [pc, #140]	; (8002fb4 <UART_Start_Receive_IT+0x240>)
 8002f28:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d019      	beq.n	8002f66 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3a:	e853 3f00 	ldrex	r3, [r3]
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8002f46:	677b      	str	r3, [r7, #116]	; 0x74
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f50:	637b      	str	r3, [r7, #52]	; 0x34
 8002f52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f58:	e841 2300 	strex	r3, r2, [r1]
 8002f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1e6      	bne.n	8002f32 <UART_Start_Receive_IT+0x1be>
 8002f64:	e018      	b.n	8002f98 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	e853 3f00 	ldrex	r3, [r3]
 8002f72:	613b      	str	r3, [r7, #16]
   return(result);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f043 0320 	orr.w	r3, r3, #32
 8002f7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f84:	623b      	str	r3, [r7, #32]
 8002f86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f88:	69f9      	ldr	r1, [r7, #28]
 8002f8a:	6a3a      	ldr	r2, [r7, #32]
 8002f8c:	e841 2300 	strex	r3, r2, [r1]
 8002f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e6      	bne.n	8002f66 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	378c      	adds	r7, #140	; 0x8c
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	08003a99 	.word	0x08003a99
 8002fac:	08003739 	.word	0x08003739
 8002fb0:	08003581 	.word	0x08003581
 8002fb4:	080033c9 	.word	0x080033c9

08002fb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b095      	sub	sp, #84	; 0x54
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc8:	e853 3f00 	ldrex	r3, [r3]
 8002fcc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fde:	643b      	str	r3, [r7, #64]	; 0x40
 8002fe0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fe4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1e6      	bne.n	8002fc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3308      	adds	r3, #8
 8002ff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	e853 3f00 	ldrex	r3, [r3]
 8003000:	61fb      	str	r3, [r7, #28]
   return(result);
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	64bb      	str	r3, [r7, #72]	; 0x48
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3308      	adds	r3, #8
 8003014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003016:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800301c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e3      	bne.n	8002ff2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800302e:	2b01      	cmp	r3, #1
 8003030:	d118      	bne.n	8003064 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	e853 3f00 	ldrex	r3, [r3]
 800303e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f023 0310 	bic.w	r3, r3, #16
 8003046:	647b      	str	r3, [r7, #68]	; 0x44
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003054:	6979      	ldr	r1, [r7, #20]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	e841 2300 	strex	r3, r2, [r1]
 800305c:	613b      	str	r3, [r7, #16]
   return(result);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e6      	bne.n	8003032 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003078:	bf00      	nop
 800307a:	3754      	adds	r7, #84	; 0x54
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003084:	b480      	push	{r7}
 8003086:	b08f      	sub	sp, #60	; 0x3c
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	2b21      	cmp	r3, #33	; 0x21
 8003094:	d14c      	bne.n	8003130 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d132      	bne.n	8003108 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	e853 3f00 	ldrex	r3, [r3]
 80030ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030b6:	637b      	str	r3, [r7, #52]	; 0x34
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c8:	e841 2300 	strex	r3, r2, [r1]
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1e6      	bne.n	80030a2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	e853 3f00 	ldrex	r3, [r3]
 80030e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030e8:	633b      	str	r3, [r7, #48]	; 0x30
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f6:	6979      	ldr	r1, [r7, #20]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	e841 2300 	strex	r3, r2, [r1]
 80030fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1e6      	bne.n	80030d4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003106:	e013      	b.n	8003130 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310c:	781a      	ldrb	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003130:	bf00      	nop
 8003132:	373c      	adds	r7, #60	; 0x3c
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800313c:	b480      	push	{r7}
 800313e:	b091      	sub	sp, #68	; 0x44
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	2b21      	cmp	r3, #33	; 0x21
 800314c:	d151      	bne.n	80031f2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d132      	bne.n	80031c0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	e853 3f00 	ldrex	r3, [r3]
 8003166:	623b      	str	r3, [r7, #32]
   return(result);
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800316e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003178:	633b      	str	r3, [r7, #48]	; 0x30
 800317a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800317e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003180:	e841 2300 	strex	r3, r2, [r1]
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1e6      	bne.n	800315a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	e853 3f00 	ldrex	r3, [r3]
 8003198:	60fb      	str	r3, [r7, #12]
   return(result);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	69b9      	ldr	r1, [r7, #24]
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	617b      	str	r3, [r7, #20]
   return(result);
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e6      	bne.n	800318c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80031be:	e018      	b.n	80031f2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80031c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031da:	1c9a      	adds	r2, r3, #2
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80031f2:	bf00      	nop
 80031f4:	3744      	adds	r7, #68	; 0x44
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80031fe:	b480      	push	{r7}
 8003200:	b091      	sub	sp, #68	; 0x44
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320c:	2b21      	cmp	r3, #33	; 0x21
 800320e:	d160      	bne.n	80032d2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003216:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003218:	e057      	b.n	80032ca <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d133      	bne.n	800328e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3308      	adds	r3, #8
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	e853 3f00 	ldrex	r3, [r3]
 8003234:	623b      	str	r3, [r7, #32]
   return(result);
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800323c:	63bb      	str	r3, [r7, #56]	; 0x38
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3308      	adds	r3, #8
 8003244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003246:	633a      	str	r2, [r7, #48]	; 0x30
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800324c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800324e:	e841 2300 	strex	r3, r2, [r1]
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1e5      	bne.n	8003226 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	e853 3f00 	ldrex	r3, [r3]
 8003266:	60fb      	str	r3, [r7, #12]
   return(result);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800326e:	637b      	str	r3, [r7, #52]	; 0x34
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327c:	69b9      	ldr	r1, [r7, #24]
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	e841 2300 	strex	r3, r2, [r1]
 8003284:	617b      	str	r3, [r7, #20]
   return(result);
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e6      	bne.n	800325a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800328c:	e021      	b.n	80032d2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003298:	2b00      	cmp	r3, #0
 800329a:	d013      	beq.n	80032c4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80032c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80032c6:	3b01      	subs	r3, #1
 80032c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80032ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1a4      	bne.n	800321a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80032d0:	e7ff      	b.n	80032d2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80032d2:	bf00      	nop
 80032d4:	3744      	adds	r7, #68	; 0x44
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80032de:	b480      	push	{r7}
 80032e0:	b091      	sub	sp, #68	; 0x44
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ec:	2b21      	cmp	r3, #33	; 0x21
 80032ee:	d165      	bne.n	80033bc <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80032f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80032f8:	e05c      	b.n	80033b4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d133      	bne.n	800336e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3308      	adds	r3, #8
 800330c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	e853 3f00 	ldrex	r3, [r3]
 8003314:	61fb      	str	r3, [r7, #28]
   return(result);
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800331c:	637b      	str	r3, [r7, #52]	; 0x34
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3308      	adds	r3, #8
 8003324:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003326:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003328:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800332c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e5      	bne.n	8003306 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	e853 3f00 	ldrex	r3, [r3]
 8003346:	60bb      	str	r3, [r7, #8]
   return(result);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800334e:	633b      	str	r3, [r7, #48]	; 0x30
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335c:	6979      	ldr	r1, [r7, #20]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	e841 2300 	strex	r3, r2, [r1]
 8003364:	613b      	str	r3, [r7, #16]
   return(result);
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e6      	bne.n	800333a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800336c:	e026      	b.n	80033bc <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003378:	2b00      	cmp	r3, #0
 800337a:	d018      	beq.n	80033ae <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003380:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003390:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003396:	1c9a      	adds	r2, r3, #2
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80033ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033b0:	3b01      	subs	r3, #1
 80033b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80033b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d19f      	bne.n	80032fa <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80033ba:	e7ff      	b.n	80033bc <UART_TxISR_16BIT_FIFOEN+0xde>
 80033bc:	bf00      	nop
 80033be:	3744      	adds	r7, #68	; 0x44
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b09c      	sub	sp, #112	; 0x70
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80033d6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033e0:	2b22      	cmp	r3, #34	; 0x22
 80033e2:	f040 80be 	bne.w	8003562 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80033f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80033f4:	b2d9      	uxtb	r1, r3
 80033f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003400:	400a      	ands	r2, r1
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 80a1 	bne.w	8003572 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003438:	e853 3f00 	ldrex	r3, [r3]
 800343c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800343e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003444:	66bb      	str	r3, [r7, #104]	; 0x68
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800344e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003450:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003452:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003454:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003456:	e841 2300 	strex	r3, r2, [r1]
 800345a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800345c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1e6      	bne.n	8003430 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3308      	adds	r3, #8
 8003468:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	667b      	str	r3, [r7, #100]	; 0x64
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3308      	adds	r3, #8
 8003480:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003482:	647a      	str	r2, [r7, #68]	; 0x44
 8003484:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003488:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e5      	bne.n	8003462 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a33      	ldr	r2, [pc, #204]	; (800357c <UART_RxISR_8BIT+0x1b4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d01f      	beq.n	80034f4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d018      	beq.n	80034f4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	e853 3f00 	ldrex	r3, [r3]
 80034ce:	623b      	str	r3, [r7, #32]
   return(result);
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034d6:	663b      	str	r3, [r7, #96]	; 0x60
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e0:	633b      	str	r3, [r7, #48]	; 0x30
 80034e2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e8:	e841 2300 	strex	r3, r2, [r1]
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e6      	bne.n	80034c2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d12e      	bne.n	800355a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 0310 	bic.w	r3, r3, #16
 8003516:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	69b9      	ldr	r1, [r7, #24]
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	617b      	str	r3, [r7, #20]
   return(result);
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e6      	bne.n	8003502 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b10      	cmp	r3, #16
 8003540:	d103      	bne.n	800354a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2210      	movs	r2, #16
 8003548:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003550:	4619      	mov	r1, r3
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fe ff4c 	bl	80023f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003558:	e00b      	b.n	8003572 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fd f98c 	bl	8000878 <HAL_UART_RxCpltCallback>
}
 8003560:	e007      	b.n	8003572 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699a      	ldr	r2, [r3, #24]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0208 	orr.w	r2, r2, #8
 8003570:	619a      	str	r2, [r3, #24]
}
 8003572:	bf00      	nop
 8003574:	3770      	adds	r7, #112	; 0x70
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40008000 	.word	0x40008000

08003580 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b09c      	sub	sp, #112	; 0x70
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800358e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003598:	2b22      	cmp	r3, #34	; 0x22
 800359a:	f040 80be 	bne.w	800371a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ac:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80035ae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80035b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80035b6:	4013      	ands	r3, r2
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c2:	1c9a      	adds	r2, r3, #2
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f040 80a1 	bne.w	800372a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80035f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035fc:	667b      	str	r3, [r7, #100]	; 0x64
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003606:	657b      	str	r3, [r7, #84]	; 0x54
 8003608:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800360c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800360e:	e841 2300 	strex	r3, r2, [r1]
 8003612:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1e6      	bne.n	80035e8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3308      	adds	r3, #8
 8003620:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003624:	e853 3f00 	ldrex	r3, [r3]
 8003628:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	663b      	str	r3, [r7, #96]	; 0x60
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3308      	adds	r3, #8
 8003638:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800363a:	643a      	str	r2, [r7, #64]	; 0x40
 800363c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003640:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003642:	e841 2300 	strex	r3, r2, [r1]
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1e5      	bne.n	800361a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a33      	ldr	r2, [pc, #204]	; (8003734 <UART_RxISR_16BIT+0x1b4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d01f      	beq.n	80036ac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d018      	beq.n	80036ac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	e853 3f00 	ldrex	r3, [r3]
 8003686:	61fb      	str	r3, [r7, #28]
   return(result);
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800368e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800369e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a0:	e841 2300 	strex	r3, r2, [r1]
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e6      	bne.n	800367a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d12e      	bne.n	8003712 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	e853 3f00 	ldrex	r3, [r3]
 80036c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f023 0310 	bic.w	r3, r3, #16
 80036ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036d8:	61bb      	str	r3, [r7, #24]
 80036da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	6979      	ldr	r1, [r7, #20]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	e841 2300 	strex	r3, r2, [r1]
 80036e4:	613b      	str	r3, [r7, #16]
   return(result);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e6      	bne.n	80036ba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	2b10      	cmp	r3, #16
 80036f8:	d103      	bne.n	8003702 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2210      	movs	r2, #16
 8003700:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fe fe70 	bl	80023f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003710:	e00b      	b.n	800372a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd f8b0 	bl	8000878 <HAL_UART_RxCpltCallback>
}
 8003718:	e007      	b.n	800372a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699a      	ldr	r2, [r3, #24]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0208 	orr.w	r2, r2, #8
 8003728:	619a      	str	r2, [r3, #24]
}
 800372a:	bf00      	nop
 800372c:	3770      	adds	r7, #112	; 0x70
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40008000 	.word	0x40008000

08003738 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b0ac      	sub	sp, #176	; 0xb0
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003746:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800376e:	2b22      	cmp	r3, #34	; 0x22
 8003770:	f040 8182 	bne.w	8003a78 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800377a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800377e:	e125      	b.n	80039cc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800378a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800378e:	b2d9      	uxtb	r1, r3
 8003790:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8003794:	b2da      	uxtb	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379a:	400a      	ands	r2, r1
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80037c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d053      	beq.n	800387a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d011      	beq.n	8003802 <UART_RxISR_8BIT_FIFOEN+0xca>
 80037de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00b      	beq.n	8003802 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2201      	movs	r2, #1
 80037f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f8:	f043 0201 	orr.w	r2, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d011      	beq.n	8003832 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800380e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2202      	movs	r2, #2
 8003820:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	f043 0204 	orr.w	r2, r3, #4
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b00      	cmp	r3, #0
 800383c:	d011      	beq.n	8003862 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800383e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2204      	movs	r2, #4
 8003850:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003858:	f043 0202 	orr.w	r2, r3, #2
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	2b00      	cmp	r3, #0
 800386a:	d006      	beq.n	800387a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7fe fdb5 	bl	80023dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 80a2 	bne.w	80039cc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8003896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800389c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038ac:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ae:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80038b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80038b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e4      	bne.n	8003888 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3308      	adds	r3, #8
 80038c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c8:	e853 3f00 	ldrex	r3, [r3]
 80038cc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80038ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3308      	adds	r3, #8
 80038e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038e6:	66ba      	str	r2, [r7, #104]	; 0x68
 80038e8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ea:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80038ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80038f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e1      	bne.n	80038be <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a5f      	ldr	r2, [pc, #380]	; (8003a90 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d021      	beq.n	800395c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01a      	beq.n	800395c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003936:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800393a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003948:	657b      	str	r3, [r7, #84]	; 0x54
 800394a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800394e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e4      	bne.n	8003926 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003960:	2b01      	cmp	r3, #1
 8003962:	d130      	bne.n	80039c6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003972:	e853 3f00 	ldrex	r3, [r3]
 8003976:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	f023 0310 	bic.w	r3, r3, #16
 800397e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800398c:	643b      	str	r3, [r7, #64]	; 0x40
 800398e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003992:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003994:	e841 2300 	strex	r3, r2, [r1]
 8003998:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e4      	bne.n	800396a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d103      	bne.n	80039b6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2210      	movs	r2, #16
 80039b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039bc:	4619      	mov	r1, r3
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fe fd16 	bl	80023f0 <HAL_UARTEx_RxEventCallback>
 80039c4:	e002      	b.n	80039cc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fc ff56 	bl	8000878 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80039cc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d006      	beq.n	80039e2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80039d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f47f aecf 	bne.w	8003780 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80039e8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80039ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d049      	beq.n	8003a88 <UART_RxISR_8BIT_FIFOEN+0x350>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80039fa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d242      	bcs.n	8003a88 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3308      	adds	r3, #8
 8003a08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3308      	adds	r3, #8
 8003a22:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003a26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e3      	bne.n	8003a02 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a15      	ldr	r2, [pc, #84]	; (8003a94 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8003a3e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f043 0320 	orr.w	r3, r3, #32
 8003a54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	6979      	ldr	r1, [r7, #20]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e4      	bne.n	8003a40 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a76:	e007      	b.n	8003a88 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0208 	orr.w	r2, r2, #8
 8003a86:	619a      	str	r2, [r3, #24]
}
 8003a88:	bf00      	nop
 8003a8a:	37b0      	adds	r7, #176	; 0xb0
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40008000 	.word	0x40008000
 8003a94:	080033c9 	.word	0x080033c9

08003a98 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b0ae      	sub	sp, #184	; 0xb8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003aa6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ace:	2b22      	cmp	r3, #34	; 0x22
 8003ad0:	f040 8186 	bne.w	8003de0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003ada:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003ade:	e129      	b.n	8003d34 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8003af2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8003af6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003afa:	4013      	ands	r3, r2
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	1c9a      	adds	r2, r3, #2
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003b2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d053      	beq.n	8003bde <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d011      	beq.n	8003b66 <UART_RxISR_16BIT_FIFOEN+0xce>
 8003b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2201      	movs	r2, #1
 8003b54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5c:	f043 0201 	orr.w	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d011      	beq.n	8003b96 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8003b72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2202      	movs	r2, #2
 8003b84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8c:	f043 0204 	orr.w	r2, r3, #4
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d011      	beq.n	8003bc6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8003ba2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbc:	f043 0202 	orr.w	r2, r3, #2
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d006      	beq.n	8003bde <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7fe fc03 	bl	80023dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f040 80a4 	bne.w	8003d34 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c12:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e2      	bne.n	8003bec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3308      	adds	r3, #8
 8003c4a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003c4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e1      	bne.n	8003c26 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a5f      	ldr	r2, [pc, #380]	; (8003df8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d021      	beq.n	8003cc4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01a      	beq.n	8003cc4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003cb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cb2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e4      	bne.n	8003c8e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d130      	bne.n	8003d2e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce2:	f023 0310 	bic.w	r3, r3, #16
 8003ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e4      	bne.n	8003cd2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b10      	cmp	r3, #16
 8003d14:	d103      	bne.n	8003d1e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2210      	movs	r2, #16
 8003d1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d24:	4619      	mov	r1, r3
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fe fb62 	bl	80023f0 <HAL_UARTEx_RxEventCallback>
 8003d2c:	e002      	b.n	8003d34 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fc fda2 	bl	8000878 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003d34:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d006      	beq.n	8003d4a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8003d3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f47f aecb 	bne.w	8003ae0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d50:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003d54:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d049      	beq.n	8003df0 <UART_RxISR_16BIT_FIFOEN+0x358>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003d62:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d242      	bcs.n	8003df0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3308      	adds	r3, #8
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	623b      	str	r3, [r7, #32]
   return(result);
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3308      	adds	r3, #8
 8003d8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003d8e:	633a      	str	r2, [r7, #48]	; 0x30
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e3      	bne.n	8003d6a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a15      	ldr	r2, [pc, #84]	; (8003dfc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8003da6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f043 0320 	orr.w	r3, r3, #32
 8003dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dca:	61fb      	str	r3, [r7, #28]
 8003dcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	69b9      	ldr	r1, [r7, #24]
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	617b      	str	r3, [r7, #20]
   return(result);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e4      	bne.n	8003da8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dde:	e007      	b.n	8003df0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0208 	orr.w	r2, r2, #8
 8003dee:	619a      	str	r2, [r3, #24]
}
 8003df0:	bf00      	nop
 8003df2:	37b8      	adds	r7, #184	; 0xb8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40008000 	.word	0x40008000
 8003dfc:	08003581 	.word	0x08003581

08003e00 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e058      	b.n	8003eca <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f7fc fd7a 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2224      	movs	r2, #36	; 0x24
 8003e34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f7fe fdd5 	bl	8002a00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f7fe fad6 	bl	8002408 <UART_SetConfig>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e031      	b.n	8003eca <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e74:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	055b      	lsls	r3, r3, #21
 8003e8e:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	041b      	lsls	r3, r3, #16
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8003ea4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	6979      	ldr	r1, [r7, #20]
 8003eae:	430b      	orrs	r3, r1
 8003eb0:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0201 	orr.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f7fe fe3e 	bl	8002b44 <UART_CheckIdleState>
 8003ec8:	4603      	mov	r3, r0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b085      	sub	sp, #20
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_UARTEx_DisableFifoMode+0x16>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e027      	b.n	8003f38 <HAL_UARTEx_DisableFifoMode+0x66>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2224      	movs	r2, #36	; 0x24
 8003ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003f16:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e02d      	b.n	8003fb8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2224      	movs	r2, #36	; 0x24
 8003f68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0201 	bic.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f84f 	bl	800403c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e02d      	b.n	8004034 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2224      	movs	r2, #36	; 0x24
 8003fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f811 	bl	800403c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004048:	2b00      	cmp	r3, #0
 800404a:	d108      	bne.n	800405e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800405c:	e031      	b.n	80040c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800405e:	2308      	movs	r3, #8
 8004060:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004062:	2308      	movs	r3, #8
 8004064:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	0e5b      	lsrs	r3, r3, #25
 800406e:	b2db      	uxtb	r3, r3
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	0f5b      	lsrs	r3, r3, #29
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004086:	7bbb      	ldrb	r3, [r7, #14]
 8004088:	7b3a      	ldrb	r2, [r7, #12]
 800408a:	4911      	ldr	r1, [pc, #68]	; (80040d0 <UARTEx_SetNbDataToProcess+0x94>)
 800408c:	5c8a      	ldrb	r2, [r1, r2]
 800408e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004092:	7b3a      	ldrb	r2, [r7, #12]
 8004094:	490f      	ldr	r1, [pc, #60]	; (80040d4 <UARTEx_SetNbDataToProcess+0x98>)
 8004096:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004098:	fb93 f3f2 	sdiv	r3, r3, r2
 800409c:	b29a      	uxth	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	7b7a      	ldrb	r2, [r7, #13]
 80040a8:	4909      	ldr	r1, [pc, #36]	; (80040d0 <UARTEx_SetNbDataToProcess+0x94>)
 80040aa:	5c8a      	ldrb	r2, [r1, r2]
 80040ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80040b0:	7b7a      	ldrb	r2, [r7, #13]
 80040b2:	4908      	ldr	r1, [pc, #32]	; (80040d4 <UARTEx_SetNbDataToProcess+0x98>)
 80040b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80040c2:	bf00      	nop
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	08004a74 	.word	0x08004a74
 80040d4:	08004a7c 	.word	0x08004a7c

080040d8 <siprintf>:
 80040d8:	b40e      	push	{r1, r2, r3}
 80040da:	b500      	push	{lr}
 80040dc:	b09c      	sub	sp, #112	; 0x70
 80040de:	ab1d      	add	r3, sp, #116	; 0x74
 80040e0:	9002      	str	r0, [sp, #8]
 80040e2:	9006      	str	r0, [sp, #24]
 80040e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040e8:	4809      	ldr	r0, [pc, #36]	; (8004110 <siprintf+0x38>)
 80040ea:	9107      	str	r1, [sp, #28]
 80040ec:	9104      	str	r1, [sp, #16]
 80040ee:	4909      	ldr	r1, [pc, #36]	; (8004114 <siprintf+0x3c>)
 80040f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80040f4:	9105      	str	r1, [sp, #20]
 80040f6:	6800      	ldr	r0, [r0, #0]
 80040f8:	9301      	str	r3, [sp, #4]
 80040fa:	a902      	add	r1, sp, #8
 80040fc:	f000 f992 	bl	8004424 <_svfiprintf_r>
 8004100:	9b02      	ldr	r3, [sp, #8]
 8004102:	2200      	movs	r2, #0
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	b01c      	add	sp, #112	; 0x70
 8004108:	f85d eb04 	ldr.w	lr, [sp], #4
 800410c:	b003      	add	sp, #12
 800410e:	4770      	bx	lr
 8004110:	20000064 	.word	0x20000064
 8004114:	ffff0208 	.word	0xffff0208

08004118 <memset>:
 8004118:	4402      	add	r2, r0
 800411a:	4603      	mov	r3, r0
 800411c:	4293      	cmp	r3, r2
 800411e:	d100      	bne.n	8004122 <memset+0xa>
 8004120:	4770      	bx	lr
 8004122:	f803 1b01 	strb.w	r1, [r3], #1
 8004126:	e7f9      	b.n	800411c <memset+0x4>

08004128 <__errno>:
 8004128:	4b01      	ldr	r3, [pc, #4]	; (8004130 <__errno+0x8>)
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000064 	.word	0x20000064

08004134 <__libc_init_array>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	4d0d      	ldr	r5, [pc, #52]	; (800416c <__libc_init_array+0x38>)
 8004138:	4c0d      	ldr	r4, [pc, #52]	; (8004170 <__libc_init_array+0x3c>)
 800413a:	1b64      	subs	r4, r4, r5
 800413c:	10a4      	asrs	r4, r4, #2
 800413e:	2600      	movs	r6, #0
 8004140:	42a6      	cmp	r6, r4
 8004142:	d109      	bne.n	8004158 <__libc_init_array+0x24>
 8004144:	4d0b      	ldr	r5, [pc, #44]	; (8004174 <__libc_init_array+0x40>)
 8004146:	4c0c      	ldr	r4, [pc, #48]	; (8004178 <__libc_init_array+0x44>)
 8004148:	f000 fc6a 	bl	8004a20 <_init>
 800414c:	1b64      	subs	r4, r4, r5
 800414e:	10a4      	asrs	r4, r4, #2
 8004150:	2600      	movs	r6, #0
 8004152:	42a6      	cmp	r6, r4
 8004154:	d105      	bne.n	8004162 <__libc_init_array+0x2e>
 8004156:	bd70      	pop	{r4, r5, r6, pc}
 8004158:	f855 3b04 	ldr.w	r3, [r5], #4
 800415c:	4798      	blx	r3
 800415e:	3601      	adds	r6, #1
 8004160:	e7ee      	b.n	8004140 <__libc_init_array+0xc>
 8004162:	f855 3b04 	ldr.w	r3, [r5], #4
 8004166:	4798      	blx	r3
 8004168:	3601      	adds	r6, #1
 800416a:	e7f2      	b.n	8004152 <__libc_init_array+0x1e>
 800416c:	08004ac0 	.word	0x08004ac0
 8004170:	08004ac0 	.word	0x08004ac0
 8004174:	08004ac0 	.word	0x08004ac0
 8004178:	08004ac4 	.word	0x08004ac4

0800417c <__retarget_lock_acquire_recursive>:
 800417c:	4770      	bx	lr

0800417e <__retarget_lock_release_recursive>:
 800417e:	4770      	bx	lr

08004180 <_free_r>:
 8004180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004182:	2900      	cmp	r1, #0
 8004184:	d044      	beq.n	8004210 <_free_r+0x90>
 8004186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800418a:	9001      	str	r0, [sp, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	f1a1 0404 	sub.w	r4, r1, #4
 8004192:	bfb8      	it	lt
 8004194:	18e4      	addlt	r4, r4, r3
 8004196:	f000 f8df 	bl	8004358 <__malloc_lock>
 800419a:	4a1e      	ldr	r2, [pc, #120]	; (8004214 <_free_r+0x94>)
 800419c:	9801      	ldr	r0, [sp, #4]
 800419e:	6813      	ldr	r3, [r2, #0]
 80041a0:	b933      	cbnz	r3, 80041b0 <_free_r+0x30>
 80041a2:	6063      	str	r3, [r4, #4]
 80041a4:	6014      	str	r4, [r2, #0]
 80041a6:	b003      	add	sp, #12
 80041a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041ac:	f000 b8da 	b.w	8004364 <__malloc_unlock>
 80041b0:	42a3      	cmp	r3, r4
 80041b2:	d908      	bls.n	80041c6 <_free_r+0x46>
 80041b4:	6825      	ldr	r5, [r4, #0]
 80041b6:	1961      	adds	r1, r4, r5
 80041b8:	428b      	cmp	r3, r1
 80041ba:	bf01      	itttt	eq
 80041bc:	6819      	ldreq	r1, [r3, #0]
 80041be:	685b      	ldreq	r3, [r3, #4]
 80041c0:	1949      	addeq	r1, r1, r5
 80041c2:	6021      	streq	r1, [r4, #0]
 80041c4:	e7ed      	b.n	80041a2 <_free_r+0x22>
 80041c6:	461a      	mov	r2, r3
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	b10b      	cbz	r3, 80041d0 <_free_r+0x50>
 80041cc:	42a3      	cmp	r3, r4
 80041ce:	d9fa      	bls.n	80041c6 <_free_r+0x46>
 80041d0:	6811      	ldr	r1, [r2, #0]
 80041d2:	1855      	adds	r5, r2, r1
 80041d4:	42a5      	cmp	r5, r4
 80041d6:	d10b      	bne.n	80041f0 <_free_r+0x70>
 80041d8:	6824      	ldr	r4, [r4, #0]
 80041da:	4421      	add	r1, r4
 80041dc:	1854      	adds	r4, r2, r1
 80041de:	42a3      	cmp	r3, r4
 80041e0:	6011      	str	r1, [r2, #0]
 80041e2:	d1e0      	bne.n	80041a6 <_free_r+0x26>
 80041e4:	681c      	ldr	r4, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	6053      	str	r3, [r2, #4]
 80041ea:	440c      	add	r4, r1
 80041ec:	6014      	str	r4, [r2, #0]
 80041ee:	e7da      	b.n	80041a6 <_free_r+0x26>
 80041f0:	d902      	bls.n	80041f8 <_free_r+0x78>
 80041f2:	230c      	movs	r3, #12
 80041f4:	6003      	str	r3, [r0, #0]
 80041f6:	e7d6      	b.n	80041a6 <_free_r+0x26>
 80041f8:	6825      	ldr	r5, [r4, #0]
 80041fa:	1961      	adds	r1, r4, r5
 80041fc:	428b      	cmp	r3, r1
 80041fe:	bf04      	itt	eq
 8004200:	6819      	ldreq	r1, [r3, #0]
 8004202:	685b      	ldreq	r3, [r3, #4]
 8004204:	6063      	str	r3, [r4, #4]
 8004206:	bf04      	itt	eq
 8004208:	1949      	addeq	r1, r1, r5
 800420a:	6021      	streq	r1, [r4, #0]
 800420c:	6054      	str	r4, [r2, #4]
 800420e:	e7ca      	b.n	80041a6 <_free_r+0x26>
 8004210:	b003      	add	sp, #12
 8004212:	bd30      	pop	{r4, r5, pc}
 8004214:	200002a0 	.word	0x200002a0

08004218 <sbrk_aligned>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	4e0e      	ldr	r6, [pc, #56]	; (8004254 <sbrk_aligned+0x3c>)
 800421c:	460c      	mov	r4, r1
 800421e:	6831      	ldr	r1, [r6, #0]
 8004220:	4605      	mov	r5, r0
 8004222:	b911      	cbnz	r1, 800422a <sbrk_aligned+0x12>
 8004224:	f000 fba6 	bl	8004974 <_sbrk_r>
 8004228:	6030      	str	r0, [r6, #0]
 800422a:	4621      	mov	r1, r4
 800422c:	4628      	mov	r0, r5
 800422e:	f000 fba1 	bl	8004974 <_sbrk_r>
 8004232:	1c43      	adds	r3, r0, #1
 8004234:	d00a      	beq.n	800424c <sbrk_aligned+0x34>
 8004236:	1cc4      	adds	r4, r0, #3
 8004238:	f024 0403 	bic.w	r4, r4, #3
 800423c:	42a0      	cmp	r0, r4
 800423e:	d007      	beq.n	8004250 <sbrk_aligned+0x38>
 8004240:	1a21      	subs	r1, r4, r0
 8004242:	4628      	mov	r0, r5
 8004244:	f000 fb96 	bl	8004974 <_sbrk_r>
 8004248:	3001      	adds	r0, #1
 800424a:	d101      	bne.n	8004250 <sbrk_aligned+0x38>
 800424c:	f04f 34ff 	mov.w	r4, #4294967295
 8004250:	4620      	mov	r0, r4
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	200002a4 	.word	0x200002a4

08004258 <_malloc_r>:
 8004258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800425c:	1ccd      	adds	r5, r1, #3
 800425e:	f025 0503 	bic.w	r5, r5, #3
 8004262:	3508      	adds	r5, #8
 8004264:	2d0c      	cmp	r5, #12
 8004266:	bf38      	it	cc
 8004268:	250c      	movcc	r5, #12
 800426a:	2d00      	cmp	r5, #0
 800426c:	4607      	mov	r7, r0
 800426e:	db01      	blt.n	8004274 <_malloc_r+0x1c>
 8004270:	42a9      	cmp	r1, r5
 8004272:	d905      	bls.n	8004280 <_malloc_r+0x28>
 8004274:	230c      	movs	r3, #12
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	2600      	movs	r6, #0
 800427a:	4630      	mov	r0, r6
 800427c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004280:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004354 <_malloc_r+0xfc>
 8004284:	f000 f868 	bl	8004358 <__malloc_lock>
 8004288:	f8d8 3000 	ldr.w	r3, [r8]
 800428c:	461c      	mov	r4, r3
 800428e:	bb5c      	cbnz	r4, 80042e8 <_malloc_r+0x90>
 8004290:	4629      	mov	r1, r5
 8004292:	4638      	mov	r0, r7
 8004294:	f7ff ffc0 	bl	8004218 <sbrk_aligned>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	4604      	mov	r4, r0
 800429c:	d155      	bne.n	800434a <_malloc_r+0xf2>
 800429e:	f8d8 4000 	ldr.w	r4, [r8]
 80042a2:	4626      	mov	r6, r4
 80042a4:	2e00      	cmp	r6, #0
 80042a6:	d145      	bne.n	8004334 <_malloc_r+0xdc>
 80042a8:	2c00      	cmp	r4, #0
 80042aa:	d048      	beq.n	800433e <_malloc_r+0xe6>
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	4631      	mov	r1, r6
 80042b0:	4638      	mov	r0, r7
 80042b2:	eb04 0903 	add.w	r9, r4, r3
 80042b6:	f000 fb5d 	bl	8004974 <_sbrk_r>
 80042ba:	4581      	cmp	r9, r0
 80042bc:	d13f      	bne.n	800433e <_malloc_r+0xe6>
 80042be:	6821      	ldr	r1, [r4, #0]
 80042c0:	1a6d      	subs	r5, r5, r1
 80042c2:	4629      	mov	r1, r5
 80042c4:	4638      	mov	r0, r7
 80042c6:	f7ff ffa7 	bl	8004218 <sbrk_aligned>
 80042ca:	3001      	adds	r0, #1
 80042cc:	d037      	beq.n	800433e <_malloc_r+0xe6>
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	442b      	add	r3, r5
 80042d2:	6023      	str	r3, [r4, #0]
 80042d4:	f8d8 3000 	ldr.w	r3, [r8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d038      	beq.n	800434e <_malloc_r+0xf6>
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	42a2      	cmp	r2, r4
 80042e0:	d12b      	bne.n	800433a <_malloc_r+0xe2>
 80042e2:	2200      	movs	r2, #0
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	e00f      	b.n	8004308 <_malloc_r+0xb0>
 80042e8:	6822      	ldr	r2, [r4, #0]
 80042ea:	1b52      	subs	r2, r2, r5
 80042ec:	d41f      	bmi.n	800432e <_malloc_r+0xd6>
 80042ee:	2a0b      	cmp	r2, #11
 80042f0:	d917      	bls.n	8004322 <_malloc_r+0xca>
 80042f2:	1961      	adds	r1, r4, r5
 80042f4:	42a3      	cmp	r3, r4
 80042f6:	6025      	str	r5, [r4, #0]
 80042f8:	bf18      	it	ne
 80042fa:	6059      	strne	r1, [r3, #4]
 80042fc:	6863      	ldr	r3, [r4, #4]
 80042fe:	bf08      	it	eq
 8004300:	f8c8 1000 	streq.w	r1, [r8]
 8004304:	5162      	str	r2, [r4, r5]
 8004306:	604b      	str	r3, [r1, #4]
 8004308:	4638      	mov	r0, r7
 800430a:	f104 060b 	add.w	r6, r4, #11
 800430e:	f000 f829 	bl	8004364 <__malloc_unlock>
 8004312:	f026 0607 	bic.w	r6, r6, #7
 8004316:	1d23      	adds	r3, r4, #4
 8004318:	1af2      	subs	r2, r6, r3
 800431a:	d0ae      	beq.n	800427a <_malloc_r+0x22>
 800431c:	1b9b      	subs	r3, r3, r6
 800431e:	50a3      	str	r3, [r4, r2]
 8004320:	e7ab      	b.n	800427a <_malloc_r+0x22>
 8004322:	42a3      	cmp	r3, r4
 8004324:	6862      	ldr	r2, [r4, #4]
 8004326:	d1dd      	bne.n	80042e4 <_malloc_r+0x8c>
 8004328:	f8c8 2000 	str.w	r2, [r8]
 800432c:	e7ec      	b.n	8004308 <_malloc_r+0xb0>
 800432e:	4623      	mov	r3, r4
 8004330:	6864      	ldr	r4, [r4, #4]
 8004332:	e7ac      	b.n	800428e <_malloc_r+0x36>
 8004334:	4634      	mov	r4, r6
 8004336:	6876      	ldr	r6, [r6, #4]
 8004338:	e7b4      	b.n	80042a4 <_malloc_r+0x4c>
 800433a:	4613      	mov	r3, r2
 800433c:	e7cc      	b.n	80042d8 <_malloc_r+0x80>
 800433e:	230c      	movs	r3, #12
 8004340:	603b      	str	r3, [r7, #0]
 8004342:	4638      	mov	r0, r7
 8004344:	f000 f80e 	bl	8004364 <__malloc_unlock>
 8004348:	e797      	b.n	800427a <_malloc_r+0x22>
 800434a:	6025      	str	r5, [r4, #0]
 800434c:	e7dc      	b.n	8004308 <_malloc_r+0xb0>
 800434e:	605b      	str	r3, [r3, #4]
 8004350:	deff      	udf	#255	; 0xff
 8004352:	bf00      	nop
 8004354:	200002a0 	.word	0x200002a0

08004358 <__malloc_lock>:
 8004358:	4801      	ldr	r0, [pc, #4]	; (8004360 <__malloc_lock+0x8>)
 800435a:	f7ff bf0f 	b.w	800417c <__retarget_lock_acquire_recursive>
 800435e:	bf00      	nop
 8004360:	2000029c 	.word	0x2000029c

08004364 <__malloc_unlock>:
 8004364:	4801      	ldr	r0, [pc, #4]	; (800436c <__malloc_unlock+0x8>)
 8004366:	f7ff bf0a 	b.w	800417e <__retarget_lock_release_recursive>
 800436a:	bf00      	nop
 800436c:	2000029c 	.word	0x2000029c

08004370 <__ssputs_r>:
 8004370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004374:	688e      	ldr	r6, [r1, #8]
 8004376:	461f      	mov	r7, r3
 8004378:	42be      	cmp	r6, r7
 800437a:	680b      	ldr	r3, [r1, #0]
 800437c:	4682      	mov	sl, r0
 800437e:	460c      	mov	r4, r1
 8004380:	4690      	mov	r8, r2
 8004382:	d82c      	bhi.n	80043de <__ssputs_r+0x6e>
 8004384:	898a      	ldrh	r2, [r1, #12]
 8004386:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800438a:	d026      	beq.n	80043da <__ssputs_r+0x6a>
 800438c:	6965      	ldr	r5, [r4, #20]
 800438e:	6909      	ldr	r1, [r1, #16]
 8004390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004394:	eba3 0901 	sub.w	r9, r3, r1
 8004398:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800439c:	1c7b      	adds	r3, r7, #1
 800439e:	444b      	add	r3, r9
 80043a0:	106d      	asrs	r5, r5, #1
 80043a2:	429d      	cmp	r5, r3
 80043a4:	bf38      	it	cc
 80043a6:	461d      	movcc	r5, r3
 80043a8:	0553      	lsls	r3, r2, #21
 80043aa:	d527      	bpl.n	80043fc <__ssputs_r+0x8c>
 80043ac:	4629      	mov	r1, r5
 80043ae:	f7ff ff53 	bl	8004258 <_malloc_r>
 80043b2:	4606      	mov	r6, r0
 80043b4:	b360      	cbz	r0, 8004410 <__ssputs_r+0xa0>
 80043b6:	6921      	ldr	r1, [r4, #16]
 80043b8:	464a      	mov	r2, r9
 80043ba:	f000 faeb 	bl	8004994 <memcpy>
 80043be:	89a3      	ldrh	r3, [r4, #12]
 80043c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c8:	81a3      	strh	r3, [r4, #12]
 80043ca:	6126      	str	r6, [r4, #16]
 80043cc:	6165      	str	r5, [r4, #20]
 80043ce:	444e      	add	r6, r9
 80043d0:	eba5 0509 	sub.w	r5, r5, r9
 80043d4:	6026      	str	r6, [r4, #0]
 80043d6:	60a5      	str	r5, [r4, #8]
 80043d8:	463e      	mov	r6, r7
 80043da:	42be      	cmp	r6, r7
 80043dc:	d900      	bls.n	80043e0 <__ssputs_r+0x70>
 80043de:	463e      	mov	r6, r7
 80043e0:	6820      	ldr	r0, [r4, #0]
 80043e2:	4632      	mov	r2, r6
 80043e4:	4641      	mov	r1, r8
 80043e6:	f000 faab 	bl	8004940 <memmove>
 80043ea:	68a3      	ldr	r3, [r4, #8]
 80043ec:	1b9b      	subs	r3, r3, r6
 80043ee:	60a3      	str	r3, [r4, #8]
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	4433      	add	r3, r6
 80043f4:	6023      	str	r3, [r4, #0]
 80043f6:	2000      	movs	r0, #0
 80043f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fc:	462a      	mov	r2, r5
 80043fe:	f000 fad7 	bl	80049b0 <_realloc_r>
 8004402:	4606      	mov	r6, r0
 8004404:	2800      	cmp	r0, #0
 8004406:	d1e0      	bne.n	80043ca <__ssputs_r+0x5a>
 8004408:	6921      	ldr	r1, [r4, #16]
 800440a:	4650      	mov	r0, sl
 800440c:	f7ff feb8 	bl	8004180 <_free_r>
 8004410:	230c      	movs	r3, #12
 8004412:	f8ca 3000 	str.w	r3, [sl]
 8004416:	89a3      	ldrh	r3, [r4, #12]
 8004418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800441c:	81a3      	strh	r3, [r4, #12]
 800441e:	f04f 30ff 	mov.w	r0, #4294967295
 8004422:	e7e9      	b.n	80043f8 <__ssputs_r+0x88>

08004424 <_svfiprintf_r>:
 8004424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004428:	4698      	mov	r8, r3
 800442a:	898b      	ldrh	r3, [r1, #12]
 800442c:	061b      	lsls	r3, r3, #24
 800442e:	b09d      	sub	sp, #116	; 0x74
 8004430:	4607      	mov	r7, r0
 8004432:	460d      	mov	r5, r1
 8004434:	4614      	mov	r4, r2
 8004436:	d50e      	bpl.n	8004456 <_svfiprintf_r+0x32>
 8004438:	690b      	ldr	r3, [r1, #16]
 800443a:	b963      	cbnz	r3, 8004456 <_svfiprintf_r+0x32>
 800443c:	2140      	movs	r1, #64	; 0x40
 800443e:	f7ff ff0b 	bl	8004258 <_malloc_r>
 8004442:	6028      	str	r0, [r5, #0]
 8004444:	6128      	str	r0, [r5, #16]
 8004446:	b920      	cbnz	r0, 8004452 <_svfiprintf_r+0x2e>
 8004448:	230c      	movs	r3, #12
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	f04f 30ff 	mov.w	r0, #4294967295
 8004450:	e0d0      	b.n	80045f4 <_svfiprintf_r+0x1d0>
 8004452:	2340      	movs	r3, #64	; 0x40
 8004454:	616b      	str	r3, [r5, #20]
 8004456:	2300      	movs	r3, #0
 8004458:	9309      	str	r3, [sp, #36]	; 0x24
 800445a:	2320      	movs	r3, #32
 800445c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004460:	f8cd 800c 	str.w	r8, [sp, #12]
 8004464:	2330      	movs	r3, #48	; 0x30
 8004466:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800460c <_svfiprintf_r+0x1e8>
 800446a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800446e:	f04f 0901 	mov.w	r9, #1
 8004472:	4623      	mov	r3, r4
 8004474:	469a      	mov	sl, r3
 8004476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800447a:	b10a      	cbz	r2, 8004480 <_svfiprintf_r+0x5c>
 800447c:	2a25      	cmp	r2, #37	; 0x25
 800447e:	d1f9      	bne.n	8004474 <_svfiprintf_r+0x50>
 8004480:	ebba 0b04 	subs.w	fp, sl, r4
 8004484:	d00b      	beq.n	800449e <_svfiprintf_r+0x7a>
 8004486:	465b      	mov	r3, fp
 8004488:	4622      	mov	r2, r4
 800448a:	4629      	mov	r1, r5
 800448c:	4638      	mov	r0, r7
 800448e:	f7ff ff6f 	bl	8004370 <__ssputs_r>
 8004492:	3001      	adds	r0, #1
 8004494:	f000 80a9 	beq.w	80045ea <_svfiprintf_r+0x1c6>
 8004498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800449a:	445a      	add	r2, fp
 800449c:	9209      	str	r2, [sp, #36]	; 0x24
 800449e:	f89a 3000 	ldrb.w	r3, [sl]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 80a1 	beq.w	80045ea <_svfiprintf_r+0x1c6>
 80044a8:	2300      	movs	r3, #0
 80044aa:	f04f 32ff 	mov.w	r2, #4294967295
 80044ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044b2:	f10a 0a01 	add.w	sl, sl, #1
 80044b6:	9304      	str	r3, [sp, #16]
 80044b8:	9307      	str	r3, [sp, #28]
 80044ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044be:	931a      	str	r3, [sp, #104]	; 0x68
 80044c0:	4654      	mov	r4, sl
 80044c2:	2205      	movs	r2, #5
 80044c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044c8:	4850      	ldr	r0, [pc, #320]	; (800460c <_svfiprintf_r+0x1e8>)
 80044ca:	f7fb feb1 	bl	8000230 <memchr>
 80044ce:	9a04      	ldr	r2, [sp, #16]
 80044d0:	b9d8      	cbnz	r0, 800450a <_svfiprintf_r+0xe6>
 80044d2:	06d0      	lsls	r0, r2, #27
 80044d4:	bf44      	itt	mi
 80044d6:	2320      	movmi	r3, #32
 80044d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044dc:	0711      	lsls	r1, r2, #28
 80044de:	bf44      	itt	mi
 80044e0:	232b      	movmi	r3, #43	; 0x2b
 80044e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044e6:	f89a 3000 	ldrb.w	r3, [sl]
 80044ea:	2b2a      	cmp	r3, #42	; 0x2a
 80044ec:	d015      	beq.n	800451a <_svfiprintf_r+0xf6>
 80044ee:	9a07      	ldr	r2, [sp, #28]
 80044f0:	4654      	mov	r4, sl
 80044f2:	2000      	movs	r0, #0
 80044f4:	f04f 0c0a 	mov.w	ip, #10
 80044f8:	4621      	mov	r1, r4
 80044fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044fe:	3b30      	subs	r3, #48	; 0x30
 8004500:	2b09      	cmp	r3, #9
 8004502:	d94d      	bls.n	80045a0 <_svfiprintf_r+0x17c>
 8004504:	b1b0      	cbz	r0, 8004534 <_svfiprintf_r+0x110>
 8004506:	9207      	str	r2, [sp, #28]
 8004508:	e014      	b.n	8004534 <_svfiprintf_r+0x110>
 800450a:	eba0 0308 	sub.w	r3, r0, r8
 800450e:	fa09 f303 	lsl.w	r3, r9, r3
 8004512:	4313      	orrs	r3, r2
 8004514:	9304      	str	r3, [sp, #16]
 8004516:	46a2      	mov	sl, r4
 8004518:	e7d2      	b.n	80044c0 <_svfiprintf_r+0x9c>
 800451a:	9b03      	ldr	r3, [sp, #12]
 800451c:	1d19      	adds	r1, r3, #4
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	9103      	str	r1, [sp, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	bfbb      	ittet	lt
 8004526:	425b      	neglt	r3, r3
 8004528:	f042 0202 	orrlt.w	r2, r2, #2
 800452c:	9307      	strge	r3, [sp, #28]
 800452e:	9307      	strlt	r3, [sp, #28]
 8004530:	bfb8      	it	lt
 8004532:	9204      	strlt	r2, [sp, #16]
 8004534:	7823      	ldrb	r3, [r4, #0]
 8004536:	2b2e      	cmp	r3, #46	; 0x2e
 8004538:	d10c      	bne.n	8004554 <_svfiprintf_r+0x130>
 800453a:	7863      	ldrb	r3, [r4, #1]
 800453c:	2b2a      	cmp	r3, #42	; 0x2a
 800453e:	d134      	bne.n	80045aa <_svfiprintf_r+0x186>
 8004540:	9b03      	ldr	r3, [sp, #12]
 8004542:	1d1a      	adds	r2, r3, #4
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	9203      	str	r2, [sp, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	bfb8      	it	lt
 800454c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004550:	3402      	adds	r4, #2
 8004552:	9305      	str	r3, [sp, #20]
 8004554:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800461c <_svfiprintf_r+0x1f8>
 8004558:	7821      	ldrb	r1, [r4, #0]
 800455a:	2203      	movs	r2, #3
 800455c:	4650      	mov	r0, sl
 800455e:	f7fb fe67 	bl	8000230 <memchr>
 8004562:	b138      	cbz	r0, 8004574 <_svfiprintf_r+0x150>
 8004564:	9b04      	ldr	r3, [sp, #16]
 8004566:	eba0 000a 	sub.w	r0, r0, sl
 800456a:	2240      	movs	r2, #64	; 0x40
 800456c:	4082      	lsls	r2, r0
 800456e:	4313      	orrs	r3, r2
 8004570:	3401      	adds	r4, #1
 8004572:	9304      	str	r3, [sp, #16]
 8004574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004578:	4825      	ldr	r0, [pc, #148]	; (8004610 <_svfiprintf_r+0x1ec>)
 800457a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800457e:	2206      	movs	r2, #6
 8004580:	f7fb fe56 	bl	8000230 <memchr>
 8004584:	2800      	cmp	r0, #0
 8004586:	d038      	beq.n	80045fa <_svfiprintf_r+0x1d6>
 8004588:	4b22      	ldr	r3, [pc, #136]	; (8004614 <_svfiprintf_r+0x1f0>)
 800458a:	bb1b      	cbnz	r3, 80045d4 <_svfiprintf_r+0x1b0>
 800458c:	9b03      	ldr	r3, [sp, #12]
 800458e:	3307      	adds	r3, #7
 8004590:	f023 0307 	bic.w	r3, r3, #7
 8004594:	3308      	adds	r3, #8
 8004596:	9303      	str	r3, [sp, #12]
 8004598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800459a:	4433      	add	r3, r6
 800459c:	9309      	str	r3, [sp, #36]	; 0x24
 800459e:	e768      	b.n	8004472 <_svfiprintf_r+0x4e>
 80045a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80045a4:	460c      	mov	r4, r1
 80045a6:	2001      	movs	r0, #1
 80045a8:	e7a6      	b.n	80044f8 <_svfiprintf_r+0xd4>
 80045aa:	2300      	movs	r3, #0
 80045ac:	3401      	adds	r4, #1
 80045ae:	9305      	str	r3, [sp, #20]
 80045b0:	4619      	mov	r1, r3
 80045b2:	f04f 0c0a 	mov.w	ip, #10
 80045b6:	4620      	mov	r0, r4
 80045b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045bc:	3a30      	subs	r2, #48	; 0x30
 80045be:	2a09      	cmp	r2, #9
 80045c0:	d903      	bls.n	80045ca <_svfiprintf_r+0x1a6>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0c6      	beq.n	8004554 <_svfiprintf_r+0x130>
 80045c6:	9105      	str	r1, [sp, #20]
 80045c8:	e7c4      	b.n	8004554 <_svfiprintf_r+0x130>
 80045ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80045ce:	4604      	mov	r4, r0
 80045d0:	2301      	movs	r3, #1
 80045d2:	e7f0      	b.n	80045b6 <_svfiprintf_r+0x192>
 80045d4:	ab03      	add	r3, sp, #12
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	462a      	mov	r2, r5
 80045da:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <_svfiprintf_r+0x1f4>)
 80045dc:	a904      	add	r1, sp, #16
 80045de:	4638      	mov	r0, r7
 80045e0:	f3af 8000 	nop.w
 80045e4:	1c42      	adds	r2, r0, #1
 80045e6:	4606      	mov	r6, r0
 80045e8:	d1d6      	bne.n	8004598 <_svfiprintf_r+0x174>
 80045ea:	89ab      	ldrh	r3, [r5, #12]
 80045ec:	065b      	lsls	r3, r3, #25
 80045ee:	f53f af2d 	bmi.w	800444c <_svfiprintf_r+0x28>
 80045f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045f4:	b01d      	add	sp, #116	; 0x74
 80045f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045fa:	ab03      	add	r3, sp, #12
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	462a      	mov	r2, r5
 8004600:	4b05      	ldr	r3, [pc, #20]	; (8004618 <_svfiprintf_r+0x1f4>)
 8004602:	a904      	add	r1, sp, #16
 8004604:	4638      	mov	r0, r7
 8004606:	f000 f879 	bl	80046fc <_printf_i>
 800460a:	e7eb      	b.n	80045e4 <_svfiprintf_r+0x1c0>
 800460c:	08004a84 	.word	0x08004a84
 8004610:	08004a8e 	.word	0x08004a8e
 8004614:	00000000 	.word	0x00000000
 8004618:	08004371 	.word	0x08004371
 800461c:	08004a8a 	.word	0x08004a8a

08004620 <_printf_common>:
 8004620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	4616      	mov	r6, r2
 8004626:	4699      	mov	r9, r3
 8004628:	688a      	ldr	r2, [r1, #8]
 800462a:	690b      	ldr	r3, [r1, #16]
 800462c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004630:	4293      	cmp	r3, r2
 8004632:	bfb8      	it	lt
 8004634:	4613      	movlt	r3, r2
 8004636:	6033      	str	r3, [r6, #0]
 8004638:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800463c:	4607      	mov	r7, r0
 800463e:	460c      	mov	r4, r1
 8004640:	b10a      	cbz	r2, 8004646 <_printf_common+0x26>
 8004642:	3301      	adds	r3, #1
 8004644:	6033      	str	r3, [r6, #0]
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	0699      	lsls	r1, r3, #26
 800464a:	bf42      	ittt	mi
 800464c:	6833      	ldrmi	r3, [r6, #0]
 800464e:	3302      	addmi	r3, #2
 8004650:	6033      	strmi	r3, [r6, #0]
 8004652:	6825      	ldr	r5, [r4, #0]
 8004654:	f015 0506 	ands.w	r5, r5, #6
 8004658:	d106      	bne.n	8004668 <_printf_common+0x48>
 800465a:	f104 0a19 	add.w	sl, r4, #25
 800465e:	68e3      	ldr	r3, [r4, #12]
 8004660:	6832      	ldr	r2, [r6, #0]
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	42ab      	cmp	r3, r5
 8004666:	dc26      	bgt.n	80046b6 <_printf_common+0x96>
 8004668:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800466c:	1e13      	subs	r3, r2, #0
 800466e:	6822      	ldr	r2, [r4, #0]
 8004670:	bf18      	it	ne
 8004672:	2301      	movne	r3, #1
 8004674:	0692      	lsls	r2, r2, #26
 8004676:	d42b      	bmi.n	80046d0 <_printf_common+0xb0>
 8004678:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800467c:	4649      	mov	r1, r9
 800467e:	4638      	mov	r0, r7
 8004680:	47c0      	blx	r8
 8004682:	3001      	adds	r0, #1
 8004684:	d01e      	beq.n	80046c4 <_printf_common+0xa4>
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	6922      	ldr	r2, [r4, #16]
 800468a:	f003 0306 	and.w	r3, r3, #6
 800468e:	2b04      	cmp	r3, #4
 8004690:	bf02      	ittt	eq
 8004692:	68e5      	ldreq	r5, [r4, #12]
 8004694:	6833      	ldreq	r3, [r6, #0]
 8004696:	1aed      	subeq	r5, r5, r3
 8004698:	68a3      	ldr	r3, [r4, #8]
 800469a:	bf0c      	ite	eq
 800469c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046a0:	2500      	movne	r5, #0
 80046a2:	4293      	cmp	r3, r2
 80046a4:	bfc4      	itt	gt
 80046a6:	1a9b      	subgt	r3, r3, r2
 80046a8:	18ed      	addgt	r5, r5, r3
 80046aa:	2600      	movs	r6, #0
 80046ac:	341a      	adds	r4, #26
 80046ae:	42b5      	cmp	r5, r6
 80046b0:	d11a      	bne.n	80046e8 <_printf_common+0xc8>
 80046b2:	2000      	movs	r0, #0
 80046b4:	e008      	b.n	80046c8 <_printf_common+0xa8>
 80046b6:	2301      	movs	r3, #1
 80046b8:	4652      	mov	r2, sl
 80046ba:	4649      	mov	r1, r9
 80046bc:	4638      	mov	r0, r7
 80046be:	47c0      	blx	r8
 80046c0:	3001      	adds	r0, #1
 80046c2:	d103      	bne.n	80046cc <_printf_common+0xac>
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046cc:	3501      	adds	r5, #1
 80046ce:	e7c6      	b.n	800465e <_printf_common+0x3e>
 80046d0:	18e1      	adds	r1, r4, r3
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	2030      	movs	r0, #48	; 0x30
 80046d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046da:	4422      	add	r2, r4
 80046dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046e4:	3302      	adds	r3, #2
 80046e6:	e7c7      	b.n	8004678 <_printf_common+0x58>
 80046e8:	2301      	movs	r3, #1
 80046ea:	4622      	mov	r2, r4
 80046ec:	4649      	mov	r1, r9
 80046ee:	4638      	mov	r0, r7
 80046f0:	47c0      	blx	r8
 80046f2:	3001      	adds	r0, #1
 80046f4:	d0e6      	beq.n	80046c4 <_printf_common+0xa4>
 80046f6:	3601      	adds	r6, #1
 80046f8:	e7d9      	b.n	80046ae <_printf_common+0x8e>
	...

080046fc <_printf_i>:
 80046fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004700:	7e0f      	ldrb	r7, [r1, #24]
 8004702:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004704:	2f78      	cmp	r7, #120	; 0x78
 8004706:	4691      	mov	r9, r2
 8004708:	4680      	mov	r8, r0
 800470a:	460c      	mov	r4, r1
 800470c:	469a      	mov	sl, r3
 800470e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004712:	d807      	bhi.n	8004724 <_printf_i+0x28>
 8004714:	2f62      	cmp	r7, #98	; 0x62
 8004716:	d80a      	bhi.n	800472e <_printf_i+0x32>
 8004718:	2f00      	cmp	r7, #0
 800471a:	f000 80d4 	beq.w	80048c6 <_printf_i+0x1ca>
 800471e:	2f58      	cmp	r7, #88	; 0x58
 8004720:	f000 80c0 	beq.w	80048a4 <_printf_i+0x1a8>
 8004724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800472c:	e03a      	b.n	80047a4 <_printf_i+0xa8>
 800472e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004732:	2b15      	cmp	r3, #21
 8004734:	d8f6      	bhi.n	8004724 <_printf_i+0x28>
 8004736:	a101      	add	r1, pc, #4	; (adr r1, 800473c <_printf_i+0x40>)
 8004738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800473c:	08004795 	.word	0x08004795
 8004740:	080047a9 	.word	0x080047a9
 8004744:	08004725 	.word	0x08004725
 8004748:	08004725 	.word	0x08004725
 800474c:	08004725 	.word	0x08004725
 8004750:	08004725 	.word	0x08004725
 8004754:	080047a9 	.word	0x080047a9
 8004758:	08004725 	.word	0x08004725
 800475c:	08004725 	.word	0x08004725
 8004760:	08004725 	.word	0x08004725
 8004764:	08004725 	.word	0x08004725
 8004768:	080048ad 	.word	0x080048ad
 800476c:	080047d5 	.word	0x080047d5
 8004770:	08004867 	.word	0x08004867
 8004774:	08004725 	.word	0x08004725
 8004778:	08004725 	.word	0x08004725
 800477c:	080048cf 	.word	0x080048cf
 8004780:	08004725 	.word	0x08004725
 8004784:	080047d5 	.word	0x080047d5
 8004788:	08004725 	.word	0x08004725
 800478c:	08004725 	.word	0x08004725
 8004790:	0800486f 	.word	0x0800486f
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	1d1a      	adds	r2, r3, #4
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	602a      	str	r2, [r5, #0]
 800479c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047a4:	2301      	movs	r3, #1
 80047a6:	e09f      	b.n	80048e8 <_printf_i+0x1ec>
 80047a8:	6820      	ldr	r0, [r4, #0]
 80047aa:	682b      	ldr	r3, [r5, #0]
 80047ac:	0607      	lsls	r7, r0, #24
 80047ae:	f103 0104 	add.w	r1, r3, #4
 80047b2:	6029      	str	r1, [r5, #0]
 80047b4:	d501      	bpl.n	80047ba <_printf_i+0xbe>
 80047b6:	681e      	ldr	r6, [r3, #0]
 80047b8:	e003      	b.n	80047c2 <_printf_i+0xc6>
 80047ba:	0646      	lsls	r6, r0, #25
 80047bc:	d5fb      	bpl.n	80047b6 <_printf_i+0xba>
 80047be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80047c2:	2e00      	cmp	r6, #0
 80047c4:	da03      	bge.n	80047ce <_printf_i+0xd2>
 80047c6:	232d      	movs	r3, #45	; 0x2d
 80047c8:	4276      	negs	r6, r6
 80047ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ce:	485a      	ldr	r0, [pc, #360]	; (8004938 <_printf_i+0x23c>)
 80047d0:	230a      	movs	r3, #10
 80047d2:	e012      	b.n	80047fa <_printf_i+0xfe>
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	6820      	ldr	r0, [r4, #0]
 80047d8:	1d19      	adds	r1, r3, #4
 80047da:	6029      	str	r1, [r5, #0]
 80047dc:	0605      	lsls	r5, r0, #24
 80047de:	d501      	bpl.n	80047e4 <_printf_i+0xe8>
 80047e0:	681e      	ldr	r6, [r3, #0]
 80047e2:	e002      	b.n	80047ea <_printf_i+0xee>
 80047e4:	0641      	lsls	r1, r0, #25
 80047e6:	d5fb      	bpl.n	80047e0 <_printf_i+0xe4>
 80047e8:	881e      	ldrh	r6, [r3, #0]
 80047ea:	4853      	ldr	r0, [pc, #332]	; (8004938 <_printf_i+0x23c>)
 80047ec:	2f6f      	cmp	r7, #111	; 0x6f
 80047ee:	bf0c      	ite	eq
 80047f0:	2308      	moveq	r3, #8
 80047f2:	230a      	movne	r3, #10
 80047f4:	2100      	movs	r1, #0
 80047f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047fa:	6865      	ldr	r5, [r4, #4]
 80047fc:	60a5      	str	r5, [r4, #8]
 80047fe:	2d00      	cmp	r5, #0
 8004800:	bfa2      	ittt	ge
 8004802:	6821      	ldrge	r1, [r4, #0]
 8004804:	f021 0104 	bicge.w	r1, r1, #4
 8004808:	6021      	strge	r1, [r4, #0]
 800480a:	b90e      	cbnz	r6, 8004810 <_printf_i+0x114>
 800480c:	2d00      	cmp	r5, #0
 800480e:	d04b      	beq.n	80048a8 <_printf_i+0x1ac>
 8004810:	4615      	mov	r5, r2
 8004812:	fbb6 f1f3 	udiv	r1, r6, r3
 8004816:	fb03 6711 	mls	r7, r3, r1, r6
 800481a:	5dc7      	ldrb	r7, [r0, r7]
 800481c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004820:	4637      	mov	r7, r6
 8004822:	42bb      	cmp	r3, r7
 8004824:	460e      	mov	r6, r1
 8004826:	d9f4      	bls.n	8004812 <_printf_i+0x116>
 8004828:	2b08      	cmp	r3, #8
 800482a:	d10b      	bne.n	8004844 <_printf_i+0x148>
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	07de      	lsls	r6, r3, #31
 8004830:	d508      	bpl.n	8004844 <_printf_i+0x148>
 8004832:	6923      	ldr	r3, [r4, #16]
 8004834:	6861      	ldr	r1, [r4, #4]
 8004836:	4299      	cmp	r1, r3
 8004838:	bfde      	ittt	le
 800483a:	2330      	movle	r3, #48	; 0x30
 800483c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004840:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004844:	1b52      	subs	r2, r2, r5
 8004846:	6122      	str	r2, [r4, #16]
 8004848:	f8cd a000 	str.w	sl, [sp]
 800484c:	464b      	mov	r3, r9
 800484e:	aa03      	add	r2, sp, #12
 8004850:	4621      	mov	r1, r4
 8004852:	4640      	mov	r0, r8
 8004854:	f7ff fee4 	bl	8004620 <_printf_common>
 8004858:	3001      	adds	r0, #1
 800485a:	d14a      	bne.n	80048f2 <_printf_i+0x1f6>
 800485c:	f04f 30ff 	mov.w	r0, #4294967295
 8004860:	b004      	add	sp, #16
 8004862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	f043 0320 	orr.w	r3, r3, #32
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	4833      	ldr	r0, [pc, #204]	; (800493c <_printf_i+0x240>)
 8004870:	2778      	movs	r7, #120	; 0x78
 8004872:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	6829      	ldr	r1, [r5, #0]
 800487a:	061f      	lsls	r7, r3, #24
 800487c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004880:	d402      	bmi.n	8004888 <_printf_i+0x18c>
 8004882:	065f      	lsls	r7, r3, #25
 8004884:	bf48      	it	mi
 8004886:	b2b6      	uxthmi	r6, r6
 8004888:	07df      	lsls	r7, r3, #31
 800488a:	bf48      	it	mi
 800488c:	f043 0320 	orrmi.w	r3, r3, #32
 8004890:	6029      	str	r1, [r5, #0]
 8004892:	bf48      	it	mi
 8004894:	6023      	strmi	r3, [r4, #0]
 8004896:	b91e      	cbnz	r6, 80048a0 <_printf_i+0x1a4>
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	f023 0320 	bic.w	r3, r3, #32
 800489e:	6023      	str	r3, [r4, #0]
 80048a0:	2310      	movs	r3, #16
 80048a2:	e7a7      	b.n	80047f4 <_printf_i+0xf8>
 80048a4:	4824      	ldr	r0, [pc, #144]	; (8004938 <_printf_i+0x23c>)
 80048a6:	e7e4      	b.n	8004872 <_printf_i+0x176>
 80048a8:	4615      	mov	r5, r2
 80048aa:	e7bd      	b.n	8004828 <_printf_i+0x12c>
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	6826      	ldr	r6, [r4, #0]
 80048b0:	6961      	ldr	r1, [r4, #20]
 80048b2:	1d18      	adds	r0, r3, #4
 80048b4:	6028      	str	r0, [r5, #0]
 80048b6:	0635      	lsls	r5, r6, #24
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	d501      	bpl.n	80048c0 <_printf_i+0x1c4>
 80048bc:	6019      	str	r1, [r3, #0]
 80048be:	e002      	b.n	80048c6 <_printf_i+0x1ca>
 80048c0:	0670      	lsls	r0, r6, #25
 80048c2:	d5fb      	bpl.n	80048bc <_printf_i+0x1c0>
 80048c4:	8019      	strh	r1, [r3, #0]
 80048c6:	2300      	movs	r3, #0
 80048c8:	6123      	str	r3, [r4, #16]
 80048ca:	4615      	mov	r5, r2
 80048cc:	e7bc      	b.n	8004848 <_printf_i+0x14c>
 80048ce:	682b      	ldr	r3, [r5, #0]
 80048d0:	1d1a      	adds	r2, r3, #4
 80048d2:	602a      	str	r2, [r5, #0]
 80048d4:	681d      	ldr	r5, [r3, #0]
 80048d6:	6862      	ldr	r2, [r4, #4]
 80048d8:	2100      	movs	r1, #0
 80048da:	4628      	mov	r0, r5
 80048dc:	f7fb fca8 	bl	8000230 <memchr>
 80048e0:	b108      	cbz	r0, 80048e6 <_printf_i+0x1ea>
 80048e2:	1b40      	subs	r0, r0, r5
 80048e4:	6060      	str	r0, [r4, #4]
 80048e6:	6863      	ldr	r3, [r4, #4]
 80048e8:	6123      	str	r3, [r4, #16]
 80048ea:	2300      	movs	r3, #0
 80048ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f0:	e7aa      	b.n	8004848 <_printf_i+0x14c>
 80048f2:	6923      	ldr	r3, [r4, #16]
 80048f4:	462a      	mov	r2, r5
 80048f6:	4649      	mov	r1, r9
 80048f8:	4640      	mov	r0, r8
 80048fa:	47d0      	blx	sl
 80048fc:	3001      	adds	r0, #1
 80048fe:	d0ad      	beq.n	800485c <_printf_i+0x160>
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	079b      	lsls	r3, r3, #30
 8004904:	d413      	bmi.n	800492e <_printf_i+0x232>
 8004906:	68e0      	ldr	r0, [r4, #12]
 8004908:	9b03      	ldr	r3, [sp, #12]
 800490a:	4298      	cmp	r0, r3
 800490c:	bfb8      	it	lt
 800490e:	4618      	movlt	r0, r3
 8004910:	e7a6      	b.n	8004860 <_printf_i+0x164>
 8004912:	2301      	movs	r3, #1
 8004914:	4632      	mov	r2, r6
 8004916:	4649      	mov	r1, r9
 8004918:	4640      	mov	r0, r8
 800491a:	47d0      	blx	sl
 800491c:	3001      	adds	r0, #1
 800491e:	d09d      	beq.n	800485c <_printf_i+0x160>
 8004920:	3501      	adds	r5, #1
 8004922:	68e3      	ldr	r3, [r4, #12]
 8004924:	9903      	ldr	r1, [sp, #12]
 8004926:	1a5b      	subs	r3, r3, r1
 8004928:	42ab      	cmp	r3, r5
 800492a:	dcf2      	bgt.n	8004912 <_printf_i+0x216>
 800492c:	e7eb      	b.n	8004906 <_printf_i+0x20a>
 800492e:	2500      	movs	r5, #0
 8004930:	f104 0619 	add.w	r6, r4, #25
 8004934:	e7f5      	b.n	8004922 <_printf_i+0x226>
 8004936:	bf00      	nop
 8004938:	08004a95 	.word	0x08004a95
 800493c:	08004aa6 	.word	0x08004aa6

08004940 <memmove>:
 8004940:	4288      	cmp	r0, r1
 8004942:	b510      	push	{r4, lr}
 8004944:	eb01 0402 	add.w	r4, r1, r2
 8004948:	d902      	bls.n	8004950 <memmove+0x10>
 800494a:	4284      	cmp	r4, r0
 800494c:	4623      	mov	r3, r4
 800494e:	d807      	bhi.n	8004960 <memmove+0x20>
 8004950:	1e43      	subs	r3, r0, #1
 8004952:	42a1      	cmp	r1, r4
 8004954:	d008      	beq.n	8004968 <memmove+0x28>
 8004956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800495a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800495e:	e7f8      	b.n	8004952 <memmove+0x12>
 8004960:	4402      	add	r2, r0
 8004962:	4601      	mov	r1, r0
 8004964:	428a      	cmp	r2, r1
 8004966:	d100      	bne.n	800496a <memmove+0x2a>
 8004968:	bd10      	pop	{r4, pc}
 800496a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800496e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004972:	e7f7      	b.n	8004964 <memmove+0x24>

08004974 <_sbrk_r>:
 8004974:	b538      	push	{r3, r4, r5, lr}
 8004976:	4d06      	ldr	r5, [pc, #24]	; (8004990 <_sbrk_r+0x1c>)
 8004978:	2300      	movs	r3, #0
 800497a:	4604      	mov	r4, r0
 800497c:	4608      	mov	r0, r1
 800497e:	602b      	str	r3, [r5, #0]
 8004980:	f7fc f878 	bl	8000a74 <_sbrk>
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	d102      	bne.n	800498e <_sbrk_r+0x1a>
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	b103      	cbz	r3, 800498e <_sbrk_r+0x1a>
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	bd38      	pop	{r3, r4, r5, pc}
 8004990:	20000298 	.word	0x20000298

08004994 <memcpy>:
 8004994:	440a      	add	r2, r1
 8004996:	4291      	cmp	r1, r2
 8004998:	f100 33ff 	add.w	r3, r0, #4294967295
 800499c:	d100      	bne.n	80049a0 <memcpy+0xc>
 800499e:	4770      	bx	lr
 80049a0:	b510      	push	{r4, lr}
 80049a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049aa:	4291      	cmp	r1, r2
 80049ac:	d1f9      	bne.n	80049a2 <memcpy+0xe>
 80049ae:	bd10      	pop	{r4, pc}

080049b0 <_realloc_r>:
 80049b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b4:	4680      	mov	r8, r0
 80049b6:	4614      	mov	r4, r2
 80049b8:	460e      	mov	r6, r1
 80049ba:	b921      	cbnz	r1, 80049c6 <_realloc_r+0x16>
 80049bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049c0:	4611      	mov	r1, r2
 80049c2:	f7ff bc49 	b.w	8004258 <_malloc_r>
 80049c6:	b92a      	cbnz	r2, 80049d4 <_realloc_r+0x24>
 80049c8:	f7ff fbda 	bl	8004180 <_free_r>
 80049cc:	4625      	mov	r5, r4
 80049ce:	4628      	mov	r0, r5
 80049d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049d4:	f000 f81b 	bl	8004a0e <_malloc_usable_size_r>
 80049d8:	4284      	cmp	r4, r0
 80049da:	4607      	mov	r7, r0
 80049dc:	d802      	bhi.n	80049e4 <_realloc_r+0x34>
 80049de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049e2:	d812      	bhi.n	8004a0a <_realloc_r+0x5a>
 80049e4:	4621      	mov	r1, r4
 80049e6:	4640      	mov	r0, r8
 80049e8:	f7ff fc36 	bl	8004258 <_malloc_r>
 80049ec:	4605      	mov	r5, r0
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d0ed      	beq.n	80049ce <_realloc_r+0x1e>
 80049f2:	42bc      	cmp	r4, r7
 80049f4:	4622      	mov	r2, r4
 80049f6:	4631      	mov	r1, r6
 80049f8:	bf28      	it	cs
 80049fa:	463a      	movcs	r2, r7
 80049fc:	f7ff ffca 	bl	8004994 <memcpy>
 8004a00:	4631      	mov	r1, r6
 8004a02:	4640      	mov	r0, r8
 8004a04:	f7ff fbbc 	bl	8004180 <_free_r>
 8004a08:	e7e1      	b.n	80049ce <_realloc_r+0x1e>
 8004a0a:	4635      	mov	r5, r6
 8004a0c:	e7df      	b.n	80049ce <_realloc_r+0x1e>

08004a0e <_malloc_usable_size_r>:
 8004a0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a12:	1f18      	subs	r0, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bfbc      	itt	lt
 8004a18:	580b      	ldrlt	r3, [r1, r0]
 8004a1a:	18c0      	addlt	r0, r0, r3
 8004a1c:	4770      	bx	lr
	...

08004a20 <_init>:
 8004a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a22:	bf00      	nop
 8004a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a26:	bc08      	pop	{r3}
 8004a28:	469e      	mov	lr, r3
 8004a2a:	4770      	bx	lr

08004a2c <_fini>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	bf00      	nop
 8004a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a32:	bc08      	pop	{r3}
 8004a34:	469e      	mov	lr, r3
 8004a36:	4770      	bx	lr
