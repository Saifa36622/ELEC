
final_exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042d8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080044b0  080044b0  000144b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f0  080044f0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080044f0  080044f0  000144f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044f8  080044f8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f8  080044f8  000144f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044fc  080044fc  000144fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000014  08004514  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08004514  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010872  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002102  00000000  00000000  000308f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  00032a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a7b  00000000  00000000  00033768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002607f  00000000  00000000  000341e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff04  00000000  00000000  0005a262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc396  00000000  00000000  0006a166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000388c  00000000  00000000  001664fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00169d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004498 	.word	0x08004498

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08004498 	.word	0x08004498

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <task1.0>:
  	  		bit[p2] = ID_bit % 10;
  	  		ID_bit = ID_bit / 10;
  	  		p2--;
  	 }
void task1()
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	f8c7 c004 	str.w	ip, [r7, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 800051e:	2201      	movs	r2, #1
 8000520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000524:	4847      	ldr	r0, [pc, #284]	; (8000644 <task1.0+0x130>)
 8000526:	f002 f915 	bl	8002754 <HAL_GPIO_WritePin>
  static uint32_t TimeStamp2 = 0;
  	  if( HAL_GetTick()<TimeStamp2) return;
 800052a:	f000 fc57 	bl	8000ddc <HAL_GetTick>
 800052e:	4602      	mov	r2, r0
 8000530:	4b45      	ldr	r3, [pc, #276]	; (8000648 <task1.0+0x134>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	429a      	cmp	r2, r3
 8000536:	d37c      	bcc.n	8000632 <task1.0+0x11e>
  	  TimeStamp2 = HAL_GetTick()+100;
 8000538:	f000 fc50 	bl	8000ddc <HAL_GetTick>
 800053c:	4603      	mov	r3, r0
 800053e:	3364      	adds	r3, #100	; 0x64
 8000540:	4a41      	ldr	r2, [pc, #260]	; (8000648 <task1.0+0x134>)
 8000542:	6013      	str	r3, [r2, #0]
  for(int o = 0;o<= 4;o++)
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	e06f      	b.n	800062a <task1.0+0x116>
	{
	  j = 0;
 800054a:	4b40      	ldr	r3, [pc, #256]	; (800064c <task1.0+0x138>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
	  for(int i = 3;i>=0;i--)
 8000550:	2303      	movs	r3, #3
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	e015      	b.n	8000582 <task1.0+0x6e>
	  {
		 a[j] = ((bit[o2]) >> i) & 1;
 8000556:	4b3e      	ldr	r3, [pc, #248]	; (8000650 <task1.0+0x13c>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a3e      	ldr	r2, [pc, #248]	; (8000654 <task1.0+0x140>)
 800055c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	411a      	asrs	r2, r3
 8000564:	4b39      	ldr	r3, [pc, #228]	; (800064c <task1.0+0x138>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f002 0201 	and.w	r2, r2, #1
 800056c:	493a      	ldr	r1, [pc, #232]	; (8000658 <task1.0+0x144>)
 800056e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  	 j++;
 8000572:	4b36      	ldr	r3, [pc, #216]	; (800064c <task1.0+0x138>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	3301      	adds	r3, #1
 8000578:	4a34      	ldr	r2, [pc, #208]	; (800064c <task1.0+0x138>)
 800057a:	6013      	str	r3, [r2, #0]
	  for(int i = 3;i>=0;i--)
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	3b01      	subs	r3, #1
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	2b00      	cmp	r3, #0
 8000586:	dae6      	bge.n	8000556 <task1.0+0x42>
	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, a[0]);
 8000588:	4b33      	ldr	r3, [pc, #204]	; (8000658 <task1.0+0x144>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	461a      	mov	r2, r3
 8000590:	2110      	movs	r1, #16
 8000592:	482c      	ldr	r0, [pc, #176]	; (8000644 <task1.0+0x130>)
 8000594:	f002 f8de 	bl	8002754 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, a[1]);
 8000598:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <task1.0+0x144>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	461a      	mov	r2, r3
 80005a0:	2120      	movs	r1, #32
 80005a2:	4828      	ldr	r0, [pc, #160]	; (8000644 <task1.0+0x130>)
 80005a4:	f002 f8d6 	bl	8002754 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, a[2]);
 80005a8:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <task1.0+0x144>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	461a      	mov	r2, r3
 80005b0:	2108      	movs	r1, #8
 80005b2:	4824      	ldr	r0, [pc, #144]	; (8000644 <task1.0+0x130>)
 80005b4:	f002 f8ce 	bl	8002754 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, a[3]);
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <task1.0+0x144>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c8:	f002 f8c4 	bl	8002754 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d2:	481c      	ldr	r0, [pc, #112]	; (8000644 <task1.0+0x130>)
 80005d4:	f002 f8be 	bl	8002754 <HAL_GPIO_WritePin>

	  static uint32_t TimeStamp = 0;
	  if( HAL_GetTick()<TimeStamp) return;
 80005d8:	f000 fc00 	bl	8000ddc <HAL_GetTick>
 80005dc:	4602      	mov	r2, r0
 80005de:	4b1f      	ldr	r3, [pc, #124]	; (800065c <task1.0+0x148>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d327      	bcc.n	8000636 <task1.0+0x122>
	  TimeStamp = HAL_GetTick()+100;
 80005e6:	f000 fbf9 	bl	8000ddc <HAL_GetTick>
 80005ea:	4603      	mov	r3, r0
 80005ec:	3364      	adds	r3, #100	; 0x64
 80005ee:	4a1b      	ldr	r2, [pc, #108]	; (800065c <task1.0+0x148>)
 80005f0:	6013      	str	r3, [r2, #0]

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <task1.0+0x130>)
 80005fa:	f002 f8ab 	bl	8002754 <HAL_GPIO_WritePin>

	  static uint32_t TimeStamp2 = 0;
	  if( HAL_GetTick()<TimeStamp2) return;
 80005fe:	f000 fbed 	bl	8000ddc <HAL_GetTick>
 8000602:	4602      	mov	r2, r0
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <task1.0+0x14c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	429a      	cmp	r2, r3
 800060a:	d316      	bcc.n	800063a <task1.0+0x126>
	  TimeStamp2 = HAL_GetTick()+500;
 800060c:	f000 fbe6 	bl	8000ddc <HAL_GetTick>
 8000610:	4603      	mov	r3, r0
 8000612:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <task1.0+0x14c>)
 8000618:	6013      	str	r3, [r2, #0]

//	  if (o2 == 4)
//	  {
//		  break;
//	  }
	  o2++;
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <task1.0+0x13c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3301      	adds	r3, #1
 8000620:	4a0b      	ldr	r2, [pc, #44]	; (8000650 <task1.0+0x13c>)
 8000622:	6013      	str	r3, [r2, #0]
  for(int o = 0;o<= 4;o++)
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	3301      	adds	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	2b04      	cmp	r3, #4
 800062e:	dd8c      	ble.n	800054a <task1.0+0x36>
 8000630:	e004      	b.n	800063c <task1.0+0x128>
  	  if( HAL_GetTick()<TimeStamp2) return;
 8000632:	bf00      	nop
 8000634:	e002      	b.n	800063c <task1.0+0x128>
	  if( HAL_GetTick()<TimeStamp) return;
 8000636:	bf00      	nop
 8000638:	e000      	b.n	800063c <task1.0+0x128>
	  if( HAL_GetTick()<TimeStamp2) return;
 800063a:	bf00      	nop
	}
}
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	48000400 	.word	0x48000400
 8000648:	20000158 	.word	0x20000158
 800064c:	2000014c 	.word	0x2000014c
 8000650:	20000150 	.word	0x20000150
 8000654:	2000012c 	.word	0x2000012c
 8000658:	2000013c 	.word	0x2000013c
 800065c:	2000015c 	.word	0x2000015c
 8000660:	20000160 	.word	0x20000160

08000664 <main>:
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
int main(void)
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	603b      	str	r3, [r7, #0]
  HAL_Init();
 8000670:	f000 fb4f 	bl	8000d12 <HAL_Init>
  SystemClock_Config();
 8000674:	f000 f858 	bl	8000728 <SystemClock_Config>
  MX_GPIO_Init();
 8000678:	f000 f964 	bl	8000944 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800067c:	f000 f918 	bl	80008b0 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000680:	f000 f89e 	bl	80007c0 <MX_ADC1_Init>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000684:	217f      	movs	r1, #127	; 0x7f
 8000686:	4822      	ldr	r0, [pc, #136]	; (8000710 <main+0xac>)
 8000688:	f001 fc68 	bl	8001f5c <HAL_ADCEx_Calibration_Start>
  for(int p = 0;p <= 4;p++)
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	e022      	b.n	80006d8 <main+0x74>
  	  		bit[p2] = ID_bit % 10;
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <main+0xb0>)
 8000694:	881a      	ldrh	r2, [r3, #0]
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <main+0xb4>)
 8000698:	fba3 1302 	umull	r1, r3, r3, r2
 800069c:	08d9      	lsrs	r1, r3, #3
 800069e:	460b      	mov	r3, r1
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	440b      	add	r3, r1
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <main+0xb8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4611      	mov	r1, r2
 80006b0:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <main+0xbc>)
 80006b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  	  		ID_bit = ID_bit / 10;
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <main+0xb0>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	4a17      	ldr	r2, [pc, #92]	; (8000718 <main+0xb4>)
 80006bc:	fba2 2303 	umull	r2, r3, r2, r3
 80006c0:	08db      	lsrs	r3, r3, #3
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <main+0xb0>)
 80006c6:	801a      	strh	r2, [r3, #0]
  	  		p2--;
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <main+0xb8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	3b01      	subs	r3, #1
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <main+0xb8>)
 80006d0:	6013      	str	r3, [r2, #0]
  for(int p = 0;p <= 4;p++)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3301      	adds	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b04      	cmp	r3, #4
 80006dc:	ddd9      	ble.n	8000692 <main+0x2e>


  while (1)
  {
	  static uint32_t TimeStamp3 = 0;
	  if( HAL_GetTick()<TimeStamp3) return;
 80006de:	f000 fb7d 	bl	8000ddc <HAL_GetTick>
 80006e2:	4602      	mov	r2, r0
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <main+0xc0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d30a      	bcc.n	8000702 <main+0x9e>
	  TimeStamp3 = HAL_GetTick()+100;
 80006ec:	f000 fb76 	bl	8000ddc <HAL_GetTick>
 80006f0:	4603      	mov	r3, r0
 80006f2:	3364      	adds	r3, #100	; 0x64
 80006f4:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <main+0xc0>)
 80006f6:	6013      	str	r3, [r2, #0]
	  task1();
 80006f8:	463b      	mov	r3, r7
 80006fa:	469c      	mov	ip, r3
 80006fc:	f7ff ff0a 	bl	8000514 <task1.0>
  {
 8000700:	e7ed      	b.n	80006de <main+0x7a>
	  if( HAL_GetTick()<TimeStamp3) return;
 8000702:	bf00      	nop
 8000704:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000030 	.word	0x20000030
 8000714:	20000000 	.word	0x20000000
 8000718:	cccccccd 	.word	0xcccccccd
 800071c:	20000004 	.word	0x20000004
 8000720:	2000012c 	.word	0x2000012c
 8000724:	20000154 	.word	0x20000154

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	; 0x50
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0318 	add.w	r3, r7, #24
 8000732:	2238      	movs	r2, #56	; 0x38
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f003 fe82 	bl	8004440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800074a:	2000      	movs	r0, #0
 800074c:	f002 f83e 	bl	80027cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000750:	2302      	movs	r3, #2
 8000752:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075a:	2340      	movs	r3, #64	; 0x40
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000762:	2302      	movs	r3, #2
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000766:	2304      	movs	r3, #4
 8000768:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800076a:	2355      	movs	r3, #85	; 0x55
 800076c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000776:	2302      	movs	r3, #2
 8000778:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	f107 0318 	add.w	r3, r7, #24
 800077e:	4618      	mov	r0, r3
 8000780:	f002 f8d8 	bl	8002934 <HAL_RCC_OscConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800078a:	f000 f97f 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	230f      	movs	r3, #15
 8000790:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	2303      	movs	r3, #3
 8000794:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2104      	movs	r1, #4
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fbdc 	bl	8002f64 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007b2:	f000 f96b 	bl	8000a8c <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2220      	movs	r2, #32
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f003 fe31 	bl	8004440 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007de:	4b32      	ldr	r3, [pc, #200]	; (80008a8 <MX_ADC1_Init+0xe8>)
 80007e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007e6:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <MX_ADC1_Init+0xe8>)
 80007e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ee:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <MX_ADC1_Init+0xe8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f4:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <MX_ADC1_Init+0xe8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_ADC1_Init+0xe8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_ADC1_Init+0xe8>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000806:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <MX_ADC1_Init+0xe8>)
 8000808:	2204      	movs	r2, #4
 800080a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800080c:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_ADC1_Init+0xe8>)
 800080e:	2200      	movs	r2, #0
 8000810:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <MX_ADC1_Init+0xe8>)
 8000814:	2200      	movs	r2, #0
 8000816:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000818:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_ADC1_Init+0xe8>)
 800081a:	2201      	movs	r2, #1
 800081c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800081e:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <MX_ADC1_Init+0xe8>)
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_ADC1_Init+0xe8>)
 8000828:	2200      	movs	r2, #0
 800082a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_ADC1_Init+0xe8>)
 800082e:	2200      	movs	r2, #0
 8000830:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_ADC1_Init+0xe8>)
 8000834:	2200      	movs	r2, #0
 8000836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800083a:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_ADC1_Init+0xe8>)
 800083c:	2200      	movs	r2, #0
 800083e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_ADC1_Init+0xe8>)
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000848:	4817      	ldr	r0, [pc, #92]	; (80008a8 <MX_ADC1_Init+0xe8>)
 800084a:	f000 fcd3 	bl	80011f4 <HAL_ADC_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000854:	f000 f91a 	bl	8000a8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800085c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000860:	4619      	mov	r1, r3
 8000862:	4811      	ldr	r0, [pc, #68]	; (80008a8 <MX_ADC1_Init+0xe8>)
 8000864:	f001 fbdc 	bl	8002020 <HAL_ADCEx_MultiModeConfigChannel>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800086e:	f000 f90d 	bl	8000a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_ADC1_Init+0xec>)
 8000874:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000876:	2306      	movs	r3, #6
 8000878:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800087e:	237f      	movs	r3, #127	; 0x7f
 8000880:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000882:	2304      	movs	r3, #4
 8000884:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_ADC1_Init+0xe8>)
 8000890:	f000 fe72 	bl	8001578 <HAL_ADC_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800089a:	f000 f8f7 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3730      	adds	r7, #48	; 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000030 	.word	0x20000030
 80008ac:	04300002 	.word	0x04300002

080008b0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008b4:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008b6:	4a22      	ldr	r2, [pc, #136]	; (8000940 <MX_LPUART1_UART_Init+0x90>)
 80008b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008ba:	4b20      	ldr	r3, [pc, #128]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b1e      	ldr	r3, [pc, #120]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008f2:	4812      	ldr	r0, [pc, #72]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008f4:	f002 ffa0 	bl	8003838 <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80008fe:	f000 f8c5 	bl	8000a8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000902:	2100      	movs	r1, #0
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 8000906:	f003 fcd1 	bl	80042ac <HAL_UARTEx_SetTxFifoThreshold>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000910:	f000 f8bc 	bl	8000a8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000914:	2100      	movs	r1, #0
 8000916:	4809      	ldr	r0, [pc, #36]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 8000918:	f003 fd06 	bl	8004328 <HAL_UARTEx_SetRxFifoThreshold>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000922:	f000 f8b3 	bl	8000a8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 8000928:	f003 fc87 	bl	800423a <HAL_UARTEx_DisableFifoMode>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000932:	f000 f8ab 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000009c 	.word	0x2000009c
 8000940:	40008000 	.word	0x40008000

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	4b49      	ldr	r3, [pc, #292]	; (8000a80 <MX_GPIO_Init+0x13c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a48      	ldr	r2, [pc, #288]	; (8000a80 <MX_GPIO_Init+0x13c>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b46      	ldr	r3, [pc, #280]	; (8000a80 <MX_GPIO_Init+0x13c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000972:	4b43      	ldr	r3, [pc, #268]	; (8000a80 <MX_GPIO_Init+0x13c>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a42      	ldr	r2, [pc, #264]	; (8000a80 <MX_GPIO_Init+0x13c>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b40      	ldr	r3, [pc, #256]	; (8000a80 <MX_GPIO_Init+0x13c>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0320 	and.w	r3, r3, #32
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <MX_GPIO_Init+0x13c>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a3c      	ldr	r2, [pc, #240]	; (8000a80 <MX_GPIO_Init+0x13c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b3a      	ldr	r3, [pc, #232]	; (8000a80 <MX_GPIO_Init+0x13c>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b37      	ldr	r3, [pc, #220]	; (8000a80 <MX_GPIO_Init+0x13c>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4a36      	ldr	r2, [pc, #216]	; (8000a80 <MX_GPIO_Init+0x13c>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <MX_GPIO_Init+0x13c>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|input_user_4_wow_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c4:	f001 fec6 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, user_CLK_Pin|input_user_3_wow_Pin|input_user_1_wow_Pin|input_user_2_wow_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80009ce:	482d      	ldr	r0, [pc, #180]	; (8000a84 <MX_GPIO_Init+0x140>)
 80009d0:	f001 fec0 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	4827      	ldr	r0, [pc, #156]	; (8000a88 <MX_GPIO_Init+0x144>)
 80009ec:	f001 fd30 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin input_user_4_wow_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|input_user_4_wow_Pin;
 80009f0:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009f6:	2311      	movs	r3, #17
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f001 fd20 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : user_CLK_Pin */
  GPIO_InitStruct.Pin = user_CLK_Pin;
 8000a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(user_CLK_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	4816      	ldr	r0, [pc, #88]	; (8000a84 <MX_GPIO_Init+0x140>)
 8000a2a:	f001 fd11 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : user_R_CLK_Pin */
  GPIO_InitStruct.Pin = user_R_CLK_Pin;
 8000a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(user_R_CLK_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a46:	f001 fd03 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : input_user_3_wow_Pin input_user_1_wow_Pin input_user_2_wow_Pin */
  GPIO_InitStruct.Pin = input_user_3_wow_Pin|input_user_1_wow_Pin|input_user_2_wow_Pin;
 8000a4a:	2338      	movs	r3, #56	; 0x38
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a4e:	2311      	movs	r3, #17
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4808      	ldr	r0, [pc, #32]	; (8000a84 <MX_GPIO_Init+0x140>)
 8000a62:	f001 fcf5 	bl	8002450 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2028      	movs	r0, #40	; 0x28
 8000a6c:	f001 fcbb 	bl	80023e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a70:	2028      	movs	r0, #40	; 0x28
 8000a72:	f001 fcd2 	bl	800241a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40021000 	.word	0x40021000
 8000a84:	48000400 	.word	0x48000400
 8000a88:	48000800 	.word	0x48000800

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_MspInit+0x44>)
 8000aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_MspInit+0x44>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_MspInit+0x44>)
 8000aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_MspInit+0x44>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x44>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x44>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ace:	f001 ff21 	bl	8002914 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000

08000ae0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b09e      	sub	sp, #120	; 0x78
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	2254      	movs	r2, #84	; 0x54
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f003 fc9d 	bl	8004440 <memset>
  if(hadc->Instance==ADC1)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b0e:	d134      	bne.n	8000b7a <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b14:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b16:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b1a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 fc3b 	bl	800339c <HAL_RCCEx_PeriphCLKConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b2c:	f7ff ffae 	bl	8000a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_ADC_MspInit+0xa4>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b34:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <HAL_ADC_MspInit+0xa4>)
 8000b36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_ADC_MspInit+0xa4>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_ADC_MspInit+0xa4>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <HAL_ADC_MspInit+0xa4>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_ADC_MspInit+0xa4>)
 8000b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b60:	2301      	movs	r3, #1
 8000b62:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b64:	2303      	movs	r3, #3
 8000b66:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b76:	f001 fc6b 	bl	8002450 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3778      	adds	r7, #120	; 0x78
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b09e      	sub	sp, #120	; 0x78
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	2254      	movs	r2, #84	; 0x54
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f003 fc49 	bl	8004440 <memset>
  if(huart->Instance==LPUART1)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a1f      	ldr	r2, [pc, #124]	; (8000c30 <HAL_UART_MspInit+0xa8>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d136      	bne.n	8000c26 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bb8:	2320      	movs	r3, #32
 8000bba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f002 fbe9 	bl	800339c <HAL_RCCEx_PeriphCLKConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bd0:	f7ff ff5c 	bl	8000a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_UART_MspInit+0xac>)
 8000bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd8:	4a16      	ldr	r2, [pc, #88]	; (8000c34 <HAL_UART_MspInit+0xac>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_UART_MspInit+0xac>)
 8000be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_UART_MspInit+0xac>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf0:	4a10      	ldr	r2, [pc, #64]	; (8000c34 <HAL_UART_MspInit+0xac>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_UART_MspInit+0xac>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c04:	230c      	movs	r3, #12
 8000c06:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c14:	230c      	movs	r3, #12
 8000c16:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c22:	f001 fc15 	bl	8002450 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000c26:	bf00      	nop
 8000c28:	3778      	adds	r7, #120	; 0x78
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40008000 	.word	0x40008000
 8000c34:	40021000 	.word	0x40021000

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler+0x4>

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c84:	f000 f898 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c94:	f001 fd76 	bl	8002784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc6:	490e      	ldr	r1, [pc, #56]	; (8000d00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc8:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <LoopForever+0xe>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cdc:	4c0b      	ldr	r4, [pc, #44]	; (8000d0c <LoopForever+0x16>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cea:	f7ff ffd7 	bl	8000c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f003 fbaf 	bl	8004450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cf2:	f7ff fcb7 	bl	8000664 <main>

08000cf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf6:	e7fe      	b.n	8000cf6 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8000cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d04:	08004500 	.word	0x08004500
  ldr r2, =_sbss
 8000d08:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d0c:	20000168 	.word	0x20000168

08000d10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC1_2_IRQHandler>

08000d12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f001 fb57 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d22:	2000      	movs	r0, #0
 8000d24:	f000 f80e 	bl	8000d44 <HAL_InitTick>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d002      	beq.n	8000d34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	71fb      	strb	r3, [r7, #7]
 8000d32:	e001      	b.n	8000d38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d34:	f7ff feb0 	bl	8000a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d38:	79fb      	ldrb	r3, [r7, #7]

}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_InitTick+0x68>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d022      	beq.n	8000d9e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_InitTick+0x6c>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <HAL_InitTick+0x68>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 fb62 	bl	8002436 <HAL_SYSTICK_Config>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10f      	bne.n	8000d98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b0f      	cmp	r3, #15
 8000d7c:	d809      	bhi.n	8000d92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	f04f 30ff 	mov.w	r0, #4294967295
 8000d86:	f001 fb2e 	bl	80023e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_InitTick+0x70>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	e007      	b.n	8000da2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	e004      	b.n	8000da2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e001      	b.n	8000da2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000010 	.word	0x20000010
 8000db0:	20000008 	.word	0x20000008
 8000db4:	2000000c 	.word	0x2000000c

08000db8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x1c>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <HAL_IncTick+0x1c>)
 8000dc8:	6013      	str	r3, [r2, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	20000164 	.word	0x20000164
 8000dd8:	20000010 	.word	0x20000010

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000164 	.word	0x20000164

08000df4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	609a      	str	r2, [r3, #8]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
 8000e68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3360      	adds	r3, #96	; 0x60
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <LL_ADC_SetOffset+0x44>)
 8000e7e:	4013      	ands	r3, r2
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e94:	bf00      	nop
 8000e96:	371c      	adds	r7, #28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	03fff000 	.word	0x03fff000

08000ea4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3360      	adds	r3, #96	; 0x60
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3360      	adds	r3, #96	; 0x60
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000efa:	bf00      	nop
 8000efc:	371c      	adds	r7, #28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b087      	sub	sp, #28
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3360      	adds	r3, #96	; 0x60
 8000f16:	461a      	mov	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000f30:	bf00      	nop
 8000f32:	371c      	adds	r7, #28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3360      	adds	r3, #96	; 0x60
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	431a      	orrs	r2, r3
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000f66:	bf00      	nop
 8000f68:	371c      	adds	r7, #28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	615a      	str	r2, [r3, #20]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3330      	adds	r3, #48	; 0x30
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	f003 030c 	and.w	r3, r3, #12
 8000fb4:	4413      	add	r3, r2
 8000fb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	f003 031f 	and.w	r3, r3, #31
 8000fc2:	211f      	movs	r1, #31
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	401a      	ands	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	0e9b      	lsrs	r3, r3, #26
 8000fd0:	f003 011f 	and.w	r1, r3, #31
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	f003 031f 	and.w	r3, r3, #31
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fe4:	bf00      	nop
 8000fe6:	371c      	adds	r7, #28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3314      	adds	r3, #20
 8001000:	461a      	mov	r2, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	0e5b      	lsrs	r3, r3, #25
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	4413      	add	r3, r2
 800100e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	0d1b      	lsrs	r3, r3, #20
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	2107      	movs	r1, #7
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	401a      	ands	r2, r3
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	0d1b      	lsrs	r3, r3, #20
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	431a      	orrs	r2, r3
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800103a:	bf00      	nop
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d10a      	bne.n	8001072 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001068:	431a      	orrs	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001070:	e00a      	b.n	8001088 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800107e:	43db      	mvns	r3, r3
 8001080:	401a      	ands	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	407f0000 	.word	0x407f0000

08001098 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80010a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	6093      	str	r3, [r2, #8]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010d0:	d101      	bne.n	80010d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001120:	d101      	bne.n	8001126 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001144:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001148:	f043 0202 	orr.w	r2, r3, #2
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	2b01      	cmp	r3, #1
 800116e:	d101      	bne.n	8001174 <LL_ADC_IsEnabled+0x18>
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <LL_ADC_IsEnabled+0x1a>
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b02      	cmp	r3, #2
 8001194:	d101      	bne.n	800119a <LL_ADC_IsDisableOngoing+0x18>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <LL_ADC_IsDisableOngoing+0x1a>
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d101      	bne.n	80011c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d101      	bne.n	80011e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e1af      	b.n	800156e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001218:	2b00      	cmp	r3, #0
 800121a:	d109      	bne.n	8001230 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff fc5f 	bl	8000ae0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff41 	bl	80010bc <LL_ADC_IsDeepPowerDownEnabled>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d004      	beq.n	800124a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff27 	bl	8001098 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff5c 	bl	800110c <LL_ADC_IsInternalRegulatorEnabled>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d115      	bne.n	8001286 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff40 	bl	80010e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001264:	4b9f      	ldr	r3, [pc, #636]	; (80014e4 <HAL_ADC_Init+0x2f0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	099b      	lsrs	r3, r3, #6
 800126a:	4a9f      	ldr	r2, [pc, #636]	; (80014e8 <HAL_ADC_Init+0x2f4>)
 800126c:	fba2 2303 	umull	r2, r3, r2, r3
 8001270:	099b      	lsrs	r3, r3, #6
 8001272:	3301      	adds	r3, #1
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001278:	e002      	b.n	8001280 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	3b01      	subs	r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f9      	bne.n	800127a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff3e 	bl	800110c <LL_ADC_IsInternalRegulatorEnabled>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10d      	bne.n	80012b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129a:	f043 0210 	orr.w	r2, r3, #16
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a6:	f043 0201 	orr.w	r2, r3, #1
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff76 	bl	80011a8 <LL_ADC_REG_IsConversionOngoing>
 80012bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f040 8148 	bne.w	800155c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f040 8144 	bne.w	800155c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012dc:	f043 0202 	orr.w	r2, r3, #2
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff37 	bl	800115c <LL_ADC_IsEnabled>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d141      	bne.n	8001378 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012fc:	d004      	beq.n	8001308 <HAL_ADC_Init+0x114>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a7a      	ldr	r2, [pc, #488]	; (80014ec <HAL_ADC_Init+0x2f8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d10f      	bne.n	8001328 <HAL_ADC_Init+0x134>
 8001308:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800130c:	f7ff ff26 	bl	800115c <LL_ADC_IsEnabled>
 8001310:	4604      	mov	r4, r0
 8001312:	4876      	ldr	r0, [pc, #472]	; (80014ec <HAL_ADC_Init+0x2f8>)
 8001314:	f7ff ff22 	bl	800115c <LL_ADC_IsEnabled>
 8001318:	4603      	mov	r3, r0
 800131a:	4323      	orrs	r3, r4
 800131c:	2b00      	cmp	r3, #0
 800131e:	bf0c      	ite	eq
 8001320:	2301      	moveq	r3, #1
 8001322:	2300      	movne	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	e012      	b.n	800134e <HAL_ADC_Init+0x15a>
 8001328:	4871      	ldr	r0, [pc, #452]	; (80014f0 <HAL_ADC_Init+0x2fc>)
 800132a:	f7ff ff17 	bl	800115c <LL_ADC_IsEnabled>
 800132e:	4604      	mov	r4, r0
 8001330:	4870      	ldr	r0, [pc, #448]	; (80014f4 <HAL_ADC_Init+0x300>)
 8001332:	f7ff ff13 	bl	800115c <LL_ADC_IsEnabled>
 8001336:	4603      	mov	r3, r0
 8001338:	431c      	orrs	r4, r3
 800133a:	486f      	ldr	r0, [pc, #444]	; (80014f8 <HAL_ADC_Init+0x304>)
 800133c:	f7ff ff0e 	bl	800115c <LL_ADC_IsEnabled>
 8001340:	4603      	mov	r3, r0
 8001342:	4323      	orrs	r3, r4
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf0c      	ite	eq
 8001348:	2301      	moveq	r3, #1
 800134a:	2300      	movne	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d012      	beq.n	8001378 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800135a:	d004      	beq.n	8001366 <HAL_ADC_Init+0x172>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a62      	ldr	r2, [pc, #392]	; (80014ec <HAL_ADC_Init+0x2f8>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d101      	bne.n	800136a <HAL_ADC_Init+0x176>
 8001366:	4a65      	ldr	r2, [pc, #404]	; (80014fc <HAL_ADC_Init+0x308>)
 8001368:	e000      	b.n	800136c <HAL_ADC_Init+0x178>
 800136a:	4a65      	ldr	r2, [pc, #404]	; (8001500 <HAL_ADC_Init+0x30c>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4619      	mov	r1, r3
 8001372:	4610      	mov	r0, r2
 8001374:	f7ff fd3e 	bl	8000df4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7f5b      	ldrb	r3, [r3, #29]
 800137c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001382:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001388:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800138e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001396:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d106      	bne.n	80013b4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013aa:	3b01      	subs	r3, #1
 80013ac:	045b      	lsls	r3, r3, #17
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d009      	beq.n	80013d0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	4b4b      	ldr	r3, [pc, #300]	; (8001504 <HAL_ADC_Init+0x310>)
 80013d8:	4013      	ands	r3, r2
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	69b9      	ldr	r1, [r7, #24]
 80013e0:	430b      	orrs	r3, r1
 80013e2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fed2 	bl	80011a8 <LL_ADC_REG_IsConversionOngoing>
 8001404:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fedf 	bl	80011ce <LL_ADC_INJ_IsConversionOngoing>
 8001410:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d17f      	bne.n	8001518 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d17c      	bne.n	8001518 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001422:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800142a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800143a:	f023 0302 	bic.w	r3, r3, #2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	69b9      	ldr	r1, [r7, #24]
 8001444:	430b      	orrs	r3, r1
 8001446:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d017      	beq.n	8001480 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	691a      	ldr	r2, [r3, #16]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800145e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001468:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800146c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6911      	ldr	r1, [r2, #16]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	430b      	orrs	r3, r1
 800147a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800147e:	e013      	b.n	80014a8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	691a      	ldr	r2, [r3, #16]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800148e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014a4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d12a      	bne.n	8001508 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014bc:	f023 0304 	bic.w	r3, r3, #4
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014c8:	4311      	orrs	r1, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80014ce:	4311      	orrs	r1, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014d4:	430a      	orrs	r2, r1
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f042 0201 	orr.w	r2, r2, #1
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	e019      	b.n	8001518 <HAL_ADC_Init+0x324>
 80014e4:	20000008 	.word	0x20000008
 80014e8:	053e2d63 	.word	0x053e2d63
 80014ec:	50000100 	.word	0x50000100
 80014f0:	50000400 	.word	0x50000400
 80014f4:	50000500 	.word	0x50000500
 80014f8:	50000600 	.word	0x50000600
 80014fc:	50000300 	.word	0x50000300
 8001500:	50000700 	.word	0x50000700
 8001504:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	691a      	ldr	r2, [r3, #16]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d10c      	bne.n	800153a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f023 010f 	bic.w	r1, r3, #15
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	1e5a      	subs	r2, r3, #1
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	631a      	str	r2, [r3, #48]	; 0x30
 8001538:	e007      	b.n	800154a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 020f 	bic.w	r2, r2, #15
 8001548:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154e:	f023 0303 	bic.w	r3, r3, #3
 8001552:	f043 0201 	orr.w	r2, r3, #1
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	65da      	str	r2, [r3, #92]	; 0x5c
 800155a:	e007      	b.n	800156c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001560:	f043 0210 	orr.w	r2, r3, #16
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800156c:	7ffb      	ldrb	r3, [r7, #31]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	; 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd90      	pop	{r4, r7, pc}
 8001576:	bf00      	nop

08001578 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b0b6      	sub	sp, #216	; 0xd8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001592:	2b01      	cmp	r3, #1
 8001594:	d102      	bne.n	800159c <HAL_ADC_ConfigChannel+0x24>
 8001596:	2302      	movs	r3, #2
 8001598:	f000 bc13 	b.w	8001dc2 <HAL_ADC_ConfigChannel+0x84a>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fdfd 	bl	80011a8 <LL_ADC_REG_IsConversionOngoing>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f040 83f3 	bne.w	8001d9c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	6859      	ldr	r1, [r3, #4]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	f7ff fce8 	bl	8000f98 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fdeb 	bl	80011a8 <LL_ADC_REG_IsConversionOngoing>
 80015d2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fdf7 	bl	80011ce <LL_ADC_INJ_IsConversionOngoing>
 80015e0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f040 81d9 	bne.w	80019a0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f040 81d4 	bne.w	80019a0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001600:	d10f      	bne.n	8001622 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff fcef 	bl	8000ff0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fca9 	bl	8000f72 <LL_ADC_SetSamplingTimeCommonConfig>
 8001620:	e00e      	b.n	8001640 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	6819      	ldr	r1, [r3, #0]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	461a      	mov	r2, r3
 8001630:	f7ff fcde 	bl	8000ff0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fc99 	bl	8000f72 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	08db      	lsrs	r3, r3, #3
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	2b04      	cmp	r3, #4
 8001660:	d022      	beq.n	80016a8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	6919      	ldr	r1, [r3, #16]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001672:	f7ff fbf3 	bl	8000e5c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	6919      	ldr	r1, [r3, #16]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	461a      	mov	r2, r3
 8001684:	f7ff fc3f 	bl	8000f06 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	6919      	ldr	r1, [r3, #16]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	7f1b      	ldrb	r3, [r3, #28]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d102      	bne.n	800169e <HAL_ADC_ConfigChannel+0x126>
 8001698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800169c:	e000      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x128>
 800169e:	2300      	movs	r3, #0
 80016a0:	461a      	mov	r2, r3
 80016a2:	f7ff fc4b 	bl	8000f3c <LL_ADC_SetOffsetSaturation>
 80016a6:	e17b      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fbf8 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10a      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x15c>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fbed 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	0e9b      	lsrs	r3, r3, #26
 80016ce:	f003 021f 	and.w	r2, r3, #31
 80016d2:	e01e      	b.n	8001712 <HAL_ADC_ConfigChannel+0x19a>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fbe2 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001702:	2320      	movs	r3, #32
 8001704:	e004      	b.n	8001710 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001706:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800171a:	2b00      	cmp	r3, #0
 800171c:	d105      	bne.n	800172a <HAL_ADC_ConfigChannel+0x1b2>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	0e9b      	lsrs	r3, r3, #26
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	e018      	b.n	800175c <HAL_ADC_ConfigChannel+0x1e4>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001736:	fa93 f3a3 	rbit	r3, r3
 800173a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800173e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001742:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001746:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800174e:	2320      	movs	r3, #32
 8001750:	e004      	b.n	800175c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001756:	fab3 f383 	clz	r3, r3
 800175a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800175c:	429a      	cmp	r2, r3
 800175e:	d106      	bne.n	800176e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2200      	movs	r2, #0
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fbb1 	bl	8000ed0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2101      	movs	r1, #1
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fb95 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 800177a:	4603      	mov	r3, r0
 800177c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10a      	bne.n	800179a <HAL_ADC_ConfigChannel+0x222>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2101      	movs	r1, #1
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fb8a 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001790:	4603      	mov	r3, r0
 8001792:	0e9b      	lsrs	r3, r3, #26
 8001794:	f003 021f 	and.w	r2, r3, #31
 8001798:	e01e      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x260>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2101      	movs	r1, #1
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fb7f 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017b0:	fa93 f3a3 	rbit	r3, r3
 80017b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80017b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80017c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80017c8:	2320      	movs	r3, #32
 80017ca:	e004      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80017cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017d0:	fab3 f383 	clz	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d105      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x278>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0e9b      	lsrs	r3, r3, #26
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	e018      	b.n	8001822 <HAL_ADC_ConfigChannel+0x2aa>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001804:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800180c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001814:	2320      	movs	r3, #32
 8001816:	e004      	b.n	8001822 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001818:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800181c:	fab3 f383 	clz	r3, r3
 8001820:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001822:	429a      	cmp	r2, r3
 8001824:	d106      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2200      	movs	r2, #0
 800182c:	2101      	movs	r1, #1
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fb4e 	bl	8000ed0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2102      	movs	r1, #2
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fb32 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10a      	bne.n	8001860 <HAL_ADC_ConfigChannel+0x2e8>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2102      	movs	r1, #2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fb27 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	0e9b      	lsrs	r3, r3, #26
 800185a:	f003 021f 	and.w	r2, r3, #31
 800185e:	e01e      	b.n	800189e <HAL_ADC_ConfigChannel+0x326>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2102      	movs	r1, #2
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fb1c 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800187e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001886:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800188e:	2320      	movs	r3, #32
 8001890:	e004      	b.n	800189c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001892:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d105      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x33e>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	0e9b      	lsrs	r3, r3, #26
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	e016      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x36c>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018c2:	fa93 f3a3 	rbit	r3, r3
 80018c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80018c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80018ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80018d6:	2320      	movs	r3, #32
 80018d8:	e004      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80018da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018de:	fab3 f383 	clz	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d106      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2200      	movs	r2, #0
 80018ee:	2102      	movs	r1, #2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff faed 	bl	8000ed0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2103      	movs	r1, #3
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fad1 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001902:	4603      	mov	r3, r0
 8001904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10a      	bne.n	8001922 <HAL_ADC_ConfigChannel+0x3aa>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2103      	movs	r1, #3
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fac6 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	0e9b      	lsrs	r3, r3, #26
 800191c:	f003 021f 	and.w	r2, r3, #31
 8001920:	e017      	b.n	8001952 <HAL_ADC_ConfigChannel+0x3da>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2103      	movs	r1, #3
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fabb 	bl	8000ea4 <LL_ADC_GetOffsetChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001934:	fa93 f3a3 	rbit	r3, r3
 8001938:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800193a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800193c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800193e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001944:	2320      	movs	r3, #32
 8001946:	e003      	b.n	8001950 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800194a:	fab3 f383 	clz	r3, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800195a:	2b00      	cmp	r3, #0
 800195c:	d105      	bne.n	800196a <HAL_ADC_ConfigChannel+0x3f2>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	0e9b      	lsrs	r3, r3, #26
 8001964:	f003 031f 	and.w	r3, r3, #31
 8001968:	e011      	b.n	800198e <HAL_ADC_ConfigChannel+0x416>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001972:	fa93 f3a3 	rbit	r3, r3
 8001976:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800197a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800197c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001982:	2320      	movs	r3, #32
 8001984:	e003      	b.n	800198e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800198e:	429a      	cmp	r2, r3
 8001990:	d106      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2200      	movs	r2, #0
 8001998:	2103      	movs	r1, #3
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fa98 	bl	8000ed0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fbd9 	bl	800115c <LL_ADC_IsEnabled>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f040 813d 	bne.w	8001c2c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6818      	ldr	r0, [r3, #0]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6819      	ldr	r1, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	461a      	mov	r2, r3
 80019c0:	f7ff fb42 	bl	8001048 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4aa2      	ldr	r2, [pc, #648]	; (8001c54 <HAL_ADC_ConfigChannel+0x6dc>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	f040 812e 	bne.w	8001c2c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10b      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x480>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	0e9b      	lsrs	r3, r3, #26
 80019e6:	3301      	adds	r3, #1
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	2b09      	cmp	r3, #9
 80019ee:	bf94      	ite	ls
 80019f0:	2301      	movls	r3, #1
 80019f2:	2300      	movhi	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	e019      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x4b4>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a08:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001a10:	2320      	movs	r3, #32
 8001a12:	e003      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001a14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	2b09      	cmp	r3, #9
 8001a24:	bf94      	ite	ls
 8001a26:	2301      	movls	r3, #1
 8001a28:	2300      	movhi	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d079      	beq.n	8001b24 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d107      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x4d4>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	0e9b      	lsrs	r3, r3, #26
 8001a42:	3301      	adds	r3, #1
 8001a44:	069b      	lsls	r3, r3, #26
 8001a46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a4a:	e015      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x500>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a5c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001a64:	2320      	movs	r3, #32
 8001a66:	e003      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6a:	fab3 f383 	clz	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	3301      	adds	r3, #1
 8001a72:	069b      	lsls	r3, r3, #26
 8001a74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d109      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x520>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0e9b      	lsrs	r3, r3, #26
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	2101      	movs	r1, #1
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	e017      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x550>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	e003      	b.n	8001abc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	3301      	adds	r3, #1
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	ea42 0103 	orr.w	r1, r2, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10a      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x576>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	0e9b      	lsrs	r3, r3, #26
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	051b      	lsls	r3, r3, #20
 8001aec:	e018      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x5a8>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001b06:	2320      	movs	r3, #32
 8001b08:	e003      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b0c:	fab3 f383 	clz	r3, r3
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	3301      	adds	r3, #1
 8001b14:	f003 021f 	and.w	r2, r3, #31
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b20:	430b      	orrs	r3, r1
 8001b22:	e07e      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d107      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x5c8>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0e9b      	lsrs	r3, r3, #26
 8001b36:	3301      	adds	r3, #1
 8001b38:	069b      	lsls	r3, r3, #26
 8001b3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b3e:	e015      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x5f4>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b50:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	e003      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	069b      	lsls	r3, r3, #26
 8001b68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x614>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0e9b      	lsrs	r3, r3, #26
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	2101      	movs	r1, #1
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	e017      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x644>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	fa93 f3a3 	rbit	r3, r3
 8001b98:	61fb      	str	r3, [r7, #28]
  return result;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001ba4:	2320      	movs	r3, #32
 8001ba6:	e003      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	f003 031f 	and.w	r3, r3, #31
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	ea42 0103 	orr.w	r1, r2, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10d      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x670>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0e9b      	lsrs	r3, r3, #26
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f003 021f 	and.w	r2, r3, #31
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	3b1e      	subs	r3, #30
 8001be0:	051b      	lsls	r3, r3, #20
 8001be2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001be6:	e01b      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x6a8>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	613b      	str	r3, [r7, #16]
  return result;
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001c00:	2320      	movs	r3, #32
 8001c02:	e003      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	f003 021f 	and.w	r2, r3, #31
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	3b1e      	subs	r3, #30
 8001c1a:	051b      	lsls	r3, r3, #20
 8001c1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c20:	430b      	orrs	r3, r1
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	6892      	ldr	r2, [r2, #8]
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7ff f9e2 	bl	8000ff0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_ADC_ConfigChannel+0x6e0>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 80be 	beq.w	8001db6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c42:	d004      	beq.n	8001c4e <HAL_ADC_ConfigChannel+0x6d6>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HAL_ADC_ConfigChannel+0x6e4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d10a      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x6ec>
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <HAL_ADC_ConfigChannel+0x6e8>)
 8001c50:	e009      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x6ee>
 8001c52:	bf00      	nop
 8001c54:	407f0000 	.word	0x407f0000
 8001c58:	80080000 	.word	0x80080000
 8001c5c:	50000100 	.word	0x50000100
 8001c60:	50000300 	.word	0x50000300
 8001c64:	4b59      	ldr	r3, [pc, #356]	; (8001dcc <HAL_ADC_ConfigChannel+0x854>)
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f8ea 	bl	8000e40 <LL_ADC_GetCommonPathInternalCh>
 8001c6c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a56      	ldr	r2, [pc, #344]	; (8001dd0 <HAL_ADC_ConfigChannel+0x858>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d004      	beq.n	8001c84 <HAL_ADC_ConfigChannel+0x70c>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a55      	ldr	r2, [pc, #340]	; (8001dd4 <HAL_ADC_ConfigChannel+0x85c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d13a      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d134      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c98:	d005      	beq.n	8001ca6 <HAL_ADC_ConfigChannel+0x72e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a4e      	ldr	r2, [pc, #312]	; (8001dd8 <HAL_ADC_ConfigChannel+0x860>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	f040 8085 	bne.w	8001db0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cae:	d004      	beq.n	8001cba <HAL_ADC_ConfigChannel+0x742>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a49      	ldr	r2, [pc, #292]	; (8001ddc <HAL_ADC_ConfigChannel+0x864>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x746>
 8001cba:	4a49      	ldr	r2, [pc, #292]	; (8001de0 <HAL_ADC_ConfigChannel+0x868>)
 8001cbc:	e000      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x748>
 8001cbe:	4a43      	ldr	r2, [pc, #268]	; (8001dcc <HAL_ADC_ConfigChannel+0x854>)
 8001cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4610      	mov	r0, r2
 8001ccc:	f7ff f8a5 	bl	8000e1a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cd0:	4b44      	ldr	r3, [pc, #272]	; (8001de4 <HAL_ADC_ConfigChannel+0x86c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	099b      	lsrs	r3, r3, #6
 8001cd6:	4a44      	ldr	r2, [pc, #272]	; (8001de8 <HAL_ADC_ConfigChannel+0x870>)
 8001cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cdc:	099b      	lsrs	r3, r3, #6
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cea:	e002      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f9      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cf8:	e05a      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a3b      	ldr	r2, [pc, #236]	; (8001dec <HAL_ADC_ConfigChannel+0x874>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d125      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x7d8>
 8001d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d11f      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a31      	ldr	r2, [pc, #196]	; (8001ddc <HAL_ADC_ConfigChannel+0x864>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d104      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x7ac>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a34      	ldr	r2, [pc, #208]	; (8001df0 <HAL_ADC_ConfigChannel+0x878>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d047      	beq.n	8001db4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d2c:	d004      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x7c0>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a2a      	ldr	r2, [pc, #168]	; (8001ddc <HAL_ADC_ConfigChannel+0x864>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d101      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x7c4>
 8001d38:	4a29      	ldr	r2, [pc, #164]	; (8001de0 <HAL_ADC_ConfigChannel+0x868>)
 8001d3a:	e000      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x7c6>
 8001d3c:	4a23      	ldr	r2, [pc, #140]	; (8001dcc <HAL_ADC_ConfigChannel+0x854>)
 8001d3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d46:	4619      	mov	r1, r3
 8001d48:	4610      	mov	r0, r2
 8001d4a:	f7ff f866 	bl	8000e1a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d4e:	e031      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a27      	ldr	r2, [pc, #156]	; (8001df4 <HAL_ADC_ConfigChannel+0x87c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d12d      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d127      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <HAL_ADC_ConfigChannel+0x864>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d022      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d78:	d004      	beq.n	8001d84 <HAL_ADC_ConfigChannel+0x80c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <HAL_ADC_ConfigChannel+0x864>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x810>
 8001d84:	4a16      	ldr	r2, [pc, #88]	; (8001de0 <HAL_ADC_ConfigChannel+0x868>)
 8001d86:	e000      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x812>
 8001d88:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <HAL_ADC_ConfigChannel+0x854>)
 8001d8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d92:	4619      	mov	r1, r3
 8001d94:	4610      	mov	r0, r2
 8001d96:	f7ff f840 	bl	8000e1a <LL_ADC_SetCommonPathInternalCh>
 8001d9a:	e00c      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da0:	f043 0220 	orr.w	r2, r3, #32
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001dae:	e002      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001db0:	bf00      	nop
 8001db2:	e000      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001db4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001dbe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	37d8      	adds	r7, #216	; 0xd8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	50000700 	.word	0x50000700
 8001dd0:	c3210000 	.word	0xc3210000
 8001dd4:	90c00010 	.word	0x90c00010
 8001dd8:	50000600 	.word	0x50000600
 8001ddc:	50000100 	.word	0x50000100
 8001de0:	50000300 	.word	0x50000300
 8001de4:	20000008 	.word	0x20000008
 8001de8:	053e2d63 	.word	0x053e2d63
 8001dec:	c7520000 	.word	0xc7520000
 8001df0:	50000500 	.word	0x50000500
 8001df4:	cb840000 	.word	0xcb840000

08001df8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff f9bc 	bl	8001182 <LL_ADC_IsDisableOngoing>
 8001e0a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff f9a3 	bl	800115c <LL_ADC_IsEnabled>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d047      	beq.n	8001eac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d144      	bne.n	8001eac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 030d 	and.w	r3, r3, #13
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d10c      	bne.n	8001e4a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff f97d 	bl	8001134 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2203      	movs	r2, #3
 8001e40:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e42:	f7fe ffcb 	bl	8000ddc <HAL_GetTick>
 8001e46:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e48:	e029      	b.n	8001e9e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4e:	f043 0210 	orr.w	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5a:	f043 0201 	orr.w	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e023      	b.n	8001eae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e66:	f7fe ffb9 	bl	8000ddc <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d914      	bls.n	8001e9e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00d      	beq.n	8001e9e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	f043 0210 	orr.w	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e92:	f043 0201 	orr.w	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e007      	b.n	8001eae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1dc      	bne.n	8001e66 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <LL_ADC_IsEnabled>:
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <LL_ADC_IsEnabled+0x18>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <LL_ADC_IsEnabled+0x1a>
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_StartCalibration>:
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001eee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	609a      	str	r2, [r3, #8]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_ADC_IsCalibrationOnGoing>:
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f22:	d101      	bne.n	8001f28 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_ADC_REG_IsConversionOngoing>:
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d101      	bne.n	8001f4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_ADCEx_Calibration_Start+0x1c>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e04d      	b.n	8002014 <HAL_ADCEx_Calibration_Start+0xb8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff39 	bl	8001df8 <ADC_Disable>
 8001f86:	4603      	mov	r3, r0
 8001f88:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d136      	bne.n	8001ffe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f98:	f023 0302 	bic.w	r3, r3, #2
 8001f9c:	f043 0202 	orr.w	r2, r3, #2
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6839      	ldr	r1, [r7, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ff96 	bl	8001edc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001fb0:	e014      	b.n	8001fdc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4a18      	ldr	r2, [pc, #96]	; (800201c <HAL_ADCEx_Calibration_Start+0xc0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d90d      	bls.n	8001fdc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	f023 0312 	bic.w	r3, r3, #18
 8001fc8:	f043 0210 	orr.w	r2, r3, #16
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e01b      	b.n	8002014 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff94 	bl	8001f0e <LL_ADC_IsCalibrationOnGoing>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1e2      	bne.n	8001fb2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff0:	f023 0303 	bic.w	r3, r3, #3
 8001ff4:	f043 0201 	orr.w	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ffc:	e005      	b.n	800200a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	f043 0210 	orr.w	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002012:	7bfb      	ldrb	r3, [r7, #15]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	0004de01 	.word	0x0004de01

08002020 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b0a1      	sub	sp, #132	; 0x84
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800203a:	2302      	movs	r3, #2
 800203c:	e0e7      	b.n	800220e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002046:	2300      	movs	r3, #0
 8002048:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800204a:	2300      	movs	r3, #0
 800204c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002056:	d102      	bne.n	800205e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002058:	4b6f      	ldr	r3, [pc, #444]	; (8002218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	e009      	b.n	8002072 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a6e      	ldr	r2, [pc, #440]	; (800221c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d102      	bne.n	800206e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002068:	4b6d      	ldr	r3, [pc, #436]	; (8002220 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	e001      	b.n	8002072 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10b      	bne.n	8002090 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207c:	f043 0220 	orr.w	r2, r3, #32
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0be      	b.n	800220e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff4f 	bl	8001f36 <LL_ADC_REG_IsConversionOngoing>
 8002098:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff49 	bl	8001f36 <LL_ADC_REG_IsConversionOngoing>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 80a0 	bne.w	80021ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80020ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 809c 	bne.w	80021ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020bc:	d004      	beq.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a55      	ldr	r2, [pc, #340]	; (8002218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d101      	bne.n	80020cc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80020c8:	4b56      	ldr	r3, [pc, #344]	; (8002224 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80020ca:	e000      	b.n	80020ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80020cc:	4b56      	ldr	r3, [pc, #344]	; (8002228 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80020ce:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d04b      	beq.n	8002170 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80020d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020ea:	035b      	lsls	r3, r3, #13
 80020ec:	430b      	orrs	r3, r1
 80020ee:	431a      	orrs	r2, r3
 80020f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020fc:	d004      	beq.n	8002108 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a45      	ldr	r2, [pc, #276]	; (8002218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d10f      	bne.n	8002128 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002108:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800210c:	f7ff fed3 	bl	8001eb6 <LL_ADC_IsEnabled>
 8002110:	4604      	mov	r4, r0
 8002112:	4841      	ldr	r0, [pc, #260]	; (8002218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002114:	f7ff fecf 	bl	8001eb6 <LL_ADC_IsEnabled>
 8002118:	4603      	mov	r3, r0
 800211a:	4323      	orrs	r3, r4
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	e012      	b.n	800214e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002128:	483c      	ldr	r0, [pc, #240]	; (800221c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800212a:	f7ff fec4 	bl	8001eb6 <LL_ADC_IsEnabled>
 800212e:	4604      	mov	r4, r0
 8002130:	483b      	ldr	r0, [pc, #236]	; (8002220 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002132:	f7ff fec0 	bl	8001eb6 <LL_ADC_IsEnabled>
 8002136:	4603      	mov	r3, r0
 8002138:	431c      	orrs	r4, r3
 800213a:	483c      	ldr	r0, [pc, #240]	; (800222c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800213c:	f7ff febb 	bl	8001eb6 <LL_ADC_IsEnabled>
 8002140:	4603      	mov	r3, r0
 8002142:	4323      	orrs	r3, r4
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d056      	beq.n	8002200 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800215a:	f023 030f 	bic.w	r3, r3, #15
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	6811      	ldr	r1, [r2, #0]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	6892      	ldr	r2, [r2, #8]
 8002166:	430a      	orrs	r2, r1
 8002168:	431a      	orrs	r2, r3
 800216a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800216c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800216e:	e047      	b.n	8002200 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800217a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002184:	d004      	beq.n	8002190 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a23      	ldr	r2, [pc, #140]	; (8002218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d10f      	bne.n	80021b0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002190:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002194:	f7ff fe8f 	bl	8001eb6 <LL_ADC_IsEnabled>
 8002198:	4604      	mov	r4, r0
 800219a:	481f      	ldr	r0, [pc, #124]	; (8002218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800219c:	f7ff fe8b 	bl	8001eb6 <LL_ADC_IsEnabled>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4323      	orrs	r3, r4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	e012      	b.n	80021d6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80021b0:	481a      	ldr	r0, [pc, #104]	; (800221c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80021b2:	f7ff fe80 	bl	8001eb6 <LL_ADC_IsEnabled>
 80021b6:	4604      	mov	r4, r0
 80021b8:	4819      	ldr	r0, [pc, #100]	; (8002220 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80021ba:	f7ff fe7c 	bl	8001eb6 <LL_ADC_IsEnabled>
 80021be:	4603      	mov	r3, r0
 80021c0:	431c      	orrs	r4, r3
 80021c2:	481a      	ldr	r0, [pc, #104]	; (800222c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80021c4:	f7ff fe77 	bl	8001eb6 <LL_ADC_IsEnabled>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4323      	orrs	r3, r4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf0c      	ite	eq
 80021d0:	2301      	moveq	r3, #1
 80021d2:	2300      	movne	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d012      	beq.n	8002200 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80021da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021e2:	f023 030f 	bic.w	r3, r3, #15
 80021e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021e8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021ea:	e009      	b.n	8002200 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	f043 0220 	orr.w	r2, r3, #32
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80021fe:	e000      	b.n	8002202 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002200:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800220a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800220e:	4618      	mov	r0, r3
 8002210:	3784      	adds	r7, #132	; 0x84
 8002212:	46bd      	mov	sp, r7
 8002214:	bd90      	pop	{r4, r7, pc}
 8002216:	bf00      	nop
 8002218:	50000100 	.word	0x50000100
 800221c:	50000400 	.word	0x50000400
 8002220:	50000500 	.word	0x50000500
 8002224:	50000300 	.word	0x50000300
 8002228:	50000700 	.word	0x50000700
 800222c:	50000600 	.word	0x50000600

08002230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800224c:	4013      	ands	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800225c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002262:	4a04      	ldr	r2, [pc, #16]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	60d3      	str	r3, [r2, #12]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <__NVIC_GetPriorityGrouping+0x18>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	f003 0307 	and.w	r3, r3, #7
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	db0b      	blt.n	80022be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	4907      	ldr	r1, [pc, #28]	; (80022cc <__NVIC_EnableIRQ+0x38>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	2001      	movs	r0, #1
 80022b6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000e100 	.word	0xe000e100

080022d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	db0a      	blt.n	80022fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	490c      	ldr	r1, [pc, #48]	; (800231c <__NVIC_SetPriority+0x4c>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f8:	e00a      	b.n	8002310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4908      	ldr	r1, [pc, #32]	; (8002320 <__NVIC_SetPriority+0x50>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3b04      	subs	r3, #4
 8002308:	0112      	lsls	r2, r2, #4
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	440b      	add	r3, r1
 800230e:	761a      	strb	r2, [r3, #24]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f1c3 0307 	rsb	r3, r3, #7
 800233e:	2b04      	cmp	r3, #4
 8002340:	bf28      	it	cs
 8002342:	2304      	movcs	r3, #4
 8002344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3304      	adds	r3, #4
 800234a:	2b06      	cmp	r3, #6
 800234c:	d902      	bls.n	8002354 <NVIC_EncodePriority+0x30>
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3b03      	subs	r3, #3
 8002352:	e000      	b.n	8002356 <NVIC_EncodePriority+0x32>
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	f04f 32ff 	mov.w	r2, #4294967295
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	401a      	ands	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800236c:	f04f 31ff 	mov.w	r1, #4294967295
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43d9      	mvns	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	4313      	orrs	r3, r2
         );
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800239c:	d301      	bcc.n	80023a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239e:	2301      	movs	r3, #1
 80023a0:	e00f      	b.n	80023c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a2:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <SysTick_Config+0x40>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023aa:	210f      	movs	r1, #15
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f7ff ff8e 	bl	80022d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <SysTick_Config+0x40>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <SysTick_Config+0x40>)
 80023bc:	2207      	movs	r2, #7
 80023be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010

080023d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff29 	bl	8002230 <__NVIC_SetPriorityGrouping>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023f4:	f7ff ff40 	bl	8002278 <__NVIC_GetPriorityGrouping>
 80023f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	6978      	ldr	r0, [r7, #20]
 8002400:	f7ff ff90 	bl	8002324 <NVIC_EncodePriority>
 8002404:	4602      	mov	r2, r0
 8002406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff5f 	bl	80022d0 <__NVIC_SetPriority>
}
 8002412:	bf00      	nop
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff33 	bl	8002294 <__NVIC_EnableIRQ>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ffa4 	bl	800238c <SysTick_Config>
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800245e:	e15a      	b.n	8002716 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2101      	movs	r1, #1
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	4013      	ands	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 814c 	beq.w	8002710 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d005      	beq.n	8002490 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800248c:	2b02      	cmp	r3, #2
 800248e:	d130      	bne.n	80024f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	2203      	movs	r2, #3
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024c6:	2201      	movs	r2, #1
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	f003 0201 	and.w	r2, r3, #1
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d017      	beq.n	800252e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	2203      	movs	r2, #3
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d123      	bne.n	8002582 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002546:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	220f      	movs	r2, #15
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	08da      	lsrs	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3208      	adds	r2, #8
 800257c:	6939      	ldr	r1, [r7, #16]
 800257e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	2203      	movs	r2, #3
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4013      	ands	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0203 	and.w	r2, r3, #3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80a6 	beq.w	8002710 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c4:	4b5b      	ldr	r3, [pc, #364]	; (8002734 <HAL_GPIO_Init+0x2e4>)
 80025c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c8:	4a5a      	ldr	r2, [pc, #360]	; (8002734 <HAL_GPIO_Init+0x2e4>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6613      	str	r3, [r2, #96]	; 0x60
 80025d0:	4b58      	ldr	r3, [pc, #352]	; (8002734 <HAL_GPIO_Init+0x2e4>)
 80025d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025dc:	4a56      	ldr	r2, [pc, #344]	; (8002738 <HAL_GPIO_Init+0x2e8>)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	3302      	adds	r3, #2
 80025e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	220f      	movs	r2, #15
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002606:	d01f      	beq.n	8002648 <HAL_GPIO_Init+0x1f8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a4c      	ldr	r2, [pc, #304]	; (800273c <HAL_GPIO_Init+0x2ec>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d019      	beq.n	8002644 <HAL_GPIO_Init+0x1f4>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a4b      	ldr	r2, [pc, #300]	; (8002740 <HAL_GPIO_Init+0x2f0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d013      	beq.n	8002640 <HAL_GPIO_Init+0x1f0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a4a      	ldr	r2, [pc, #296]	; (8002744 <HAL_GPIO_Init+0x2f4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d00d      	beq.n	800263c <HAL_GPIO_Init+0x1ec>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a49      	ldr	r2, [pc, #292]	; (8002748 <HAL_GPIO_Init+0x2f8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d007      	beq.n	8002638 <HAL_GPIO_Init+0x1e8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a48      	ldr	r2, [pc, #288]	; (800274c <HAL_GPIO_Init+0x2fc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d101      	bne.n	8002634 <HAL_GPIO_Init+0x1e4>
 8002630:	2305      	movs	r3, #5
 8002632:	e00a      	b.n	800264a <HAL_GPIO_Init+0x1fa>
 8002634:	2306      	movs	r3, #6
 8002636:	e008      	b.n	800264a <HAL_GPIO_Init+0x1fa>
 8002638:	2304      	movs	r3, #4
 800263a:	e006      	b.n	800264a <HAL_GPIO_Init+0x1fa>
 800263c:	2303      	movs	r3, #3
 800263e:	e004      	b.n	800264a <HAL_GPIO_Init+0x1fa>
 8002640:	2302      	movs	r3, #2
 8002642:	e002      	b.n	800264a <HAL_GPIO_Init+0x1fa>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <HAL_GPIO_Init+0x1fa>
 8002648:	2300      	movs	r3, #0
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	f002 0203 	and.w	r2, r2, #3
 8002650:	0092      	lsls	r2, r2, #2
 8002652:	4093      	lsls	r3, r2
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800265a:	4937      	ldr	r1, [pc, #220]	; (8002738 <HAL_GPIO_Init+0x2e8>)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3302      	adds	r3, #2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002668:	4b39      	ldr	r3, [pc, #228]	; (8002750 <HAL_GPIO_Init+0x300>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43db      	mvns	r3, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800268c:	4a30      	ldr	r2, [pc, #192]	; (8002750 <HAL_GPIO_Init+0x300>)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002692:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <HAL_GPIO_Init+0x300>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	43db      	mvns	r3, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4013      	ands	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026b6:	4a26      	ldr	r2, [pc, #152]	; (8002750 <HAL_GPIO_Init+0x300>)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80026bc:	4b24      	ldr	r3, [pc, #144]	; (8002750 <HAL_GPIO_Init+0x300>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026e0:	4a1b      	ldr	r2, [pc, #108]	; (8002750 <HAL_GPIO_Init+0x300>)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <HAL_GPIO_Init+0x300>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800270a:	4a11      	ldr	r2, [pc, #68]	; (8002750 <HAL_GPIO_Init+0x300>)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3301      	adds	r3, #1
 8002714:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	f47f ae9d 	bne.w	8002460 <HAL_GPIO_Init+0x10>
  }
}
 8002726:	bf00      	nop
 8002728:	bf00      	nop
 800272a:	371c      	adds	r7, #28
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	40021000 	.word	0x40021000
 8002738:	40010000 	.word	0x40010000
 800273c:	48000400 	.word	0x48000400
 8002740:	48000800 	.word	0x48000800
 8002744:	48000c00 	.word	0x48000c00
 8002748:	48001000 	.word	0x48001000
 800274c:	48001400 	.word	0x48001400
 8002750:	40010400 	.word	0x40010400

08002754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
 8002760:	4613      	mov	r3, r2
 8002762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002764:	787b      	ldrb	r3, [r7, #1]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002770:	e002      	b.n	8002778 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002772:	887a      	ldrh	r2, [r7, #2]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d006      	beq.n	80027a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800279a:	4a05      	ldr	r2, [pc, #20]	; (80027b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f806 	bl	80027b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40010400 	.word	0x40010400

080027b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d141      	bne.n	800285e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027da:	4b4b      	ldr	r3, [pc, #300]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e6:	d131      	bne.n	800284c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027e8:	4b47      	ldr	r3, [pc, #284]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ee:	4a46      	ldr	r2, [pc, #280]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027f8:	4b43      	ldr	r3, [pc, #268]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002800:	4a41      	ldr	r2, [pc, #260]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002806:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002808:	4b40      	ldr	r3, [pc, #256]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2232      	movs	r2, #50	; 0x32
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	4a3f      	ldr	r2, [pc, #252]	; (8002910 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	0c9b      	lsrs	r3, r3, #18
 800281a:	3301      	adds	r3, #1
 800281c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800281e:	e002      	b.n	8002826 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3b01      	subs	r3, #1
 8002824:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002826:	4b38      	ldr	r3, [pc, #224]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002832:	d102      	bne.n	800283a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f2      	bne.n	8002820 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800283a:	4b33      	ldr	r3, [pc, #204]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002846:	d158      	bne.n	80028fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e057      	b.n	80028fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800284c:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800284e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002852:	4a2d      	ldr	r2, [pc, #180]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002858:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800285c:	e04d      	b.n	80028fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002864:	d141      	bne.n	80028ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002866:	4b28      	ldr	r3, [pc, #160]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800286e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002872:	d131      	bne.n	80028d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002874:	4b24      	ldr	r3, [pc, #144]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800287a:	4a23      	ldr	r2, [pc, #140]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002880:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002884:	4b20      	ldr	r3, [pc, #128]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800288c:	4a1e      	ldr	r2, [pc, #120]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800288e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002892:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002894:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2232      	movs	r2, #50	; 0x32
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	0c9b      	lsrs	r3, r3, #18
 80028a6:	3301      	adds	r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028aa:	e002      	b.n	80028b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028be:	d102      	bne.n	80028c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f2      	bne.n	80028ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d2:	d112      	bne.n	80028fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e011      	b.n	80028fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028de:	4a0a      	ldr	r2, [pc, #40]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80028e8:	e007      	b.n	80028fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028ea:	4b07      	ldr	r3, [pc, #28]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028f2:	4a05      	ldr	r2, [pc, #20]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	40007000 	.word	0x40007000
 800290c:	20000008 	.word	0x20000008
 8002910:	431bde83 	.word	0x431bde83

08002914 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800291e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002922:	6093      	str	r3, [r2, #8]
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40007000 	.word	0x40007000

08002934 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e306      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d075      	beq.n	8002a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002952:	4b97      	ldr	r3, [pc, #604]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800295c:	4b94      	ldr	r3, [pc, #592]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	2b0c      	cmp	r3, #12
 800296a:	d102      	bne.n	8002972 <HAL_RCC_OscConfig+0x3e>
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d002      	beq.n	8002978 <HAL_RCC_OscConfig+0x44>
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d10b      	bne.n	8002990 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002978:	4b8d      	ldr	r3, [pc, #564]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d05b      	beq.n	8002a3c <HAL_RCC_OscConfig+0x108>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d157      	bne.n	8002a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e2e1      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002998:	d106      	bne.n	80029a8 <HAL_RCC_OscConfig+0x74>
 800299a:	4b85      	ldr	r3, [pc, #532]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a84      	ldr	r2, [pc, #528]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e01d      	b.n	80029e4 <HAL_RCC_OscConfig+0xb0>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x98>
 80029b2:	4b7f      	ldr	r3, [pc, #508]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a7e      	ldr	r2, [pc, #504]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 80029b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	4b7c      	ldr	r3, [pc, #496]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a7b      	ldr	r2, [pc, #492]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0xb0>
 80029cc:	4b78      	ldr	r3, [pc, #480]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a77      	ldr	r2, [pc, #476]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 80029d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b75      	ldr	r3, [pc, #468]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a74      	ldr	r2, [pc, #464]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 80029de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe f9f6 	bl	8000ddc <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f4:	f7fe f9f2 	bl	8000ddc <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e2a6      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a06:	4b6a      	ldr	r3, [pc, #424]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0xc0>
 8002a12:	e014      	b.n	8002a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe f9e2 	bl	8000ddc <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe f9de 	bl	8000ddc <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e292      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a2e:	4b60      	ldr	r3, [pc, #384]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0xe8>
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d075      	beq.n	8002b36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a4a:	4b59      	ldr	r3, [pc, #356]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a54:	4b56      	ldr	r3, [pc, #344]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	2b0c      	cmp	r3, #12
 8002a62:	d102      	bne.n	8002a6a <HAL_RCC_OscConfig+0x136>
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d002      	beq.n	8002a70 <HAL_RCC_OscConfig+0x13c>
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d11f      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a70:	4b4f      	ldr	r3, [pc, #316]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_OscConfig+0x154>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e265      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a88:	4b49      	ldr	r3, [pc, #292]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	061b      	lsls	r3, r3, #24
 8002a96:	4946      	ldr	r1, [pc, #280]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a9c:	4b45      	ldr	r3, [pc, #276]	; (8002bb4 <HAL_RCC_OscConfig+0x280>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe f94f 	bl	8000d44 <HAL_InitTick>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d043      	beq.n	8002b34 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e251      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d023      	beq.n	8002b00 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab8:	4b3d      	ldr	r3, [pc, #244]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a3c      	ldr	r2, [pc, #240]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe f98a 	bl	8000ddc <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002acc:	f7fe f986 	bl	8000ddc <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e23a      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ade:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aea:	4b31      	ldr	r3, [pc, #196]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	061b      	lsls	r3, r3, #24
 8002af8:	492d      	ldr	r1, [pc, #180]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]
 8002afe:	e01a      	b.n	8002b36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b00:	4b2b      	ldr	r3, [pc, #172]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a2a      	ldr	r2, [pc, #168]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002b06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe f966 	bl	8000ddc <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b14:	f7fe f962 	bl	8000ddc <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e216      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b26:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x1e0>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d041      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d01c      	beq.n	8002b84 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b4a:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b50:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5a:	f7fe f93f 	bl	8000ddc <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b62:	f7fe f93b 	bl	8000ddc <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e1ef      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0ef      	beq.n	8002b62 <HAL_RCC_OscConfig+0x22e>
 8002b82:	e020      	b.n	8002bc6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b84:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8a:	4a09      	ldr	r2, [pc, #36]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b94:	f7fe f922 	bl	8000ddc <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b9a:	e00d      	b.n	8002bb8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9c:	f7fe f91e 	bl	8000ddc <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d906      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e1d2      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bb8:	4b8c      	ldr	r3, [pc, #560]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1ea      	bne.n	8002b9c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80a6 	beq.w	8002d20 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bd8:	4b84      	ldr	r3, [pc, #528]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_OscConfig+0x2b4>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <HAL_RCC_OscConfig+0x2b6>
 8002be8:	2300      	movs	r3, #0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00d      	beq.n	8002c0a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bee:	4b7f      	ldr	r3, [pc, #508]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	4a7e      	ldr	r2, [pc, #504]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8002bfa:	4b7c      	ldr	r3, [pc, #496]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c06:	2301      	movs	r3, #1
 8002c08:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c0a:	4b79      	ldr	r3, [pc, #484]	; (8002df0 <HAL_RCC_OscConfig+0x4bc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d118      	bne.n	8002c48 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c16:	4b76      	ldr	r3, [pc, #472]	; (8002df0 <HAL_RCC_OscConfig+0x4bc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a75      	ldr	r2, [pc, #468]	; (8002df0 <HAL_RCC_OscConfig+0x4bc>)
 8002c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c22:	f7fe f8db 	bl	8000ddc <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2a:	f7fe f8d7 	bl	8000ddc <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e18b      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c3c:	4b6c      	ldr	r3, [pc, #432]	; (8002df0 <HAL_RCC_OscConfig+0x4bc>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d108      	bne.n	8002c62 <HAL_RCC_OscConfig+0x32e>
 8002c50:	4b66      	ldr	r3, [pc, #408]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c56:	4a65      	ldr	r2, [pc, #404]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c60:	e024      	b.n	8002cac <HAL_RCC_OscConfig+0x378>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b05      	cmp	r3, #5
 8002c68:	d110      	bne.n	8002c8c <HAL_RCC_OscConfig+0x358>
 8002c6a:	4b60      	ldr	r3, [pc, #384]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	4a5e      	ldr	r2, [pc, #376]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002c72:	f043 0304 	orr.w	r3, r3, #4
 8002c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c7a:	4b5c      	ldr	r3, [pc, #368]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	4a5a      	ldr	r2, [pc, #360]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c8a:	e00f      	b.n	8002cac <HAL_RCC_OscConfig+0x378>
 8002c8c:	4b57      	ldr	r3, [pc, #348]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	4a56      	ldr	r2, [pc, #344]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c9c:	4b53      	ldr	r3, [pc, #332]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca2:	4a52      	ldr	r2, [pc, #328]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002ca4:	f023 0304 	bic.w	r3, r3, #4
 8002ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d016      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb4:	f7fe f892 	bl	8000ddc <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbc:	f7fe f88e 	bl	8000ddc <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e140      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd2:	4b46      	ldr	r3, [pc, #280]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0ed      	beq.n	8002cbc <HAL_RCC_OscConfig+0x388>
 8002ce0:	e015      	b.n	8002d0e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7fe f87b 	bl	8000ddc <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fe f877 	bl	8000ddc <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e129      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d00:	4b3a      	ldr	r3, [pc, #232]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1ed      	bne.n	8002cea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d0e:	7ffb      	ldrb	r3, [r7, #31]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d105      	bne.n	8002d20 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d14:	4b35      	ldr	r3, [pc, #212]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	4a34      	ldr	r2, [pc, #208]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d03c      	beq.n	8002da6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01c      	beq.n	8002d6e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d34:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d3a:	4a2c      	ldr	r2, [pc, #176]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d44:	f7fe f84a 	bl	8000ddc <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d4c:	f7fe f846 	bl	8000ddc <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e0fa      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d5e:	4b23      	ldr	r3, [pc, #140]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0ef      	beq.n	8002d4c <HAL_RCC_OscConfig+0x418>
 8002d6c:	e01b      	b.n	8002da6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d6e:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d74:	4a1d      	ldr	r2, [pc, #116]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002d76:	f023 0301 	bic.w	r3, r3, #1
 8002d7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7e:	f7fe f82d 	bl	8000ddc <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d86:	f7fe f829 	bl	8000ddc <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e0dd      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d98:	4b14      	ldr	r3, [pc, #80]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002d9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1ef      	bne.n	8002d86 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80d1 	beq.w	8002f52 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002db0:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b0c      	cmp	r3, #12
 8002dba:	f000 808b 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d15e      	bne.n	8002e84 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a08      	ldr	r2, [pc, #32]	; (8002dec <HAL_RCC_OscConfig+0x4b8>)
 8002dcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd2:	f7fe f803 	bl	8000ddc <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd8:	e00c      	b.n	8002df4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dda:	f7fd ffff 	bl	8000ddc <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d905      	bls.n	8002df4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e0b3      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_RCC_OscConfig+0x628>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1ec      	bne.n	8002dda <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e00:	4b56      	ldr	r3, [pc, #344]	; (8002f5c <HAL_RCC_OscConfig+0x628>)
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	4b56      	ldr	r3, [pc, #344]	; (8002f60 <HAL_RCC_OscConfig+0x62c>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6a11      	ldr	r1, [r2, #32]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e10:	3a01      	subs	r2, #1
 8002e12:	0112      	lsls	r2, r2, #4
 8002e14:	4311      	orrs	r1, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e1a:	0212      	lsls	r2, r2, #8
 8002e1c:	4311      	orrs	r1, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e22:	0852      	lsrs	r2, r2, #1
 8002e24:	3a01      	subs	r2, #1
 8002e26:	0552      	lsls	r2, r2, #21
 8002e28:	4311      	orrs	r1, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e2e:	0852      	lsrs	r2, r2, #1
 8002e30:	3a01      	subs	r2, #1
 8002e32:	0652      	lsls	r2, r2, #25
 8002e34:	4311      	orrs	r1, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e3a:	06d2      	lsls	r2, r2, #27
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	4947      	ldr	r1, [pc, #284]	; (8002f5c <HAL_RCC_OscConfig+0x628>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e44:	4b45      	ldr	r3, [pc, #276]	; (8002f5c <HAL_RCC_OscConfig+0x628>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a44      	ldr	r2, [pc, #272]	; (8002f5c <HAL_RCC_OscConfig+0x628>)
 8002e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e4e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e50:	4b42      	ldr	r3, [pc, #264]	; (8002f5c <HAL_RCC_OscConfig+0x628>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4a41      	ldr	r2, [pc, #260]	; (8002f5c <HAL_RCC_OscConfig+0x628>)
 8002e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fd ffbe 	bl	8000ddc <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e64:	f7fd ffba 	bl	8000ddc <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e06e      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e76:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <HAL_RCC_OscConfig+0x628>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0x530>
 8002e82:	e066      	b.n	8002f52 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e84:	4b35      	ldr	r3, [pc, #212]	; (8002f5c <HAL_RCC_OscConfig+0x628>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a34      	ldr	r2, [pc, #208]	; (8002f5c <HAL_RCC_OscConfig+0x628>)
 8002e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e8e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e90:	4b32      	ldr	r3, [pc, #200]	; (8002f5c <HAL_RCC_OscConfig+0x628>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4a31      	ldr	r2, [pc, #196]	; (8002f5c <HAL_RCC_OscConfig+0x628>)
 8002e96:	f023 0303 	bic.w	r3, r3, #3
 8002e9a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002e9c:	4b2f      	ldr	r3, [pc, #188]	; (8002f5c <HAL_RCC_OscConfig+0x628>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a2e      	ldr	r2, [pc, #184]	; (8002f5c <HAL_RCC_OscConfig+0x628>)
 8002ea2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eaa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fd ff96 	bl	8000ddc <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fd ff92 	bl	8000ddc <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e046      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ec6:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <HAL_RCC_OscConfig+0x628>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x580>
 8002ed2:	e03e      	b.n	8002f52 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e039      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ee0:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <HAL_RCC_OscConfig+0x628>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f003 0203 	and.w	r2, r3, #3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d12c      	bne.n	8002f4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	3b01      	subs	r3, #1
 8002f00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d123      	bne.n	8002f4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d11b      	bne.n	8002f4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d113      	bne.n	8002f4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	085b      	lsrs	r3, r3, #1
 8002f32:	3b01      	subs	r3, #1
 8002f34:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d109      	bne.n	8002f4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f44:	085b      	lsrs	r3, r3, #1
 8002f46:	3b01      	subs	r3, #1
 8002f48:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d001      	beq.n	8002f52 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	019f800c 	.word	0x019f800c

08002f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e11e      	b.n	80031ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b91      	ldr	r3, [pc, #580]	; (80031c4 <HAL_RCC_ClockConfig+0x260>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d910      	bls.n	8002fac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b8e      	ldr	r3, [pc, #568]	; (80031c4 <HAL_RCC_ClockConfig+0x260>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 020f 	bic.w	r2, r3, #15
 8002f92:	498c      	ldr	r1, [pc, #560]	; (80031c4 <HAL_RCC_ClockConfig+0x260>)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b8a      	ldr	r3, [pc, #552]	; (80031c4 <HAL_RCC_ClockConfig+0x260>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e106      	b.n	80031ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d073      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d129      	bne.n	8003014 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc0:	4b81      	ldr	r3, [pc, #516]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0f4      	b.n	80031ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002fd0:	f000 f99e 	bl	8003310 <RCC_GetSysClockFreqFromPLLSource>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4a7c      	ldr	r2, [pc, #496]	; (80031cc <HAL_RCC_ClockConfig+0x268>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d93f      	bls.n	800305e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fde:	4b7a      	ldr	r3, [pc, #488]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d033      	beq.n	800305e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d12f      	bne.n	800305e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ffe:	4b72      	ldr	r3, [pc, #456]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003006:	4a70      	ldr	r2, [pc, #448]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8003008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	e024      	b.n	800305e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d107      	bne.n	800302c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800301c:	4b6a      	ldr	r3, [pc, #424]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0c6      	b.n	80031ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800302c:	4b66      	ldr	r3, [pc, #408]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0be      	b.n	80031ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800303c:	f000 f8ce 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 8003040:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4a61      	ldr	r2, [pc, #388]	; (80031cc <HAL_RCC_ClockConfig+0x268>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d909      	bls.n	800305e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800304a:	4b5f      	ldr	r3, [pc, #380]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003052:	4a5d      	ldr	r2, [pc, #372]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8003054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003058:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800305e:	4b5a      	ldr	r3, [pc, #360]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f023 0203 	bic.w	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4957      	ldr	r1, [pc, #348]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 800306c:	4313      	orrs	r3, r2
 800306e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003070:	f7fd feb4 	bl	8000ddc <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	e00a      	b.n	800308e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003078:	f7fd feb0 	bl	8000ddc <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	; 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e095      	b.n	80031ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	4b4e      	ldr	r3, [pc, #312]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 020c 	and.w	r2, r3, #12
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	429a      	cmp	r2, r3
 800309e:	d1eb      	bne.n	8003078 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d023      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b8:	4b43      	ldr	r3, [pc, #268]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a42      	ldr	r2, [pc, #264]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 80030be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80030d0:	4b3d      	ldr	r3, [pc, #244]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030d8:	4a3b      	ldr	r2, [pc, #236]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 80030da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e0:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4936      	ldr	r1, [pc, #216]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
 80030f2:	e008      	b.n	8003106 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b80      	cmp	r3, #128	; 0x80
 80030f8:	d105      	bne.n	8003106 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030fa:	4b33      	ldr	r3, [pc, #204]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	4a32      	ldr	r2, [pc, #200]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8003100:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003104:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003106:	4b2f      	ldr	r3, [pc, #188]	; (80031c4 <HAL_RCC_ClockConfig+0x260>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d21d      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003114:	4b2b      	ldr	r3, [pc, #172]	; (80031c4 <HAL_RCC_ClockConfig+0x260>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 020f 	bic.w	r2, r3, #15
 800311c:	4929      	ldr	r1, [pc, #164]	; (80031c4 <HAL_RCC_ClockConfig+0x260>)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	4313      	orrs	r3, r2
 8003122:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003124:	f7fd fe5a 	bl	8000ddc <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	e00a      	b.n	8003142 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312c:	f7fd fe56 	bl	8000ddc <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e03b      	b.n	80031ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003142:	4b20      	ldr	r3, [pc, #128]	; (80031c4 <HAL_RCC_ClockConfig+0x260>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d1ed      	bne.n	800312c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800315c:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4917      	ldr	r1, [pc, #92]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800317a:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	490f      	ldr	r1, [pc, #60]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800318e:	f000 f825 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 8003192:	4602      	mov	r2, r0
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <HAL_RCC_ClockConfig+0x264>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	490c      	ldr	r1, [pc, #48]	; (80031d0 <HAL_RCC_ClockConfig+0x26c>)
 80031a0:	5ccb      	ldrb	r3, [r1, r3]
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	fa22 f303 	lsr.w	r3, r2, r3
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <HAL_RCC_ClockConfig+0x270>)
 80031ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_RCC_ClockConfig+0x274>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd fdc6 	bl	8000d44 <HAL_InitTick>
 80031b8:	4603      	mov	r3, r0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40022000 	.word	0x40022000
 80031c8:	40021000 	.word	0x40021000
 80031cc:	04c4b400 	.word	0x04c4b400
 80031d0:	080044b0 	.word	0x080044b0
 80031d4:	20000008 	.word	0x20000008
 80031d8:	2000000c 	.word	0x2000000c

080031dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031e2:	4b2c      	ldr	r3, [pc, #176]	; (8003294 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d102      	bne.n	80031f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031ee:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	e047      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031f4:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d102      	bne.n	8003206 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003200:	4b26      	ldr	r3, [pc, #152]	; (800329c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	e03e      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003206:	4b23      	ldr	r3, [pc, #140]	; (8003294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b0c      	cmp	r3, #12
 8003210:	d136      	bne.n	8003280 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800321c:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <HAL_RCC_GetSysClockFreq+0xb8>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	3301      	adds	r3, #1
 8003228:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d10c      	bne.n	800324a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003230:	4a1a      	ldr	r2, [pc, #104]	; (800329c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	4a16      	ldr	r2, [pc, #88]	; (8003294 <HAL_RCC_GetSysClockFreq+0xb8>)
 800323a:	68d2      	ldr	r2, [r2, #12]
 800323c:	0a12      	lsrs	r2, r2, #8
 800323e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003242:	fb02 f303 	mul.w	r3, r2, r3
 8003246:	617b      	str	r3, [r7, #20]
      break;
 8003248:	e00c      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800324a:	4a13      	ldr	r2, [pc, #76]	; (8003298 <HAL_RCC_GetSysClockFreq+0xbc>)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	4a10      	ldr	r2, [pc, #64]	; (8003294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003254:	68d2      	ldr	r2, [r2, #12]
 8003256:	0a12      	lsrs	r2, r2, #8
 8003258:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800325c:	fb02 f303 	mul.w	r3, r2, r3
 8003260:	617b      	str	r3, [r7, #20]
      break;
 8003262:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003264:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	0e5b      	lsrs	r3, r3, #25
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	3301      	adds	r3, #1
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	e001      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003284:	693b      	ldr	r3, [r7, #16]
}
 8003286:	4618      	mov	r0, r3
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000
 8003298:	00f42400 	.word	0x00f42400
 800329c:	016e3600 	.word	0x016e3600

080032a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032a6:	681b      	ldr	r3, [r3, #0]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000008 	.word	0x20000008

080032b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032bc:	f7ff fff0 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	0a1b      	lsrs	r3, r3, #8
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	4904      	ldr	r1, [pc, #16]	; (80032e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032ce:	5ccb      	ldrb	r3, [r1, r3]
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000
 80032e0:	080044c0 	.word	0x080044c0

080032e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032e8:	f7ff ffda 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	0adb      	lsrs	r3, r3, #11
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	4904      	ldr	r1, [pc, #16]	; (800330c <HAL_RCC_GetPCLK2Freq+0x28>)
 80032fa:	5ccb      	ldrb	r3, [r1, r3]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003304:	4618      	mov	r0, r3
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40021000 	.word	0x40021000
 800330c:	080044c0 	.word	0x080044c0

08003310 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003316:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003320:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	3301      	adds	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b03      	cmp	r3, #3
 8003332:	d10c      	bne.n	800334e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003334:	4a17      	ldr	r2, [pc, #92]	; (8003394 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	4a14      	ldr	r2, [pc, #80]	; (8003390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800333e:	68d2      	ldr	r2, [r2, #12]
 8003340:	0a12      	lsrs	r2, r2, #8
 8003342:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003346:	fb02 f303 	mul.w	r3, r2, r3
 800334a:	617b      	str	r3, [r7, #20]
    break;
 800334c:	e00c      	b.n	8003368 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800334e:	4a12      	ldr	r2, [pc, #72]	; (8003398 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	fbb2 f3f3 	udiv	r3, r2, r3
 8003356:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003358:	68d2      	ldr	r2, [r2, #12]
 800335a:	0a12      	lsrs	r2, r2, #8
 800335c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003360:	fb02 f303 	mul.w	r3, r2, r3
 8003364:	617b      	str	r3, [r7, #20]
    break;
 8003366:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	0e5b      	lsrs	r3, r3, #25
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	3301      	adds	r3, #1
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003380:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003382:	687b      	ldr	r3, [r7, #4]
}
 8003384:	4618      	mov	r0, r3
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	40021000 	.word	0x40021000
 8003394:	016e3600 	.word	0x016e3600
 8003398:	00f42400 	.word	0x00f42400

0800339c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033a4:	2300      	movs	r3, #0
 80033a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033a8:	2300      	movs	r3, #0
 80033aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8098 	beq.w	80034ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ba:	2300      	movs	r3, #0
 80033bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033be:	4b43      	ldr	r3, [pc, #268]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10d      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ca:	4b40      	ldr	r3, [pc, #256]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	4a3f      	ldr	r2, [pc, #252]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d4:	6593      	str	r3, [r2, #88]	; 0x58
 80033d6:	4b3d      	ldr	r3, [pc, #244]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e2:	2301      	movs	r3, #1
 80033e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033e6:	4b3a      	ldr	r3, [pc, #232]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a39      	ldr	r2, [pc, #228]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033f2:	f7fd fcf3 	bl	8000ddc <HAL_GetTick>
 80033f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033f8:	e009      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fa:	f7fd fcef 	bl	8000ddc <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d902      	bls.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	74fb      	strb	r3, [r7, #19]
        break;
 800340c:	e005      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800340e:	4b30      	ldr	r3, [pc, #192]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0ef      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800341a:	7cfb      	ldrb	r3, [r7, #19]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d159      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003420:	4b2a      	ldr	r3, [pc, #168]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01e      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	429a      	cmp	r2, r3
 800343a:	d019      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800343c:	4b23      	ldr	r3, [pc, #140]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003446:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003448:	4b20      	ldr	r3, [pc, #128]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344e:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003458:	4b1c      	ldr	r3, [pc, #112]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	4a1b      	ldr	r2, [pc, #108]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003468:	4a18      	ldr	r2, [pc, #96]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d016      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347a:	f7fd fcaf 	bl	8000ddc <HAL_GetTick>
 800347e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003480:	e00b      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fd fcab 	bl	8000ddc <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d902      	bls.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	74fb      	strb	r3, [r7, #19]
            break;
 8003498:	e006      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800349a:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0ec      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10b      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034bc:	4903      	ldr	r1, [pc, #12]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034c4:	e008      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034c6:	7cfb      	ldrb	r3, [r7, #19]
 80034c8:	74bb      	strb	r3, [r7, #18]
 80034ca:	e005      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034d8:	7c7b      	ldrb	r3, [r7, #17]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d105      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034de:	4ba7      	ldr	r3, [pc, #668]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	4aa6      	ldr	r2, [pc, #664]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034f6:	4ba1      	ldr	r3, [pc, #644]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fc:	f023 0203 	bic.w	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	499d      	ldr	r1, [pc, #628]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003518:	4b98      	ldr	r3, [pc, #608]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	f023 020c 	bic.w	r2, r3, #12
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	4995      	ldr	r1, [pc, #596]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800353a:	4b90      	ldr	r3, [pc, #576]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003540:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	498c      	ldr	r1, [pc, #560]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800355c:	4b87      	ldr	r3, [pc, #540]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	4984      	ldr	r1, [pc, #528]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800357e:	4b7f      	ldr	r3, [pc, #508]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	497b      	ldr	r1, [pc, #492]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035a0:	4b76      	ldr	r3, [pc, #472]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	4973      	ldr	r1, [pc, #460]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035c2:	4b6e      	ldr	r3, [pc, #440]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	496a      	ldr	r1, [pc, #424]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035e4:	4b65      	ldr	r3, [pc, #404]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	4962      	ldr	r1, [pc, #392]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003606:	4b5d      	ldr	r3, [pc, #372]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	4959      	ldr	r1, [pc, #356]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003628:	4b54      	ldr	r3, [pc, #336]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800362a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800362e:	f023 0203 	bic.w	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	4951      	ldr	r1, [pc, #324]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800364a:	4b4c      	ldr	r3, [pc, #304]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003650:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	4948      	ldr	r1, [pc, #288]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003668:	2b00      	cmp	r3, #0
 800366a:	d015      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800366c:	4b43      	ldr	r3, [pc, #268]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	4940      	ldr	r1, [pc, #256]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800368a:	d105      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800368c:	4b3b      	ldr	r3, [pc, #236]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4a3a      	ldr	r2, [pc, #232]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003696:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d015      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036a4:	4b35      	ldr	r3, [pc, #212]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b2:	4932      	ldr	r1, [pc, #200]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c2:	d105      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c4:	4b2d      	ldr	r3, [pc, #180]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4a2c      	ldr	r2, [pc, #176]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d015      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036dc:	4b27      	ldr	r3, [pc, #156]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	4924      	ldr	r1, [pc, #144]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036fa:	d105      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036fc:	4b1f      	ldr	r3, [pc, #124]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a1e      	ldr	r2, [pc, #120]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003706:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d015      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003714:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	4916      	ldr	r1, [pc, #88]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003732:	d105      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003734:	4b11      	ldr	r3, [pc, #68]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a10      	ldr	r2, [pc, #64]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800373a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800373e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d019      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4908      	ldr	r1, [pc, #32]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800376a:	d109      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4a02      	ldr	r2, [pc, #8]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003776:	60d3      	str	r3, [r2, #12]
 8003778:	e002      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800377a:	bf00      	nop
 800377c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d015      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800378c:	4b29      	ldr	r3, [pc, #164]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003792:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	4926      	ldr	r1, [pc, #152]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037aa:	d105      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037ac:	4b21      	ldr	r3, [pc, #132]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4a20      	ldr	r2, [pc, #128]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d015      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80037c4:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d2:	4918      	ldr	r1, [pc, #96]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e2:	d105      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037e4:	4b13      	ldr	r3, [pc, #76]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4a12      	ldr	r2, [pc, #72]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d015      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037fc:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003802:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380a:	490a      	ldr	r1, [pc, #40]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003816:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800381a:	d105      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003826:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003828:	7cbb      	ldrb	r3, [r7, #18]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40021000 	.word	0x40021000

08003838 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e042      	b.n	80038d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003850:	2b00      	cmp	r3, #0
 8003852:	d106      	bne.n	8003862 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7fd f993 	bl	8000b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2224      	movs	r2, #36	; 0x24
 8003866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f82c 	bl	80038d8 <UART_SetConfig>
 8003880:	4603      	mov	r3, r0
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e022      	b.n	80038d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fb1c 	bl	8003ed0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fba3 	bl	8004014 <UART_CheckIdleState>
 80038ce:	4603      	mov	r3, r0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038dc:	b08c      	sub	sp, #48	; 0x30
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	431a      	orrs	r2, r3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4baa      	ldr	r3, [pc, #680]	; (8003bb0 <UART_SetConfig+0x2d8>)
 8003908:	4013      	ands	r3, r2
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	6812      	ldr	r2, [r2, #0]
 800390e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003910:	430b      	orrs	r3, r1
 8003912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a9f      	ldr	r2, [pc, #636]	; (8003bb4 <UART_SetConfig+0x2dc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d004      	beq.n	8003944 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003940:	4313      	orrs	r3, r2
 8003942:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800394e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003958:	430b      	orrs	r3, r1
 800395a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	f023 010f 	bic.w	r1, r3, #15
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a90      	ldr	r2, [pc, #576]	; (8003bb8 <UART_SetConfig+0x2e0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d125      	bne.n	80039c8 <UART_SetConfig+0xf0>
 800397c:	4b8f      	ldr	r3, [pc, #572]	; (8003bbc <UART_SetConfig+0x2e4>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	2b03      	cmp	r3, #3
 8003988:	d81a      	bhi.n	80039c0 <UART_SetConfig+0xe8>
 800398a:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <UART_SetConfig+0xb8>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	080039a1 	.word	0x080039a1
 8003994:	080039b1 	.word	0x080039b1
 8003998:	080039a9 	.word	0x080039a9
 800399c:	080039b9 	.word	0x080039b9
 80039a0:	2301      	movs	r3, #1
 80039a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039a6:	e116      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 80039a8:	2302      	movs	r3, #2
 80039aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ae:	e112      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 80039b0:	2304      	movs	r3, #4
 80039b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b6:	e10e      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 80039b8:	2308      	movs	r3, #8
 80039ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039be:	e10a      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 80039c0:	2310      	movs	r3, #16
 80039c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c6:	e106      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a7c      	ldr	r2, [pc, #496]	; (8003bc0 <UART_SetConfig+0x2e8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d138      	bne.n	8003a44 <UART_SetConfig+0x16c>
 80039d2:	4b7a      	ldr	r3, [pc, #488]	; (8003bbc <UART_SetConfig+0x2e4>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d8:	f003 030c 	and.w	r3, r3, #12
 80039dc:	2b0c      	cmp	r3, #12
 80039de:	d82d      	bhi.n	8003a3c <UART_SetConfig+0x164>
 80039e0:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <UART_SetConfig+0x110>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	08003a1d 	.word	0x08003a1d
 80039ec:	08003a3d 	.word	0x08003a3d
 80039f0:	08003a3d 	.word	0x08003a3d
 80039f4:	08003a3d 	.word	0x08003a3d
 80039f8:	08003a2d 	.word	0x08003a2d
 80039fc:	08003a3d 	.word	0x08003a3d
 8003a00:	08003a3d 	.word	0x08003a3d
 8003a04:	08003a3d 	.word	0x08003a3d
 8003a08:	08003a25 	.word	0x08003a25
 8003a0c:	08003a3d 	.word	0x08003a3d
 8003a10:	08003a3d 	.word	0x08003a3d
 8003a14:	08003a3d 	.word	0x08003a3d
 8003a18:	08003a35 	.word	0x08003a35
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a22:	e0d8      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003a24:	2302      	movs	r3, #2
 8003a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a2a:	e0d4      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a32:	e0d0      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003a34:	2308      	movs	r3, #8
 8003a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a3a:	e0cc      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a42:	e0c8      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a5e      	ldr	r2, [pc, #376]	; (8003bc4 <UART_SetConfig+0x2ec>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d125      	bne.n	8003a9a <UART_SetConfig+0x1c2>
 8003a4e:	4b5b      	ldr	r3, [pc, #364]	; (8003bbc <UART_SetConfig+0x2e4>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a58:	2b30      	cmp	r3, #48	; 0x30
 8003a5a:	d016      	beq.n	8003a8a <UART_SetConfig+0x1b2>
 8003a5c:	2b30      	cmp	r3, #48	; 0x30
 8003a5e:	d818      	bhi.n	8003a92 <UART_SetConfig+0x1ba>
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d00a      	beq.n	8003a7a <UART_SetConfig+0x1a2>
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d814      	bhi.n	8003a92 <UART_SetConfig+0x1ba>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <UART_SetConfig+0x19a>
 8003a6c:	2b10      	cmp	r3, #16
 8003a6e:	d008      	beq.n	8003a82 <UART_SetConfig+0x1aa>
 8003a70:	e00f      	b.n	8003a92 <UART_SetConfig+0x1ba>
 8003a72:	2300      	movs	r3, #0
 8003a74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a78:	e0ad      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a80:	e0a9      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003a82:	2304      	movs	r3, #4
 8003a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a88:	e0a5      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003a8a:	2308      	movs	r3, #8
 8003a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a90:	e0a1      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003a92:	2310      	movs	r3, #16
 8003a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a98:	e09d      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a4a      	ldr	r2, [pc, #296]	; (8003bc8 <UART_SetConfig+0x2f0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d125      	bne.n	8003af0 <UART_SetConfig+0x218>
 8003aa4:	4b45      	ldr	r3, [pc, #276]	; (8003bbc <UART_SetConfig+0x2e4>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003aae:	2bc0      	cmp	r3, #192	; 0xc0
 8003ab0:	d016      	beq.n	8003ae0 <UART_SetConfig+0x208>
 8003ab2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ab4:	d818      	bhi.n	8003ae8 <UART_SetConfig+0x210>
 8003ab6:	2b80      	cmp	r3, #128	; 0x80
 8003ab8:	d00a      	beq.n	8003ad0 <UART_SetConfig+0x1f8>
 8003aba:	2b80      	cmp	r3, #128	; 0x80
 8003abc:	d814      	bhi.n	8003ae8 <UART_SetConfig+0x210>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <UART_SetConfig+0x1f0>
 8003ac2:	2b40      	cmp	r3, #64	; 0x40
 8003ac4:	d008      	beq.n	8003ad8 <UART_SetConfig+0x200>
 8003ac6:	e00f      	b.n	8003ae8 <UART_SetConfig+0x210>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ace:	e082      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ad6:	e07e      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003ad8:	2304      	movs	r3, #4
 8003ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ade:	e07a      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003ae0:	2308      	movs	r3, #8
 8003ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ae6:	e076      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003ae8:	2310      	movs	r3, #16
 8003aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aee:	e072      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a35      	ldr	r2, [pc, #212]	; (8003bcc <UART_SetConfig+0x2f4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d12a      	bne.n	8003b50 <UART_SetConfig+0x278>
 8003afa:	4b30      	ldr	r3, [pc, #192]	; (8003bbc <UART_SetConfig+0x2e4>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b08:	d01a      	beq.n	8003b40 <UART_SetConfig+0x268>
 8003b0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b0e:	d81b      	bhi.n	8003b48 <UART_SetConfig+0x270>
 8003b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b14:	d00c      	beq.n	8003b30 <UART_SetConfig+0x258>
 8003b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b1a:	d815      	bhi.n	8003b48 <UART_SetConfig+0x270>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <UART_SetConfig+0x250>
 8003b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b24:	d008      	beq.n	8003b38 <UART_SetConfig+0x260>
 8003b26:	e00f      	b.n	8003b48 <UART_SetConfig+0x270>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b2e:	e052      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003b30:	2302      	movs	r3, #2
 8003b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b36:	e04e      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b3e:	e04a      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003b40:	2308      	movs	r3, #8
 8003b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b46:	e046      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003b48:	2310      	movs	r3, #16
 8003b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b4e:	e042      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <UART_SetConfig+0x2dc>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d13a      	bne.n	8003bd0 <UART_SetConfig+0x2f8>
 8003b5a:	4b18      	ldr	r3, [pc, #96]	; (8003bbc <UART_SetConfig+0x2e4>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b68:	d01a      	beq.n	8003ba0 <UART_SetConfig+0x2c8>
 8003b6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b6e:	d81b      	bhi.n	8003ba8 <UART_SetConfig+0x2d0>
 8003b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b74:	d00c      	beq.n	8003b90 <UART_SetConfig+0x2b8>
 8003b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b7a:	d815      	bhi.n	8003ba8 <UART_SetConfig+0x2d0>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <UART_SetConfig+0x2b0>
 8003b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b84:	d008      	beq.n	8003b98 <UART_SetConfig+0x2c0>
 8003b86:	e00f      	b.n	8003ba8 <UART_SetConfig+0x2d0>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b8e:	e022      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003b90:	2302      	movs	r3, #2
 8003b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b96:	e01e      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b9e:	e01a      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ba6:	e016      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003ba8:	2310      	movs	r3, #16
 8003baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bae:	e012      	b.n	8003bd6 <UART_SetConfig+0x2fe>
 8003bb0:	cfff69f3 	.word	0xcfff69f3
 8003bb4:	40008000 	.word	0x40008000
 8003bb8:	40013800 	.word	0x40013800
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40004400 	.word	0x40004400
 8003bc4:	40004800 	.word	0x40004800
 8003bc8:	40004c00 	.word	0x40004c00
 8003bcc:	40005000 	.word	0x40005000
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4aae      	ldr	r2, [pc, #696]	; (8003e94 <UART_SetConfig+0x5bc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	f040 8097 	bne.w	8003d10 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003be2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d823      	bhi.n	8003c32 <UART_SetConfig+0x35a>
 8003bea:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <UART_SetConfig+0x318>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c15 	.word	0x08003c15
 8003bf4:	08003c33 	.word	0x08003c33
 8003bf8:	08003c1d 	.word	0x08003c1d
 8003bfc:	08003c33 	.word	0x08003c33
 8003c00:	08003c23 	.word	0x08003c23
 8003c04:	08003c33 	.word	0x08003c33
 8003c08:	08003c33 	.word	0x08003c33
 8003c0c:	08003c33 	.word	0x08003c33
 8003c10:	08003c2b 	.word	0x08003c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c14:	f7ff fb50 	bl	80032b8 <HAL_RCC_GetPCLK1Freq>
 8003c18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c1a:	e010      	b.n	8003c3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c1c:	4b9e      	ldr	r3, [pc, #632]	; (8003e98 <UART_SetConfig+0x5c0>)
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c20:	e00d      	b.n	8003c3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c22:	f7ff fadb 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 8003c26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c28:	e009      	b.n	8003c3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c30:	e005      	b.n	8003c3e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8130 	beq.w	8003ea6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	4a94      	ldr	r2, [pc, #592]	; (8003e9c <UART_SetConfig+0x5c4>)
 8003c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c50:	461a      	mov	r2, r3
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4413      	add	r3, r2
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d305      	bcc.n	8003c76 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d903      	bls.n	8003c7e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c7c:	e113      	b.n	8003ea6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	2200      	movs	r2, #0
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	60fa      	str	r2, [r7, #12]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	4a84      	ldr	r2, [pc, #528]	; (8003e9c <UART_SetConfig+0x5c4>)
 8003c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2200      	movs	r2, #0
 8003c94:	603b      	str	r3, [r7, #0]
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ca0:	f7fc faba 	bl	8000218 <__aeabi_uldivmod>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	020b      	lsls	r3, r1, #8
 8003cb6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003cba:	0202      	lsls	r2, r0, #8
 8003cbc:	6979      	ldr	r1, [r7, #20]
 8003cbe:	6849      	ldr	r1, [r1, #4]
 8003cc0:	0849      	lsrs	r1, r1, #1
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	4605      	mov	r5, r0
 8003cc8:	eb12 0804 	adds.w	r8, r2, r4
 8003ccc:	eb43 0905 	adc.w	r9, r3, r5
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	469a      	mov	sl, r3
 8003cd8:	4693      	mov	fp, r2
 8003cda:	4652      	mov	r2, sl
 8003cdc:	465b      	mov	r3, fp
 8003cde:	4640      	mov	r0, r8
 8003ce0:	4649      	mov	r1, r9
 8003ce2:	f7fc fa99 	bl	8000218 <__aeabi_uldivmod>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4613      	mov	r3, r2
 8003cec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cf4:	d308      	bcc.n	8003d08 <UART_SetConfig+0x430>
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cfc:	d204      	bcs.n	8003d08 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6a3a      	ldr	r2, [r7, #32]
 8003d04:	60da      	str	r2, [r3, #12]
 8003d06:	e0ce      	b.n	8003ea6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d0e:	e0ca      	b.n	8003ea6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d18:	d166      	bne.n	8003de8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003d1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d827      	bhi.n	8003d72 <UART_SetConfig+0x49a>
 8003d22:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <UART_SetConfig+0x450>)
 8003d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d28:	08003d4d 	.word	0x08003d4d
 8003d2c:	08003d55 	.word	0x08003d55
 8003d30:	08003d5d 	.word	0x08003d5d
 8003d34:	08003d73 	.word	0x08003d73
 8003d38:	08003d63 	.word	0x08003d63
 8003d3c:	08003d73 	.word	0x08003d73
 8003d40:	08003d73 	.word	0x08003d73
 8003d44:	08003d73 	.word	0x08003d73
 8003d48:	08003d6b 	.word	0x08003d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d4c:	f7ff fab4 	bl	80032b8 <HAL_RCC_GetPCLK1Freq>
 8003d50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d52:	e014      	b.n	8003d7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d54:	f7ff fac6 	bl	80032e4 <HAL_RCC_GetPCLK2Freq>
 8003d58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d5a:	e010      	b.n	8003d7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d5c:	4b4e      	ldr	r3, [pc, #312]	; (8003e98 <UART_SetConfig+0x5c0>)
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d60:	e00d      	b.n	8003d7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d62:	f7ff fa3b 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 8003d66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d68:	e009      	b.n	8003d7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d70:	e005      	b.n	8003d7e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8090 	beq.w	8003ea6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	4a44      	ldr	r2, [pc, #272]	; (8003e9c <UART_SetConfig+0x5c4>)
 8003d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d90:	461a      	mov	r2, r3
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d98:	005a      	lsls	r2, r3, #1
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	441a      	add	r2, r3
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003daa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	2b0f      	cmp	r3, #15
 8003db0:	d916      	bls.n	8003de0 <UART_SetConfig+0x508>
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db8:	d212      	bcs.n	8003de0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	f023 030f 	bic.w	r3, r3, #15
 8003dc2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	8bfb      	ldrh	r3, [r7, #30]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	8bfa      	ldrh	r2, [r7, #30]
 8003ddc:	60da      	str	r2, [r3, #12]
 8003dde:	e062      	b.n	8003ea6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003de6:	e05e      	b.n	8003ea6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003de8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d828      	bhi.n	8003e42 <UART_SetConfig+0x56a>
 8003df0:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <UART_SetConfig+0x520>)
 8003df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df6:	bf00      	nop
 8003df8:	08003e1d 	.word	0x08003e1d
 8003dfc:	08003e25 	.word	0x08003e25
 8003e00:	08003e2d 	.word	0x08003e2d
 8003e04:	08003e43 	.word	0x08003e43
 8003e08:	08003e33 	.word	0x08003e33
 8003e0c:	08003e43 	.word	0x08003e43
 8003e10:	08003e43 	.word	0x08003e43
 8003e14:	08003e43 	.word	0x08003e43
 8003e18:	08003e3b 	.word	0x08003e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e1c:	f7ff fa4c 	bl	80032b8 <HAL_RCC_GetPCLK1Freq>
 8003e20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e22:	e014      	b.n	8003e4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e24:	f7ff fa5e 	bl	80032e4 <HAL_RCC_GetPCLK2Freq>
 8003e28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e2a:	e010      	b.n	8003e4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e2c:	4b1a      	ldr	r3, [pc, #104]	; (8003e98 <UART_SetConfig+0x5c0>)
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e30:	e00d      	b.n	8003e4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e32:	f7ff f9d3 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 8003e36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e38:	e009      	b.n	8003e4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e40:	e005      	b.n	8003e4e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e4c:	bf00      	nop
    }

    if (pclk != 0U)
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d028      	beq.n	8003ea6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	4a10      	ldr	r2, [pc, #64]	; (8003e9c <UART_SetConfig+0x5c4>)
 8003e5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	441a      	add	r2, r3
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	2b0f      	cmp	r3, #15
 8003e7c:	d910      	bls.n	8003ea0 <UART_SetConfig+0x5c8>
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e84:	d20c      	bcs.n	8003ea0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60da      	str	r2, [r3, #12]
 8003e90:	e009      	b.n	8003ea6 <UART_SetConfig+0x5ce>
 8003e92:	bf00      	nop
 8003e94:	40008000 	.word	0x40008000
 8003e98:	00f42400 	.word	0x00f42400
 8003e9c:	080044c8 	.word	0x080044c8
      }
      else
      {
        ret = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003ec2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3730      	adds	r7, #48	; 0x30
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01a      	beq.n	8003fe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fce:	d10a      	bne.n	8003fe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
  }
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af02      	add	r7, sp, #8
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004024:	f7fc feda 	bl	8000ddc <HAL_GetTick>
 8004028:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b08      	cmp	r3, #8
 8004036:	d10e      	bne.n	8004056 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f82f 	bl	80040aa <UART_WaitOnFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e025      	b.n	80040a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b04      	cmp	r3, #4
 8004062:	d10e      	bne.n	8004082 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f819 	bl	80040aa <UART_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e00f      	b.n	80040a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b09c      	sub	sp, #112	; 0x70
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	4613      	mov	r3, r2
 80040b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ba:	e0a9      	b.n	8004210 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c2:	f000 80a5 	beq.w	8004210 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c6:	f7fc fe89 	bl	8000ddc <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d302      	bcc.n	80040dc <UART_WaitOnFlagUntilTimeout+0x32>
 80040d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d140      	bne.n	800415e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040f0:	667b      	str	r3, [r7, #100]	; 0x64
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004100:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e6      	bne.n	80040dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3308      	adds	r3, #8
 8004114:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	663b      	str	r3, [r7, #96]	; 0x60
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3308      	adds	r3, #8
 800412c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800412e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004130:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800413c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e5      	bne.n	800410e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2220      	movs	r2, #32
 800414e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e069      	b.n	8004232 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d051      	beq.n	8004210 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800417a:	d149      	bne.n	8004210 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004184:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	e853 3f00 	ldrex	r3, [r3]
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800419a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a4:	637b      	str	r3, [r7, #52]	; 0x34
 80041a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041ac:	e841 2300 	strex	r3, r2, [r1]
 80041b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1e6      	bne.n	8004186 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3308      	adds	r3, #8
 80041be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	613b      	str	r3, [r7, #16]
   return(result);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f023 0301 	bic.w	r3, r3, #1
 80041ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3308      	adds	r3, #8
 80041d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041d8:	623a      	str	r2, [r7, #32]
 80041da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	69f9      	ldr	r1, [r7, #28]
 80041de:	6a3a      	ldr	r2, [r7, #32]
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e5      	bne.n	80041b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e010      	b.n	8004232 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	69da      	ldr	r2, [r3, #28]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4013      	ands	r3, r2
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	429a      	cmp	r2, r3
 800421e:	bf0c      	ite	eq
 8004220:	2301      	moveq	r3, #1
 8004222:	2300      	movne	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	461a      	mov	r2, r3
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	429a      	cmp	r2, r3
 800422c:	f43f af46 	beq.w	80040bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3770      	adds	r7, #112	; 0x70
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800423a:	b480      	push	{r7}
 800423c:	b085      	sub	sp, #20
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_UARTEx_DisableFifoMode+0x16>
 800424c:	2302      	movs	r3, #2
 800424e:	e027      	b.n	80042a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2224      	movs	r2, #36	; 0x24
 800425c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0201 	bic.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800427e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e02d      	b.n	8004320 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	; 0x24
 80042d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0201 	bic.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f84f 	bl	80043a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800433c:	2302      	movs	r3, #2
 800433e:	e02d      	b.n	800439c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2224      	movs	r2, #36	; 0x24
 800434c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0201 	bic.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f811 	bl	80043a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d108      	bne.n	80043c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80043c4:	e031      	b.n	800442a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80043c6:	2308      	movs	r3, #8
 80043c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80043ca:	2308      	movs	r3, #8
 80043cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	0e5b      	lsrs	r3, r3, #25
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	0f5b      	lsrs	r3, r3, #29
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043ee:	7bbb      	ldrb	r3, [r7, #14]
 80043f0:	7b3a      	ldrb	r2, [r7, #12]
 80043f2:	4911      	ldr	r1, [pc, #68]	; (8004438 <UARTEx_SetNbDataToProcess+0x94>)
 80043f4:	5c8a      	ldrb	r2, [r1, r2]
 80043f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80043fa:	7b3a      	ldrb	r2, [r7, #12]
 80043fc:	490f      	ldr	r1, [pc, #60]	; (800443c <UARTEx_SetNbDataToProcess+0x98>)
 80043fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004400:	fb93 f3f2 	sdiv	r3, r3, r2
 8004404:	b29a      	uxth	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	7b7a      	ldrb	r2, [r7, #13]
 8004410:	4909      	ldr	r1, [pc, #36]	; (8004438 <UARTEx_SetNbDataToProcess+0x94>)
 8004412:	5c8a      	ldrb	r2, [r1, r2]
 8004414:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004418:	7b7a      	ldrb	r2, [r7, #13]
 800441a:	4908      	ldr	r1, [pc, #32]	; (800443c <UARTEx_SetNbDataToProcess+0x98>)
 800441c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800441e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004422:	b29a      	uxth	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	080044e0 	.word	0x080044e0
 800443c:	080044e8 	.word	0x080044e8

08004440 <memset>:
 8004440:	4402      	add	r2, r0
 8004442:	4603      	mov	r3, r0
 8004444:	4293      	cmp	r3, r2
 8004446:	d100      	bne.n	800444a <memset+0xa>
 8004448:	4770      	bx	lr
 800444a:	f803 1b01 	strb.w	r1, [r3], #1
 800444e:	e7f9      	b.n	8004444 <memset+0x4>

08004450 <__libc_init_array>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	4d0d      	ldr	r5, [pc, #52]	; (8004488 <__libc_init_array+0x38>)
 8004454:	4c0d      	ldr	r4, [pc, #52]	; (800448c <__libc_init_array+0x3c>)
 8004456:	1b64      	subs	r4, r4, r5
 8004458:	10a4      	asrs	r4, r4, #2
 800445a:	2600      	movs	r6, #0
 800445c:	42a6      	cmp	r6, r4
 800445e:	d109      	bne.n	8004474 <__libc_init_array+0x24>
 8004460:	4d0b      	ldr	r5, [pc, #44]	; (8004490 <__libc_init_array+0x40>)
 8004462:	4c0c      	ldr	r4, [pc, #48]	; (8004494 <__libc_init_array+0x44>)
 8004464:	f000 f818 	bl	8004498 <_init>
 8004468:	1b64      	subs	r4, r4, r5
 800446a:	10a4      	asrs	r4, r4, #2
 800446c:	2600      	movs	r6, #0
 800446e:	42a6      	cmp	r6, r4
 8004470:	d105      	bne.n	800447e <__libc_init_array+0x2e>
 8004472:	bd70      	pop	{r4, r5, r6, pc}
 8004474:	f855 3b04 	ldr.w	r3, [r5], #4
 8004478:	4798      	blx	r3
 800447a:	3601      	adds	r6, #1
 800447c:	e7ee      	b.n	800445c <__libc_init_array+0xc>
 800447e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004482:	4798      	blx	r3
 8004484:	3601      	adds	r6, #1
 8004486:	e7f2      	b.n	800446e <__libc_init_array+0x1e>
 8004488:	080044f8 	.word	0x080044f8
 800448c:	080044f8 	.word	0x080044f8
 8004490:	080044f8 	.word	0x080044f8
 8004494:	080044fc 	.word	0x080044fc

08004498 <_init>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	bf00      	nop
 800449c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449e:	bc08      	pop	{r3}
 80044a0:	469e      	mov	lr, r3
 80044a2:	4770      	bx	lr

080044a4 <_fini>:
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	bf00      	nop
 80044a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044aa:	bc08      	pop	{r3}
 80044ac:	469e      	mov	lr, r3
 80044ae:	4770      	bx	lr
