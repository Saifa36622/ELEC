
T2_week4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004600  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080047d8  080047d8  000147d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004818  08004818  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004818  08004818  00014818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004820  08004820  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004820  08004820  00014820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004824  08004824  00014824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08004834  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08004834  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000115fd  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020c9  00000000  00000000  0003167c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00033748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c42  00000000  00000000  000346e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002567d  00000000  00000000  0003532a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012172  00000000  00000000  0005a9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7b96  00000000  00000000  0006cb19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042ac  00000000  00000000  001646b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0016895c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080047c0 	.word	0x080047c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080047c0 	.word	0x080047c0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb87 	bl	8000c2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f830 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f996 	bl	8000850 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f878 	bl	8000618 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000528:	f000 f91a 	bl	8000760 <MX_TIM3_Init>
  MX_TIM1_Init();
 800052c:	f000 f8be 	bl	80006ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000530:	480f      	ldr	r0, [pc, #60]	; (8000570 <main+0x5c>)
 8000532:	f001 ff41 	bl	80023b8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000536:	2100      	movs	r1, #0
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <main+0x5c>)
 800053a:	f002 f80f 	bl	800255c <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 800053e:	480d      	ldr	r0, [pc, #52]	; (8000574 <main+0x60>)
 8000540:	f001 ff3a 	bl	80023b8 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8000544:	2100      	movs	r1, #0
 8000546:	480b      	ldr	r0, [pc, #44]	; (8000574 <main+0x60>)
 8000548:	f002 f91a 	bl	8002780 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 800054c:	2104      	movs	r1, #4
 800054e:	4809      	ldr	r0, [pc, #36]	; (8000574 <main+0x60>)
 8000550:	f002 f916 	bl	8002780 <HAL_TIM_IC_Start>
//	  }
//	  else
//	  {
//	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);
//	  }
	  ServoTime = __HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_2);
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <main+0x60>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800055a:	b29a      	uxth	r2, r3
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <main+0x64>)
 800055e:	801a      	strh	r2, [r3, #0]
	  ServoPeriod=__HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1);
 8000560:	4b04      	ldr	r3, [pc, #16]	; (8000574 <main+0x60>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	b29a      	uxth	r2, r3
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <main+0x68>)
 800056a:	801a      	strh	r2, [r3, #0]
	  ServoTime = __HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_2);
 800056c:	e7f2      	b.n	8000554 <main+0x40>
 800056e:	bf00      	nop
 8000570:	20000108 	.word	0x20000108
 8000574:	200000bc 	.word	0x200000bc
 8000578:	20000154 	.word	0x20000154
 800057c:	20000156 	.word	0x20000156

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	2238      	movs	r2, #56	; 0x38
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f004 f8ea 	bl	8004768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 fe80 	bl	80012a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b2:	2340      	movs	r3, #64	; 0x40
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005be:	2304      	movs	r3, #4
 80005c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005c2:	2355      	movs	r3, #85	; 0x55
 80005c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 ff1a 	bl	8001410 <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005e2:	f000 f9a3 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ea:	2303      	movs	r3, #3
 80005ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2104      	movs	r1, #4
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fa18 	bl	8001a34 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800060a:	f000 f98f 	bl	800092c <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	; 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800061c:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 800061e:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <MX_LPUART1_UART_Init+0x90>)
 8000620:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000622:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000628:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000636:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 800064a:	2200      	movs	r2, #0
 800064c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 8000650:	2200      	movs	r2, #0
 8000652:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 8000656:	2200      	movs	r2, #0
 8000658:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800065a:	4812      	ldr	r0, [pc, #72]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 800065c:	f003 fa16 	bl	8003a8c <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000666:	f000 f961 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800066a:	2100      	movs	r1, #0
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 800066e:	f003 ffb1 	bl	80045d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000678:	f000 f958 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800067c:	2100      	movs	r1, #0
 800067e:	4809      	ldr	r0, [pc, #36]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 8000680:	f003 ffe6 	bl	8004650 <HAL_UARTEx_SetRxFifoThreshold>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800068a:	f000 f94f 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 8000690:	f003 ff67 	bl	8004562 <HAL_UARTEx_DisableFifoMode>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800069a:	f000 f947 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000028 	.word	0x20000028
 80006a8:	40008000 	.word	0x40008000

080006ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <MX_TIM1_Init+0xac>)
 80006ce:	4a23      	ldr	r2, [pc, #140]	; (800075c <MX_TIM1_Init+0xb0>)
 80006d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_TIM1_Init+0xac>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_TIM1_Init+0xac>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_TIM1_Init+0xac>)
 80006e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_TIM1_Init+0xac>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_TIM1_Init+0xac>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_TIM1_Init+0xac>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006f8:	4817      	ldr	r0, [pc, #92]	; (8000758 <MX_TIM1_Init+0xac>)
 80006fa:	f001 fe05 	bl	8002308 <HAL_TIM_Base_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000704:	f000 f912 	bl	800092c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000708:	2304      	movs	r3, #4
 800070a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800070c:	2350      	movs	r3, #80	; 0x50
 800070e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	4619      	mov	r1, r3
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <MX_TIM1_Init+0xac>)
 8000720:	f002 fb5c 	bl	8002ddc <HAL_TIM_SlaveConfigSynchro>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800072a:	f000 f8ff 	bl	800092c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <MX_TIM1_Init+0xac>)
 8000740:	f003 f90e 	bl	8003960 <HAL_TIMEx_MasterConfigSynchronization>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800074a:	f000 f8ef 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3720      	adds	r7, #32
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000bc 	.word	0x200000bc
 800075c:	40012c00 	.word	0x40012c00

08000760 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08e      	sub	sp, #56	; 0x38
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
 800078e:	615a      	str	r2, [r3, #20]
 8000790:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000792:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <MX_TIM3_Init+0xe8>)
 8000794:	4a2d      	ldr	r2, [pc, #180]	; (800084c <MX_TIM3_Init+0xec>)
 8000796:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8000798:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <MX_TIM3_Init+0xe8>)
 800079a:	22a9      	movs	r2, #169	; 0xa9
 800079c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <MX_TIM3_Init+0xe8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <MX_TIM3_Init+0xe8>)
 80007a6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80007aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b26      	ldr	r3, [pc, #152]	; (8000848 <MX_TIM3_Init+0xe8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_TIM3_Init+0xe8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007b8:	4823      	ldr	r0, [pc, #140]	; (8000848 <MX_TIM3_Init+0xe8>)
 80007ba:	f001 fda5 	bl	8002308 <HAL_TIM_Base_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80007c4:	f000 f8b2 	bl	800092c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d2:	4619      	mov	r1, r3
 80007d4:	481c      	ldr	r0, [pc, #112]	; (8000848 <MX_TIM3_Init+0xe8>)
 80007d6:	f002 f9eb 	bl	8002bb0 <HAL_TIM_ConfigClockSource>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80007e0:	f000 f8a4 	bl	800092c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007e4:	4818      	ldr	r0, [pc, #96]	; (8000848 <MX_TIM3_Init+0xe8>)
 80007e6:	f001 fe57 	bl	8002498 <HAL_TIM_PWM_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80007f0:	f000 f89c 	bl	800092c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	4811      	ldr	r0, [pc, #68]	; (8000848 <MX_TIM3_Init+0xe8>)
 8000804:	f003 f8ac 	bl	8003960 <HAL_TIMEx_MasterConfigSynchronization>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800080e:	f000 f88d 	bl	800092c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000812:	2360      	movs	r3, #96	; 0x60
 8000814:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000816:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800081a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	4619      	mov	r1, r3
 800082a:	4807      	ldr	r0, [pc, #28]	; (8000848 <MX_TIM3_Init+0xe8>)
 800082c:	f002 f8ac 	bl	8002988 <HAL_TIM_PWM_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000836:	f000 f879 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <MX_TIM3_Init+0xe8>)
 800083c:	f000 f950 	bl	8000ae0 <HAL_TIM_MspPostInit>

}
 8000840:	bf00      	nop
 8000842:	3738      	adds	r7, #56	; 0x38
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000108 	.word	0x20000108
 800084c:	40000400 	.word	0x40000400

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b2f      	ldr	r3, [pc, #188]	; (8000924 <MX_GPIO_Init+0xd4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a2e      	ldr	r2, [pc, #184]	; (8000924 <MX_GPIO_Init+0xd4>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <MX_GPIO_Init+0xd4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800087e:	4b29      	ldr	r3, [pc, #164]	; (8000924 <MX_GPIO_Init+0xd4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a28      	ldr	r2, [pc, #160]	; (8000924 <MX_GPIO_Init+0xd4>)
 8000884:	f043 0320 	orr.w	r3, r3, #32
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <MX_GPIO_Init+0xd4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0320 	and.w	r3, r3, #32
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <MX_GPIO_Init+0xd4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a22      	ldr	r2, [pc, #136]	; (8000924 <MX_GPIO_Init+0xd4>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <MX_GPIO_Init+0xd4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_GPIO_Init+0xd4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a1c      	ldr	r2, [pc, #112]	; (8000924 <MX_GPIO_Init+0xd4>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_GPIO_Init+0xd4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2120      	movs	r1, #32
 80008ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ce:	f000 fcaf 	bl	8001230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	480f      	ldr	r0, [pc, #60]	; (8000928 <MX_GPIO_Init+0xd8>)
 80008ea:	f000 fb1f 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ee:	2320      	movs	r3, #32
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000908:	f000 fb10 	bl	8000f2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	2028      	movs	r0, #40	; 0x28
 8000912:	f000 fad6 	bl	8000ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000916:	2028      	movs	r0, #40	; 0x28
 8000918:	f000 faed 	bl	8000ef6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	; 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40021000 	.word	0x40021000
 8000928:	48000800 	.word	0x48000800

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	e7fe      	b.n	8000934 <Error_Handler+0x8>
	...

08000938 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <HAL_MspInit+0x44>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000942:	4a0e      	ldr	r2, [pc, #56]	; (800097c <HAL_MspInit+0x44>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6613      	str	r3, [r2, #96]	; 0x60
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <HAL_MspInit+0x44>)
 800094c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_MspInit+0x44>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_MspInit+0x44>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6593      	str	r3, [r2, #88]	; 0x58
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x44>)
 8000964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800096e:	f000 fd3f 	bl	80013f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000

08000980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b09e      	sub	sp, #120	; 0x78
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	2254      	movs	r2, #84	; 0x54
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f003 fee1 	bl	8004768 <memset>
  if(huart->Instance==LPUART1)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a1f      	ldr	r2, [pc, #124]	; (8000a28 <HAL_UART_MspInit+0xa8>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d136      	bne.n	8000a1e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009b0:	2320      	movs	r3, #32
 80009b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4618      	mov	r0, r3
 80009be:	f001 fa55 	bl	8001e6c <HAL_RCCEx_PeriphCLKConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009c8:	f7ff ffb0 	bl	800092c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <HAL_UART_MspInit+0xac>)
 80009ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009d0:	4a16      	ldr	r2, [pc, #88]	; (8000a2c <HAL_UART_MspInit+0xac>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <HAL_UART_MspInit+0xac>)
 80009da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_UART_MspInit+0xac>)
 80009e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e8:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <HAL_UART_MspInit+0xac>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_UART_MspInit+0xac>)
 80009f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80009fc:	230c      	movs	r3, #12
 80009fe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a0c:	230c      	movs	r3, #12
 8000a0e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a14:	4619      	mov	r1, r3
 8000a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1a:	f000 fa87 	bl	8000f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3778      	adds	r7, #120	; 0x78
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40008000 	.word	0x40008000
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a21      	ldr	r2, [pc, #132]	; (8000ad4 <HAL_TIM_Base_MspInit+0xa4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d12a      	bne.n	8000aa8 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <HAL_TIM_Base_MspInit+0xa8>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a56:	4a20      	ldr	r2, [pc, #128]	; (8000ad8 <HAL_TIM_Base_MspInit+0xa8>)
 8000a58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <HAL_TIM_Base_MspInit+0xa8>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <HAL_TIM_Base_MspInit+0xa8>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <HAL_TIM_Base_MspInit+0xa8>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <HAL_TIM_Base_MspInit+0xa8>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a94:	2306      	movs	r3, #6
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f000 fa43 	bl	8000f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000aa6:	e010      	b.n	8000aca <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM3)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <HAL_TIM_Base_MspInit+0xac>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d10b      	bne.n	8000aca <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_TIM_Base_MspInit+0xa8>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_TIM_Base_MspInit+0xa8>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6593      	str	r3, [r2, #88]	; 0x58
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_TIM_Base_MspInit+0xa8>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
}
 8000aca:	bf00      	nop
 8000acc:	3728      	adds	r7, #40	; 0x28
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40012c00 	.word	0x40012c00
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40000400 	.word	0x40000400

08000ae0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <HAL_TIM_MspPostInit+0x64>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d11b      	bne.n	8000b3a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_TIM_MspPostInit+0x68>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <HAL_TIM_MspPostInit+0x68>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_TIM_MspPostInit+0x68>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <HAL_TIM_MspPostInit+0x6c>)
 8000b36:	f000 f9f9 	bl	8000f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3720      	adds	r7, #32
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40000400 	.word	0x40000400
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	48000400 	.word	0x48000400

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 f898 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ba8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bac:	f000 fb58 	bl	8001260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <SystemInit+0x20>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <SystemInit+0x20>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bd8:	480d      	ldr	r0, [pc, #52]	; (8000c10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bdc:	f7ff ffea 	bl	8000bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be2:	490d      	ldr	r1, [pc, #52]	; (8000c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <LoopForever+0xe>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	; (8000c24 <LoopForever+0x16>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c06:	f003 fdb7 	bl	8004778 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c0a:	f7ff fc83 	bl	8000514 <main>

08000c0e <LoopForever>:

LoopForever:
    b LoopForever
 8000c0e:	e7fe      	b.n	8000c0e <LoopForever>
  ldr   r0, =_estack
 8000c10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c1c:	08004828 	.word	0x08004828
  ldr r2, =_sbss
 8000c20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c24:	2000015c 	.word	0x2000015c

08000c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC1_2_IRQHandler>

08000c2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f939 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 f80e 	bl	8000c5c <HAL_InitTick>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	71fb      	strb	r3, [r7, #7]
 8000c4a:	e001      	b.n	8000c50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c4c:	f7ff fe74 	bl	8000938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c50:	79fb      	ldrb	r3, [r7, #7]

}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_InitTick+0x68>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d022      	beq.n	8000cb6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_InitTick+0x6c>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <HAL_InitTick+0x68>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 f944 	bl	8000f12 <HAL_SYSTICK_Config>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10f      	bne.n	8000cb0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b0f      	cmp	r3, #15
 8000c94:	d809      	bhi.n	8000caa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c96:	2200      	movs	r2, #0
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9e:	f000 f910 	bl	8000ec2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_InitTick+0x70>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	e007      	b.n	8000cba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e004      	b.n	8000cba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	e001      	b.n	8000cba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x1c>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a03      	ldr	r2, [pc, #12]	; (8000cec <HAL_IncTick+0x1c>)
 8000ce0:	6013      	str	r3, [r2, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	20000158 	.word	0x20000158
 8000cf0:	20000008 	.word	0x20000008

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000158 	.word	0x20000158

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db0b      	blt.n	8000d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 021f 	and.w	r2, r3, #31
 8000d88:	4907      	ldr	r1, [pc, #28]	; (8000da8 <__NVIC_EnableIRQ+0x38>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	; (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf28      	it	cs
 8000e1e:	2304      	movcs	r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b03      	subs	r3, #3
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
         );
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	; 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f7ff ff8e 	bl	8000dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff29 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff40 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff90 	bl	8000e00 <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff5f 	bl	8000dac <__NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff33 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffa4 	bl	8000e68 <SysTick_Config>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f3a:	e15a      	b.n	80011f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2101      	movs	r1, #1
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 814c 	beq.w	80011ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d005      	beq.n	8000f6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d130      	bne.n	8000fce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	091b      	lsrs	r3, r3, #4
 8000fb8:	f003 0201 	and.w	r2, r3, #1
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d017      	beq.n	800100a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d123      	bne.n	800105e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	08da      	lsrs	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3208      	adds	r2, #8
 800101e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	691a      	ldr	r2, [r3, #16]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	6939      	ldr	r1, [r7, #16]
 800105a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0203 	and.w	r2, r3, #3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 80a6 	beq.w	80011ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a0:	4b5b      	ldr	r3, [pc, #364]	; (8001210 <HAL_GPIO_Init+0x2e4>)
 80010a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a4:	4a5a      	ldr	r2, [pc, #360]	; (8001210 <HAL_GPIO_Init+0x2e4>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6613      	str	r3, [r2, #96]	; 0x60
 80010ac:	4b58      	ldr	r3, [pc, #352]	; (8001210 <HAL_GPIO_Init+0x2e4>)
 80010ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b8:	4a56      	ldr	r2, [pc, #344]	; (8001214 <HAL_GPIO_Init+0x2e8>)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3302      	adds	r3, #2
 80010c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010e2:	d01f      	beq.n	8001124 <HAL_GPIO_Init+0x1f8>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a4c      	ldr	r2, [pc, #304]	; (8001218 <HAL_GPIO_Init+0x2ec>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d019      	beq.n	8001120 <HAL_GPIO_Init+0x1f4>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a4b      	ldr	r2, [pc, #300]	; (800121c <HAL_GPIO_Init+0x2f0>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d013      	beq.n	800111c <HAL_GPIO_Init+0x1f0>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a4a      	ldr	r2, [pc, #296]	; (8001220 <HAL_GPIO_Init+0x2f4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d00d      	beq.n	8001118 <HAL_GPIO_Init+0x1ec>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a49      	ldr	r2, [pc, #292]	; (8001224 <HAL_GPIO_Init+0x2f8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d007      	beq.n	8001114 <HAL_GPIO_Init+0x1e8>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a48      	ldr	r2, [pc, #288]	; (8001228 <HAL_GPIO_Init+0x2fc>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d101      	bne.n	8001110 <HAL_GPIO_Init+0x1e4>
 800110c:	2305      	movs	r3, #5
 800110e:	e00a      	b.n	8001126 <HAL_GPIO_Init+0x1fa>
 8001110:	2306      	movs	r3, #6
 8001112:	e008      	b.n	8001126 <HAL_GPIO_Init+0x1fa>
 8001114:	2304      	movs	r3, #4
 8001116:	e006      	b.n	8001126 <HAL_GPIO_Init+0x1fa>
 8001118:	2303      	movs	r3, #3
 800111a:	e004      	b.n	8001126 <HAL_GPIO_Init+0x1fa>
 800111c:	2302      	movs	r3, #2
 800111e:	e002      	b.n	8001126 <HAL_GPIO_Init+0x1fa>
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <HAL_GPIO_Init+0x1fa>
 8001124:	2300      	movs	r3, #0
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	f002 0203 	and.w	r2, r2, #3
 800112c:	0092      	lsls	r2, r2, #2
 800112e:	4093      	lsls	r3, r2
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001136:	4937      	ldr	r1, [pc, #220]	; (8001214 <HAL_GPIO_Init+0x2e8>)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	3302      	adds	r3, #2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001144:	4b39      	ldr	r3, [pc, #228]	; (800122c <HAL_GPIO_Init+0x300>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	43db      	mvns	r3, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001168:	4a30      	ldr	r2, [pc, #192]	; (800122c <HAL_GPIO_Init+0x300>)
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800116e:	4b2f      	ldr	r3, [pc, #188]	; (800122c <HAL_GPIO_Init+0x300>)
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001192:	4a26      	ldr	r2, [pc, #152]	; (800122c <HAL_GPIO_Init+0x300>)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <HAL_GPIO_Init+0x300>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_GPIO_Init+0x300>)
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_GPIO_Init+0x300>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <HAL_GPIO_Init+0x300>)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	3301      	adds	r3, #1
 80011f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	fa22 f303 	lsr.w	r3, r2, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f47f ae9d 	bne.w	8000f3c <HAL_GPIO_Init+0x10>
  }
}
 8001202:	bf00      	nop
 8001204:	bf00      	nop
 8001206:	371c      	adds	r7, #28
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	40021000 	.word	0x40021000
 8001214:	40010000 	.word	0x40010000
 8001218:	48000400 	.word	0x48000400
 800121c:	48000800 	.word	0x48000800
 8001220:	48000c00 	.word	0x48000c00
 8001224:	48001000 	.word	0x48001000
 8001228:	48001400 	.word	0x48001400
 800122c:	40010400 	.word	0x40010400

08001230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
 800123c:	4613      	mov	r3, r2
 800123e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001240:	787b      	ldrb	r3, [r7, #1]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001246:	887a      	ldrh	r2, [r7, #2]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800124c:	e002      	b.n	8001254 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	4013      	ands	r3, r2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d006      	beq.n	8001284 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f806 	bl	8001290 <HAL_GPIO_EXTI_Callback>
  }
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40010400 	.word	0x40010400

08001290 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d141      	bne.n	800133a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012b6:	4b4b      	ldr	r3, [pc, #300]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c2:	d131      	bne.n	8001328 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012c4:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012ca:	4a46      	ldr	r2, [pc, #280]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d4:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012dc:	4a41      	ldr	r2, [pc, #260]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012e4:	4b40      	ldr	r3, [pc, #256]	; (80013e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2232      	movs	r2, #50	; 0x32
 80012ea:	fb02 f303 	mul.w	r3, r2, r3
 80012ee:	4a3f      	ldr	r2, [pc, #252]	; (80013ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012f0:	fba2 2303 	umull	r2, r3, r2, r3
 80012f4:	0c9b      	lsrs	r3, r3, #18
 80012f6:	3301      	adds	r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012fa:	e002      	b.n	8001302 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3b01      	subs	r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001302:	4b38      	ldr	r3, [pc, #224]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800130a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800130e:	d102      	bne.n	8001316 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f2      	bne.n	80012fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001316:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800131e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001322:	d158      	bne.n	80013d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e057      	b.n	80013d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001328:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800132e:	4a2d      	ldr	r2, [pc, #180]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001334:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001338:	e04d      	b.n	80013d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001340:	d141      	bne.n	80013c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001342:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800134a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134e:	d131      	bne.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001350:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001356:	4a23      	ldr	r2, [pc, #140]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001368:	4a1e      	ldr	r2, [pc, #120]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2232      	movs	r2, #50	; 0x32
 8001376:	fb02 f303 	mul.w	r3, r2, r3
 800137a:	4a1c      	ldr	r2, [pc, #112]	; (80013ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800137c:	fba2 2303 	umull	r2, r3, r2, r3
 8001380:	0c9b      	lsrs	r3, r3, #18
 8001382:	3301      	adds	r3, #1
 8001384:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001386:	e002      	b.n	800138e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	3b01      	subs	r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800139a:	d102      	bne.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f2      	bne.n	8001388 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ae:	d112      	bne.n	80013d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e011      	b.n	80013d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013c4:	e007      	b.n	80013d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	40007000 	.word	0x40007000
 80013e8:	20000000 	.word	0x20000000
 80013ec:	431bde83 	.word	0x431bde83

080013f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fe:	6093      	str	r3, [r2, #8]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40007000 	.word	0x40007000

08001410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e2fe      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d075      	beq.n	800151a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800142e:	4b97      	ldr	r3, [pc, #604]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001438:	4b94      	ldr	r3, [pc, #592]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	2b0c      	cmp	r3, #12
 8001446:	d102      	bne.n	800144e <HAL_RCC_OscConfig+0x3e>
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d002      	beq.n	8001454 <HAL_RCC_OscConfig+0x44>
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	2b08      	cmp	r3, #8
 8001452:	d10b      	bne.n	800146c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001454:	4b8d      	ldr	r3, [pc, #564]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d05b      	beq.n	8001518 <HAL_RCC_OscConfig+0x108>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d157      	bne.n	8001518 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e2d9      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001474:	d106      	bne.n	8001484 <HAL_RCC_OscConfig+0x74>
 8001476:	4b85      	ldr	r3, [pc, #532]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a84      	ldr	r2, [pc, #528]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 800147c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e01d      	b.n	80014c0 <HAL_RCC_OscConfig+0xb0>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800148c:	d10c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x98>
 800148e:	4b7f      	ldr	r3, [pc, #508]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a7e      	ldr	r2, [pc, #504]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 8001494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b7c      	ldr	r3, [pc, #496]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a7b      	ldr	r2, [pc, #492]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 80014a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e00b      	b.n	80014c0 <HAL_RCC_OscConfig+0xb0>
 80014a8:	4b78      	ldr	r3, [pc, #480]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a77      	ldr	r2, [pc, #476]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 80014ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b75      	ldr	r3, [pc, #468]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a74      	ldr	r2, [pc, #464]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 80014ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d013      	beq.n	80014f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fc14 	bl	8000cf4 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fc10 	bl	8000cf4 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	; 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e29e      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e2:	4b6a      	ldr	r3, [pc, #424]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0xc0>
 80014ee:	e014      	b.n	800151a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fc00 	bl	8000cf4 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fbfc 	bl	8000cf4 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e28a      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800150a:	4b60      	ldr	r3, [pc, #384]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0xe8>
 8001516:	e000      	b.n	800151a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d075      	beq.n	8001612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001526:	4b59      	ldr	r3, [pc, #356]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001530:	4b56      	ldr	r3, [pc, #344]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2b0c      	cmp	r3, #12
 800153e:	d102      	bne.n	8001546 <HAL_RCC_OscConfig+0x136>
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d002      	beq.n	800154c <HAL_RCC_OscConfig+0x13c>
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	2b04      	cmp	r3, #4
 800154a:	d11f      	bne.n	800158c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800154c:	4b4f      	ldr	r3, [pc, #316]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <HAL_RCC_OscConfig+0x154>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e25d      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001564:	4b49      	ldr	r3, [pc, #292]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	061b      	lsls	r3, r3, #24
 8001572:	4946      	ldr	r1, [pc, #280]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001578:	4b45      	ldr	r3, [pc, #276]	; (8001690 <HAL_RCC_OscConfig+0x280>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fb6d 	bl	8000c5c <HAL_InitTick>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d043      	beq.n	8001610 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e249      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d023      	beq.n	80015dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001594:	4b3d      	ldr	r3, [pc, #244]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a3c      	ldr	r2, [pc, #240]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 800159a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff fba8 	bl	8000cf4 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a8:	f7ff fba4 	bl	8000cf4 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e232      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ba:	4b34      	ldr	r3, [pc, #208]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c6:	4b31      	ldr	r3, [pc, #196]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	061b      	lsls	r3, r3, #24
 80015d4:	492d      	ldr	r1, [pc, #180]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	604b      	str	r3, [r1, #4]
 80015da:	e01a      	b.n	8001612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015dc:	4b2b      	ldr	r3, [pc, #172]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a2a      	ldr	r2, [pc, #168]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 80015e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fb84 	bl	8000cf4 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f0:	f7ff fb80 	bl	8000cf4 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e20e      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x1e0>
 800160e:	e000      	b.n	8001612 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001610:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d041      	beq.n	80016a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d01c      	beq.n	8001660 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 8001628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162c:	4a17      	ldr	r2, [pc, #92]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001636:	f7ff fb5d 	bl	8000cf4 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163e:	f7ff fb59 	bl	8000cf4 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e1e7      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 8001652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0ef      	beq.n	800163e <HAL_RCC_OscConfig+0x22e>
 800165e:	e020      	b.n	80016a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 8001662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001666:	4a09      	ldr	r2, [pc, #36]	; (800168c <HAL_RCC_OscConfig+0x27c>)
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001670:	f7ff fb40 	bl	8000cf4 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001676:	e00d      	b.n	8001694 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001678:	f7ff fb3c 	bl	8000cf4 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d906      	bls.n	8001694 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e1ca      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001694:	4b8c      	ldr	r3, [pc, #560]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 8001696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1ea      	bne.n	8001678 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 80a6 	beq.w	80017fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b0:	2300      	movs	r3, #0
 80016b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016b4:	4b84      	ldr	r3, [pc, #528]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 80016b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_OscConfig+0x2b4>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x2b6>
 80016c4:	2300      	movs	r3, #0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00d      	beq.n	80016e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	4b7f      	ldr	r3, [pc, #508]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 80016cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ce:	4a7e      	ldr	r2, [pc, #504]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d4:	6593      	str	r3, [r2, #88]	; 0x58
 80016d6:	4b7c      	ldr	r3, [pc, #496]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016e2:	2301      	movs	r3, #1
 80016e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e6:	4b79      	ldr	r3, [pc, #484]	; (80018cc <HAL_RCC_OscConfig+0x4bc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d118      	bne.n	8001724 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016f2:	4b76      	ldr	r3, [pc, #472]	; (80018cc <HAL_RCC_OscConfig+0x4bc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a75      	ldr	r2, [pc, #468]	; (80018cc <HAL_RCC_OscConfig+0x4bc>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016fe:	f7ff faf9 	bl	8000cf4 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001706:	f7ff faf5 	bl	8000cf4 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e183      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001718:	4b6c      	ldr	r3, [pc, #432]	; (80018cc <HAL_RCC_OscConfig+0x4bc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d108      	bne.n	800173e <HAL_RCC_OscConfig+0x32e>
 800172c:	4b66      	ldr	r3, [pc, #408]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 800172e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001732:	4a65      	ldr	r2, [pc, #404]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800173c:	e024      	b.n	8001788 <HAL_RCC_OscConfig+0x378>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b05      	cmp	r3, #5
 8001744:	d110      	bne.n	8001768 <HAL_RCC_OscConfig+0x358>
 8001746:	4b60      	ldr	r3, [pc, #384]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 8001748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174c:	4a5e      	ldr	r2, [pc, #376]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001756:	4b5c      	ldr	r3, [pc, #368]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 8001758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800175c:	4a5a      	ldr	r2, [pc, #360]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001766:	e00f      	b.n	8001788 <HAL_RCC_OscConfig+0x378>
 8001768:	4b57      	ldr	r3, [pc, #348]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 800176a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800176e:	4a56      	ldr	r2, [pc, #344]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001778:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 800177a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177e:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 8001780:	f023 0304 	bic.w	r3, r3, #4
 8001784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d016      	beq.n	80017be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff fab0 	bl	8000cf4 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001796:	e00a      	b.n	80017ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001798:	f7ff faac 	bl	8000cf4 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e138      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ae:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 80017b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0ed      	beq.n	8001798 <HAL_RCC_OscConfig+0x388>
 80017bc:	e015      	b.n	80017ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017be:	f7ff fa99 	bl	8000cf4 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c4:	e00a      	b.n	80017dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c6:	f7ff fa95 	bl	8000cf4 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e121      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017dc:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 80017de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1ed      	bne.n	80017c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017ea:	7ffb      	ldrb	r3, [r7, #31]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f0:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f4:	4a34      	ldr	r2, [pc, #208]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 80017f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0320 	and.w	r3, r3, #32
 8001804:	2b00      	cmp	r3, #0
 8001806:	d03c      	beq.n	8001882 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d01c      	beq.n	800184a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001810:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 8001812:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001816:	4a2c      	ldr	r2, [pc, #176]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff fa68 	bl	8000cf4 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001828:	f7ff fa64 	bl	8000cf4 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e0f2      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800183a:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 800183c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ef      	beq.n	8001828 <HAL_RCC_OscConfig+0x418>
 8001848:	e01b      	b.n	8001882 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 800184c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001850:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185a:	f7ff fa4b 	bl	8000cf4 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001862:	f7ff fa47 	bl	8000cf4 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e0d5      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 8001876:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1ef      	bne.n	8001862 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80c9 	beq.w	8001a1e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b0c      	cmp	r3, #12
 8001896:	f000 8083 	beq.w	80019a0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d15e      	bne.n	8001960 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a08      	ldr	r2, [pc, #32]	; (80018c8 <HAL_RCC_OscConfig+0x4b8>)
 80018a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ae:	f7ff fa21 	bl	8000cf4 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b4:	e00c      	b.n	80018d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b6:	f7ff fa1d 	bl	8000cf4 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d905      	bls.n	80018d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e0ab      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d0:	4b55      	ldr	r3, [pc, #340]	; (8001a28 <HAL_RCC_OscConfig+0x618>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1ec      	bne.n	80018b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018dc:	4b52      	ldr	r3, [pc, #328]	; (8001a28 <HAL_RCC_OscConfig+0x618>)
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	4b52      	ldr	r3, [pc, #328]	; (8001a2c <HAL_RCC_OscConfig+0x61c>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6a11      	ldr	r1, [r2, #32]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ec:	3a01      	subs	r2, #1
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	4311      	orrs	r1, r2
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80018f6:	0212      	lsls	r2, r2, #8
 80018f8:	4311      	orrs	r1, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018fe:	0852      	lsrs	r2, r2, #1
 8001900:	3a01      	subs	r2, #1
 8001902:	0552      	lsls	r2, r2, #21
 8001904:	4311      	orrs	r1, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800190a:	0852      	lsrs	r2, r2, #1
 800190c:	3a01      	subs	r2, #1
 800190e:	0652      	lsls	r2, r2, #25
 8001910:	4311      	orrs	r1, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001916:	06d2      	lsls	r2, r2, #27
 8001918:	430a      	orrs	r2, r1
 800191a:	4943      	ldr	r1, [pc, #268]	; (8001a28 <HAL_RCC_OscConfig+0x618>)
 800191c:	4313      	orrs	r3, r2
 800191e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001920:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_RCC_OscConfig+0x618>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a40      	ldr	r2, [pc, #256]	; (8001a28 <HAL_RCC_OscConfig+0x618>)
 8001926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800192c:	4b3e      	ldr	r3, [pc, #248]	; (8001a28 <HAL_RCC_OscConfig+0x618>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4a3d      	ldr	r2, [pc, #244]	; (8001a28 <HAL_RCC_OscConfig+0x618>)
 8001932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001936:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff f9dc 	bl	8000cf4 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001940:	f7ff f9d8 	bl	8000cf4 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e066      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001952:	4b35      	ldr	r3, [pc, #212]	; (8001a28 <HAL_RCC_OscConfig+0x618>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x530>
 800195e:	e05e      	b.n	8001a1e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001960:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <HAL_RCC_OscConfig+0x618>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a30      	ldr	r2, [pc, #192]	; (8001a28 <HAL_RCC_OscConfig+0x618>)
 8001966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800196a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff f9c2 	bl	8000cf4 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff f9be 	bl	8000cf4 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e04c      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001986:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <HAL_RCC_OscConfig+0x618>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001992:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <HAL_RCC_OscConfig+0x618>)
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	4924      	ldr	r1, [pc, #144]	; (8001a28 <HAL_RCC_OscConfig+0x618>)
 8001998:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <HAL_RCC_OscConfig+0x620>)
 800199a:	4013      	ands	r3, r2
 800199c:	60cb      	str	r3, [r1, #12]
 800199e:	e03e      	b.n	8001a1e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e039      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019ac:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <HAL_RCC_OscConfig+0x618>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 0203 	and.w	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d12c      	bne.n	8001a1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	3b01      	subs	r3, #1
 80019cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d123      	bne.n	8001a1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d11b      	bne.n	8001a1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d113      	bne.n	8001a1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	085b      	lsrs	r3, r3, #1
 80019fe:	3b01      	subs	r3, #1
 8001a00:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d109      	bne.n	8001a1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a10:	085b      	lsrs	r3, r3, #1
 8001a12:	3b01      	subs	r3, #1
 8001a14:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d001      	beq.n	8001a1e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	019f800c 	.word	0x019f800c
 8001a30:	feeefffc 	.word	0xfeeefffc

08001a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e11e      	b.n	8001c8a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b91      	ldr	r3, [pc, #580]	; (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d910      	bls.n	8001a7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b8e      	ldr	r3, [pc, #568]	; (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 020f 	bic.w	r2, r3, #15
 8001a62:	498c      	ldr	r1, [pc, #560]	; (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b8a      	ldr	r3, [pc, #552]	; (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e106      	b.n	8001c8a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d073      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d129      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a90:	4b81      	ldr	r3, [pc, #516]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0f4      	b.n	8001c8a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001aa0:	f000 f99e 	bl	8001de0 <RCC_GetSysClockFreqFromPLLSource>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4a7c      	ldr	r2, [pc, #496]	; (8001c9c <HAL_RCC_ClockConfig+0x268>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d93f      	bls.n	8001b2e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001aae:	4b7a      	ldr	r3, [pc, #488]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d033      	beq.n	8001b2e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d12f      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ace:	4b72      	ldr	r3, [pc, #456]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ad6:	4a70      	ldr	r2, [pc, #448]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001adc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e024      	b.n	8001b2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aec:	4b6a      	ldr	r3, [pc, #424]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0c6      	b.n	8001c8a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001afc:	4b66      	ldr	r3, [pc, #408]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0be      	b.n	8001c8a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b0c:	f000 f8ce 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4a61      	ldr	r2, [pc, #388]	; (8001c9c <HAL_RCC_ClockConfig+0x268>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d909      	bls.n	8001b2e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b1a:	4b5f      	ldr	r3, [pc, #380]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b22:	4a5d      	ldr	r2, [pc, #372]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b28:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b2e:	4b5a      	ldr	r3, [pc, #360]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f023 0203 	bic.w	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4957      	ldr	r1, [pc, #348]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b40:	f7ff f8d8 	bl	8000cf4 <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b48:	f7ff f8d4 	bl	8000cf4 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e095      	b.n	8001c8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	4b4e      	ldr	r3, [pc, #312]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 020c 	and.w	r2, r3, #12
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d1eb      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d023      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b88:	4b43      	ldr	r3, [pc, #268]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4a42      	ldr	r2, [pc, #264]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001b8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b92:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ba0:	4b3d      	ldr	r3, [pc, #244]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ba8:	4a3b      	ldr	r2, [pc, #236]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001baa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb0:	4b39      	ldr	r3, [pc, #228]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4936      	ldr	r1, [pc, #216]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b80      	cmp	r3, #128	; 0x80
 8001bc8:	d105      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bca:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	4a32      	ldr	r2, [pc, #200]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001bd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bd4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd6:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d21d      	bcs.n	8001c20 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f023 020f 	bic.w	r2, r3, #15
 8001bec:	4929      	ldr	r1, [pc, #164]	; (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bf4:	f7ff f87e 	bl	8000cf4 <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfc:	f7ff f87a 	bl	8000cf4 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e03b      	b.n	8001c8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d1ed      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4917      	ldr	r1, [pc, #92]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d009      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	490f      	ldr	r1, [pc, #60]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c5e:	f000 f825 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8001c62:	4602      	mov	r2, r0
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <HAL_RCC_ClockConfig+0x26c>)
 8001c70:	5ccb      	ldrb	r3, [r1, r3]
 8001c72:	f003 031f 	and.w	r3, r3, #31
 8001c76:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <HAL_RCC_ClockConfig+0x270>)
 8001c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_RCC_ClockConfig+0x274>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe ffea 	bl	8000c5c <HAL_InitTick>
 8001c88:	4603      	mov	r3, r0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40022000 	.word	0x40022000
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	04c4b400 	.word	0x04c4b400
 8001ca0:	080047d8 	.word	0x080047d8
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004

08001cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cb2:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d102      	bne.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	e047      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d102      	bne.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cd0:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	e03e      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001cd6:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b0c      	cmp	r3, #12
 8001ce0:	d136      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cec:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d10c      	bne.n	8001d1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d00:	4a1a      	ldr	r2, [pc, #104]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d08:	4a16      	ldr	r2, [pc, #88]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d0a:	68d2      	ldr	r2, [r2, #12]
 8001d0c:	0a12      	lsrs	r2, r2, #8
 8001d0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	617b      	str	r3, [r7, #20]
      break;
 8001d18:	e00c      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d1a:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d24:	68d2      	ldr	r2, [r2, #12]
 8001d26:	0a12      	lsrs	r2, r2, #8
 8001d28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	617b      	str	r3, [r7, #20]
      break;
 8001d32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	0e5b      	lsrs	r3, r3, #25
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	e001      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d54:	693b      	ldr	r3, [r7, #16]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	00f42400 	.word	0x00f42400
 8001d6c:	016e3600 	.word	0x016e3600

08001d70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000000 	.word	0x20000000

08001d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d8c:	f7ff fff0 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	4904      	ldr	r1, [pc, #16]	; (8001db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	080047e8 	.word	0x080047e8

08001db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001db8:	f7ff ffda 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	0adb      	lsrs	r3, r3, #11
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4904      	ldr	r1, [pc, #16]	; (8001ddc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dca:	5ccb      	ldrb	r3, [r1, r3]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	080047e8 	.word	0x080047e8

08001de0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	091b      	lsrs	r3, r3, #4
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d10c      	bne.n	8001e1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e04:	4a17      	ldr	r2, [pc, #92]	; (8001e64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0c:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e0e:	68d2      	ldr	r2, [r2, #12]
 8001e10:	0a12      	lsrs	r2, r2, #8
 8001e12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	617b      	str	r3, [r7, #20]
    break;
 8001e1c:	e00c      	b.n	8001e38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e28:	68d2      	ldr	r2, [r2, #12]
 8001e2a:	0a12      	lsrs	r2, r2, #8
 8001e2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e30:	fb02 f303 	mul.w	r3, r2, r3
 8001e34:	617b      	str	r3, [r7, #20]
    break;
 8001e36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	0e5b      	lsrs	r3, r3, #25
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	3301      	adds	r3, #1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e52:	687b      	ldr	r3, [r7, #4]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	371c      	adds	r7, #28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	40021000 	.word	0x40021000
 8001e64:	016e3600 	.word	0x016e3600
 8001e68:	00f42400 	.word	0x00f42400

08001e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e74:	2300      	movs	r3, #0
 8001e76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e78:	2300      	movs	r3, #0
 8001e7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 8098 	beq.w	8001fba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8e:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10d      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	4a3f      	ldr	r2, [pc, #252]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea6:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb6:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a39      	ldr	r2, [pc, #228]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ec2:	f7fe ff17 	bl	8000cf4 <HAL_GetTick>
 8001ec6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ec8:	e009      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eca:	f7fe ff13 	bl	8000cf4 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d902      	bls.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	74fb      	strb	r3, [r7, #19]
        break;
 8001edc:	e005      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ede:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0ef      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001eea:	7cfb      	ldrb	r3, [r7, #19]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d159      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ef0:	4b2a      	ldr	r3, [pc, #168]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001efa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d01e      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d019      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f0c:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1e:	4a1f      	ldr	r2, [pc, #124]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f28:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2e:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f38:	4a18      	ldr	r2, [pc, #96]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d016      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4a:	f7fe fed3 	bl	8000cf4 <HAL_GetTick>
 8001f4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f50:	e00b      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7fe fecf 	bl	8000cf4 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d902      	bls.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	74fb      	strb	r3, [r7, #19]
            break;
 8001f68:	e006      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0ec      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f78:	7cfb      	ldrb	r3, [r7, #19]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10b      	bne.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8c:	4903      	ldr	r1, [pc, #12]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f94:	e008      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f96:	7cfb      	ldrb	r3, [r7, #19]
 8001f98:	74bb      	strb	r3, [r7, #18]
 8001f9a:	e005      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa4:	7cfb      	ldrb	r3, [r7, #19]
 8001fa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa8:	7c7b      	ldrb	r3, [r7, #17]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d105      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fae:	4ba7      	ldr	r3, [pc, #668]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	4aa6      	ldr	r2, [pc, #664]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fc6:	4ba1      	ldr	r3, [pc, #644]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fcc:	f023 0203 	bic.w	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	499d      	ldr	r1, [pc, #628]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fe8:	4b98      	ldr	r3, [pc, #608]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	f023 020c 	bic.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	4995      	ldr	r1, [pc, #596]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800200a:	4b90      	ldr	r3, [pc, #576]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800200c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002010:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	498c      	ldr	r1, [pc, #560]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00a      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800202c:	4b87      	ldr	r3, [pc, #540]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	4984      	ldr	r1, [pc, #528]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800204e:	4b7f      	ldr	r3, [pc, #508]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	497b      	ldr	r1, [pc, #492]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002070:	4b76      	ldr	r3, [pc, #472]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	4973      	ldr	r1, [pc, #460]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002092:	4b6e      	ldr	r3, [pc, #440]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002098:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	496a      	ldr	r1, [pc, #424]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00a      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020b4:	4b65      	ldr	r3, [pc, #404]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	4962      	ldr	r1, [pc, #392]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00a      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020d6:	4b5d      	ldr	r3, [pc, #372]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	4959      	ldr	r1, [pc, #356]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020f8:	4b54      	ldr	r3, [pc, #336]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020fe:	f023 0203 	bic.w	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	4951      	ldr	r1, [pc, #324]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800211a:	4b4c      	ldr	r3, [pc, #304]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002120:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	4948      	ldr	r1, [pc, #288]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002138:	2b00      	cmp	r3, #0
 800213a:	d015      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800213c:	4b43      	ldr	r3, [pc, #268]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4940      	ldr	r1, [pc, #256]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800215a:	d105      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800215c:	4b3b      	ldr	r3, [pc, #236]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a3a      	ldr	r2, [pc, #232]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002166:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002170:	2b00      	cmp	r3, #0
 8002172:	d015      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002174:	4b35      	ldr	r3, [pc, #212]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002182:	4932      	ldr	r1, [pc, #200]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002192:	d105      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002194:	4b2d      	ldr	r3, [pc, #180]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4a2c      	ldr	r2, [pc, #176]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800219e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d015      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021ac:	4b27      	ldr	r3, [pc, #156]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ba:	4924      	ldr	r1, [pc, #144]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ca:	d105      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021cc:	4b1f      	ldr	r3, [pc, #124]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a1e      	ldr	r2, [pc, #120]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021d6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d015      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	4916      	ldr	r1, [pc, #88]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002202:	d105      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a10      	ldr	r2, [pc, #64]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800220a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800220e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d019      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4908      	ldr	r1, [pc, #32]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800223a:	d109      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a02      	ldr	r2, [pc, #8]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002246:	60d3      	str	r3, [r2, #12]
 8002248:	e002      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d015      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800225c:	4b29      	ldr	r3, [pc, #164]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	4926      	ldr	r1, [pc, #152]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800227a:	d105      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800227c:	4b21      	ldr	r3, [pc, #132]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a20      	ldr	r2, [pc, #128]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002286:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d015      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002294:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a2:	4918      	ldr	r1, [pc, #96]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b2:	d105      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022b4:	4b13      	ldr	r3, [pc, #76]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022be:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d015      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80022cc:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	490a      	ldr	r1, [pc, #40]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022ea:	d105      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a04      	ldr	r2, [pc, #16]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80022f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000

08002308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e049      	b.n	80023ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7fe fb7e 	bl	8000a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	4619      	mov	r1, r3
 8002346:	4610      	mov	r0, r2
 8002348:	f000 fd8a 	bl	8002e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d001      	beq.n	80023d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e04c      	b.n	800246a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a26      	ldr	r2, [pc, #152]	; (8002478 <HAL_TIM_Base_Start+0xc0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d022      	beq.n	8002428 <HAL_TIM_Base_Start+0x70>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ea:	d01d      	beq.n	8002428 <HAL_TIM_Base_Start+0x70>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a22      	ldr	r2, [pc, #136]	; (800247c <HAL_TIM_Base_Start+0xc4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d018      	beq.n	8002428 <HAL_TIM_Base_Start+0x70>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a21      	ldr	r2, [pc, #132]	; (8002480 <HAL_TIM_Base_Start+0xc8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d013      	beq.n	8002428 <HAL_TIM_Base_Start+0x70>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <HAL_TIM_Base_Start+0xcc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00e      	beq.n	8002428 <HAL_TIM_Base_Start+0x70>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <HAL_TIM_Base_Start+0xd0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d009      	beq.n	8002428 <HAL_TIM_Base_Start+0x70>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a1c      	ldr	r2, [pc, #112]	; (800248c <HAL_TIM_Base_Start+0xd4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d004      	beq.n	8002428 <HAL_TIM_Base_Start+0x70>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a1b      	ldr	r2, [pc, #108]	; (8002490 <HAL_TIM_Base_Start+0xd8>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d115      	bne.n	8002454 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	4b19      	ldr	r3, [pc, #100]	; (8002494 <HAL_TIM_Base_Start+0xdc>)
 8002430:	4013      	ands	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b06      	cmp	r3, #6
 8002438:	d015      	beq.n	8002466 <HAL_TIM_Base_Start+0xae>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002440:	d011      	beq.n	8002466 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0201 	orr.w	r2, r2, #1
 8002450:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002452:	e008      	b.n	8002466 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e000      	b.n	8002468 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002466:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40012c00 	.word	0x40012c00
 800247c:	40000400 	.word	0x40000400
 8002480:	40000800 	.word	0x40000800
 8002484:	40000c00 	.word	0x40000c00
 8002488:	40013400 	.word	0x40013400
 800248c:	40014000 	.word	0x40014000
 8002490:	40015000 	.word	0x40015000
 8002494:	00010007 	.word	0x00010007

08002498 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e049      	b.n	800253e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f841 	bl	8002546 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3304      	adds	r3, #4
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f000 fcc2 	bl	8002e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <HAL_TIM_PWM_Start+0x24>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b01      	cmp	r3, #1
 8002576:	bf14      	ite	ne
 8002578:	2301      	movne	r3, #1
 800257a:	2300      	moveq	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	e03c      	b.n	80025fa <HAL_TIM_PWM_Start+0x9e>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2b04      	cmp	r3, #4
 8002584:	d109      	bne.n	800259a <HAL_TIM_PWM_Start+0x3e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	bf14      	ite	ne
 8002592:	2301      	movne	r3, #1
 8002594:	2300      	moveq	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	e02f      	b.n	80025fa <HAL_TIM_PWM_Start+0x9e>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d109      	bne.n	80025b4 <HAL_TIM_PWM_Start+0x58>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	bf14      	ite	ne
 80025ac:	2301      	movne	r3, #1
 80025ae:	2300      	moveq	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	e022      	b.n	80025fa <HAL_TIM_PWM_Start+0x9e>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	d109      	bne.n	80025ce <HAL_TIM_PWM_Start+0x72>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	bf14      	ite	ne
 80025c6:	2301      	movne	r3, #1
 80025c8:	2300      	moveq	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	e015      	b.n	80025fa <HAL_TIM_PWM_Start+0x9e>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b10      	cmp	r3, #16
 80025d2:	d109      	bne.n	80025e8 <HAL_TIM_PWM_Start+0x8c>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b01      	cmp	r3, #1
 80025de:	bf14      	ite	ne
 80025e0:	2301      	movne	r3, #1
 80025e2:	2300      	moveq	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	e008      	b.n	80025fa <HAL_TIM_PWM_Start+0x9e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	bf14      	ite	ne
 80025f4:	2301      	movne	r3, #1
 80025f6:	2300      	moveq	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0a6      	b.n	8002750 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d104      	bne.n	8002612 <HAL_TIM_PWM_Start+0xb6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002610:	e023      	b.n	800265a <HAL_TIM_PWM_Start+0xfe>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b04      	cmp	r3, #4
 8002616:	d104      	bne.n	8002622 <HAL_TIM_PWM_Start+0xc6>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2202      	movs	r2, #2
 800261c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002620:	e01b      	b.n	800265a <HAL_TIM_PWM_Start+0xfe>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b08      	cmp	r3, #8
 8002626:	d104      	bne.n	8002632 <HAL_TIM_PWM_Start+0xd6>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002630:	e013      	b.n	800265a <HAL_TIM_PWM_Start+0xfe>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b0c      	cmp	r3, #12
 8002636:	d104      	bne.n	8002642 <HAL_TIM_PWM_Start+0xe6>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002640:	e00b      	b.n	800265a <HAL_TIM_PWM_Start+0xfe>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b10      	cmp	r3, #16
 8002646:	d104      	bne.n	8002652 <HAL_TIM_PWM_Start+0xf6>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002650:	e003      	b.n	800265a <HAL_TIM_PWM_Start+0xfe>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2202      	movs	r2, #2
 8002656:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2201      	movs	r2, #1
 8002660:	6839      	ldr	r1, [r7, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f001 f956 	bl	8003914 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a3a      	ldr	r2, [pc, #232]	; (8002758 <HAL_TIM_PWM_Start+0x1fc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d018      	beq.n	80026a4 <HAL_TIM_PWM_Start+0x148>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a39      	ldr	r2, [pc, #228]	; (800275c <HAL_TIM_PWM_Start+0x200>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d013      	beq.n	80026a4 <HAL_TIM_PWM_Start+0x148>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a37      	ldr	r2, [pc, #220]	; (8002760 <HAL_TIM_PWM_Start+0x204>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00e      	beq.n	80026a4 <HAL_TIM_PWM_Start+0x148>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a36      	ldr	r2, [pc, #216]	; (8002764 <HAL_TIM_PWM_Start+0x208>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d009      	beq.n	80026a4 <HAL_TIM_PWM_Start+0x148>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a34      	ldr	r2, [pc, #208]	; (8002768 <HAL_TIM_PWM_Start+0x20c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d004      	beq.n	80026a4 <HAL_TIM_PWM_Start+0x148>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a33      	ldr	r2, [pc, #204]	; (800276c <HAL_TIM_PWM_Start+0x210>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d101      	bne.n	80026a8 <HAL_TIM_PWM_Start+0x14c>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <HAL_TIM_PWM_Start+0x14e>
 80026a8:	2300      	movs	r3, #0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a25      	ldr	r2, [pc, #148]	; (8002758 <HAL_TIM_PWM_Start+0x1fc>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d022      	beq.n	800270e <HAL_TIM_PWM_Start+0x1b2>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d0:	d01d      	beq.n	800270e <HAL_TIM_PWM_Start+0x1b2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a26      	ldr	r2, [pc, #152]	; (8002770 <HAL_TIM_PWM_Start+0x214>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d018      	beq.n	800270e <HAL_TIM_PWM_Start+0x1b2>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a24      	ldr	r2, [pc, #144]	; (8002774 <HAL_TIM_PWM_Start+0x218>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_TIM_PWM_Start+0x1b2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a23      	ldr	r2, [pc, #140]	; (8002778 <HAL_TIM_PWM_Start+0x21c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d00e      	beq.n	800270e <HAL_TIM_PWM_Start+0x1b2>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a19      	ldr	r2, [pc, #100]	; (800275c <HAL_TIM_PWM_Start+0x200>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d009      	beq.n	800270e <HAL_TIM_PWM_Start+0x1b2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a18      	ldr	r2, [pc, #96]	; (8002760 <HAL_TIM_PWM_Start+0x204>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d004      	beq.n	800270e <HAL_TIM_PWM_Start+0x1b2>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a18      	ldr	r2, [pc, #96]	; (800276c <HAL_TIM_PWM_Start+0x210>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d115      	bne.n	800273a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_TIM_PWM_Start+0x220>)
 8002716:	4013      	ands	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b06      	cmp	r3, #6
 800271e:	d015      	beq.n	800274c <HAL_TIM_PWM_Start+0x1f0>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002726:	d011      	beq.n	800274c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002738:	e008      	b.n	800274c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e000      	b.n	800274e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40012c00 	.word	0x40012c00
 800275c:	40013400 	.word	0x40013400
 8002760:	40014000 	.word	0x40014000
 8002764:	40014400 	.word	0x40014400
 8002768:	40014800 	.word	0x40014800
 800276c:	40015000 	.word	0x40015000
 8002770:	40000400 	.word	0x40000400
 8002774:	40000800 	.word	0x40000800
 8002778:	40000c00 	.word	0x40000c00
 800277c:	00010007 	.word	0x00010007

08002780 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d104      	bne.n	800279a <HAL_TIM_IC_Start+0x1a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002796:	b2db      	uxtb	r3, r3
 8002798:	e023      	b.n	80027e2 <HAL_TIM_IC_Start+0x62>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b04      	cmp	r3, #4
 800279e:	d104      	bne.n	80027aa <HAL_TIM_IC_Start+0x2a>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	e01b      	b.n	80027e2 <HAL_TIM_IC_Start+0x62>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d104      	bne.n	80027ba <HAL_TIM_IC_Start+0x3a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	e013      	b.n	80027e2 <HAL_TIM_IC_Start+0x62>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b0c      	cmp	r3, #12
 80027be:	d104      	bne.n	80027ca <HAL_TIM_IC_Start+0x4a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	e00b      	b.n	80027e2 <HAL_TIM_IC_Start+0x62>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d104      	bne.n	80027da <HAL_TIM_IC_Start+0x5a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	e003      	b.n	80027e2 <HAL_TIM_IC_Start+0x62>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d104      	bne.n	80027f4 <HAL_TIM_IC_Start+0x74>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	e013      	b.n	800281c <HAL_TIM_IC_Start+0x9c>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d104      	bne.n	8002804 <HAL_TIM_IC_Start+0x84>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002800:	b2db      	uxtb	r3, r3
 8002802:	e00b      	b.n	800281c <HAL_TIM_IC_Start+0x9c>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b08      	cmp	r3, #8
 8002808:	d104      	bne.n	8002814 <HAL_TIM_IC_Start+0x94>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002810:	b2db      	uxtb	r3, r3
 8002812:	e003      	b.n	800281c <HAL_TIM_IC_Start+0x9c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800281a:	b2db      	uxtb	r3, r3
 800281c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d102      	bne.n	800282a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002824:	7bbb      	ldrb	r3, [r7, #14]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d001      	beq.n	800282e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e097      	b.n	800295e <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d104      	bne.n	800283e <HAL_TIM_IC_Start+0xbe>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800283c:	e023      	b.n	8002886 <HAL_TIM_IC_Start+0x106>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b04      	cmp	r3, #4
 8002842:	d104      	bne.n	800284e <HAL_TIM_IC_Start+0xce>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800284c:	e01b      	b.n	8002886 <HAL_TIM_IC_Start+0x106>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b08      	cmp	r3, #8
 8002852:	d104      	bne.n	800285e <HAL_TIM_IC_Start+0xde>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800285c:	e013      	b.n	8002886 <HAL_TIM_IC_Start+0x106>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b0c      	cmp	r3, #12
 8002862:	d104      	bne.n	800286e <HAL_TIM_IC_Start+0xee>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800286c:	e00b      	b.n	8002886 <HAL_TIM_IC_Start+0x106>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b10      	cmp	r3, #16
 8002872:	d104      	bne.n	800287e <HAL_TIM_IC_Start+0xfe>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800287c:	e003      	b.n	8002886 <HAL_TIM_IC_Start+0x106>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2202      	movs	r2, #2
 8002882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d104      	bne.n	8002896 <HAL_TIM_IC_Start+0x116>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002894:	e013      	b.n	80028be <HAL_TIM_IC_Start+0x13e>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b04      	cmp	r3, #4
 800289a:	d104      	bne.n	80028a6 <HAL_TIM_IC_Start+0x126>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028a4:	e00b      	b.n	80028be <HAL_TIM_IC_Start+0x13e>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d104      	bne.n	80028b6 <HAL_TIM_IC_Start+0x136>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028b4:	e003      	b.n	80028be <HAL_TIM_IC_Start+0x13e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2201      	movs	r2, #1
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f001 f824 	bl	8003914 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a25      	ldr	r2, [pc, #148]	; (8002968 <HAL_TIM_IC_Start+0x1e8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d022      	beq.n	800291c <HAL_TIM_IC_Start+0x19c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028de:	d01d      	beq.n	800291c <HAL_TIM_IC_Start+0x19c>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a21      	ldr	r2, [pc, #132]	; (800296c <HAL_TIM_IC_Start+0x1ec>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d018      	beq.n	800291c <HAL_TIM_IC_Start+0x19c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a20      	ldr	r2, [pc, #128]	; (8002970 <HAL_TIM_IC_Start+0x1f0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d013      	beq.n	800291c <HAL_TIM_IC_Start+0x19c>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1e      	ldr	r2, [pc, #120]	; (8002974 <HAL_TIM_IC_Start+0x1f4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00e      	beq.n	800291c <HAL_TIM_IC_Start+0x19c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1d      	ldr	r2, [pc, #116]	; (8002978 <HAL_TIM_IC_Start+0x1f8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d009      	beq.n	800291c <HAL_TIM_IC_Start+0x19c>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1b      	ldr	r2, [pc, #108]	; (800297c <HAL_TIM_IC_Start+0x1fc>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d004      	beq.n	800291c <HAL_TIM_IC_Start+0x19c>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1a      	ldr	r2, [pc, #104]	; (8002980 <HAL_TIM_IC_Start+0x200>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d115      	bne.n	8002948 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	4b18      	ldr	r3, [pc, #96]	; (8002984 <HAL_TIM_IC_Start+0x204>)
 8002924:	4013      	ands	r3, r2
 8002926:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b06      	cmp	r3, #6
 800292c:	d015      	beq.n	800295a <HAL_TIM_IC_Start+0x1da>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002934:	d011      	beq.n	800295a <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002946:	e008      	b.n	800295a <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e000      	b.n	800295c <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40000400 	.word	0x40000400
 8002970:	40000800 	.word	0x40000800
 8002974:	40000c00 	.word	0x40000c00
 8002978:	40013400 	.word	0x40013400
 800297c:	40014000 	.word	0x40014000
 8002980:	40015000 	.word	0x40015000
 8002984:	00010007 	.word	0x00010007

08002988 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e0ff      	b.n	8002ba6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b14      	cmp	r3, #20
 80029b2:	f200 80f0 	bhi.w	8002b96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80029b6:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80029b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029bc:	08002a11 	.word	0x08002a11
 80029c0:	08002b97 	.word	0x08002b97
 80029c4:	08002b97 	.word	0x08002b97
 80029c8:	08002b97 	.word	0x08002b97
 80029cc:	08002a51 	.word	0x08002a51
 80029d0:	08002b97 	.word	0x08002b97
 80029d4:	08002b97 	.word	0x08002b97
 80029d8:	08002b97 	.word	0x08002b97
 80029dc:	08002a93 	.word	0x08002a93
 80029e0:	08002b97 	.word	0x08002b97
 80029e4:	08002b97 	.word	0x08002b97
 80029e8:	08002b97 	.word	0x08002b97
 80029ec:	08002ad3 	.word	0x08002ad3
 80029f0:	08002b97 	.word	0x08002b97
 80029f4:	08002b97 	.word	0x08002b97
 80029f8:	08002b97 	.word	0x08002b97
 80029fc:	08002b15 	.word	0x08002b15
 8002a00:	08002b97 	.word	0x08002b97
 8002a04:	08002b97 	.word	0x08002b97
 8002a08:	08002b97 	.word	0x08002b97
 8002a0c:	08002b55 	.word	0x08002b55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fad6 	bl	8002fc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0208 	orr.w	r2, r2, #8
 8002a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0204 	bic.w	r2, r2, #4
 8002a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6999      	ldr	r1, [r3, #24]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	619a      	str	r2, [r3, #24]
      break;
 8002a4e:	e0a5      	b.n	8002b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fb50 	bl	80030fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6999      	ldr	r1, [r3, #24]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	021a      	lsls	r2, r3, #8
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	619a      	str	r2, [r3, #24]
      break;
 8002a90:	e084      	b.n	8002b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fbc3 	bl	8003224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f042 0208 	orr.w	r2, r2, #8
 8002aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69da      	ldr	r2, [r3, #28]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0204 	bic.w	r2, r2, #4
 8002abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69d9      	ldr	r1, [r3, #28]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	61da      	str	r2, [r3, #28]
      break;
 8002ad0:	e064      	b.n	8002b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68b9      	ldr	r1, [r7, #8]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fc35 	bl	8003348 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	69da      	ldr	r2, [r3, #28]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69d9      	ldr	r1, [r3, #28]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	021a      	lsls	r2, r3, #8
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	61da      	str	r2, [r3, #28]
      break;
 8002b12:	e043      	b.n	8002b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fca8 	bl	8003470 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0208 	orr.w	r2, r2, #8
 8002b2e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0204 	bic.w	r2, r2, #4
 8002b3e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002b52:	e023      	b.n	8002b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fcf2 	bl	8003544 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	021a      	lsls	r2, r3, #8
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002b94:	e002      	b.n	8002b9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	75fb      	strb	r3, [r7, #23]
      break;
 8002b9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop

08002bb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_TIM_ConfigClockSource+0x1c>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e0f6      	b.n	8002dba <HAL_TIM_ConfigClockSource+0x20a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002bea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a6f      	ldr	r2, [pc, #444]	; (8002dc4 <HAL_TIM_ConfigClockSource+0x214>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	f000 80c1 	beq.w	8002d8e <HAL_TIM_ConfigClockSource+0x1de>
 8002c0c:	4a6d      	ldr	r2, [pc, #436]	; (8002dc4 <HAL_TIM_ConfigClockSource+0x214>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	f200 80c6 	bhi.w	8002da0 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c14:	4a6c      	ldr	r2, [pc, #432]	; (8002dc8 <HAL_TIM_ConfigClockSource+0x218>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	f000 80b9 	beq.w	8002d8e <HAL_TIM_ConfigClockSource+0x1de>
 8002c1c:	4a6a      	ldr	r2, [pc, #424]	; (8002dc8 <HAL_TIM_ConfigClockSource+0x218>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	f200 80be 	bhi.w	8002da0 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c24:	4a69      	ldr	r2, [pc, #420]	; (8002dcc <HAL_TIM_ConfigClockSource+0x21c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	f000 80b1 	beq.w	8002d8e <HAL_TIM_ConfigClockSource+0x1de>
 8002c2c:	4a67      	ldr	r2, [pc, #412]	; (8002dcc <HAL_TIM_ConfigClockSource+0x21c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	f200 80b6 	bhi.w	8002da0 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c34:	4a66      	ldr	r2, [pc, #408]	; (8002dd0 <HAL_TIM_ConfigClockSource+0x220>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	f000 80a9 	beq.w	8002d8e <HAL_TIM_ConfigClockSource+0x1de>
 8002c3c:	4a64      	ldr	r2, [pc, #400]	; (8002dd0 <HAL_TIM_ConfigClockSource+0x220>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	f200 80ae 	bhi.w	8002da0 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c44:	4a63      	ldr	r2, [pc, #396]	; (8002dd4 <HAL_TIM_ConfigClockSource+0x224>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	f000 80a1 	beq.w	8002d8e <HAL_TIM_ConfigClockSource+0x1de>
 8002c4c:	4a61      	ldr	r2, [pc, #388]	; (8002dd4 <HAL_TIM_ConfigClockSource+0x224>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	f200 80a6 	bhi.w	8002da0 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c54:	4a60      	ldr	r2, [pc, #384]	; (8002dd8 <HAL_TIM_ConfigClockSource+0x228>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	f000 8099 	beq.w	8002d8e <HAL_TIM_ConfigClockSource+0x1de>
 8002c5c:	4a5e      	ldr	r2, [pc, #376]	; (8002dd8 <HAL_TIM_ConfigClockSource+0x228>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	f200 809e 	bhi.w	8002da0 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002c68:	f000 8091 	beq.w	8002d8e <HAL_TIM_ConfigClockSource+0x1de>
 8002c6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002c70:	f200 8096 	bhi.w	8002da0 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c78:	f000 8089 	beq.w	8002d8e <HAL_TIM_ConfigClockSource+0x1de>
 8002c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c80:	f200 808e 	bhi.w	8002da0 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c88:	d03e      	beq.n	8002d08 <HAL_TIM_ConfigClockSource+0x158>
 8002c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8e:	f200 8087 	bhi.w	8002da0 <HAL_TIM_ConfigClockSource+0x1f0>
 8002c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c96:	f000 8086 	beq.w	8002da6 <HAL_TIM_ConfigClockSource+0x1f6>
 8002c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9e:	d87f      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x1f0>
 8002ca0:	2b70      	cmp	r3, #112	; 0x70
 8002ca2:	d01a      	beq.n	8002cda <HAL_TIM_ConfigClockSource+0x12a>
 8002ca4:	2b70      	cmp	r3, #112	; 0x70
 8002ca6:	d87b      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x1f0>
 8002ca8:	2b60      	cmp	r3, #96	; 0x60
 8002caa:	d050      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x19e>
 8002cac:	2b60      	cmp	r3, #96	; 0x60
 8002cae:	d877      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x1f0>
 8002cb0:	2b50      	cmp	r3, #80	; 0x50
 8002cb2:	d03c      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x17e>
 8002cb4:	2b50      	cmp	r3, #80	; 0x50
 8002cb6:	d873      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x1f0>
 8002cb8:	2b40      	cmp	r3, #64	; 0x40
 8002cba:	d058      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0x1be>
 8002cbc:	2b40      	cmp	r3, #64	; 0x40
 8002cbe:	d86f      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x1f0>
 8002cc0:	2b30      	cmp	r3, #48	; 0x30
 8002cc2:	d064      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0x1de>
 8002cc4:	2b30      	cmp	r3, #48	; 0x30
 8002cc6:	d86b      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x1f0>
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	d060      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0x1de>
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d867      	bhi.n	8002da0 <HAL_TIM_ConfigClockSource+0x1f0>
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d05c      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0x1de>
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d05a      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0x1de>
 8002cd8:	e062      	b.n	8002da0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cea:	f000 fdf3 	bl	80038d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	609a      	str	r2, [r3, #8]
      break;
 8002d06:	e04f      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d18:	f000 fddc 	bl	80038d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d2a:	609a      	str	r2, [r3, #8]
      break;
 8002d2c:	e03c      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f000 fd4e 	bl	80037dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2150      	movs	r1, #80	; 0x50
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fda7 	bl	800389a <TIM_ITRx_SetConfig>
      break;
 8002d4c:	e02c      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f000 fd6d 	bl	800383a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2160      	movs	r1, #96	; 0x60
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fd97 	bl	800389a <TIM_ITRx_SetConfig>
      break;
 8002d6c:	e01c      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f000 fd2e 	bl	80037dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2140      	movs	r1, #64	; 0x40
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fd87 	bl	800389a <TIM_ITRx_SetConfig>
      break;
 8002d8c:	e00c      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4619      	mov	r1, r3
 8002d98:	4610      	mov	r0, r2
 8002d9a:	f000 fd7e 	bl	800389a <TIM_ITRx_SetConfig>
      break;
 8002d9e:	e003      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
      break;
 8002da4:	e000      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002da6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	00100070 	.word	0x00100070
 8002dc8:	00100060 	.word	0x00100060
 8002dcc:	00100050 	.word	0x00100050
 8002dd0:	00100040 	.word	0x00100040
 8002dd4:	00100030 	.word	0x00100030
 8002dd8:	00100020 	.word	0x00100020

08002ddc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e031      	b.n	8002e58 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002e04:	6839      	ldr	r1, [r7, #0]
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fc08 	bl	800361c <TIM_SlaveTimer_SetConfig>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e018      	b.n	8002e58 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e34:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e44:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a4c      	ldr	r2, [pc, #304]	; (8002fa4 <TIM_Base_SetConfig+0x144>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d017      	beq.n	8002ea8 <TIM_Base_SetConfig+0x48>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7e:	d013      	beq.n	8002ea8 <TIM_Base_SetConfig+0x48>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a49      	ldr	r2, [pc, #292]	; (8002fa8 <TIM_Base_SetConfig+0x148>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00f      	beq.n	8002ea8 <TIM_Base_SetConfig+0x48>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a48      	ldr	r2, [pc, #288]	; (8002fac <TIM_Base_SetConfig+0x14c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00b      	beq.n	8002ea8 <TIM_Base_SetConfig+0x48>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a47      	ldr	r2, [pc, #284]	; (8002fb0 <TIM_Base_SetConfig+0x150>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d007      	beq.n	8002ea8 <TIM_Base_SetConfig+0x48>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a46      	ldr	r2, [pc, #280]	; (8002fb4 <TIM_Base_SetConfig+0x154>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d003      	beq.n	8002ea8 <TIM_Base_SetConfig+0x48>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a45      	ldr	r2, [pc, #276]	; (8002fb8 <TIM_Base_SetConfig+0x158>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d108      	bne.n	8002eba <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a39      	ldr	r2, [pc, #228]	; (8002fa4 <TIM_Base_SetConfig+0x144>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d023      	beq.n	8002f0a <TIM_Base_SetConfig+0xaa>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec8:	d01f      	beq.n	8002f0a <TIM_Base_SetConfig+0xaa>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a36      	ldr	r2, [pc, #216]	; (8002fa8 <TIM_Base_SetConfig+0x148>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01b      	beq.n	8002f0a <TIM_Base_SetConfig+0xaa>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a35      	ldr	r2, [pc, #212]	; (8002fac <TIM_Base_SetConfig+0x14c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d017      	beq.n	8002f0a <TIM_Base_SetConfig+0xaa>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a34      	ldr	r2, [pc, #208]	; (8002fb0 <TIM_Base_SetConfig+0x150>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d013      	beq.n	8002f0a <TIM_Base_SetConfig+0xaa>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a33      	ldr	r2, [pc, #204]	; (8002fb4 <TIM_Base_SetConfig+0x154>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00f      	beq.n	8002f0a <TIM_Base_SetConfig+0xaa>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a33      	ldr	r2, [pc, #204]	; (8002fbc <TIM_Base_SetConfig+0x15c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00b      	beq.n	8002f0a <TIM_Base_SetConfig+0xaa>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a32      	ldr	r2, [pc, #200]	; (8002fc0 <TIM_Base_SetConfig+0x160>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d007      	beq.n	8002f0a <TIM_Base_SetConfig+0xaa>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a31      	ldr	r2, [pc, #196]	; (8002fc4 <TIM_Base_SetConfig+0x164>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d003      	beq.n	8002f0a <TIM_Base_SetConfig+0xaa>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a2c      	ldr	r2, [pc, #176]	; (8002fb8 <TIM_Base_SetConfig+0x158>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d108      	bne.n	8002f1c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <TIM_Base_SetConfig+0x144>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d013      	beq.n	8002f70 <TIM_Base_SetConfig+0x110>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a1a      	ldr	r2, [pc, #104]	; (8002fb4 <TIM_Base_SetConfig+0x154>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00f      	beq.n	8002f70 <TIM_Base_SetConfig+0x110>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a1a      	ldr	r2, [pc, #104]	; (8002fbc <TIM_Base_SetConfig+0x15c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00b      	beq.n	8002f70 <TIM_Base_SetConfig+0x110>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a19      	ldr	r2, [pc, #100]	; (8002fc0 <TIM_Base_SetConfig+0x160>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d007      	beq.n	8002f70 <TIM_Base_SetConfig+0x110>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <TIM_Base_SetConfig+0x164>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d003      	beq.n	8002f70 <TIM_Base_SetConfig+0x110>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <TIM_Base_SetConfig+0x158>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d103      	bne.n	8002f78 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d105      	bne.n	8002f96 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f023 0201 	bic.w	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	611a      	str	r2, [r3, #16]
  }
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40012c00 	.word	0x40012c00
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40000800 	.word	0x40000800
 8002fb0:	40000c00 	.word	0x40000c00
 8002fb4:	40013400 	.word	0x40013400
 8002fb8:	40015000 	.word	0x40015000
 8002fbc:	40014000 	.word	0x40014000
 8002fc0:	40014400 	.word	0x40014400
 8002fc4:	40014800 	.word	0x40014800

08002fc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f023 0201 	bic.w	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f023 0302 	bic.w	r3, r3, #2
 8003014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a30      	ldr	r2, [pc, #192]	; (80030e4 <TIM_OC1_SetConfig+0x11c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d013      	beq.n	8003050 <TIM_OC1_SetConfig+0x88>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a2f      	ldr	r2, [pc, #188]	; (80030e8 <TIM_OC1_SetConfig+0x120>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00f      	beq.n	8003050 <TIM_OC1_SetConfig+0x88>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a2e      	ldr	r2, [pc, #184]	; (80030ec <TIM_OC1_SetConfig+0x124>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00b      	beq.n	8003050 <TIM_OC1_SetConfig+0x88>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a2d      	ldr	r2, [pc, #180]	; (80030f0 <TIM_OC1_SetConfig+0x128>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d007      	beq.n	8003050 <TIM_OC1_SetConfig+0x88>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a2c      	ldr	r2, [pc, #176]	; (80030f4 <TIM_OC1_SetConfig+0x12c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <TIM_OC1_SetConfig+0x88>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a2b      	ldr	r2, [pc, #172]	; (80030f8 <TIM_OC1_SetConfig+0x130>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d10c      	bne.n	800306a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f023 0308 	bic.w	r3, r3, #8
 8003056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f023 0304 	bic.w	r3, r3, #4
 8003068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <TIM_OC1_SetConfig+0x11c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <TIM_OC1_SetConfig+0xd2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a1c      	ldr	r2, [pc, #112]	; (80030e8 <TIM_OC1_SetConfig+0x120>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00f      	beq.n	800309a <TIM_OC1_SetConfig+0xd2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a1b      	ldr	r2, [pc, #108]	; (80030ec <TIM_OC1_SetConfig+0x124>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00b      	beq.n	800309a <TIM_OC1_SetConfig+0xd2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1a      	ldr	r2, [pc, #104]	; (80030f0 <TIM_OC1_SetConfig+0x128>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d007      	beq.n	800309a <TIM_OC1_SetConfig+0xd2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <TIM_OC1_SetConfig+0x12c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d003      	beq.n	800309a <TIM_OC1_SetConfig+0xd2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <TIM_OC1_SetConfig+0x130>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d111      	bne.n	80030be <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	621a      	str	r2, [r3, #32]
}
 80030d8:	bf00      	nop
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	40012c00 	.word	0x40012c00
 80030e8:	40013400 	.word	0x40013400
 80030ec:	40014000 	.word	0x40014000
 80030f0:	40014400 	.word	0x40014400
 80030f4:	40014800 	.word	0x40014800
 80030f8:	40015000 	.word	0x40015000

080030fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	f023 0210 	bic.w	r2, r3, #16
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800312a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f023 0320 	bic.w	r3, r3, #32
 800314a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a2c      	ldr	r2, [pc, #176]	; (800320c <TIM_OC2_SetConfig+0x110>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d007      	beq.n	8003170 <TIM_OC2_SetConfig+0x74>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a2b      	ldr	r2, [pc, #172]	; (8003210 <TIM_OC2_SetConfig+0x114>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d003      	beq.n	8003170 <TIM_OC2_SetConfig+0x74>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a2a      	ldr	r2, [pc, #168]	; (8003214 <TIM_OC2_SetConfig+0x118>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d10d      	bne.n	800318c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800318a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a1f      	ldr	r2, [pc, #124]	; (800320c <TIM_OC2_SetConfig+0x110>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d013      	beq.n	80031bc <TIM_OC2_SetConfig+0xc0>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a1e      	ldr	r2, [pc, #120]	; (8003210 <TIM_OC2_SetConfig+0x114>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00f      	beq.n	80031bc <TIM_OC2_SetConfig+0xc0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a1e      	ldr	r2, [pc, #120]	; (8003218 <TIM_OC2_SetConfig+0x11c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00b      	beq.n	80031bc <TIM_OC2_SetConfig+0xc0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a1d      	ldr	r2, [pc, #116]	; (800321c <TIM_OC2_SetConfig+0x120>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d007      	beq.n	80031bc <TIM_OC2_SetConfig+0xc0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a1c      	ldr	r2, [pc, #112]	; (8003220 <TIM_OC2_SetConfig+0x124>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d003      	beq.n	80031bc <TIM_OC2_SetConfig+0xc0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a17      	ldr	r2, [pc, #92]	; (8003214 <TIM_OC2_SetConfig+0x118>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d113      	bne.n	80031e4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	621a      	str	r2, [r3, #32]
}
 80031fe:	bf00      	nop
 8003200:	371c      	adds	r7, #28
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40012c00 	.word	0x40012c00
 8003210:	40013400 	.word	0x40013400
 8003214:	40015000 	.word	0x40015000
 8003218:	40014000 	.word	0x40014000
 800321c:	40014400 	.word	0x40014400
 8003220:	40014800 	.word	0x40014800

08003224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0303 	bic.w	r3, r3, #3
 800325e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a2b      	ldr	r2, [pc, #172]	; (8003330 <TIM_OC3_SetConfig+0x10c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d007      	beq.n	8003296 <TIM_OC3_SetConfig+0x72>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a2a      	ldr	r2, [pc, #168]	; (8003334 <TIM_OC3_SetConfig+0x110>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d003      	beq.n	8003296 <TIM_OC3_SetConfig+0x72>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a29      	ldr	r2, [pc, #164]	; (8003338 <TIM_OC3_SetConfig+0x114>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d10d      	bne.n	80032b2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800329c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a1e      	ldr	r2, [pc, #120]	; (8003330 <TIM_OC3_SetConfig+0x10c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <TIM_OC3_SetConfig+0xbe>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <TIM_OC3_SetConfig+0x110>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00f      	beq.n	80032e2 <TIM_OC3_SetConfig+0xbe>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1d      	ldr	r2, [pc, #116]	; (800333c <TIM_OC3_SetConfig+0x118>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00b      	beq.n	80032e2 <TIM_OC3_SetConfig+0xbe>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1c      	ldr	r2, [pc, #112]	; (8003340 <TIM_OC3_SetConfig+0x11c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d007      	beq.n	80032e2 <TIM_OC3_SetConfig+0xbe>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a1b      	ldr	r2, [pc, #108]	; (8003344 <TIM_OC3_SetConfig+0x120>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d003      	beq.n	80032e2 <TIM_OC3_SetConfig+0xbe>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a16      	ldr	r2, [pc, #88]	; (8003338 <TIM_OC3_SetConfig+0x114>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d113      	bne.n	800330a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	621a      	str	r2, [r3, #32]
}
 8003324:	bf00      	nop
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40013400 	.word	0x40013400
 8003338:	40015000 	.word	0x40015000
 800333c:	40014000 	.word	0x40014000
 8003340:	40014400 	.word	0x40014400
 8003344:	40014800 	.word	0x40014800

08003348 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800337a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	031b      	lsls	r3, r3, #12
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a2c      	ldr	r2, [pc, #176]	; (8003458 <TIM_OC4_SetConfig+0x110>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d007      	beq.n	80033bc <TIM_OC4_SetConfig+0x74>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a2b      	ldr	r2, [pc, #172]	; (800345c <TIM_OC4_SetConfig+0x114>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d003      	beq.n	80033bc <TIM_OC4_SetConfig+0x74>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a2a      	ldr	r2, [pc, #168]	; (8003460 <TIM_OC4_SetConfig+0x118>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d10d      	bne.n	80033d8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	031b      	lsls	r3, r3, #12
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a1f      	ldr	r2, [pc, #124]	; (8003458 <TIM_OC4_SetConfig+0x110>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <TIM_OC4_SetConfig+0xc0>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a1e      	ldr	r2, [pc, #120]	; (800345c <TIM_OC4_SetConfig+0x114>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00f      	beq.n	8003408 <TIM_OC4_SetConfig+0xc0>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a1e      	ldr	r2, [pc, #120]	; (8003464 <TIM_OC4_SetConfig+0x11c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00b      	beq.n	8003408 <TIM_OC4_SetConfig+0xc0>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <TIM_OC4_SetConfig+0x120>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d007      	beq.n	8003408 <TIM_OC4_SetConfig+0xc0>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a1c      	ldr	r2, [pc, #112]	; (800346c <TIM_OC4_SetConfig+0x124>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d003      	beq.n	8003408 <TIM_OC4_SetConfig+0xc0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a17      	ldr	r2, [pc, #92]	; (8003460 <TIM_OC4_SetConfig+0x118>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d113      	bne.n	8003430 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800340e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003416:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	019b      	lsls	r3, r3, #6
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	019b      	lsls	r3, r3, #6
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	621a      	str	r2, [r3, #32]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40012c00 	.word	0x40012c00
 800345c:	40013400 	.word	0x40013400
 8003460:	40015000 	.word	0x40015000
 8003464:	40014000 	.word	0x40014000
 8003468:	40014400 	.word	0x40014400
 800346c:	40014800 	.word	0x40014800

08003470 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80034b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	041b      	lsls	r3, r3, #16
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a19      	ldr	r2, [pc, #100]	; (800352c <TIM_OC5_SetConfig+0xbc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <TIM_OC5_SetConfig+0x82>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a18      	ldr	r2, [pc, #96]	; (8003530 <TIM_OC5_SetConfig+0xc0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00f      	beq.n	80034f2 <TIM_OC5_SetConfig+0x82>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a17      	ldr	r2, [pc, #92]	; (8003534 <TIM_OC5_SetConfig+0xc4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00b      	beq.n	80034f2 <TIM_OC5_SetConfig+0x82>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a16      	ldr	r2, [pc, #88]	; (8003538 <TIM_OC5_SetConfig+0xc8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d007      	beq.n	80034f2 <TIM_OC5_SetConfig+0x82>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a15      	ldr	r2, [pc, #84]	; (800353c <TIM_OC5_SetConfig+0xcc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_OC5_SetConfig+0x82>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a14      	ldr	r2, [pc, #80]	; (8003540 <TIM_OC5_SetConfig+0xd0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d109      	bne.n	8003506 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	021b      	lsls	r3, r3, #8
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	4313      	orrs	r3, r2
 8003504:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	621a      	str	r2, [r3, #32]
}
 8003520:	bf00      	nop
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40013400 	.word	0x40013400
 8003534:	40014000 	.word	0x40014000
 8003538:	40014400 	.word	0x40014400
 800353c:	40014800 	.word	0x40014800
 8003540:	40015000 	.word	0x40015000

08003544 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800358a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	051b      	lsls	r3, r3, #20
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a1a      	ldr	r2, [pc, #104]	; (8003604 <TIM_OC6_SetConfig+0xc0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d013      	beq.n	80035c8 <TIM_OC6_SetConfig+0x84>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a19      	ldr	r2, [pc, #100]	; (8003608 <TIM_OC6_SetConfig+0xc4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00f      	beq.n	80035c8 <TIM_OC6_SetConfig+0x84>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a18      	ldr	r2, [pc, #96]	; (800360c <TIM_OC6_SetConfig+0xc8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00b      	beq.n	80035c8 <TIM_OC6_SetConfig+0x84>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a17      	ldr	r2, [pc, #92]	; (8003610 <TIM_OC6_SetConfig+0xcc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d007      	beq.n	80035c8 <TIM_OC6_SetConfig+0x84>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a16      	ldr	r2, [pc, #88]	; (8003614 <TIM_OC6_SetConfig+0xd0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_OC6_SetConfig+0x84>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a15      	ldr	r2, [pc, #84]	; (8003618 <TIM_OC6_SetConfig+0xd4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d109      	bne.n	80035dc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	029b      	lsls	r3, r3, #10
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	621a      	str	r2, [r3, #32]
}
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40012c00 	.word	0x40012c00
 8003608:	40013400 	.word	0x40013400
 800360c:	40014000 	.word	0x40014000
 8003610:	40014400 	.word	0x40014400
 8003614:	40014800 	.word	0x40014800
 8003618:	40015000 	.word	0x40015000

0800361c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364e:	f023 0307 	bic.w	r3, r3, #7
 8003652:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	4a56      	ldr	r2, [pc, #344]	; (80037c4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	f000 80a2 	beq.w	80037b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8003672:	4a54      	ldr	r2, [pc, #336]	; (80037c4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	f200 809b 	bhi.w	80037b0 <TIM_SlaveTimer_SetConfig+0x194>
 800367a:	4a53      	ldr	r2, [pc, #332]	; (80037c8 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800367c:	4293      	cmp	r3, r2
 800367e:	f000 809a 	beq.w	80037b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8003682:	4a51      	ldr	r2, [pc, #324]	; (80037c8 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8003684:	4293      	cmp	r3, r2
 8003686:	f200 8093 	bhi.w	80037b0 <TIM_SlaveTimer_SetConfig+0x194>
 800368a:	4a50      	ldr	r2, [pc, #320]	; (80037cc <TIM_SlaveTimer_SetConfig+0x1b0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	f000 8092 	beq.w	80037b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8003692:	4a4e      	ldr	r2, [pc, #312]	; (80037cc <TIM_SlaveTimer_SetConfig+0x1b0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	f200 808b 	bhi.w	80037b0 <TIM_SlaveTimer_SetConfig+0x194>
 800369a:	4a4d      	ldr	r2, [pc, #308]	; (80037d0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	f000 808a 	beq.w	80037b6 <TIM_SlaveTimer_SetConfig+0x19a>
 80036a2:	4a4b      	ldr	r2, [pc, #300]	; (80037d0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	f200 8083 	bhi.w	80037b0 <TIM_SlaveTimer_SetConfig+0x194>
 80036aa:	4a4a      	ldr	r2, [pc, #296]	; (80037d4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	f000 8082 	beq.w	80037b6 <TIM_SlaveTimer_SetConfig+0x19a>
 80036b2:	4a48      	ldr	r2, [pc, #288]	; (80037d4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d87b      	bhi.n	80037b0 <TIM_SlaveTimer_SetConfig+0x194>
 80036b8:	4a47      	ldr	r2, [pc, #284]	; (80037d8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d07b      	beq.n	80037b6 <TIM_SlaveTimer_SetConfig+0x19a>
 80036be:	4a46      	ldr	r2, [pc, #280]	; (80037d8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d875      	bhi.n	80037b0 <TIM_SlaveTimer_SetConfig+0x194>
 80036c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80036c8:	d075      	beq.n	80037b6 <TIM_SlaveTimer_SetConfig+0x19a>
 80036ca:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80036ce:	d86f      	bhi.n	80037b0 <TIM_SlaveTimer_SetConfig+0x194>
 80036d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036d4:	d06f      	beq.n	80037b6 <TIM_SlaveTimer_SetConfig+0x19a>
 80036d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036da:	d869      	bhi.n	80037b0 <TIM_SlaveTimer_SetConfig+0x194>
 80036dc:	2b70      	cmp	r3, #112	; 0x70
 80036de:	d01a      	beq.n	8003716 <TIM_SlaveTimer_SetConfig+0xfa>
 80036e0:	2b70      	cmp	r3, #112	; 0x70
 80036e2:	d865      	bhi.n	80037b0 <TIM_SlaveTimer_SetConfig+0x194>
 80036e4:	2b60      	cmp	r3, #96	; 0x60
 80036e6:	d059      	beq.n	800379c <TIM_SlaveTimer_SetConfig+0x180>
 80036e8:	2b60      	cmp	r3, #96	; 0x60
 80036ea:	d861      	bhi.n	80037b0 <TIM_SlaveTimer_SetConfig+0x194>
 80036ec:	2b50      	cmp	r3, #80	; 0x50
 80036ee:	d04b      	beq.n	8003788 <TIM_SlaveTimer_SetConfig+0x16c>
 80036f0:	2b50      	cmp	r3, #80	; 0x50
 80036f2:	d85d      	bhi.n	80037b0 <TIM_SlaveTimer_SetConfig+0x194>
 80036f4:	2b40      	cmp	r3, #64	; 0x40
 80036f6:	d019      	beq.n	800372c <TIM_SlaveTimer_SetConfig+0x110>
 80036f8:	2b40      	cmp	r3, #64	; 0x40
 80036fa:	d859      	bhi.n	80037b0 <TIM_SlaveTimer_SetConfig+0x194>
 80036fc:	2b30      	cmp	r3, #48	; 0x30
 80036fe:	d05a      	beq.n	80037b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8003700:	2b30      	cmp	r3, #48	; 0x30
 8003702:	d855      	bhi.n	80037b0 <TIM_SlaveTimer_SetConfig+0x194>
 8003704:	2b20      	cmp	r3, #32
 8003706:	d056      	beq.n	80037b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8003708:	2b20      	cmp	r3, #32
 800370a:	d851      	bhi.n	80037b0 <TIM_SlaveTimer_SetConfig+0x194>
 800370c:	2b00      	cmp	r3, #0
 800370e:	d052      	beq.n	80037b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8003710:	2b10      	cmp	r3, #16
 8003712:	d050      	beq.n	80037b6 <TIM_SlaveTimer_SetConfig+0x19a>
 8003714:	e04c      	b.n	80037b0 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003726:	f000 f8d5 	bl	80038d4 <TIM_ETR_SetConfig>
      break;
 800372a:	e045      	b.n	80037b8 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b05      	cmp	r3, #5
 8003732:	d004      	beq.n	800373e <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8003738:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800373c:	d101      	bne.n	8003742 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e03b      	b.n	80037ba <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6a1a      	ldr	r2, [r3, #32]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003768:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	4313      	orrs	r3, r2
 8003774:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	621a      	str	r2, [r3, #32]
      break;
 8003786:	e017      	b.n	80037b8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003794:	461a      	mov	r2, r3
 8003796:	f000 f821 	bl	80037dc <TIM_TI1_ConfigInputStage>
      break;
 800379a:	e00d      	b.n	80037b8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037a8:	461a      	mov	r2, r3
 80037aa:	f000 f846 	bl	800383a <TIM_TI2_ConfigInputStage>
      break;
 80037ae:	e003      	b.n	80037b8 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	75fb      	strb	r3, [r7, #23]
      break;
 80037b4:	e000      	b.n	80037b8 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 80037b6:	bf00      	nop
  }

  return status;
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	00100070 	.word	0x00100070
 80037c8:	00100060 	.word	0x00100060
 80037cc:	00100050 	.word	0x00100050
 80037d0:	00100040 	.word	0x00100040
 80037d4:	00100030 	.word	0x00100030
 80037d8:	00100020 	.word	0x00100020

080037dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f023 0201 	bic.w	r2, r3, #1
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f023 030a 	bic.w	r3, r3, #10
 8003818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800383a:	b480      	push	{r7}
 800383c:	b087      	sub	sp, #28
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f023 0210 	bic.w	r2, r3, #16
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003864:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	031b      	lsls	r3, r3, #12
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003876:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	621a      	str	r2, [r3, #32]
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800389a:	b480      	push	{r7}
 800389c:	b085      	sub	sp, #20
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80038b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f043 0307 	orr.w	r3, r3, #7
 80038c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	609a      	str	r2, [r3, #8]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	021a      	lsls	r2, r3, #8
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	609a      	str	r2, [r3, #8]
}
 8003908:	bf00      	nop
 800390a:	371c      	adds	r7, #28
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	2201      	movs	r2, #1
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1a      	ldr	r2, [r3, #32]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	43db      	mvns	r3, r3
 8003936:	401a      	ands	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a1a      	ldr	r2, [r3, #32]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f003 031f 	and.w	r3, r3, #31
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	431a      	orrs	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	621a      	str	r2, [r3, #32]
}
 8003952:	bf00      	nop
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003974:	2302      	movs	r3, #2
 8003976:	e074      	b.n	8003a62 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a34      	ldr	r2, [pc, #208]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d009      	beq.n	80039b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a33      	ldr	r2, [pc, #204]	; (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d004      	beq.n	80039b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a31      	ldr	r2, [pc, #196]	; (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d108      	bne.n	80039c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80039bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a21      	ldr	r2, [pc, #132]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d022      	beq.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f8:	d01d      	beq.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1f      	ldr	r2, [pc, #124]	; (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d018      	beq.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a1d      	ldr	r2, [pc, #116]	; (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d013      	beq.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1c      	ldr	r2, [pc, #112]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00e      	beq.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a15      	ldr	r2, [pc, #84]	; (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d009      	beq.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a18      	ldr	r2, [pc, #96]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d004      	beq.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a11      	ldr	r2, [pc, #68]	; (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d10c      	bne.n	8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40012c00 	.word	0x40012c00
 8003a74:	40013400 	.word	0x40013400
 8003a78:	40015000 	.word	0x40015000
 8003a7c:	40000400 	.word	0x40000400
 8003a80:	40000800 	.word	0x40000800
 8003a84:	40000c00 	.word	0x40000c00
 8003a88:	40014000 	.word	0x40014000

08003a8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e042      	b.n	8003b24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7fc ff65 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2224      	movs	r2, #36	; 0x24
 8003aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0201 	bic.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fb24 	bl	8004124 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f825 	bl	8003b2c <UART_SetConfig>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e01b      	b.n	8003b24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003afa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fba3 	bl	8004268 <UART_CheckIdleState>
 8003b22:	4603      	mov	r3, r0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b30:	b08c      	sub	sp, #48	; 0x30
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	4baa      	ldr	r3, [pc, #680]	; (8003e04 <UART_SetConfig+0x2d8>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a9f      	ldr	r2, [pc, #636]	; (8003e08 <UART_SetConfig+0x2dc>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d004      	beq.n	8003b98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b94:	4313      	orrs	r3, r2
 8003b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003ba2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bac:	430b      	orrs	r3, r1
 8003bae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	f023 010f 	bic.w	r1, r3, #15
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a90      	ldr	r2, [pc, #576]	; (8003e0c <UART_SetConfig+0x2e0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d125      	bne.n	8003c1c <UART_SetConfig+0xf0>
 8003bd0:	4b8f      	ldr	r3, [pc, #572]	; (8003e10 <UART_SetConfig+0x2e4>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d81a      	bhi.n	8003c14 <UART_SetConfig+0xe8>
 8003bde:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <UART_SetConfig+0xb8>)
 8003be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be4:	08003bf5 	.word	0x08003bf5
 8003be8:	08003c05 	.word	0x08003c05
 8003bec:	08003bfd 	.word	0x08003bfd
 8003bf0:	08003c0d 	.word	0x08003c0d
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bfa:	e116      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c02:	e112      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003c04:	2304      	movs	r3, #4
 8003c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c0a:	e10e      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003c0c:	2308      	movs	r3, #8
 8003c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c12:	e10a      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003c14:	2310      	movs	r3, #16
 8003c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c1a:	e106      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a7c      	ldr	r2, [pc, #496]	; (8003e14 <UART_SetConfig+0x2e8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d138      	bne.n	8003c98 <UART_SetConfig+0x16c>
 8003c26:	4b7a      	ldr	r3, [pc, #488]	; (8003e10 <UART_SetConfig+0x2e4>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2c:	f003 030c 	and.w	r3, r3, #12
 8003c30:	2b0c      	cmp	r3, #12
 8003c32:	d82d      	bhi.n	8003c90 <UART_SetConfig+0x164>
 8003c34:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <UART_SetConfig+0x110>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c71 	.word	0x08003c71
 8003c40:	08003c91 	.word	0x08003c91
 8003c44:	08003c91 	.word	0x08003c91
 8003c48:	08003c91 	.word	0x08003c91
 8003c4c:	08003c81 	.word	0x08003c81
 8003c50:	08003c91 	.word	0x08003c91
 8003c54:	08003c91 	.word	0x08003c91
 8003c58:	08003c91 	.word	0x08003c91
 8003c5c:	08003c79 	.word	0x08003c79
 8003c60:	08003c91 	.word	0x08003c91
 8003c64:	08003c91 	.word	0x08003c91
 8003c68:	08003c91 	.word	0x08003c91
 8003c6c:	08003c89 	.word	0x08003c89
 8003c70:	2300      	movs	r3, #0
 8003c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c76:	e0d8      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7e:	e0d4      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003c80:	2304      	movs	r3, #4
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c86:	e0d0      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003c88:	2308      	movs	r3, #8
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c8e:	e0cc      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003c90:	2310      	movs	r3, #16
 8003c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c96:	e0c8      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a5e      	ldr	r2, [pc, #376]	; (8003e18 <UART_SetConfig+0x2ec>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d125      	bne.n	8003cee <UART_SetConfig+0x1c2>
 8003ca2:	4b5b      	ldr	r3, [pc, #364]	; (8003e10 <UART_SetConfig+0x2e4>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cac:	2b30      	cmp	r3, #48	; 0x30
 8003cae:	d016      	beq.n	8003cde <UART_SetConfig+0x1b2>
 8003cb0:	2b30      	cmp	r3, #48	; 0x30
 8003cb2:	d818      	bhi.n	8003ce6 <UART_SetConfig+0x1ba>
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d00a      	beq.n	8003cce <UART_SetConfig+0x1a2>
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d814      	bhi.n	8003ce6 <UART_SetConfig+0x1ba>
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <UART_SetConfig+0x19a>
 8003cc0:	2b10      	cmp	r3, #16
 8003cc2:	d008      	beq.n	8003cd6 <UART_SetConfig+0x1aa>
 8003cc4:	e00f      	b.n	8003ce6 <UART_SetConfig+0x1ba>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ccc:	e0ad      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cd4:	e0a9      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003cd6:	2304      	movs	r3, #4
 8003cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cdc:	e0a5      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003cde:	2308      	movs	r3, #8
 8003ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ce4:	e0a1      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003ce6:	2310      	movs	r3, #16
 8003ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cec:	e09d      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a4a      	ldr	r2, [pc, #296]	; (8003e1c <UART_SetConfig+0x2f0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d125      	bne.n	8003d44 <UART_SetConfig+0x218>
 8003cf8:	4b45      	ldr	r3, [pc, #276]	; (8003e10 <UART_SetConfig+0x2e4>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d02:	2bc0      	cmp	r3, #192	; 0xc0
 8003d04:	d016      	beq.n	8003d34 <UART_SetConfig+0x208>
 8003d06:	2bc0      	cmp	r3, #192	; 0xc0
 8003d08:	d818      	bhi.n	8003d3c <UART_SetConfig+0x210>
 8003d0a:	2b80      	cmp	r3, #128	; 0x80
 8003d0c:	d00a      	beq.n	8003d24 <UART_SetConfig+0x1f8>
 8003d0e:	2b80      	cmp	r3, #128	; 0x80
 8003d10:	d814      	bhi.n	8003d3c <UART_SetConfig+0x210>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <UART_SetConfig+0x1f0>
 8003d16:	2b40      	cmp	r3, #64	; 0x40
 8003d18:	d008      	beq.n	8003d2c <UART_SetConfig+0x200>
 8003d1a:	e00f      	b.n	8003d3c <UART_SetConfig+0x210>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d22:	e082      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003d24:	2302      	movs	r3, #2
 8003d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d2a:	e07e      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d32:	e07a      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003d34:	2308      	movs	r3, #8
 8003d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d3a:	e076      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d42:	e072      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a35      	ldr	r2, [pc, #212]	; (8003e20 <UART_SetConfig+0x2f4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d12a      	bne.n	8003da4 <UART_SetConfig+0x278>
 8003d4e:	4b30      	ldr	r3, [pc, #192]	; (8003e10 <UART_SetConfig+0x2e4>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d5c:	d01a      	beq.n	8003d94 <UART_SetConfig+0x268>
 8003d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d62:	d81b      	bhi.n	8003d9c <UART_SetConfig+0x270>
 8003d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d68:	d00c      	beq.n	8003d84 <UART_SetConfig+0x258>
 8003d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6e:	d815      	bhi.n	8003d9c <UART_SetConfig+0x270>
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <UART_SetConfig+0x250>
 8003d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d78:	d008      	beq.n	8003d8c <UART_SetConfig+0x260>
 8003d7a:	e00f      	b.n	8003d9c <UART_SetConfig+0x270>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d82:	e052      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003d84:	2302      	movs	r3, #2
 8003d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d8a:	e04e      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d92:	e04a      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003d94:	2308      	movs	r3, #8
 8003d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d9a:	e046      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003d9c:	2310      	movs	r3, #16
 8003d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da2:	e042      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <UART_SetConfig+0x2dc>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d13a      	bne.n	8003e24 <UART_SetConfig+0x2f8>
 8003dae:	4b18      	ldr	r3, [pc, #96]	; (8003e10 <UART_SetConfig+0x2e4>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003db8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dbc:	d01a      	beq.n	8003df4 <UART_SetConfig+0x2c8>
 8003dbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dc2:	d81b      	bhi.n	8003dfc <UART_SetConfig+0x2d0>
 8003dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc8:	d00c      	beq.n	8003de4 <UART_SetConfig+0x2b8>
 8003dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dce:	d815      	bhi.n	8003dfc <UART_SetConfig+0x2d0>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <UART_SetConfig+0x2b0>
 8003dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd8:	d008      	beq.n	8003dec <UART_SetConfig+0x2c0>
 8003dda:	e00f      	b.n	8003dfc <UART_SetConfig+0x2d0>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de2:	e022      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003de4:	2302      	movs	r3, #2
 8003de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dea:	e01e      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003dec:	2304      	movs	r3, #4
 8003dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003df2:	e01a      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003df4:	2308      	movs	r3, #8
 8003df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dfa:	e016      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e02:	e012      	b.n	8003e2a <UART_SetConfig+0x2fe>
 8003e04:	cfff69f3 	.word	0xcfff69f3
 8003e08:	40008000 	.word	0x40008000
 8003e0c:	40013800 	.word	0x40013800
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40004400 	.word	0x40004400
 8003e18:	40004800 	.word	0x40004800
 8003e1c:	40004c00 	.word	0x40004c00
 8003e20:	40005000 	.word	0x40005000
 8003e24:	2310      	movs	r3, #16
 8003e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4aae      	ldr	r2, [pc, #696]	; (80040e8 <UART_SetConfig+0x5bc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	f040 8097 	bne.w	8003f64 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d823      	bhi.n	8003e86 <UART_SetConfig+0x35a>
 8003e3e:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <UART_SetConfig+0x318>)
 8003e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e44:	08003e69 	.word	0x08003e69
 8003e48:	08003e87 	.word	0x08003e87
 8003e4c:	08003e71 	.word	0x08003e71
 8003e50:	08003e87 	.word	0x08003e87
 8003e54:	08003e77 	.word	0x08003e77
 8003e58:	08003e87 	.word	0x08003e87
 8003e5c:	08003e87 	.word	0x08003e87
 8003e60:	08003e87 	.word	0x08003e87
 8003e64:	08003e7f 	.word	0x08003e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e68:	f7fd ff8e 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 8003e6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e6e:	e010      	b.n	8003e92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e70:	4b9e      	ldr	r3, [pc, #632]	; (80040ec <UART_SetConfig+0x5c0>)
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e74:	e00d      	b.n	8003e92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e76:	f7fd ff19 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8003e7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e7c:	e009      	b.n	8003e92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e84:	e005      	b.n	8003e92 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 8130 	beq.w	80040fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	4a94      	ldr	r2, [pc, #592]	; (80040f0 <UART_SetConfig+0x5c4>)
 8003ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	4413      	add	r3, r2
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d305      	bcc.n	8003eca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d903      	bls.n	8003ed2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ed0:	e113      	b.n	80040fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	60fa      	str	r2, [r7, #12]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	4a84      	ldr	r2, [pc, #528]	; (80040f0 <UART_SetConfig+0x5c4>)
 8003ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ef0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ef4:	f7fc f990 	bl	8000218 <__aeabi_uldivmod>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	020b      	lsls	r3, r1, #8
 8003f0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f0e:	0202      	lsls	r2, r0, #8
 8003f10:	6979      	ldr	r1, [r7, #20]
 8003f12:	6849      	ldr	r1, [r1, #4]
 8003f14:	0849      	lsrs	r1, r1, #1
 8003f16:	2000      	movs	r0, #0
 8003f18:	460c      	mov	r4, r1
 8003f1a:	4605      	mov	r5, r0
 8003f1c:	eb12 0804 	adds.w	r8, r2, r4
 8003f20:	eb43 0905 	adc.w	r9, r3, r5
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	469a      	mov	sl, r3
 8003f2c:	4693      	mov	fp, r2
 8003f2e:	4652      	mov	r2, sl
 8003f30:	465b      	mov	r3, fp
 8003f32:	4640      	mov	r0, r8
 8003f34:	4649      	mov	r1, r9
 8003f36:	f7fc f96f 	bl	8000218 <__aeabi_uldivmod>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4613      	mov	r3, r2
 8003f40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f48:	d308      	bcc.n	8003f5c <UART_SetConfig+0x430>
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f50:	d204      	bcs.n	8003f5c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a3a      	ldr	r2, [r7, #32]
 8003f58:	60da      	str	r2, [r3, #12]
 8003f5a:	e0ce      	b.n	80040fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f62:	e0ca      	b.n	80040fa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6c:	d166      	bne.n	800403c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003f6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d827      	bhi.n	8003fc6 <UART_SetConfig+0x49a>
 8003f76:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <UART_SetConfig+0x450>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	08003fa1 	.word	0x08003fa1
 8003f80:	08003fa9 	.word	0x08003fa9
 8003f84:	08003fb1 	.word	0x08003fb1
 8003f88:	08003fc7 	.word	0x08003fc7
 8003f8c:	08003fb7 	.word	0x08003fb7
 8003f90:	08003fc7 	.word	0x08003fc7
 8003f94:	08003fc7 	.word	0x08003fc7
 8003f98:	08003fc7 	.word	0x08003fc7
 8003f9c:	08003fbf 	.word	0x08003fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa0:	f7fd fef2 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 8003fa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fa6:	e014      	b.n	8003fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa8:	f7fd ff04 	bl	8001db4 <HAL_RCC_GetPCLK2Freq>
 8003fac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fae:	e010      	b.n	8003fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb0:	4b4e      	ldr	r3, [pc, #312]	; (80040ec <UART_SetConfig+0x5c0>)
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fb4:	e00d      	b.n	8003fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb6:	f7fd fe79 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8003fba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fbc:	e009      	b.n	8003fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fc4:	e005      	b.n	8003fd2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 8090 	beq.w	80040fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	4a44      	ldr	r2, [pc, #272]	; (80040f0 <UART_SetConfig+0x5c4>)
 8003fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fec:	005a      	lsls	r2, r3, #1
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	085b      	lsrs	r3, r3, #1
 8003ff4:	441a      	add	r2, r3
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	2b0f      	cmp	r3, #15
 8004004:	d916      	bls.n	8004034 <UART_SetConfig+0x508>
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400c:	d212      	bcs.n	8004034 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	b29b      	uxth	r3, r3
 8004012:	f023 030f 	bic.w	r3, r3, #15
 8004016:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	b29b      	uxth	r3, r3
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	b29a      	uxth	r2, r3
 8004024:	8bfb      	ldrh	r3, [r7, #30]
 8004026:	4313      	orrs	r3, r2
 8004028:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	8bfa      	ldrh	r2, [r7, #30]
 8004030:	60da      	str	r2, [r3, #12]
 8004032:	e062      	b.n	80040fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800403a:	e05e      	b.n	80040fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800403c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004040:	2b08      	cmp	r3, #8
 8004042:	d828      	bhi.n	8004096 <UART_SetConfig+0x56a>
 8004044:	a201      	add	r2, pc, #4	; (adr r2, 800404c <UART_SetConfig+0x520>)
 8004046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404a:	bf00      	nop
 800404c:	08004071 	.word	0x08004071
 8004050:	08004079 	.word	0x08004079
 8004054:	08004081 	.word	0x08004081
 8004058:	08004097 	.word	0x08004097
 800405c:	08004087 	.word	0x08004087
 8004060:	08004097 	.word	0x08004097
 8004064:	08004097 	.word	0x08004097
 8004068:	08004097 	.word	0x08004097
 800406c:	0800408f 	.word	0x0800408f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004070:	f7fd fe8a 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 8004074:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004076:	e014      	b.n	80040a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004078:	f7fd fe9c 	bl	8001db4 <HAL_RCC_GetPCLK2Freq>
 800407c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800407e:	e010      	b.n	80040a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004080:	4b1a      	ldr	r3, [pc, #104]	; (80040ec <UART_SetConfig+0x5c0>)
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004084:	e00d      	b.n	80040a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004086:	f7fd fe11 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 800408a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800408c:	e009      	b.n	80040a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800408e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004094:	e005      	b.n	80040a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040a0:	bf00      	nop
    }

    if (pclk != 0U)
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d028      	beq.n	80040fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	4a10      	ldr	r2, [pc, #64]	; (80040f0 <UART_SetConfig+0x5c4>)
 80040ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040b2:	461a      	mov	r2, r3
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	085b      	lsrs	r3, r3, #1
 80040c0:	441a      	add	r2, r3
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	2b0f      	cmp	r3, #15
 80040d0:	d910      	bls.n	80040f4 <UART_SetConfig+0x5c8>
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d8:	d20c      	bcs.n	80040f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	b29a      	uxth	r2, r3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	60da      	str	r2, [r3, #12]
 80040e4:	e009      	b.n	80040fa <UART_SetConfig+0x5ce>
 80040e6:	bf00      	nop
 80040e8:	40008000 	.word	0x40008000
 80040ec:	00f42400 	.word	0x00f42400
 80040f0:	080047f0 	.word	0x080047f0
      }
      else
      {
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2201      	movs	r2, #1
 8004106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2200      	movs	r2, #0
 800410e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2200      	movs	r2, #0
 8004114:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004116:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800411a:	4618      	mov	r0, r3
 800411c:	3730      	adds	r7, #48	; 0x30
 800411e:	46bd      	mov	sp, r7
 8004120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01a      	beq.n	800423a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004222:	d10a      	bne.n	800423a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	605a      	str	r2, [r3, #4]
  }
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b098      	sub	sp, #96	; 0x60
 800426c:	af02      	add	r7, sp, #8
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004278:	f7fc fd3c 	bl	8000cf4 <HAL_GetTick>
 800427c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b08      	cmp	r3, #8
 800428a:	d12f      	bne.n	80042ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800428c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004294:	2200      	movs	r2, #0
 8004296:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f88e 	bl	80043bc <UART_WaitOnFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d022      	beq.n	80042ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ba:	653b      	str	r3, [r7, #80]	; 0x50
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c4:	647b      	str	r3, [r7, #68]	; 0x44
 80042c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e6      	bne.n	80042a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e063      	b.n	80043b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d149      	bne.n	800438e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004302:	2200      	movs	r2, #0
 8004304:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f857 	bl	80043bc <UART_WaitOnFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d03c      	beq.n	800438e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	623b      	str	r3, [r7, #32]
   return(result);
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004328:	64fb      	str	r3, [r7, #76]	; 0x4c
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004332:	633b      	str	r3, [r7, #48]	; 0x30
 8004334:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e6      	bne.n	8004314 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3308      	adds	r3, #8
 800434c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	60fb      	str	r3, [r7, #12]
   return(result);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	64bb      	str	r3, [r7, #72]	; 0x48
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3308      	adds	r3, #8
 8004364:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004366:	61fa      	str	r2, [r7, #28]
 8004368:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	69b9      	ldr	r1, [r7, #24]
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	617b      	str	r3, [r7, #20]
   return(result);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e5      	bne.n	8004346 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e012      	b.n	80043b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3758      	adds	r7, #88	; 0x58
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043cc:	e04f      	b.n	800446e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d04b      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d6:	f7fc fc8d 	bl	8000cf4 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d302      	bcc.n	80043ec <UART_WaitOnFlagUntilTimeout+0x30>
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e04e      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d037      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0xb2>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b80      	cmp	r3, #128	; 0x80
 8004402:	d034      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b40      	cmp	r3, #64	; 0x40
 8004408:	d031      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b08      	cmp	r3, #8
 8004416:	d110      	bne.n	800443a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2208      	movs	r2, #8
 800441e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f838 	bl	8004496 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2208      	movs	r2, #8
 800442a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e029      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004448:	d111      	bne.n	800446e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004452:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f81e 	bl	8004496 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e00f      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4013      	ands	r3, r2
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	bf0c      	ite	eq
 800447e:	2301      	moveq	r3, #1
 8004480:	2300      	movne	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	429a      	cmp	r2, r3
 800448a:	d0a0      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004496:	b480      	push	{r7}
 8004498:	b095      	sub	sp, #84	; 0x54
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044bc:	643b      	str	r3, [r7, #64]	; 0x40
 80044be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e6      	bne.n	800449e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3308      	adds	r3, #8
 80044d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	61fb      	str	r3, [r7, #28]
   return(result);
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e6:	f023 0301 	bic.w	r3, r3, #1
 80044ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3308      	adds	r3, #8
 80044f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e3      	bne.n	80044d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d118      	bne.n	8004542 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	60bb      	str	r3, [r7, #8]
   return(result);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f023 0310 	bic.w	r3, r3, #16
 8004524:	647b      	str	r3, [r7, #68]	; 0x44
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6979      	ldr	r1, [r7, #20]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	613b      	str	r3, [r7, #16]
   return(result);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e6      	bne.n	8004510 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004556:	bf00      	nop
 8004558:	3754      	adds	r7, #84	; 0x54
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_UARTEx_DisableFifoMode+0x16>
 8004574:	2302      	movs	r3, #2
 8004576:	e027      	b.n	80045c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2224      	movs	r2, #36	; 0x24
 8004584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0201 	bic.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80045a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e02d      	b.n	8004648 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2224      	movs	r2, #36	; 0x24
 80045f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f84f 	bl	80046cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004664:	2302      	movs	r3, #2
 8004666:	e02d      	b.n	80046c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2224      	movs	r2, #36	; 0x24
 8004674:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0201 	bic.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f811 	bl	80046cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d108      	bne.n	80046ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046ec:	e031      	b.n	8004752 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046ee:	2308      	movs	r3, #8
 80046f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046f2:	2308      	movs	r3, #8
 80046f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	0e5b      	lsrs	r3, r3, #25
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	0f5b      	lsrs	r3, r3, #29
 800470e:	b2db      	uxtb	r3, r3
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004716:	7bbb      	ldrb	r3, [r7, #14]
 8004718:	7b3a      	ldrb	r2, [r7, #12]
 800471a:	4911      	ldr	r1, [pc, #68]	; (8004760 <UARTEx_SetNbDataToProcess+0x94>)
 800471c:	5c8a      	ldrb	r2, [r1, r2]
 800471e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004722:	7b3a      	ldrb	r2, [r7, #12]
 8004724:	490f      	ldr	r1, [pc, #60]	; (8004764 <UARTEx_SetNbDataToProcess+0x98>)
 8004726:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004728:	fb93 f3f2 	sdiv	r3, r3, r2
 800472c:	b29a      	uxth	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004734:	7bfb      	ldrb	r3, [r7, #15]
 8004736:	7b7a      	ldrb	r2, [r7, #13]
 8004738:	4909      	ldr	r1, [pc, #36]	; (8004760 <UARTEx_SetNbDataToProcess+0x94>)
 800473a:	5c8a      	ldrb	r2, [r1, r2]
 800473c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004740:	7b7a      	ldrb	r2, [r7, #13]
 8004742:	4908      	ldr	r1, [pc, #32]	; (8004764 <UARTEx_SetNbDataToProcess+0x98>)
 8004744:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004746:	fb93 f3f2 	sdiv	r3, r3, r2
 800474a:	b29a      	uxth	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004752:	bf00      	nop
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	08004808 	.word	0x08004808
 8004764:	08004810 	.word	0x08004810

08004768 <memset>:
 8004768:	4402      	add	r2, r0
 800476a:	4603      	mov	r3, r0
 800476c:	4293      	cmp	r3, r2
 800476e:	d100      	bne.n	8004772 <memset+0xa>
 8004770:	4770      	bx	lr
 8004772:	f803 1b01 	strb.w	r1, [r3], #1
 8004776:	e7f9      	b.n	800476c <memset+0x4>

08004778 <__libc_init_array>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	4d0d      	ldr	r5, [pc, #52]	; (80047b0 <__libc_init_array+0x38>)
 800477c:	4c0d      	ldr	r4, [pc, #52]	; (80047b4 <__libc_init_array+0x3c>)
 800477e:	1b64      	subs	r4, r4, r5
 8004780:	10a4      	asrs	r4, r4, #2
 8004782:	2600      	movs	r6, #0
 8004784:	42a6      	cmp	r6, r4
 8004786:	d109      	bne.n	800479c <__libc_init_array+0x24>
 8004788:	4d0b      	ldr	r5, [pc, #44]	; (80047b8 <__libc_init_array+0x40>)
 800478a:	4c0c      	ldr	r4, [pc, #48]	; (80047bc <__libc_init_array+0x44>)
 800478c:	f000 f818 	bl	80047c0 <_init>
 8004790:	1b64      	subs	r4, r4, r5
 8004792:	10a4      	asrs	r4, r4, #2
 8004794:	2600      	movs	r6, #0
 8004796:	42a6      	cmp	r6, r4
 8004798:	d105      	bne.n	80047a6 <__libc_init_array+0x2e>
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a0:	4798      	blx	r3
 80047a2:	3601      	adds	r6, #1
 80047a4:	e7ee      	b.n	8004784 <__libc_init_array+0xc>
 80047a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047aa:	4798      	blx	r3
 80047ac:	3601      	adds	r6, #1
 80047ae:	e7f2      	b.n	8004796 <__libc_init_array+0x1e>
 80047b0:	08004820 	.word	0x08004820
 80047b4:	08004820 	.word	0x08004820
 80047b8:	08004820 	.word	0x08004820
 80047bc:	08004824 	.word	0x08004824

080047c0 <_init>:
 80047c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c2:	bf00      	nop
 80047c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047c6:	bc08      	pop	{r3}
 80047c8:	469e      	mov	lr, r3
 80047ca:	4770      	bx	lr

080047cc <_fini>:
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ce:	bf00      	nop
 80047d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d2:	bc08      	pop	{r3}
 80047d4:	469e      	mov	lr, r3
 80047d6:	4770      	bx	lr
