
T2_control_lab474.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007450  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007628  08007628  00017628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007668  08007668  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007668  08007668  00017668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007670  08007670  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007674  08007674  00017674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000018  0800768c  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  0800768c  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013766  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002697  00000000  00000000  000337ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00035e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba7  00000000  00000000  00036db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000272cb  00000000  00000000  00037957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121be  00000000  00000000  0005ec22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102be9  00000000  00000000  00070de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fd0  00000000  00000000  001739cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0017799c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007610 	.word	0x08007610

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08007610 	.word	0x08007610

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fe42 	bl	80011a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f91b 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fad7 	bl	8000ad4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000526:	f000 faab 	bl	8000a80 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800052a:	f000 fa13 	bl	8000954 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800052e:	f000 fa5b 	bl	80009e8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000532:	f000 f95d 	bl	80007f0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000536:	f000 f9d3 	bl	80008e0 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  UART_con();
 800053a:	f000 fb39 	bl	8000bb0 <UART_con>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 20);
 800053e:	2214      	movs	r2, #20
 8000540:	496f      	ldr	r1, [pc, #444]	; (8000700 <main+0x1ec>)
 8000542:	4870      	ldr	r0, [pc, #448]	; (8000704 <main+0x1f0>)
 8000544:	f001 fa9a 	bl	8001a7c <HAL_ADC_Start_DMA>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000548:	2100      	movs	r1, #0
 800054a:	486f      	ldr	r0, [pc, #444]	; (8000708 <main+0x1f4>)
 800054c:	f002 fdee 	bl	800312c <HAL_DAC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  PWM = (((int16_t)shift2 << 8) | RxBuffer[1]);
	  if (timestamp + 20 >= HAL_GetTick())
 8000550:	4b6e      	ldr	r3, [pc, #440]	; (800070c <main+0x1f8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f103 0614 	add.w	r6, r3, #20
 8000558:	f000 fe88 	bl	800126c <HAL_GetTick>
 800055c:	4603      	mov	r3, r0
 800055e:	429e      	cmp	r6, r3
 8000560:	f080 80cb 	bcs.w	80006fa <main+0x1e6>
	  {
		  continue;
	  }
//

	  avg_in = 0;
 8000564:	4b6a      	ldr	r3, [pc, #424]	; (8000710 <main+0x1fc>)
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
	  for(int i=0;i <= 19 ;i ++)
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	e00c      	b.n	800058a <main+0x76>
	  {
		  avg_in += ADC_RawRead[i];
 8000570:	4a63      	ldr	r2, [pc, #396]	; (8000700 <main+0x1ec>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000578:	461a      	mov	r2, r3
 800057a:	4b65      	ldr	r3, [pc, #404]	; (8000710 <main+0x1fc>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4413      	add	r3, r2
 8000580:	4a63      	ldr	r2, [pc, #396]	; (8000710 <main+0x1fc>)
 8000582:	6013      	str	r3, [r2, #0]
	  for(int i=0;i <= 19 ;i ++)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3301      	adds	r3, #1
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b13      	cmp	r3, #19
 800058e:	ddef      	ble.n	8000570 <main+0x5c>
	  }
	  avg_in2 = avg_in /20;
 8000590:	4b5f      	ldr	r3, [pc, #380]	; (8000710 <main+0x1fc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a5f      	ldr	r2, [pc, #380]	; (8000714 <main+0x200>)
 8000596:	fba2 2303 	umull	r2, r3, r2, r3
 800059a:	091b      	lsrs	r3, r3, #4
 800059c:	4a5e      	ldr	r2, [pc, #376]	; (8000718 <main+0x204>)
 800059e:	6013      	str	r3, [r2, #0]
	  ADC = avg_in2;
 80005a0:	4b5d      	ldr	r3, [pc, #372]	; (8000718 <main+0x204>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	4b5d      	ldr	r3, [pc, #372]	; (800071c <main+0x208>)
 80005a8:	801a      	strh	r2, [r3, #0]



	  // pos
	  input = ADC;
 80005aa:	4b5c      	ldr	r3, [pc, #368]	; (800071c <main+0x208>)
 80005ac:	881a      	ldrh	r2, [r3, #0]
 80005ae:	4b5c      	ldr	r3, [pc, #368]	; (8000720 <main+0x20c>)
 80005b0:	801a      	strh	r2, [r3, #0]
	  diff = input - input_prev;
 80005b2:	4b5b      	ldr	r3, [pc, #364]	; (8000720 <main+0x20c>)
 80005b4:	881a      	ldrh	r2, [r3, #0]
 80005b6:	4b5b      	ldr	r3, [pc, #364]	; (8000724 <main+0x210>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	b29b      	uxth	r3, r3
 80005be:	b21a      	sxth	r2, r3
 80005c0:	4b59      	ldr	r3, [pc, #356]	; (8000728 <main+0x214>)
 80005c2:	801a      	strh	r2, [r3, #0]
	  if (diff > 2048|| diff < -2048 )
 80005c4:	4b58      	ldr	r3, [pc, #352]	; (8000728 <main+0x214>)
 80005c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005ce:	dc05      	bgt.n	80005dc <main+0xc8>
 80005d0:	4b55      	ldr	r3, [pc, #340]	; (8000728 <main+0x214>)
 80005d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005d6:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 80005da:	da09      	bge.n	80005f0 <main+0xdc>
	  {
		  check += 1;
 80005dc:	4b53      	ldr	r3, [pc, #332]	; (800072c <main+0x218>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	4a52      	ldr	r2, [pc, #328]	; (800072c <main+0x218>)
 80005e4:	6013      	str	r3, [r2, #0]
		  input_prev = input;
 80005e6:	4b4e      	ldr	r3, [pc, #312]	; (8000720 <main+0x20c>)
 80005e8:	881a      	ldrh	r2, [r3, #0]
 80005ea:	4b4e      	ldr	r3, [pc, #312]	; (8000724 <main+0x210>)
 80005ec:	801a      	strh	r2, [r3, #0]

		  continue;
 80005ee:	e085      	b.n	80006fc <main+0x1e8>
	  }
	  if (diff > noise && diff > 0)
 80005f0:	4b4d      	ldr	r3, [pc, #308]	; (8000728 <main+0x214>)
 80005f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005f6:	4b4e      	ldr	r3, [pc, #312]	; (8000730 <main+0x21c>)
 80005f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dd2d      	ble.n	800065c <main+0x148>
 8000600:	4b49      	ldr	r3, [pc, #292]	; (8000728 <main+0x214>)
 8000602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000606:	2b00      	cmp	r3, #0
 8000608:	dd28      	ble.n	800065c <main+0x148>
	  {
		  check2 += 1;
 800060a:	4b4a      	ldr	r3, [pc, #296]	; (8000734 <main+0x220>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	b29a      	uxth	r2, r3
 8000612:	4b48      	ldr	r3, [pc, #288]	; (8000734 <main+0x220>)
 8000614:	801a      	strh	r2, [r3, #0]
		  if (start == 0)
 8000616:	4b48      	ldr	r3, [pc, #288]	; (8000738 <main+0x224>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d110      	bne.n	8000640 <main+0x12c>
		  {
			  input_prev = input;
 800061e:	4b40      	ldr	r3, [pc, #256]	; (8000720 <main+0x20c>)
 8000620:	881a      	ldrh	r2, [r3, #0]
 8000622:	4b40      	ldr	r3, [pc, #256]	; (8000724 <main+0x210>)
 8000624:	801a      	strh	r2, [r3, #0]
			  start = 1;
 8000626:	4b44      	ldr	r3, [pc, #272]	; (8000738 <main+0x224>)
 8000628:	2201      	movs	r2, #1
 800062a:	601a      	str	r2, [r3, #0]
			  time = HAL_GetTick();
 800062c:	f000 fe1e 	bl	800126c <HAL_GetTick>
 8000630:	4603      	mov	r3, r0
 8000632:	2200      	movs	r2, #0
 8000634:	461c      	mov	r4, r3
 8000636:	4615      	mov	r5, r2
 8000638:	4b40      	ldr	r3, [pc, #256]	; (800073c <main+0x228>)
 800063a:	e9c3 4500 	strd	r4, r5, [r3]
			  continue;
 800063e:	e05d      	b.n	80006fc <main+0x1e8>
		  }
		position += diff;
 8000640:	4b3f      	ldr	r3, [pc, #252]	; (8000740 <main+0x22c>)
 8000642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b37      	ldr	r3, [pc, #220]	; (8000728 <main+0x214>)
 800064a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800064e:	b29b      	uxth	r3, r3
 8000650:	4413      	add	r3, r2
 8000652:	b29b      	uxth	r3, r3
 8000654:	b21a      	sxth	r2, r3
 8000656:	4b3a      	ldr	r3, [pc, #232]	; (8000740 <main+0x22c>)
 8000658:	801a      	strh	r2, [r3, #0]
 800065a:	e014      	b.n	8000686 <main+0x172>
	  }
	  else if (diff < negative_noise)
 800065c:	4b32      	ldr	r3, [pc, #200]	; (8000728 <main+0x214>)
 800065e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <main+0x230>)
 8000664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000668:	429a      	cmp	r2, r3
 800066a:	da0c      	bge.n	8000686 <main+0x172>
	  {
			position += diff;
 800066c:	4b34      	ldr	r3, [pc, #208]	; (8000740 <main+0x22c>)
 800066e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000672:	b29a      	uxth	r2, r3
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <main+0x214>)
 8000676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800067a:	b29b      	uxth	r3, r3
 800067c:	4413      	add	r3, r2
 800067e:	b29b      	uxth	r3, r3
 8000680:	b21a      	sxth	r2, r3
 8000682:	4b2f      	ldr	r3, [pc, #188]	; (8000740 <main+0x22c>)
 8000684:	801a      	strh	r2, [r3, #0]
	  }

	  input_prev = input;
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <main+0x20c>)
 8000688:	881a      	ldrh	r2, [r3, #0]
 800068a:	4b26      	ldr	r3, [pc, #152]	; (8000724 <main+0x210>)
 800068c:	801a      	strh	r2, [r3, #0]


	  //
	  position_wrap = map_value(position);
 800068e:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <main+0x22c>)
 8000690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fb21 	bl	8000cdc <map_value>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <main+0x234>)
 80006a0:	801a      	strh	r2, [r3, #0]
	  position_degree = (position_wrap * 360)/4096;
 80006a2:	4b29      	ldr	r3, [pc, #164]	; (8000748 <main+0x234>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80006ac:	fb02 f303 	mul.w	r3, r2, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	da01      	bge.n	80006b8 <main+0x1a4>
 80006b4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80006b8:	131b      	asrs	r3, r3, #12
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <main+0x238>)
 80006be:	801a      	strh	r2, [r3, #0]

	  TxBuffer[0] = 69;
 80006c0:	4b23      	ldr	r3, [pc, #140]	; (8000750 <main+0x23c>)
 80006c2:	2245      	movs	r2, #69	; 0x45
 80006c4:	701a      	strb	r2, [r3, #0]
//
	  TxBuffer[1] = position_degree & 0xff;
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <main+0x238>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b20      	ldr	r3, [pc, #128]	; (8000750 <main+0x23c>)
 80006ce:	705a      	strb	r2, [r3, #1]
	  TxBuffer[2] = (position_degree >> 8) & 0xff;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <main+0x238>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	0a1b      	lsrs	r3, r3, #8
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <main+0x23c>)
 80006dc:	709a      	strb	r2, [r3, #2]

//	  TxBuffer[1] = 100 & 0xff;
//	  TxBuffer[2] = (49 + state) & 0xff;

	  TxBuffer[3] = '\n'; // /n
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <main+0x23c>)
 80006e0:	220a      	movs	r2, #10
 80006e2:	70da      	strb	r2, [r3, #3]
//
//	  HAL_UART_Transmit(&huart1,TxBuffer, 4,10);
//	  HAL_UART_Transmit(&huart1,TxBuffer, 4,10);
	  HAL_UART_Transmit_IT(&hlpuart1,TxBuffer,4);
 80006e4:	2204      	movs	r2, #4
 80006e6:	491a      	ldr	r1, [pc, #104]	; (8000750 <main+0x23c>)
 80006e8:	481a      	ldr	r0, [pc, #104]	; (8000754 <main+0x240>)
 80006ea:	f004 fce1 	bl	80050b0 <HAL_UART_Transmit_IT>
//	  state += 1;
//	  if (state == 10)
//	  {
//		  state = 0;
//	  }
	  timestamp = HAL_GetTick();
 80006ee:	f000 fdbd 	bl	800126c <HAL_GetTick>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a05      	ldr	r2, [pc, #20]	; (800070c <main+0x1f8>)
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	e72a      	b.n	8000550 <main+0x3c>
		  continue;
 80006fa:	bf00      	nop
	  if (timestamp + 20 >= HAL_GetTick())
 80006fc:	e728      	b.n	8000550 <main+0x3c>
 80006fe:	bf00      	nop
 8000700:	2000023c 	.word	0x2000023c
 8000704:	20000034 	.word	0x20000034
 8000708:	20000100 	.word	0x20000100
 800070c:	20000270 	.word	0x20000270
 8000710:	20000278 	.word	0x20000278
 8000714:	cccccccd 	.word	0xcccccccd
 8000718:	2000027c 	.word	0x2000027c
 800071c:	20000000 	.word	0x20000000
 8000720:	20000284 	.word	0x20000284
 8000724:	20000286 	.word	0x20000286
 8000728:	20000288 	.word	0x20000288
 800072c:	20000274 	.word	0x20000274
 8000730:	20000002 	.word	0x20000002
 8000734:	20000282 	.word	0x20000282
 8000738:	2000029c 	.word	0x2000029c
 800073c:	20000290 	.word	0x20000290
 8000740:	2000028a 	.word	0x2000028a
 8000744:	20000004 	.word	0x20000004
 8000748:	2000028c 	.word	0x2000028c
 800074c:	2000028e 	.word	0x2000028e
 8000750:	20000268 	.word	0x20000268
 8000754:	20000114 	.word	0x20000114

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	; 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0318 	add.w	r3, r7, #24
 8000762:	2238      	movs	r2, #56	; 0x38
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f006 ff26 	bl	80075b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800077a:	2000      	movs	r0, #0
 800077c:	f003 fc18 	bl	8003fb0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000780:	2302      	movs	r3, #2
 8000782:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078a:	2340      	movs	r3, #64	; 0x40
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000792:	2302      	movs	r3, #2
 8000794:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000796:	2304      	movs	r3, #4
 8000798:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800079a:	2355      	movs	r3, #85	; 0x55
 800079c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079e:	2302      	movs	r3, #2
 80007a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fcb2 	bl	8004118 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007ba:	f000 fac3 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2303      	movs	r3, #3
 80007c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2104      	movs	r1, #4
 80007d6:	4618      	mov	r0, r3
 80007d8:	f003 ffb0 	bl	800473c <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007e2:	f000 faaf 	bl	8000d44 <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3750      	adds	r7, #80	; 0x50
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2220      	movs	r2, #32
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f006 fed5 	bl	80075b8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800080e:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <MX_ADC1_Init+0xe8>)
 8000810:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000814:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000816:	4b30      	ldr	r3, [pc, #192]	; (80008d8 <MX_ADC1_Init+0xe8>)
 8000818:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800081c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800081e:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <MX_ADC1_Init+0xe8>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000824:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <MX_ADC1_Init+0xe8>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800082a:	4b2b      	ldr	r3, [pc, #172]	; (80008d8 <MX_ADC1_Init+0xe8>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000830:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <MX_ADC1_Init+0xe8>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000836:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <MX_ADC1_Init+0xe8>)
 8000838:	2204      	movs	r2, #4
 800083a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800083c:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_ADC1_Init+0xe8>)
 800083e:	2200      	movs	r2, #0
 8000840:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000842:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <MX_ADC1_Init+0xe8>)
 8000844:	2201      	movs	r2, #1
 8000846:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000848:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <MX_ADC1_Init+0xe8>)
 800084a:	2201      	movs	r2, #1
 800084c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800084e:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <MX_ADC1_Init+0xe8>)
 8000850:	2200      	movs	r2, #0
 8000852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <MX_ADC1_Init+0xe8>)
 8000858:	2200      	movs	r2, #0
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <MX_ADC1_Init+0xe8>)
 800085e:	2200      	movs	r2, #0
 8000860:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_ADC1_Init+0xe8>)
 8000864:	2201      	movs	r2, #1
 8000866:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_ADC1_Init+0xe8>)
 800086c:	2200      	movs	r2, #0
 800086e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_ADC1_Init+0xe8>)
 8000872:	2200      	movs	r2, #0
 8000874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000878:	4817      	ldr	r0, [pc, #92]	; (80008d8 <MX_ADC1_Init+0xe8>)
 800087a:	f000 ff43 	bl	8001704 <HAL_ADC_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000884:	f000 fa5e 	bl	8000d44 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800088c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000890:	4619      	mov	r1, r3
 8000892:	4811      	ldr	r0, [pc, #68]	; (80008d8 <MX_ADC1_Init+0xe8>)
 8000894:	f002 fa10 	bl	8002cb8 <HAL_ADCEx_MultiModeConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800089e:	f000 fa51 	bl	8000d44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_ADC1_Init+0xec>)
 80008a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a6:	2306      	movs	r3, #6
 80008a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ae:	237f      	movs	r3, #127	; 0x7f
 80008b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008b2:	2304      	movs	r3, #4
 80008b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	4619      	mov	r1, r3
 80008be:	4806      	ldr	r0, [pc, #24]	; (80008d8 <MX_ADC1_Init+0xe8>)
 80008c0:	f001 fc38 	bl	8002134 <HAL_ADC_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80008ca:	f000 fa3b 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	3730      	adds	r7, #48	; 0x30
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000034 	.word	0x20000034
 80008dc:	04300002 	.word	0x04300002

080008e0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	; 0x30
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008e6:	463b      	mov	r3, r7
 80008e8:	2230      	movs	r2, #48	; 0x30
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f006 fe63 	bl	80075b8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_DAC1_Init+0x6c>)
 80008f4:	4a16      	ldr	r2, [pc, #88]	; (8000950 <MX_DAC1_Init+0x70>)
 80008f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008f8:	4814      	ldr	r0, [pc, #80]	; (800094c <MX_DAC1_Init+0x6c>)
 80008fa:	f002 fbf4 	bl	80030e6 <HAL_DAC_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000904:	f000 fa1e 	bl	8000d44 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000908:	2302      	movs	r3, #2
 800090a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000924:	2301      	movs	r3, #1
 8000926:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	2200      	movs	r2, #0
 8000930:	4619      	mov	r1, r3
 8000932:	4806      	ldr	r0, [pc, #24]	; (800094c <MX_DAC1_Init+0x6c>)
 8000934:	f002 fc94 	bl	8003260 <HAL_DAC_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800093e:	f000 fa01 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	3730      	adds	r7, #48	; 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000100 	.word	0x20000100
 8000950:	50000800 	.word	0x50000800

08000954 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 800095a:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <MX_LPUART1_UART_Init+0x90>)
 800095c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000972:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 800098c:	2200      	movs	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000992:	2200      	movs	r2, #0
 8000994:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000996:	4812      	ldr	r0, [pc, #72]	; (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 8000998:	f004 fb3a 	bl	8005010 <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80009a2:	f000 f9cf 	bl	8000d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a6:	2100      	movs	r1, #0
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 80009aa:	f006 fd3a 	bl	8007422 <HAL_UARTEx_SetTxFifoThreshold>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80009b4:	f000 f9c6 	bl	8000d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b8:	2100      	movs	r1, #0
 80009ba:	4809      	ldr	r0, [pc, #36]	; (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 80009bc:	f006 fd6f 	bl	800749e <HAL_UARTEx_SetRxFifoThreshold>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80009c6:	f000 f9bd 	bl	8000d44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_LPUART1_UART_Init+0x8c>)
 80009cc:	f006 fcf0 	bl	80073b0 <HAL_UARTEx_DisableFifoMode>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80009d6:	f000 f9b5 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000114 	.word	0x20000114
 80009e4:	40008000 	.word	0x40008000

080009e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 80009ee:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <MX_USART1_UART_Init+0x94>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a30:	4811      	ldr	r0, [pc, #68]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a32:	f004 faed 	bl	8005010 <HAL_UART_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a3c:	f000 f982 	bl	8000d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a44:	f006 fced 	bl	8007422 <HAL_UARTEx_SetTxFifoThreshold>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a4e:	f000 f979 	bl	8000d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a56:	f006 fd22 	bl	800749e <HAL_UARTEx_SetRxFifoThreshold>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a60:	f000 f970 	bl	8000d44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a66:	f006 fca3 	bl	80073b0 <HAL_UARTEx_DisableFifoMode>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a70:	f000 f968 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200001a8 	.word	0x200001a8
 8000a7c:	40013800 	.word	0x40013800

08000a80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_DMA_Init+0x50>)
 8000a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a8a:	4a11      	ldr	r2, [pc, #68]	; (8000ad0 <MX_DMA_Init+0x50>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6493      	str	r3, [r2, #72]	; 0x48
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_DMA_Init+0x50>)
 8000a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_DMA_Init+0x50>)
 8000aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <MX_DMA_Init+0x50>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6493      	str	r3, [r2, #72]	; 0x48
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_DMA_Init+0x50>)
 8000aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	200b      	movs	r0, #11
 8000abc:	f002 fadf 	bl	800307e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ac0:	200b      	movs	r0, #11
 8000ac2:	f002 faf6 	bl	80030b2 <HAL_NVIC_EnableIRQ>

}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <MX_GPIO_Init+0xd4>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a2e      	ldr	r2, [pc, #184]	; (8000ba8 <MX_GPIO_Init+0xd4>)
 8000af0:	f043 0304 	orr.w	r3, r3, #4
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <MX_GPIO_Init+0xd4>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <MX_GPIO_Init+0xd4>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <MX_GPIO_Init+0xd4>)
 8000b08:	f043 0320 	orr.w	r3, r3, #32
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <MX_GPIO_Init+0xd4>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0320 	and.w	r3, r3, #32
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <MX_GPIO_Init+0xd4>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a22      	ldr	r2, [pc, #136]	; (8000ba8 <MX_GPIO_Init+0xd4>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <MX_GPIO_Init+0xd4>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <MX_GPIO_Init+0xd4>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a1c      	ldr	r2, [pc, #112]	; (8000ba8 <MX_GPIO_Init+0xd4>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_GPIO_Init+0xd4>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	21e0      	movs	r1, #224	; 0xe0
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b52:	f003 f9f1 	bl	8003f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480f      	ldr	r0, [pc, #60]	; (8000bac <MX_GPIO_Init+0xd8>)
 8000b6e:	f003 f861 	bl	8003c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000b72:	23e0      	movs	r3, #224	; 0xe0
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f003 f852 	bl	8003c34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2028      	movs	r0, #40	; 0x28
 8000b96:	f002 fa72 	bl	800307e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b9a:	2028      	movs	r0, #40	; 0x28
 8000b9c:	f002 fa89 	bl	80030b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	48000800 	.word	0x48000800

08000bb0 <UART_con>:

/* USER CODE BEGIN 4 */
void UART_con()
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 4);
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	4903      	ldr	r1, [pc, #12]	; (8000bc4 <UART_con+0x14>)
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <UART_con+0x18>)
 8000bba:	f004 fb0d 	bl	80051d8 <HAL_UART_Receive_IT>
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000264 	.word	0x20000264
 8000bc8:	20000114 	.word	0x20000114

08000bcc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a39      	ldr	r2, [pc, #228]	; (8000cbc <HAL_UART_RxCpltCallback+0xf0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d16a      	bne.n	8000cb2 <HAL_UART_RxCpltCallback+0xe6>
	{
		union tr hi;
		if(RxBuffer[0] == 69){
 8000bdc:	4b38      	ldr	r3, [pc, #224]	; (8000cc0 <HAL_UART_RxCpltCallback+0xf4>)
 8000bde:	f993 3000 	ldrsb.w	r3, [r3]
 8000be2:	2b45      	cmp	r3, #69	; 0x45
 8000be4:	d115      	bne.n	8000c12 <HAL_UART_RxCpltCallback+0x46>
//			HAL_UART_Transmit(&huart1,TxBuffer, 4,10);
			shift1 = RxBuffer[1];
 8000be6:	4b36      	ldr	r3, [pc, #216]	; (8000cc0 <HAL_UART_RxCpltCallback+0xf4>)
 8000be8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000bec:	4b35      	ldr	r3, [pc, #212]	; (8000cc4 <HAL_UART_RxCpltCallback+0xf8>)
 8000bee:	701a      	strb	r2, [r3, #0]
			shift2 = RxBuffer[2];
 8000bf0:	4b33      	ldr	r3, [pc, #204]	; (8000cc0 <HAL_UART_RxCpltCallback+0xf4>)
 8000bf2:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000bf6:	4b34      	ldr	r3, [pc, #208]	; (8000cc8 <HAL_UART_RxCpltCallback+0xfc>)
 8000bf8:	701a      	strb	r2, [r3, #0]

			hi.buffer8[0] = RxBuffer[1];
 8000bfa:	4b31      	ldr	r3, [pc, #196]	; (8000cc0 <HAL_UART_RxCpltCallback+0xf4>)
 8000bfc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c00:	733b      	strb	r3, [r7, #12]
			hi.buffer8[1] = RxBuffer[2];
 8000c02:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <HAL_UART_RxCpltCallback+0xf4>)
 8000c04:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000c08:	737b      	strb	r3, [r7, #13]

			PWM = hi.buffer16;
 8000c0a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <HAL_UART_RxCpltCallback+0x100>)
 8000c10:	801a      	strh	r2, [r3, #0]
//			PWM = (int16_t)(RxBuffer[2] << 8) | (RxBuffer[1] & 0xff);

		}

		if (PWM < 0)
 8000c12:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <HAL_UART_RxCpltCallback+0x100>)
 8000c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	da22      	bge.n	8000c62 <HAL_UART_RxCpltCallback+0x96>
		{

//			DAC_Output = (DAC_Output * 3.3)/4096; // 4096
			DAC_Output = PWM * -1;
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <HAL_UART_RxCpltCallback+0x100>)
 8000c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	425b      	negs	r3, r3
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <HAL_UART_RxCpltCallback+0x104>)
 8000c2c:	801a      	strh	r2, [r3, #0]
			check_dac += 1;
 8000c2e:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <HAL_UART_RxCpltCallback+0x108>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	4a27      	ldr	r2, [pc, #156]	; (8000cd4 <HAL_UART_RxCpltCallback+0x108>)
 8000c36:	6013      	str	r3, [r2, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_Output);
 8000c38:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <HAL_UART_RxCpltCallback+0x104>)
 8000c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	4825      	ldr	r0, [pc, #148]	; (8000cd8 <HAL_UART_RxCpltCallback+0x10c>)
 8000c44:	f002 fade 	bl	8003204 <HAL_DAC_SetValue>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2140      	movs	r1, #64	; 0x40
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c50:	f003 f972 	bl	8003f38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2180      	movs	r1, #128	; 0x80
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f003 f96c 	bl	8003f38 <HAL_GPIO_WritePin>
 8000c60:	e022      	b.n	8000ca8 <HAL_UART_RxCpltCallback+0xdc>
//			HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);

		}
		else if (PWM > 0)
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <HAL_UART_RxCpltCallback+0x100>)
 8000c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	dd1d      	ble.n	8000ca8 <HAL_UART_RxCpltCallback+0xdc>
		{
//			DAC_Output = (DAC_Output * 3.3)/4096;
			DAC_Output = PWM;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <HAL_UART_RxCpltCallback+0x100>)
 8000c6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_UART_RxCpltCallback+0x104>)
 8000c74:	801a      	strh	r2, [r3, #0]
			check_dac += 1;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <HAL_UART_RxCpltCallback+0x108>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <HAL_UART_RxCpltCallback+0x108>)
 8000c7e:	6013      	str	r3, [r2, #0]

			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,DAC_Output);
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <HAL_UART_RxCpltCallback+0x104>)
 8000c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4813      	ldr	r0, [pc, #76]	; (8000cd8 <HAL_UART_RxCpltCallback+0x10c>)
 8000c8c:	f002 faba 	bl	8003204 <HAL_DAC_SetValue>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2140      	movs	r1, #64	; 0x40
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c98:	f003 f94e 	bl	8003f38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca4:	f003 f948 	bl	8003f38 <HAL_GPIO_WritePin>
//			HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R,DAC_Output);
		}
		HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 4);
 8000ca8:	2204      	movs	r2, #4
 8000caa:	4905      	ldr	r1, [pc, #20]	; (8000cc0 <HAL_UART_RxCpltCallback+0xf4>)
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <HAL_UART_RxCpltCallback+0xf0>)
 8000cae:	f004 fa93 	bl	80051d8 <HAL_UART_Receive_IT>

			//	  HAL_UART_Transmit(&huart1,TxBuffer, 4,10);
//			HAL_UART_Transmit_IT(&hlpuart1,TxBuffer, 4);
//		}
	}
}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000114 	.word	0x20000114
 8000cc0:	20000264 	.word	0x20000264
 8000cc4:	2000026c 	.word	0x2000026c
 8000cc8:	2000026d 	.word	0x2000026d
 8000ccc:	2000026e 	.word	0x2000026e
 8000cd0:	20000280 	.word	0x20000280
 8000cd4:	20000298 	.word	0x20000298
 8000cd8:	20000100 	.word	0x20000100

08000cdc <map_value>:
uint16_t map_value(int16_t value) {
 8000cdc:	b480      	push	{r7}
 8000cde:	b087      	sub	sp, #28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]
    // Define the range of the input
    float min_input = 0.0;
 8000ce6:	f04f 0300 	mov.w	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
    float max_input = (float)4095; // Max ADC value
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <map_value+0x64>)
 8000cee:	613b      	str	r3, [r7, #16]
    int max_output = 4095;
 8000cf0:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000cf4:	60fb      	str	r3, [r7, #12]

    // Map the value
    uint16_t mapped_value;
    if (value % 4096 == 0)
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d103      	bne.n	8000d0a <map_value+0x2e>
    {
    	 mapped_value = value;
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	817b      	strh	r3, [r7, #10]
    	 return mapped_value;
 8000d06:	897b      	ldrh	r3, [r7, #10]
 8000d08:	e013      	b.n	8000d32 <map_value+0x56>
    }
    else {
    	if (value < 0)
 8000d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	da03      	bge.n	8000d1a <map_value+0x3e>
    	{
    		value *= -1;
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	425b      	negs	r3, r3
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	80fb      	strh	r3, [r7, #6]
    	}
    	mapped_value = value % 4096;
 8000d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d1e:	425a      	negs	r2, r3
 8000d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d24:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000d28:	bf58      	it	pl
 8000d2a:	4253      	negpl	r3, r2
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	817b      	strh	r3, [r7, #10]
    	return mapped_value;
 8000d30:	897b      	ldrh	r3, [r7, #10]
    }

}
 8000d32:	4618      	mov	r0, r3
 8000d34:	371c      	adds	r7, #28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	457ff000 	.word	0x457ff000

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <HAL_MspInit+0x44>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <HAL_MspInit+0x44>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6613      	str	r3, [r2, #96]	; 0x60
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <HAL_MspInit+0x44>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_MspInit+0x44>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_MspInit+0x44>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d78:	6593      	str	r3, [r2, #88]	; 0x58
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_MspInit+0x44>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d86:	f003 f9b7 	bl	80040f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000

08000d98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b09e      	sub	sp, #120	; 0x78
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	2254      	movs	r2, #84	; 0x54
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f006 fbfd 	bl	80075b8 <memset>
  if(hadc->Instance==ADC1)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dc6:	d167      	bne.n	8000e98 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dcc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000dce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000dd2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f003 fecb 	bl	8004b74 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000de4:	f7ff ffae 	bl	8000d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000de8:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <HAL_ADC_MspInit+0x108>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dec:	4a2c      	ldr	r2, [pc, #176]	; (8000ea0 <HAL_ADC_MspInit+0x108>)
 8000dee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000df2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df4:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <HAL_ADC_MspInit+0x108>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <HAL_ADC_MspInit+0x108>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e04:	4a26      	ldr	r2, [pc, #152]	; (8000ea0 <HAL_ADC_MspInit+0x108>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0c:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <HAL_ADC_MspInit+0x108>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2e:	f002 ff01 	bl	8003c34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <HAL_ADC_MspInit+0x10c>)
 8000e34:	4a1c      	ldr	r2, [pc, #112]	; (8000ea8 <HAL_ADC_MspInit+0x110>)
 8000e36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <HAL_ADC_MspInit+0x10c>)
 8000e3a:	2205      	movs	r2, #5
 8000e3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_ADC_MspInit+0x10c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_ADC_MspInit+0x10c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <HAL_ADC_MspInit+0x10c>)
 8000e4c:	2280      	movs	r2, #128	; 0x80
 8000e4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_ADC_MspInit+0x10c>)
 8000e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_ADC_MspInit+0x10c>)
 8000e5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <HAL_ADC_MspInit+0x10c>)
 8000e62:	2220      	movs	r2, #32
 8000e64:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <HAL_ADC_MspInit+0x10c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <HAL_ADC_MspInit+0x10c>)
 8000e6e:	f002 fbaf 	bl	80035d0 <HAL_DMA_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000e78:	f7ff ff64 	bl	8000d44 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <HAL_ADC_MspInit+0x10c>)
 8000e80:	655a      	str	r2, [r3, #84]	; 0x54
 8000e82:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <HAL_ADC_MspInit+0x10c>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2012      	movs	r0, #18
 8000e8e:	f002 f8f6 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e92:	2012      	movs	r0, #18
 8000e94:	f002 f90d 	bl	80030b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	3778      	adds	r7, #120	; 0x78
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	200000a0 	.word	0x200000a0
 8000ea8:	40020008 	.word	0x40020008

08000eac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <HAL_DAC_MspInit+0x74>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d124      	bne.n	8000f18 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_DAC_MspInit+0x78>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <HAL_DAC_MspInit+0x78>)
 8000ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_DAC_MspInit+0x78>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_DAC_MspInit+0x78>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_DAC_MspInit+0x78>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_DAC_MspInit+0x78>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000efe:	2310      	movs	r3, #16
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f02:	2303      	movs	r3, #3
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f002 fe8e 	bl	8003c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	; 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	50000800 	.word	0x50000800
 8000f24:	40021000 	.word	0x40021000

08000f28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b0a0      	sub	sp, #128	; 0x80
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f40:	f107 0318 	add.w	r3, r7, #24
 8000f44:	2254      	movs	r2, #84	; 0x54
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f006 fb35 	bl	80075b8 <memset>
  if(huart->Instance==LPUART1)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a45      	ldr	r2, [pc, #276]	; (8001068 <HAL_UART_MspInit+0x140>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d13f      	bne.n	8000fd8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f58:	2320      	movs	r3, #32
 8000f5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f60:	f107 0318 	add.w	r3, r7, #24
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fe05 	bl	8004b74 <HAL_RCCEx_PeriphCLKConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f70:	f7ff fee8 	bl	8000d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f74:	4b3d      	ldr	r3, [pc, #244]	; (800106c <HAL_UART_MspInit+0x144>)
 8000f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f78:	4a3c      	ldr	r2, [pc, #240]	; (800106c <HAL_UART_MspInit+0x144>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f80:	4b3a      	ldr	r3, [pc, #232]	; (800106c <HAL_UART_MspInit+0x144>)
 8000f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b37      	ldr	r3, [pc, #220]	; (800106c <HAL_UART_MspInit+0x144>)
 8000f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f90:	4a36      	ldr	r2, [pc, #216]	; (800106c <HAL_UART_MspInit+0x144>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f98:	4b34      	ldr	r3, [pc, #208]	; (800106c <HAL_UART_MspInit+0x144>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000fb4:	230c      	movs	r3, #12
 8000fb6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc2:	f002 fe37 	bl	8003c34 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	205b      	movs	r0, #91	; 0x5b
 8000fcc:	f002 f857 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000fd0:	205b      	movs	r0, #91	; 0x5b
 8000fd2:	f002 f86e 	bl	80030b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fd6:	e042      	b.n	800105e <HAL_UART_MspInit+0x136>
  else if(huart->Instance==USART1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a24      	ldr	r2, [pc, #144]	; (8001070 <HAL_UART_MspInit+0x148>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d13d      	bne.n	800105e <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fea:	f107 0318 	add.w	r3, r7, #24
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 fdc0 	bl	8004b74 <HAL_RCCEx_PeriphCLKConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8000ffa:	f7ff fea3 	bl	8000d44 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <HAL_UART_MspInit+0x144>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001002:	4a1a      	ldr	r2, [pc, #104]	; (800106c <HAL_UART_MspInit+0x144>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	6613      	str	r3, [r2, #96]	; 0x60
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_UART_MspInit+0x144>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_UART_MspInit+0x144>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	4a14      	ldr	r2, [pc, #80]	; (800106c <HAL_UART_MspInit+0x144>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_UART_MspInit+0x144>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800102e:	2330      	movs	r3, #48	; 0x30
 8001030:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800103e:	2307      	movs	r3, #7
 8001040:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001042:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001046:	4619      	mov	r1, r3
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <HAL_UART_MspInit+0x14c>)
 800104a:	f002 fdf3 	bl	8003c34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	2025      	movs	r0, #37	; 0x25
 8001054:	f002 f813 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001058:	2025      	movs	r0, #37	; 0x25
 800105a:	f002 f82a 	bl	80030b2 <HAL_NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	3780      	adds	r7, #128	; 0x80
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40008000 	.word	0x40008000
 800106c:	40021000 	.word	0x40021000
 8001070:	40013800 	.word	0x40013800
 8001074:	48000800 	.word	0x48000800

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800107c:	e7fe      	b.n	800107c <NMI_Handler+0x4>

0800107e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <MemManage_Handler+0x4>

0800108a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <UsageFault_Handler+0x4>

08001096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c4:	f000 f8c0 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}

080010cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <DMA1_Channel1_IRQHandler+0x10>)
 80010d2:	f002 fc60 	bl	8003996 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200000a0 	.word	0x200000a0

080010e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <ADC1_2_IRQHandler+0x10>)
 80010e6:	f000 fd9d 	bl	8001c24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000034 	.word	0x20000034

080010f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <USART1_IRQHandler+0x10>)
 80010fa:	f004 f8b9 	bl	8005270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200001a8 	.word	0x200001a8

08001108 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800110c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001110:	f002 ff2a 	bl	8003f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <LPUART1_IRQHandler+0x10>)
 800111e:	f004 f8a7 	bl	8005270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000114 	.word	0x20000114

0800112c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr r0, =_estack
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001152:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001154:	f7ff ffea 	bl	800112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <LoopForever+0x6>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	; (8001190 <LoopForever+0xa>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <LoopForever+0xe>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	; (800119c <LoopForever+0x16>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800117e:	f006 fa23 	bl	80075c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001182:	f7ff f9c7 	bl	8000514 <main>

08001186 <LoopForever>:

LoopForever:
    b LoopForever
 8001186:	e7fe      	b.n	8001186 <LoopForever>
Reset_Handler:  ldr r0, =_estack
 8001188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001194:	08007678 	.word	0x08007678
  ldr r2, =_sbss
 8001198:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800119c:	200002a4 	.word	0x200002a4

080011a0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC3_IRQHandler>

080011a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f001 ff5b 	bl	8003068 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 f80e 	bl	80011d4 <HAL_InitTick>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	e001      	b.n	80011c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011c4:	f7ff fdc4 	bl	8000d50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c8:	79fb      	ldrb	r3, [r7, #7]

}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_InitTick+0x68>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d022      	beq.n	800122e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_InitTick+0x6c>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_InitTick+0x68>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80011f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 ff66 	bl	80030ce <HAL_SYSTICK_Config>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10f      	bne.n	8001228 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	d809      	bhi.n	8001222 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120e:	2200      	movs	r2, #0
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	f04f 30ff 	mov.w	r0, #4294967295
 8001216:	f001 ff32 	bl	800307e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_InitTick+0x70>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	e007      	b.n	8001232 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	e004      	b.n	8001232 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e001      	b.n	8001232 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000010 	.word	0x20000010
 8001240:	20000008 	.word	0x20000008
 8001244:	2000000c 	.word	0x2000000c

08001248 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_IncTick+0x1c>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_IncTick+0x20>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4413      	add	r3, r2
 8001256:	4a03      	ldr	r2, [pc, #12]	; (8001264 <HAL_IncTick+0x1c>)
 8001258:	6013      	str	r3, [r2, #0]
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	200002a0 	.word	0x200002a0
 8001268:	20000010 	.word	0x20000010

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	200002a0 	.word	0x200002a0

08001284 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	609a      	str	r2, [r3, #8]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	609a      	str	r2, [r3, #8]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3360      	adds	r3, #96	; 0x60
 80012fe:	461a      	mov	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <LL_ADC_SetOffset+0x44>)
 800130e:	4013      	ands	r3, r2
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	4313      	orrs	r3, r2
 800131c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001324:	bf00      	nop
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	03fff000 	.word	0x03fff000

08001334 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3360      	adds	r3, #96	; 0x60
 8001342:	461a      	mov	r2, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001354:	4618      	mov	r0, r3
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3360      	adds	r3, #96	; 0x60
 8001370:	461a      	mov	r2, r3
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	431a      	orrs	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800138a:	bf00      	nop
 800138c:	371c      	adds	r7, #28
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001396:	b480      	push	{r7}
 8001398:	b087      	sub	sp, #28
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	3360      	adds	r3, #96	; 0x60
 80013a6:	461a      	mov	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	431a      	orrs	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80013c0:	bf00      	nop
 80013c2:	371c      	adds	r7, #28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3360      	adds	r3, #96	; 0x60
 80013dc:	461a      	mov	r2, r3
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80013f6:	bf00      	nop
 80013f8:	371c      	adds	r7, #28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	615a      	str	r2, [r3, #20]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800144e:	b480      	push	{r7}
 8001450:	b087      	sub	sp, #28
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3330      	adds	r3, #48	; 0x30
 800145e:	461a      	mov	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	4413      	add	r3, r2
 800146c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	211f      	movs	r1, #31
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	401a      	ands	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	0e9b      	lsrs	r3, r3, #26
 8001486:	f003 011f 	and.w	r1, r3, #31
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	f003 031f 	and.w	r3, r3, #31
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	431a      	orrs	r2, r3
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800149a:	bf00      	nop
 800149c:	371c      	adds	r7, #28
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3314      	adds	r3, #20
 80014dc:	461a      	mov	r2, r3
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	0e5b      	lsrs	r3, r3, #25
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	4413      	add	r3, r2
 80014ea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	0d1b      	lsrs	r3, r3, #20
 80014f4:	f003 031f 	and.w	r3, r3, #31
 80014f8:	2107      	movs	r1, #7
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	401a      	ands	r2, r3
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	0d1b      	lsrs	r3, r3, #20
 8001506:	f003 031f 	and.w	r3, r3, #31
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	431a      	orrs	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001516:	bf00      	nop
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800153c:	43db      	mvns	r3, r3
 800153e:	401a      	ands	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0318 	and.w	r3, r3, #24
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001548:	40d9      	lsrs	r1, r3
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	400b      	ands	r3, r1
 800154e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001552:	431a      	orrs	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	0007ffff 	.word	0x0007ffff

0800156c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 031f 	and.w	r3, r3, #31
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80015b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6093      	str	r3, [r2, #8]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015dc:	d101      	bne.n	80015e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001600:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001604:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800162c:	d101      	bne.n	8001632 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001650:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001654:	f043 0201 	orr.w	r2, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <LL_ADC_IsEnabled+0x18>
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <LL_ADC_IsEnabled+0x1a>
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800169e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016a2:	f043 0204 	orr.w	r2, r3, #4
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d101      	bne.n	80016ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d101      	bne.n	80016f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b089      	sub	sp, #36	; 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e1a9      	b.n	8001a72 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001728:	2b00      	cmp	r3, #0
 800172a:	d109      	bne.n	8001740 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff fb33 	bl	8000d98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff3f 	bl	80015c8 <LL_ADC_IsDeepPowerDownEnabled>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff25 	bl	80015a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff5a 	bl	8001618 <LL_ADC_IsInternalRegulatorEnabled>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d115      	bne.n	8001796 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff3e 	bl	80015f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001774:	4b9c      	ldr	r3, [pc, #624]	; (80019e8 <HAL_ADC_Init+0x2e4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	099b      	lsrs	r3, r3, #6
 800177a:	4a9c      	ldr	r2, [pc, #624]	; (80019ec <HAL_ADC_Init+0x2e8>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	3301      	adds	r3, #1
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001788:	e002      	b.n	8001790 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3b01      	subs	r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f9      	bne.n	800178a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff3c 	bl	8001618 <LL_ADC_IsInternalRegulatorEnabled>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10d      	bne.n	80017c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017aa:	f043 0210 	orr.w	r2, r3, #16
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b6:	f043 0201 	orr.w	r2, r3, #1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff75 	bl	80016b6 <LL_ADC_REG_IsConversionOngoing>
 80017cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f040 8142 	bne.w	8001a60 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 813e 	bne.w	8001a60 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017ec:	f043 0202 	orr.w	r2, r3, #2
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff35 	bl	8001668 <LL_ADC_IsEnabled>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d141      	bne.n	8001888 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800180c:	d004      	beq.n	8001818 <HAL_ADC_Init+0x114>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a77      	ldr	r2, [pc, #476]	; (80019f0 <HAL_ADC_Init+0x2ec>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d10f      	bne.n	8001838 <HAL_ADC_Init+0x134>
 8001818:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800181c:	f7ff ff24 	bl	8001668 <LL_ADC_IsEnabled>
 8001820:	4604      	mov	r4, r0
 8001822:	4873      	ldr	r0, [pc, #460]	; (80019f0 <HAL_ADC_Init+0x2ec>)
 8001824:	f7ff ff20 	bl	8001668 <LL_ADC_IsEnabled>
 8001828:	4603      	mov	r3, r0
 800182a:	4323      	orrs	r3, r4
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf0c      	ite	eq
 8001830:	2301      	moveq	r3, #1
 8001832:	2300      	movne	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	e012      	b.n	800185e <HAL_ADC_Init+0x15a>
 8001838:	486e      	ldr	r0, [pc, #440]	; (80019f4 <HAL_ADC_Init+0x2f0>)
 800183a:	f7ff ff15 	bl	8001668 <LL_ADC_IsEnabled>
 800183e:	4604      	mov	r4, r0
 8001840:	486d      	ldr	r0, [pc, #436]	; (80019f8 <HAL_ADC_Init+0x2f4>)
 8001842:	f7ff ff11 	bl	8001668 <LL_ADC_IsEnabled>
 8001846:	4603      	mov	r3, r0
 8001848:	431c      	orrs	r4, r3
 800184a:	486c      	ldr	r0, [pc, #432]	; (80019fc <HAL_ADC_Init+0x2f8>)
 800184c:	f7ff ff0c 	bl	8001668 <LL_ADC_IsEnabled>
 8001850:	4603      	mov	r3, r0
 8001852:	4323      	orrs	r3, r4
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d012      	beq.n	8001888 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800186a:	d004      	beq.n	8001876 <HAL_ADC_Init+0x172>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a5f      	ldr	r2, [pc, #380]	; (80019f0 <HAL_ADC_Init+0x2ec>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d101      	bne.n	800187a <HAL_ADC_Init+0x176>
 8001876:	4a62      	ldr	r2, [pc, #392]	; (8001a00 <HAL_ADC_Init+0x2fc>)
 8001878:	e000      	b.n	800187c <HAL_ADC_Init+0x178>
 800187a:	4a62      	ldr	r2, [pc, #392]	; (8001a04 <HAL_ADC_Init+0x300>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4619      	mov	r1, r3
 8001882:	4610      	mov	r0, r2
 8001884:	f7ff fcfe 	bl	8001284 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7f5b      	ldrb	r3, [r3, #29]
 800188c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001892:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001898:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800189e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018a6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d106      	bne.n	80018c4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	3b01      	subs	r3, #1
 80018bc:	045b      	lsls	r3, r3, #17
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d009      	beq.n	80018e0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	4b48      	ldr	r3, [pc, #288]	; (8001a08 <HAL_ADC_Init+0x304>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	430b      	orrs	r3, r1
 80018f2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fee4 	bl	80016dc <LL_ADC_INJ_IsConversionOngoing>
 8001914:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d17f      	bne.n	8001a1c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d17c      	bne.n	8001a1c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001926:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800192e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800193e:	f023 0302 	bic.w	r3, r3, #2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	69b9      	ldr	r1, [r7, #24]
 8001948:	430b      	orrs	r3, r1
 800194a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d017      	beq.n	8001984 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	691a      	ldr	r2, [r3, #16]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001962:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800196c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001970:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6911      	ldr	r1, [r2, #16]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	430b      	orrs	r3, r1
 800197e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001982:	e013      	b.n	80019ac <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	691a      	ldr	r2, [r3, #16]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001992:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d12a      	bne.n	8001a0c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80019c0:	f023 0304 	bic.w	r3, r3, #4
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019cc:	4311      	orrs	r1, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80019d2:	4311      	orrs	r1, r2
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019d8:	430a      	orrs	r2, r1
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0201 	orr.w	r2, r2, #1
 80019e4:	611a      	str	r2, [r3, #16]
 80019e6:	e019      	b.n	8001a1c <HAL_ADC_Init+0x318>
 80019e8:	20000008 	.word	0x20000008
 80019ec:	053e2d63 	.word	0x053e2d63
 80019f0:	50000100 	.word	0x50000100
 80019f4:	50000400 	.word	0x50000400
 80019f8:	50000500 	.word	0x50000500
 80019fc:	50000600 	.word	0x50000600
 8001a00:	50000300 	.word	0x50000300
 8001a04:	50000700 	.word	0x50000700
 8001a08:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	691a      	ldr	r2, [r3, #16]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d10c      	bne.n	8001a3e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f023 010f 	bic.w	r1, r3, #15
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	1e5a      	subs	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a3c:	e007      	b.n	8001a4e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 020f 	bic.w	r2, r2, #15
 8001a4c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a52:	f023 0303 	bic.w	r3, r3, #3
 8001a56:	f043 0201 	orr.w	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a5e:	e007      	b.n	8001a70 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a64:	f043 0210 	orr.w	r2, r3, #16
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a70:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3724      	adds	r7, #36	; 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd90      	pop	{r4, r7, pc}
 8001a7a:	bf00      	nop

08001a7c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a90:	d004      	beq.n	8001a9c <HAL_ADC_Start_DMA+0x20>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a5a      	ldr	r2, [pc, #360]	; (8001c00 <HAL_ADC_Start_DMA+0x184>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_ADC_Start_DMA+0x24>
 8001a9c:	4b59      	ldr	r3, [pc, #356]	; (8001c04 <HAL_ADC_Start_DMA+0x188>)
 8001a9e:	e000      	b.n	8001aa2 <HAL_ADC_Start_DMA+0x26>
 8001aa0:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <HAL_ADC_Start_DMA+0x18c>)
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fd62 	bl	800156c <LL_ADC_GetMultimode>
 8001aa8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fe01 	bl	80016b6 <LL_ADC_REG_IsConversionOngoing>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f040 809b 	bne.w	8001bf2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_Start_DMA+0x4e>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e096      	b.n	8001bf8 <HAL_ADC_Start_DMA+0x17c>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a4d      	ldr	r2, [pc, #308]	; (8001c0c <HAL_ADC_Start_DMA+0x190>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d008      	beq.n	8001aee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d005      	beq.n	8001aee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d002      	beq.n	8001aee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	2b09      	cmp	r3, #9
 8001aec:	d17a      	bne.n	8001be4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 ff60 	bl	80029b4 <ADC_Enable>
 8001af4:	4603      	mov	r3, r0
 8001af6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001af8:	7dfb      	ldrb	r3, [r7, #23]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d16d      	bne.n	8001bda <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a3a      	ldr	r2, [pc, #232]	; (8001c00 <HAL_ADC_Start_DMA+0x184>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d009      	beq.n	8001b30 <HAL_ADC_Start_DMA+0xb4>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a3b      	ldr	r2, [pc, #236]	; (8001c10 <HAL_ADC_Start_DMA+0x194>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d002      	beq.n	8001b2c <HAL_ADC_Start_DMA+0xb0>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	e003      	b.n	8001b34 <HAL_ADC_Start_DMA+0xb8>
 8001b2c:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <HAL_ADC_Start_DMA+0x198>)
 8001b2e:	e001      	b.n	8001b34 <HAL_ADC_Start_DMA+0xb8>
 8001b30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d002      	beq.n	8001b42 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d105      	bne.n	8001b4e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d006      	beq.n	8001b68 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5e:	f023 0206 	bic.w	r2, r3, #6
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	661a      	str	r2, [r3, #96]	; 0x60
 8001b66:	e002      	b.n	8001b6e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b72:	4a29      	ldr	r2, [pc, #164]	; (8001c18 <HAL_ADC_Start_DMA+0x19c>)
 8001b74:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	4a28      	ldr	r2, [pc, #160]	; (8001c1c <HAL_ADC_Start_DMA+0x1a0>)
 8001b7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b82:	4a27      	ldr	r2, [pc, #156]	; (8001c20 <HAL_ADC_Start_DMA+0x1a4>)
 8001b84:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	221c      	movs	r2, #28
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f042 0210 	orr.w	r2, r2, #16
 8001ba4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 0201 	orr.w	r2, r2, #1
 8001bb4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3340      	adds	r3, #64	; 0x40
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f001 fdab 	bl	8003720 <HAL_DMA_Start_IT>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fd5b 	bl	800168e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001bd8:	e00d      	b.n	8001bf6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001be2:	e008      	b.n	8001bf6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001bf0:	e001      	b.n	8001bf6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	50000100 	.word	0x50000100
 8001c04:	50000300 	.word	0x50000300
 8001c08:	50000700 	.word	0x50000700
 8001c0c:	50000600 	.word	0x50000600
 8001c10:	50000500 	.word	0x50000500
 8001c14:	50000400 	.word	0x50000400
 8001c18:	08002ae1 	.word	0x08002ae1
 8001c1c:	08002bb9 	.word	0x08002bb9
 8001c20:	08002bd5 	.word	0x08002bd5

08001c24 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c48:	d004      	beq.n	8001c54 <HAL_ADC_IRQHandler+0x30>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a8e      	ldr	r2, [pc, #568]	; (8001e88 <HAL_ADC_IRQHandler+0x264>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d101      	bne.n	8001c58 <HAL_ADC_IRQHandler+0x34>
 8001c54:	4b8d      	ldr	r3, [pc, #564]	; (8001e8c <HAL_ADC_IRQHandler+0x268>)
 8001c56:	e000      	b.n	8001c5a <HAL_ADC_IRQHandler+0x36>
 8001c58:	4b8d      	ldr	r3, [pc, #564]	; (8001e90 <HAL_ADC_IRQHandler+0x26c>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fc86 	bl	800156c <LL_ADC_GetMultimode>
 8001c60:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d017      	beq.n	8001c9c <HAL_ADC_IRQHandler+0x78>
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d012      	beq.n	8001c9c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d105      	bne.n	8001c8e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c86:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f001 f808 	bl	8002ca4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <HAL_ADC_IRQHandler+0x8c>
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10b      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8094 	beq.w	8001de4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 808e 	beq.w	8001de4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d105      	bne.n	8001ce0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fb9f 	bl	8001428 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d072      	beq.n	8001dd6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a64      	ldr	r2, [pc, #400]	; (8001e88 <HAL_ADC_IRQHandler+0x264>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d009      	beq.n	8001d0e <HAL_ADC_IRQHandler+0xea>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a65      	ldr	r2, [pc, #404]	; (8001e94 <HAL_ADC_IRQHandler+0x270>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d002      	beq.n	8001d0a <HAL_ADC_IRQHandler+0xe6>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	e003      	b.n	8001d12 <HAL_ADC_IRQHandler+0xee>
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_ADC_IRQHandler+0x274>)
 8001d0c:	e001      	b.n	8001d12 <HAL_ADC_IRQHandler+0xee>
 8001d0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d008      	beq.n	8001d2c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b05      	cmp	r3, #5
 8001d24:	d002      	beq.n	8001d2c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2b09      	cmp	r3, #9
 8001d2a:	d104      	bne.n	8001d36 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	623b      	str	r3, [r7, #32]
 8001d34:	e014      	b.n	8001d60 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a53      	ldr	r2, [pc, #332]	; (8001e88 <HAL_ADC_IRQHandler+0x264>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d009      	beq.n	8001d54 <HAL_ADC_IRQHandler+0x130>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a53      	ldr	r2, [pc, #332]	; (8001e94 <HAL_ADC_IRQHandler+0x270>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d002      	beq.n	8001d50 <HAL_ADC_IRQHandler+0x12c>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	e003      	b.n	8001d58 <HAL_ADC_IRQHandler+0x134>
 8001d50:	4b51      	ldr	r3, [pc, #324]	; (8001e98 <HAL_ADC_IRQHandler+0x274>)
 8001d52:	e001      	b.n	8001d58 <HAL_ADC_IRQHandler+0x134>
 8001d54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d58:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d135      	bne.n	8001dd6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d12e      	bne.n	8001dd6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fc9a 	bl	80016b6 <LL_ADC_REG_IsConversionOngoing>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d11a      	bne.n	8001dbe <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 020c 	bic.w	r2, r2, #12
 8001d96:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d112      	bne.n	8001dd6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	f043 0201 	orr.w	r2, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dbc:	e00b      	b.n	8001dd6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	f043 0210 	orr.w	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dce:	f043 0201 	orr.w	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f984 	bl	80020e4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	220c      	movs	r2, #12
 8001de2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d004      	beq.n	8001df8 <HAL_ADC_IRQHandler+0x1d4>
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	f003 0320 	and.w	r3, r3, #32
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10b      	bne.n	8001e10 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80b3 	beq.w	8001f6a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80ad 	beq.w	8001f6a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fb3a 	bl	80014a6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001e32:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff faf5 	bl	8001428 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e3e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <HAL_ADC_IRQHandler+0x264>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d009      	beq.n	8001e5e <HAL_ADC_IRQHandler+0x23a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a11      	ldr	r2, [pc, #68]	; (8001e94 <HAL_ADC_IRQHandler+0x270>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d002      	beq.n	8001e5a <HAL_ADC_IRQHandler+0x236>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	e003      	b.n	8001e62 <HAL_ADC_IRQHandler+0x23e>
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_ADC_IRQHandler+0x274>)
 8001e5c:	e001      	b.n	8001e62 <HAL_ADC_IRQHandler+0x23e>
 8001e5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d008      	beq.n	8001e7c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d002      	beq.n	8001e7c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b07      	cmp	r3, #7
 8001e7a:	d10f      	bne.n	8001e9c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	623b      	str	r3, [r7, #32]
 8001e84:	e01f      	b.n	8001ec6 <HAL_ADC_IRQHandler+0x2a2>
 8001e86:	bf00      	nop
 8001e88:	50000100 	.word	0x50000100
 8001e8c:	50000300 	.word	0x50000300
 8001e90:	50000700 	.word	0x50000700
 8001e94:	50000500 	.word	0x50000500
 8001e98:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a8b      	ldr	r2, [pc, #556]	; (80020d0 <HAL_ADC_IRQHandler+0x4ac>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d009      	beq.n	8001eba <HAL_ADC_IRQHandler+0x296>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a8a      	ldr	r2, [pc, #552]	; (80020d4 <HAL_ADC_IRQHandler+0x4b0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d002      	beq.n	8001eb6 <HAL_ADC_IRQHandler+0x292>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	e003      	b.n	8001ebe <HAL_ADC_IRQHandler+0x29a>
 8001eb6:	4b88      	ldr	r3, [pc, #544]	; (80020d8 <HAL_ADC_IRQHandler+0x4b4>)
 8001eb8:	e001      	b.n	8001ebe <HAL_ADC_IRQHandler+0x29a>
 8001eba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ebe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d047      	beq.n	8001f5c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d007      	beq.n	8001ee6 <HAL_ADC_IRQHandler+0x2c2>
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d03f      	beq.n	8001f5c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d13a      	bne.n	8001f5c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef0:	2b40      	cmp	r3, #64	; 0x40
 8001ef2:	d133      	bne.n	8001f5c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d12e      	bne.n	8001f5c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fbea 	bl	80016dc <LL_ADC_INJ_IsConversionOngoing>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d11a      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f1c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d112      	bne.n	8001f5c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3a:	f043 0201 	orr.w	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f42:	e00b      	b.n	8001f5c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	f043 0210 	orr.w	r2, r3, #16
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f54:	f043 0201 	orr.w	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fe79 	bl	8002c54 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2260      	movs	r2, #96	; 0x60
 8001f68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d011      	beq.n	8001f98 <HAL_ADC_IRQHandler+0x374>
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00c      	beq.n	8001f98 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f8be 	bl	800210c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2280      	movs	r2, #128	; 0x80
 8001f96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d012      	beq.n	8001fc8 <HAL_ADC_IRQHandler+0x3a4>
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00d      	beq.n	8001fc8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fe5f 	bl	8002c7c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fc6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d012      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0x3d4>
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00d      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 fe51 	bl	8002c90 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ff6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d043      	beq.n	800208a <HAL_ADC_IRQHandler+0x466>
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b00      	cmp	r3, #0
 800200a:	d03e      	beq.n	800208a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002014:	2301      	movs	r3, #1
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
 8002018:	e021      	b.n	800205e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002028:	d004      	beq.n	8002034 <HAL_ADC_IRQHandler+0x410>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a28      	ldr	r2, [pc, #160]	; (80020d0 <HAL_ADC_IRQHandler+0x4ac>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d101      	bne.n	8002038 <HAL_ADC_IRQHandler+0x414>
 8002034:	4b29      	ldr	r3, [pc, #164]	; (80020dc <HAL_ADC_IRQHandler+0x4b8>)
 8002036:	e000      	b.n	800203a <HAL_ADC_IRQHandler+0x416>
 8002038:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <HAL_ADC_IRQHandler+0x4bc>)
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff faa4 	bl	8001588 <LL_ADC_GetMultiDMATransfer>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00b      	beq.n	800205e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002046:	2301      	movs	r3, #1
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
 800204a:	e008      	b.n	800205e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800205a:	2301      	movs	r3, #1
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	2b01      	cmp	r3, #1
 8002062:	d10e      	bne.n	8002082 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002074:	f043 0202 	orr.w	r2, r3, #2
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f84f 	bl	8002120 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2210      	movs	r2, #16
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002090:	2b00      	cmp	r3, #0
 8002092:	d018      	beq.n	80020c6 <HAL_ADC_IRQHandler+0x4a2>
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209a:	2b00      	cmp	r3, #0
 800209c:	d013      	beq.n	80020c6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ae:	f043 0208 	orr.w	r2, r3, #8
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020be:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 fdd1 	bl	8002c68 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80020c6:	bf00      	nop
 80020c8:	3728      	adds	r7, #40	; 0x28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	50000100 	.word	0x50000100
 80020d4:	50000500 	.word	0x50000500
 80020d8:	50000400 	.word	0x50000400
 80020dc:	50000300 	.word	0x50000300
 80020e0:	50000700 	.word	0x50000700

080020e4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b0b6      	sub	sp, #216	; 0xd8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800214e:	2b01      	cmp	r3, #1
 8002150:	d102      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x24>
 8002152:	2302      	movs	r3, #2
 8002154:	f000 bc13 	b.w	800297e <HAL_ADC_ConfigChannel+0x84a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff faa6 	bl	80016b6 <LL_ADC_REG_IsConversionOngoing>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	f040 83f3 	bne.w	8002958 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6859      	ldr	r1, [r3, #4]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	f7ff f965 	bl	800144e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fa94 	bl	80016b6 <LL_ADC_REG_IsConversionOngoing>
 800218e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff faa0 	bl	80016dc <LL_ADC_INJ_IsConversionOngoing>
 800219c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 81d9 	bne.w	800255c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 81d4 	bne.w	800255c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021bc:	d10f      	bne.n	80021de <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2200      	movs	r2, #0
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7ff f97f 	bl	80014cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff f913 	bl	8001402 <LL_ADC_SetSamplingTimeCommonConfig>
 80021dc:	e00e      	b.n	80021fc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6818      	ldr	r0, [r3, #0]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6819      	ldr	r1, [r3, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	461a      	mov	r2, r3
 80021ec:	f7ff f96e 	bl	80014cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff f903 	bl	8001402 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	08db      	lsrs	r3, r3, #3
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b04      	cmp	r3, #4
 800221c:	d022      	beq.n	8002264 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6919      	ldr	r1, [r3, #16]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800222e:	f7ff f85d 	bl	80012ec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6919      	ldr	r1, [r3, #16]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	461a      	mov	r2, r3
 8002240:	f7ff f8a9 	bl	8001396 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002250:	2b01      	cmp	r3, #1
 8002252:	d102      	bne.n	800225a <HAL_ADC_ConfigChannel+0x126>
 8002254:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002258:	e000      	b.n	800225c <HAL_ADC_ConfigChannel+0x128>
 800225a:	2300      	movs	r3, #0
 800225c:	461a      	mov	r2, r3
 800225e:	f7ff f8b5 	bl	80013cc <LL_ADC_SetOffsetSaturation>
 8002262:	e17b      	b.n	800255c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f862 	bl	8001334 <LL_ADC_GetOffsetChannel>
 8002270:	4603      	mov	r3, r0
 8002272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10a      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x15c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff f857 	bl	8001334 <LL_ADC_GetOffsetChannel>
 8002286:	4603      	mov	r3, r0
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	f003 021f 	and.w	r2, r3, #31
 800228e:	e01e      	b.n	80022ce <HAL_ADC_ConfigChannel+0x19a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff f84c 	bl	8001334 <LL_ADC_GetOffsetChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80022b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80022be:	2320      	movs	r3, #32
 80022c0:	e004      	b.n	80022cc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80022c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x1b2>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	0e9b      	lsrs	r3, r3, #26
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	e018      	b.n	8002318 <HAL_ADC_ConfigChannel+0x1e4>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002302:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800230a:	2320      	movs	r3, #32
 800230c:	e004      	b.n	8002318 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800230e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002318:	429a      	cmp	r2, r3
 800231a:	d106      	bne.n	800232a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2200      	movs	r2, #0
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff f81b 	bl	8001360 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2101      	movs	r1, #1
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe ffff 	bl	8001334 <LL_ADC_GetOffsetChannel>
 8002336:	4603      	mov	r3, r0
 8002338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x222>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2101      	movs	r1, #1
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe fff4 	bl	8001334 <LL_ADC_GetOffsetChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	0e9b      	lsrs	r3, r3, #26
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	e01e      	b.n	8002394 <HAL_ADC_ConfigChannel+0x260>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2101      	movs	r1, #1
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe ffe9 	bl	8001334 <LL_ADC_GetOffsetChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002374:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800237c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002384:	2320      	movs	r3, #32
 8002386:	e004      	b.n	8002392 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002388:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x278>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0e9b      	lsrs	r3, r3, #26
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	e018      	b.n	80023de <HAL_ADC_ConfigChannel+0x2aa>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80023c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80023c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80023d0:	2320      	movs	r3, #32
 80023d2:	e004      	b.n	80023de <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80023d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023de:	429a      	cmp	r2, r3
 80023e0:	d106      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2200      	movs	r2, #0
 80023e8:	2101      	movs	r1, #1
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe ffb8 	bl	8001360 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2102      	movs	r1, #2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe ff9c 	bl	8001334 <LL_ADC_GetOffsetChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <HAL_ADC_ConfigChannel+0x2e8>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2102      	movs	r1, #2
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe ff91 	bl	8001334 <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	f003 021f 	and.w	r2, r3, #31
 800241a:	e01e      	b.n	800245a <HAL_ADC_ConfigChannel+0x326>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2102      	movs	r1, #2
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe ff86 	bl	8001334 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800243a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800243e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002442:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800244a:	2320      	movs	r3, #32
 800244c:	e004      	b.n	8002458 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800244e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x33e>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	e016      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x36c>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002484:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002486:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800248a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002492:	2320      	movs	r3, #32
 8002494:	e004      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002496:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d106      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2200      	movs	r2, #0
 80024aa:	2102      	movs	r1, #2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe ff57 	bl	8001360 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2103      	movs	r1, #3
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe ff3b 	bl	8001334 <LL_ADC_GetOffsetChannel>
 80024be:	4603      	mov	r3, r0
 80024c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10a      	bne.n	80024de <HAL_ADC_ConfigChannel+0x3aa>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2103      	movs	r1, #3
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe ff30 	bl	8001334 <LL_ADC_GetOffsetChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	0e9b      	lsrs	r3, r3, #26
 80024d8:	f003 021f 	and.w	r2, r3, #31
 80024dc:	e017      	b.n	800250e <HAL_ADC_ConfigChannel+0x3da>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2103      	movs	r1, #3
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe ff25 	bl	8001334 <LL_ADC_GetOffsetChannel>
 80024ea:	4603      	mov	r3, r0
 80024ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80024f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024f8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80024fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002500:	2320      	movs	r3, #32
 8002502:	e003      	b.n	800250c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002516:	2b00      	cmp	r3, #0
 8002518:	d105      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x3f2>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	0e9b      	lsrs	r3, r3, #26
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	e011      	b.n	800254a <HAL_ADC_ConfigChannel+0x416>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002536:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800253e:	2320      	movs	r3, #32
 8002540:	e003      	b.n	800254a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800254a:	429a      	cmp	r2, r3
 800254c:	d106      	bne.n	800255c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2200      	movs	r2, #0
 8002554:	2103      	movs	r1, #3
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe ff02 	bl	8001360 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff f881 	bl	8001668 <LL_ADC_IsEnabled>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	f040 813d 	bne.w	80027e8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6819      	ldr	r1, [r3, #0]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	461a      	mov	r2, r3
 800257c:	f7fe ffd2 	bl	8001524 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4aa2      	ldr	r2, [pc, #648]	; (8002810 <HAL_ADC_ConfigChannel+0x6dc>)
 8002586:	4293      	cmp	r3, r2
 8002588:	f040 812e 	bne.w	80027e8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10b      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x480>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0e9b      	lsrs	r3, r3, #26
 80025a2:	3301      	adds	r3, #1
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	2b09      	cmp	r3, #9
 80025aa:	bf94      	ite	ls
 80025ac:	2301      	movls	r3, #1
 80025ae:	2300      	movhi	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	e019      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x4b4>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80025c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025c4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80025c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80025cc:	2320      	movs	r3, #32
 80025ce:	e003      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80025d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	3301      	adds	r3, #1
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	2b09      	cmp	r3, #9
 80025e0:	bf94      	ite	ls
 80025e2:	2301      	movls	r3, #1
 80025e4:	2300      	movhi	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d079      	beq.n	80026e0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x4d4>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	0e9b      	lsrs	r3, r3, #26
 80025fe:	3301      	adds	r3, #1
 8002600:	069b      	lsls	r3, r3, #26
 8002602:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002606:	e015      	b.n	8002634 <HAL_ADC_ConfigChannel+0x500>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002618:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800261a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002620:	2320      	movs	r3, #32
 8002622:	e003      	b.n	800262c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	3301      	adds	r3, #1
 800262e:	069b      	lsls	r3, r3, #26
 8002630:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263c:	2b00      	cmp	r3, #0
 800263e:	d109      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x520>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0e9b      	lsrs	r3, r3, #26
 8002646:	3301      	adds	r3, #1
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	2101      	movs	r1, #1
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	e017      	b.n	8002684 <HAL_ADC_ConfigChannel+0x550>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002664:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800266c:	2320      	movs	r3, #32
 800266e:	e003      	b.n	8002678 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	3301      	adds	r3, #1
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	2101      	movs	r1, #1
 8002680:	fa01 f303 	lsl.w	r3, r1, r3
 8002684:	ea42 0103 	orr.w	r1, r2, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x576>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0e9b      	lsrs	r3, r3, #26
 800269a:	3301      	adds	r3, #1
 800269c:	f003 021f 	and.w	r2, r3, #31
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	051b      	lsls	r3, r3, #20
 80026a8:	e018      	b.n	80026dc <HAL_ADC_ConfigChannel+0x5a8>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80026bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80026c2:	2320      	movs	r3, #32
 80026c4:	e003      	b.n	80026ce <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80026c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	3301      	adds	r3, #1
 80026d0:	f003 021f 	and.w	r2, r3, #31
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026dc:	430b      	orrs	r3, r1
 80026de:	e07e      	b.n	80027de <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d107      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x5c8>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0e9b      	lsrs	r3, r3, #26
 80026f2:	3301      	adds	r3, #1
 80026f4:	069b      	lsls	r3, r3, #26
 80026f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026fa:	e015      	b.n	8002728 <HAL_ADC_ConfigChannel+0x5f4>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002714:	2320      	movs	r3, #32
 8002716:	e003      	b.n	8002720 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	3301      	adds	r3, #1
 8002722:	069b      	lsls	r3, r3, #26
 8002724:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x614>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	0e9b      	lsrs	r3, r3, #26
 800273a:	3301      	adds	r3, #1
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	2101      	movs	r1, #1
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	e017      	b.n	8002778 <HAL_ADC_ConfigChannel+0x644>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	fa93 f3a3 	rbit	r3, r3
 8002754:	61fb      	str	r3, [r7, #28]
  return result;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002760:	2320      	movs	r3, #32
 8002762:	e003      	b.n	800276c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	3301      	adds	r3, #1
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	ea42 0103 	orr.w	r1, r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10d      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x670>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	0e9b      	lsrs	r3, r3, #26
 800278e:	3301      	adds	r3, #1
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	3b1e      	subs	r3, #30
 800279c:	051b      	lsls	r3, r3, #20
 800279e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027a2:	e01b      	b.n	80027dc <HAL_ADC_ConfigChannel+0x6a8>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	613b      	str	r3, [r7, #16]
  return result;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80027bc:	2320      	movs	r3, #32
 80027be:	e003      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	3301      	adds	r3, #1
 80027ca:	f003 021f 	and.w	r2, r3, #31
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	3b1e      	subs	r3, #30
 80027d6:	051b      	lsls	r3, r3, #20
 80027d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e2:	4619      	mov	r1, r3
 80027e4:	f7fe fe72 	bl	80014cc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_ADC_ConfigChannel+0x6e0>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80be 	beq.w	8002972 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027fe:	d004      	beq.n	800280a <HAL_ADC_ConfigChannel+0x6d6>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a04      	ldr	r2, [pc, #16]	; (8002818 <HAL_ADC_ConfigChannel+0x6e4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d10a      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x6ec>
 800280a:	4b04      	ldr	r3, [pc, #16]	; (800281c <HAL_ADC_ConfigChannel+0x6e8>)
 800280c:	e009      	b.n	8002822 <HAL_ADC_ConfigChannel+0x6ee>
 800280e:	bf00      	nop
 8002810:	407f0000 	.word	0x407f0000
 8002814:	80080000 	.word	0x80080000
 8002818:	50000100 	.word	0x50000100
 800281c:	50000300 	.word	0x50000300
 8002820:	4b59      	ldr	r3, [pc, #356]	; (8002988 <HAL_ADC_ConfigChannel+0x854>)
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fd54 	bl	80012d0 <LL_ADC_GetCommonPathInternalCh>
 8002828:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a56      	ldr	r2, [pc, #344]	; (800298c <HAL_ADC_ConfigChannel+0x858>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d004      	beq.n	8002840 <HAL_ADC_ConfigChannel+0x70c>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a55      	ldr	r2, [pc, #340]	; (8002990 <HAL_ADC_ConfigChannel+0x85c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d13a      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002840:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d134      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002854:	d005      	beq.n	8002862 <HAL_ADC_ConfigChannel+0x72e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a4e      	ldr	r2, [pc, #312]	; (8002994 <HAL_ADC_ConfigChannel+0x860>)
 800285c:	4293      	cmp	r3, r2
 800285e:	f040 8085 	bne.w	800296c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800286a:	d004      	beq.n	8002876 <HAL_ADC_ConfigChannel+0x742>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a49      	ldr	r2, [pc, #292]	; (8002998 <HAL_ADC_ConfigChannel+0x864>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_ADC_ConfigChannel+0x746>
 8002876:	4a49      	ldr	r2, [pc, #292]	; (800299c <HAL_ADC_ConfigChannel+0x868>)
 8002878:	e000      	b.n	800287c <HAL_ADC_ConfigChannel+0x748>
 800287a:	4a43      	ldr	r2, [pc, #268]	; (8002988 <HAL_ADC_ConfigChannel+0x854>)
 800287c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002880:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f7fe fd0f 	bl	80012aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800288c:	4b44      	ldr	r3, [pc, #272]	; (80029a0 <HAL_ADC_ConfigChannel+0x86c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	099b      	lsrs	r3, r3, #6
 8002892:	4a44      	ldr	r2, [pc, #272]	; (80029a4 <HAL_ADC_ConfigChannel+0x870>)
 8002894:	fba2 2303 	umull	r2, r3, r2, r3
 8002898:	099b      	lsrs	r3, r3, #6
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028a6:	e002      	b.n	80028ae <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f9      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028b4:	e05a      	b.n	800296c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a3b      	ldr	r2, [pc, #236]	; (80029a8 <HAL_ADC_ConfigChannel+0x874>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d125      	bne.n	800290c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d11f      	bne.n	800290c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a31      	ldr	r2, [pc, #196]	; (8002998 <HAL_ADC_ConfigChannel+0x864>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d104      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x7ac>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a34      	ldr	r2, [pc, #208]	; (80029ac <HAL_ADC_ConfigChannel+0x878>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d047      	beq.n	8002970 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028e8:	d004      	beq.n	80028f4 <HAL_ADC_ConfigChannel+0x7c0>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a2a      	ldr	r2, [pc, #168]	; (8002998 <HAL_ADC_ConfigChannel+0x864>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x7c4>
 80028f4:	4a29      	ldr	r2, [pc, #164]	; (800299c <HAL_ADC_ConfigChannel+0x868>)
 80028f6:	e000      	b.n	80028fa <HAL_ADC_ConfigChannel+0x7c6>
 80028f8:	4a23      	ldr	r2, [pc, #140]	; (8002988 <HAL_ADC_ConfigChannel+0x854>)
 80028fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002902:	4619      	mov	r1, r3
 8002904:	4610      	mov	r0, r2
 8002906:	f7fe fcd0 	bl	80012aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800290a:	e031      	b.n	8002970 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a27      	ldr	r2, [pc, #156]	; (80029b0 <HAL_ADC_ConfigChannel+0x87c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d12d      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002916:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800291a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d127      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <HAL_ADC_ConfigChannel+0x864>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d022      	beq.n	8002972 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002934:	d004      	beq.n	8002940 <HAL_ADC_ConfigChannel+0x80c>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a17      	ldr	r2, [pc, #92]	; (8002998 <HAL_ADC_ConfigChannel+0x864>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d101      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x810>
 8002940:	4a16      	ldr	r2, [pc, #88]	; (800299c <HAL_ADC_ConfigChannel+0x868>)
 8002942:	e000      	b.n	8002946 <HAL_ADC_ConfigChannel+0x812>
 8002944:	4a10      	ldr	r2, [pc, #64]	; (8002988 <HAL_ADC_ConfigChannel+0x854>)
 8002946:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800294a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800294e:	4619      	mov	r1, r3
 8002950:	4610      	mov	r0, r2
 8002952:	f7fe fcaa 	bl	80012aa <LL_ADC_SetCommonPathInternalCh>
 8002956:	e00c      	b.n	8002972 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	f043 0220 	orr.w	r2, r3, #32
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800296a:	e002      	b.n	8002972 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800296c:	bf00      	nop
 800296e:	e000      	b.n	8002972 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002970:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800297a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800297e:	4618      	mov	r0, r3
 8002980:	37d8      	adds	r7, #216	; 0xd8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	50000700 	.word	0x50000700
 800298c:	c3210000 	.word	0xc3210000
 8002990:	90c00010 	.word	0x90c00010
 8002994:	50000600 	.word	0x50000600
 8002998:	50000100 	.word	0x50000100
 800299c:	50000300 	.word	0x50000300
 80029a0:	20000008 	.word	0x20000008
 80029a4:	053e2d63 	.word	0x053e2d63
 80029a8:	c7520000 	.word	0xc7520000
 80029ac:	50000500 	.word	0x50000500
 80029b0:	cb840000 	.word	0xcb840000

080029b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe fe4f 	bl	8001668 <LL_ADC_IsEnabled>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d176      	bne.n	8002abe <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	4b3c      	ldr	r3, [pc, #240]	; (8002ac8 <ADC_Enable+0x114>)
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00d      	beq.n	80029fa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	f043 0210 	orr.w	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e062      	b.n	8002ac0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe fe1e 	bl	8001640 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a0c:	d004      	beq.n	8002a18 <ADC_Enable+0x64>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a2e      	ldr	r2, [pc, #184]	; (8002acc <ADC_Enable+0x118>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d101      	bne.n	8002a1c <ADC_Enable+0x68>
 8002a18:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <ADC_Enable+0x11c>)
 8002a1a:	e000      	b.n	8002a1e <ADC_Enable+0x6a>
 8002a1c:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <ADC_Enable+0x120>)
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe fc56 	bl	80012d0 <LL_ADC_GetCommonPathInternalCh>
 8002a24:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d013      	beq.n	8002a56 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <ADC_Enable+0x124>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	099b      	lsrs	r3, r3, #6
 8002a34:	4a29      	ldr	r2, [pc, #164]	; (8002adc <ADC_Enable+0x128>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	099b      	lsrs	r3, r3, #6
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	4613      	mov	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a48:	e002      	b.n	8002a50 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f9      	bne.n	8002a4a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a56:	f7fe fc09 	bl	800126c <HAL_GetTick>
 8002a5a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a5c:	e028      	b.n	8002ab0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe fe00 	bl	8001668 <LL_ADC_IsEnabled>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d104      	bne.n	8002a78 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe fde4 	bl	8001640 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a78:	f7fe fbf8 	bl	800126c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d914      	bls.n	8002ab0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d00d      	beq.n	8002ab0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a98:	f043 0210 	orr.w	r2, r3, #16
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa4:	f043 0201 	orr.w	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e007      	b.n	8002ac0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d1cf      	bne.n	8002a5e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	8000003f 	.word	0x8000003f
 8002acc:	50000100 	.word	0x50000100
 8002ad0:	50000300 	.word	0x50000300
 8002ad4:	50000700 	.word	0x50000700
 8002ad8:	20000008 	.word	0x20000008
 8002adc:	053e2d63 	.word	0x053e2d63

08002ae0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d14b      	bne.n	8002b92 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d021      	beq.n	8002b58 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe fc85 	bl	8001428 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d032      	beq.n	8002b8a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d12b      	bne.n	8002b8a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d11f      	bne.n	8002b8a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b56:	e018      	b.n	8002b8a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d111      	bne.n	8002b8a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b82:	f043 0201 	orr.w	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f7ff faaa 	bl	80020e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b90:	e00e      	b.n	8002bb0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f7ff fabe 	bl	8002120 <HAL_ADC_ErrorCallback>
}
 8002ba4:	e004      	b.n	8002bb0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	4798      	blx	r3
}
 8002bb0:	bf00      	nop
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f7ff fa96 	bl	80020f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bcc:	bf00      	nop
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf2:	f043 0204 	orr.w	r2, r3, #4
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7ff fa90 	bl	8002120 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <LL_ADC_IsEnabled>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <LL_ADC_IsEnabled+0x18>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <LL_ADC_IsEnabled+0x1a>
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_ADC_REG_IsConversionOngoing>:
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d101      	bne.n	8002c46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b0a1      	sub	sp, #132	; 0x84
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e0e7      	b.n	8002ea6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cee:	d102      	bne.n	8002cf6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002cf0:	4b6f      	ldr	r3, [pc, #444]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	e009      	b.n	8002d0a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a6e      	ldr	r2, [pc, #440]	; (8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d102      	bne.n	8002d06 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002d00:	4b6d      	ldr	r3, [pc, #436]	; (8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	e001      	b.n	8002d0a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10b      	bne.n	8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d14:	f043 0220 	orr.w	r2, r3, #32
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0be      	b.n	8002ea6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ff7f 	bl	8002c2e <LL_ADC_REG_IsConversionOngoing>
 8002d30:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff ff79 	bl	8002c2e <LL_ADC_REG_IsConversionOngoing>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 80a0 	bne.w	8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f040 809c 	bne.w	8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d54:	d004      	beq.n	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a55      	ldr	r2, [pc, #340]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002d60:	4b56      	ldr	r3, [pc, #344]	; (8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002d62:	e000      	b.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002d64:	4b56      	ldr	r3, [pc, #344]	; (8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002d66:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d04b      	beq.n	8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d82:	035b      	lsls	r3, r3, #13
 8002d84:	430b      	orrs	r3, r1
 8002d86:	431a      	orrs	r2, r3
 8002d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d8a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d94:	d004      	beq.n	8002da0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a45      	ldr	r2, [pc, #276]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d10f      	bne.n	8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002da0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002da4:	f7ff ff30 	bl	8002c08 <LL_ADC_IsEnabled>
 8002da8:	4604      	mov	r4, r0
 8002daa:	4841      	ldr	r0, [pc, #260]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002dac:	f7ff ff2c 	bl	8002c08 <LL_ADC_IsEnabled>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4323      	orrs	r3, r4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	e012      	b.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002dc0:	483c      	ldr	r0, [pc, #240]	; (8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002dc2:	f7ff ff21 	bl	8002c08 <LL_ADC_IsEnabled>
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	483b      	ldr	r0, [pc, #236]	; (8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002dca:	f7ff ff1d 	bl	8002c08 <LL_ADC_IsEnabled>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	431c      	orrs	r4, r3
 8002dd2:	483c      	ldr	r0, [pc, #240]	; (8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002dd4:	f7ff ff18 	bl	8002c08 <LL_ADC_IsEnabled>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4323      	orrs	r3, r4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d056      	beq.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002df2:	f023 030f 	bic.w	r3, r3, #15
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	6811      	ldr	r1, [r2, #0]
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	6892      	ldr	r2, [r2, #8]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	431a      	orrs	r2, r3
 8002e02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e04:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e06:	e047      	b.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e12:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e1c:	d004      	beq.n	8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a23      	ldr	r2, [pc, #140]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d10f      	bne.n	8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002e28:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e2c:	f7ff feec 	bl	8002c08 <LL_ADC_IsEnabled>
 8002e30:	4604      	mov	r4, r0
 8002e32:	481f      	ldr	r0, [pc, #124]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e34:	f7ff fee8 	bl	8002c08 <LL_ADC_IsEnabled>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4323      	orrs	r3, r4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	e012      	b.n	8002e6e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002e48:	481a      	ldr	r0, [pc, #104]	; (8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002e4a:	f7ff fedd 	bl	8002c08 <LL_ADC_IsEnabled>
 8002e4e:	4604      	mov	r4, r0
 8002e50:	4819      	ldr	r0, [pc, #100]	; (8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002e52:	f7ff fed9 	bl	8002c08 <LL_ADC_IsEnabled>
 8002e56:	4603      	mov	r3, r0
 8002e58:	431c      	orrs	r4, r3
 8002e5a:	481a      	ldr	r0, [pc, #104]	; (8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002e5c:	f7ff fed4 	bl	8002c08 <LL_ADC_IsEnabled>
 8002e60:	4603      	mov	r3, r0
 8002e62:	4323      	orrs	r3, r4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d012      	beq.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e7a:	f023 030f 	bic.w	r3, r3, #15
 8002e7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002e80:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e82:	e009      	b.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002e96:	e000      	b.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ea2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3784      	adds	r7, #132	; 0x84
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd90      	pop	{r4, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	50000100 	.word	0x50000100
 8002eb4:	50000400 	.word	0x50000400
 8002eb8:	50000500 	.word	0x50000500
 8002ebc:	50000300 	.word	0x50000300
 8002ec0:	50000700 	.word	0x50000700
 8002ec4:	50000600 	.word	0x50000600

08002ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <__NVIC_SetPriorityGrouping+0x44>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002efa:	4a04      	ldr	r2, [pc, #16]	; (8002f0c <__NVIC_SetPriorityGrouping+0x44>)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	60d3      	str	r3, [r2, #12]
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f14:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <__NVIC_GetPriorityGrouping+0x18>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	0a1b      	lsrs	r3, r3, #8
 8002f1a:	f003 0307 	and.w	r3, r3, #7
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	db0b      	blt.n	8002f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	f003 021f 	and.w	r2, r3, #31
 8002f44:	4907      	ldr	r1, [pc, #28]	; (8002f64 <__NVIC_EnableIRQ+0x38>)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	e000e100 	.word	0xe000e100

08002f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	6039      	str	r1, [r7, #0]
 8002f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	db0a      	blt.n	8002f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	490c      	ldr	r1, [pc, #48]	; (8002fb4 <__NVIC_SetPriority+0x4c>)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	0112      	lsls	r2, r2, #4
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f90:	e00a      	b.n	8002fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	4908      	ldr	r1, [pc, #32]	; (8002fb8 <__NVIC_SetPriority+0x50>)
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	3b04      	subs	r3, #4
 8002fa0:	0112      	lsls	r2, r2, #4
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	761a      	strb	r2, [r3, #24]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000e100 	.word	0xe000e100
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f1c3 0307 	rsb	r3, r3, #7
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	bf28      	it	cs
 8002fda:	2304      	movcs	r3, #4
 8002fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	2b06      	cmp	r3, #6
 8002fe4:	d902      	bls.n	8002fec <NVIC_EncodePriority+0x30>
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3b03      	subs	r3, #3
 8002fea:	e000      	b.n	8002fee <NVIC_EncodePriority+0x32>
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	401a      	ands	r2, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003004:	f04f 31ff 	mov.w	r1, #4294967295
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	43d9      	mvns	r1, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	4313      	orrs	r3, r2
         );
}
 8003016:	4618      	mov	r0, r3
 8003018:	3724      	adds	r7, #36	; 0x24
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3b01      	subs	r3, #1
 8003030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003034:	d301      	bcc.n	800303a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003036:	2301      	movs	r3, #1
 8003038:	e00f      	b.n	800305a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <SysTick_Config+0x40>)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3b01      	subs	r3, #1
 8003040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003042:	210f      	movs	r1, #15
 8003044:	f04f 30ff 	mov.w	r0, #4294967295
 8003048:	f7ff ff8e 	bl	8002f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <SysTick_Config+0x40>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003052:	4b04      	ldr	r3, [pc, #16]	; (8003064 <SysTick_Config+0x40>)
 8003054:	2207      	movs	r2, #7
 8003056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	e000e010 	.word	0xe000e010

08003068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff ff29 	bl	8002ec8 <__NVIC_SetPriorityGrouping>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b086      	sub	sp, #24
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800308c:	f7ff ff40 	bl	8002f10 <__NVIC_GetPriorityGrouping>
 8003090:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	6978      	ldr	r0, [r7, #20]
 8003098:	f7ff ff90 	bl	8002fbc <NVIC_EncodePriority>
 800309c:	4602      	mov	r2, r0
 800309e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff5f 	bl	8002f68 <__NVIC_SetPriority>
}
 80030aa:	bf00      	nop
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	4603      	mov	r3, r0
 80030ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff33 	bl	8002f2c <__NVIC_EnableIRQ>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff ffa4 	bl	8003024 <SysTick_Config>
 80030dc:	4603      	mov	r3, r0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e014      	b.n	8003122 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	791b      	ldrb	r3, [r3, #4]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d105      	bne.n	800310e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7fd fecf 	bl	8000eac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2202      	movs	r2, #2
 8003112:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e056      	b.n	80031ee <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	795b      	ldrb	r3, [r3, #5]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_DAC_Start+0x20>
 8003148:	2302      	movs	r3, #2
 800314a:	e050      	b.n	80031ee <HAL_DAC_Start+0xc2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6819      	ldr	r1, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2201      	movs	r2, #1
 8003166:	409a      	lsls	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003170:	4b22      	ldr	r3, [pc, #136]	; (80031fc <HAL_DAC_Start+0xd0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	099b      	lsrs	r3, r3, #6
 8003176:	4a22      	ldr	r2, [pc, #136]	; (8003200 <HAL_DAC_Start+0xd4>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	099b      	lsrs	r3, r3, #6
 800317e:	3301      	adds	r3, #1
 8003180:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8003182:	e002      	b.n	800318a <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3b01      	subs	r3, #1
 8003188:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f9      	bne.n	8003184 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10f      	bne.n	80031b6 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d11d      	bne.n	80031e0 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	e014      	b.n	80031e0 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2102      	movs	r1, #2
 80031c8:	fa01 f303 	lsl.w	r3, r1, r3
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d107      	bne.n	80031e0 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0202 	orr.w	r2, r2, #2
 80031de:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000008 	.word	0x20000008
 8003200:	053e2d63 	.word	0x053e2d63

08003204 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e018      	b.n	8003252 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d105      	bne.n	800323e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4413      	add	r3, r2
 8003238:	3308      	adds	r3, #8
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e004      	b.n	8003248 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4413      	add	r3, r2
 8003244:	3314      	adds	r3, #20
 8003246:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	461a      	mov	r2, r3
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08a      	sub	sp, #40	; 0x28
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_DAC_ConfigChannel+0x1c>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e19e      	b.n	80035be <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	795b      	ldrb	r3, [r3, #5]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_DAC_ConfigChannel+0x2c>
 8003288:	2302      	movs	r3, #2
 800328a:	e198      	b.n	80035be <HAL_DAC_ConfigChannel+0x35e>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2202      	movs	r2, #2
 8003296:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b04      	cmp	r3, #4
 800329e:	d17a      	bne.n	8003396 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80032a0:	f7fd ffe4 	bl	800126c <HAL_GetTick>
 80032a4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d13d      	bne.n	8003328 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032ac:	e018      	b.n	80032e0 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032ae:	f7fd ffdd 	bl	800126c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d911      	bls.n	80032e0 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f043 0208 	orr.w	r2, r3, #8
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2203      	movs	r2, #3
 80032da:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e16e      	b.n	80035be <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1df      	bne.n	80032ae <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40
 80032f8:	e020      	b.n	800333c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032fa:	f7fd ffb7 	bl	800126c <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d90f      	bls.n	8003328 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330e:	2b00      	cmp	r3, #0
 8003310:	da0a      	bge.n	8003328 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f043 0208 	orr.w	r2, r3, #8
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2203      	movs	r2, #3
 8003322:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e14a      	b.n	80035be <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332e:	2b00      	cmp	r3, #0
 8003330:	dbe3      	blt.n	80032fa <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800333a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800334c:	fa01 f303 	lsl.w	r3, r1, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	ea02 0103 	and.w	r1, r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	409a      	lsls	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f003 0310 	and.w	r3, r3, #16
 8003376:	21ff      	movs	r1, #255	; 0xff
 8003378:	fa01 f303 	lsl.w	r3, r1, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	ea02 0103 	and.w	r1, r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	409a      	lsls	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d11d      	bne.n	80033da <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	221f      	movs	r2, #31
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b6:	4013      	ands	r3, r2
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ce:	4313      	orrs	r3, r2
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2207      	movs	r2, #7
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f2:	4013      	ands	r3, r2
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d102      	bne.n	8003404 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80033fe:	2300      	movs	r3, #0
 8003400:	623b      	str	r3, [r7, #32]
 8003402:	e00f      	b.n	8003424 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d102      	bne.n	8003412 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800340c:	2301      	movs	r3, #1
 800340e:	623b      	str	r3, [r7, #32]
 8003410:	e008      	b.n	8003424 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d102      	bne.n	8003420 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800341a:	2301      	movs	r3, #1
 800341c:	623b      	str	r3, [r7, #32]
 800341e:	e001      	b.n	8003424 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003420:	2300      	movs	r3, #0
 8003422:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	6a3a      	ldr	r2, [r7, #32]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003446:	4013      	ands	r3, r2
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	791b      	ldrb	r3, [r3, #4]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d102      	bne.n	8003458 <HAL_DAC_ConfigChannel+0x1f8>
 8003452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003456:	e000      	b.n	800345a <HAL_DAC_ConfigChannel+0x1fa>
 8003458:	2300      	movs	r3, #0
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003472:	4013      	ands	r3, r2
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	795b      	ldrb	r3, [r3, #5]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d102      	bne.n	8003484 <HAL_DAC_ConfigChannel+0x224>
 800347e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003482:	e000      	b.n	8003486 <HAL_DAC_ConfigChannel+0x226>
 8003484:	2300      	movs	r3, #0
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d114      	bne.n	80034c6 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800349c:	f001 faec 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 80034a0:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4a48      	ldr	r2, [pc, #288]	; (80035c8 <HAL_DAC_ConfigChannel+0x368>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d904      	bls.n	80034b4 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
 80034b2:	e00f      	b.n	80034d4 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4a45      	ldr	r2, [pc, #276]	; (80035cc <HAL_DAC_ConfigChannel+0x36c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d90a      	bls.n	80034d2 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
 80034c4:	e006      	b.n	80034d4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034cc:	4313      	orrs	r3, r2
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
 80034d0:	e000      	b.n	80034d4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80034d2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e2:	4313      	orrs	r3, r2
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6819      	ldr	r1, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	400a      	ands	r2, r1
 800350a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43db      	mvns	r3, r3
 8003524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003526:	4013      	ands	r3, r2
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353e:	4313      	orrs	r3, r2
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003548:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	22c0      	movs	r2, #192	; 0xc0
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43da      	mvns	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	400a      	ands	r2, r1
 8003564:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	089b      	lsrs	r3, r3, #2
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	089b      	lsrs	r3, r3, #2
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003594:	fa01 f303 	lsl.w	r3, r1, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	ea02 0103 	and.w	r1, r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	409a      	lsls	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80035bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3728      	adds	r7, #40	; 0x28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	09896800 	.word	0x09896800
 80035cc:	04c4b400 	.word	0x04c4b400

080035d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e08d      	b.n	80036fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	4b47      	ldr	r3, [pc, #284]	; (8003708 <HAL_DMA_Init+0x138>)
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d80f      	bhi.n	800360e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b45      	ldr	r3, [pc, #276]	; (800370c <HAL_DMA_Init+0x13c>)
 80035f6:	4413      	add	r3, r2
 80035f8:	4a45      	ldr	r2, [pc, #276]	; (8003710 <HAL_DMA_Init+0x140>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	009a      	lsls	r2, r3, #2
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a42      	ldr	r2, [pc, #264]	; (8003714 <HAL_DMA_Init+0x144>)
 800360a:	641a      	str	r2, [r3, #64]	; 0x40
 800360c:	e00e      	b.n	800362c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	4b40      	ldr	r3, [pc, #256]	; (8003718 <HAL_DMA_Init+0x148>)
 8003616:	4413      	add	r3, r2
 8003618:	4a3d      	ldr	r2, [pc, #244]	; (8003710 <HAL_DMA_Init+0x140>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	091b      	lsrs	r3, r3, #4
 8003620:	009a      	lsls	r2, r3, #2
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a3c      	ldr	r2, [pc, #240]	; (800371c <HAL_DMA_Init+0x14c>)
 800362a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003646:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003650:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800365c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fa76 	bl	8003b70 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800368c:	d102      	bne.n	8003694 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d010      	beq.n	80036d4 <HAL_DMA_Init+0x104>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d80c      	bhi.n	80036d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fa96 	bl	8003bec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	e008      	b.n	80036e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40020407 	.word	0x40020407
 800370c:	bffdfff8 	.word	0xbffdfff8
 8003710:	cccccccd 	.word	0xcccccccd
 8003714:	40020000 	.word	0x40020000
 8003718:	bffdfbf8 	.word	0xbffdfbf8
 800371c:	40020400 	.word	0x40020400

08003720 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_DMA_Start_IT+0x20>
 800373c:	2302      	movs	r3, #2
 800373e:	e066      	b.n	800380e <HAL_DMA_Start_IT+0xee>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d155      	bne.n	8003800 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f9bb 	bl	8003af4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 020e 	orr.w	r2, r2, #14
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e00f      	b.n	80037b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0204 	bic.w	r2, r2, #4
 80037a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 020a 	orr.w	r2, r2, #10
 80037b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0201 	orr.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e005      	b.n	800380c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003808:	2302      	movs	r3, #2
 800380a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800380c:	7dfb      	ldrb	r3, [r7, #23]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003816:	b480      	push	{r7}
 8003818:	b085      	sub	sp, #20
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d005      	beq.n	800383a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2204      	movs	r2, #4
 8003832:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
 8003838:	e037      	b.n	80038aa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 020e 	bic.w	r2, r2, #14
 8003848:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003854:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003858:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0201 	bic.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	f003 021f 	and.w	r2, r3, #31
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	2101      	movs	r1, #1
 8003878:	fa01 f202 	lsl.w	r2, r1, r2
 800387c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003886:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00c      	beq.n	80038aa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800389e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038a8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d00d      	beq.n	80038fc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2204      	movs	r2, #4
 80038e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
 80038fa:	e047      	b.n	800398c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 020e 	bic.w	r2, r2, #14
 800390a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003926:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800392a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	f003 021f 	and.w	r2, r3, #31
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	2101      	movs	r1, #1
 800393a:	fa01 f202 	lsl.w	r2, r1, r2
 800393e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003948:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00c      	beq.n	800396c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003960:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800396a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
    }
  }
  return status;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	2204      	movs	r2, #4
 80039b8:	409a      	lsls	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4013      	ands	r3, r2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d026      	beq.n	8003a10 <HAL_DMA_IRQHandler+0x7a>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d021      	beq.n	8003a10 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d107      	bne.n	80039ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0204 	bic.w	r2, r2, #4
 80039e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	f003 021f 	and.w	r2, r3, #31
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2104      	movs	r1, #4
 80039f8:	fa01 f202 	lsl.w	r2, r1, r2
 80039fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d071      	beq.n	8003aea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a0e:	e06c      	b.n	8003aea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	2202      	movs	r2, #2
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d02e      	beq.n	8003a82 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d029      	beq.n	8003a82 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10b      	bne.n	8003a54 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 020a 	bic.w	r2, r2, #10
 8003a4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	f003 021f 	and.w	r2, r3, #31
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	2102      	movs	r1, #2
 8003a62:	fa01 f202 	lsl.w	r2, r1, r2
 8003a66:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d038      	beq.n	8003aea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a80:	e033      	b.n	8003aea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	f003 031f 	and.w	r3, r3, #31
 8003a8a:	2208      	movs	r2, #8
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d02a      	beq.n	8003aec <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d025      	beq.n	8003aec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 020e 	bic.w	r2, r2, #14
 8003aae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab4:	f003 021f 	and.w	r2, r3, #31
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	2101      	movs	r1, #1
 8003abe:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003aea:	bf00      	nop
 8003aec:	bf00      	nop
}
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b0a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d004      	beq.n	8003b1e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b1c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	f003 021f 	and.w	r2, r3, #31
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b10      	cmp	r3, #16
 8003b40:	d108      	bne.n	8003b54 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b52:	e007      	b.n	8003b64 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	60da      	str	r2, [r3, #12]
}
 8003b64:	bf00      	nop
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d802      	bhi.n	8003b8a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003b84:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	e001      	b.n	8003b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b8c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	3b08      	subs	r3, #8
 8003b9a:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba8:	089b      	lsrs	r3, r3, #2
 8003baa:	009a      	lsls	r2, r3, #2
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4413      	add	r3, r2
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003bba:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 031f 	and.w	r3, r3, #31
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	409a      	lsls	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40020407 	.word	0x40020407
 8003bdc:	40020800 	.word	0x40020800
 8003be0:	40020820 	.word	0x40020820
 8003be4:	cccccccd 	.word	0xcccccccd
 8003be8:	40020880 	.word	0x40020880

08003bec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	461a      	mov	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a08      	ldr	r2, [pc, #32]	; (8003c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c0e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	2201      	movs	r2, #1
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	1000823f 	.word	0x1000823f
 8003c30:	40020940 	.word	0x40020940

08003c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c42:	e15a      	b.n	8003efa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	2101      	movs	r1, #1
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c50:	4013      	ands	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 814c 	beq.w	8003ef4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d005      	beq.n	8003c74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d130      	bne.n	8003cd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	2203      	movs	r2, #3
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003caa:	2201      	movs	r2, #1
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	091b      	lsrs	r3, r3, #4
 8003cc0:	f003 0201 	and.w	r2, r3, #1
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d017      	beq.n	8003d12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	2203      	movs	r2, #3
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d123      	bne.n	8003d66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	08da      	lsrs	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3208      	adds	r2, #8
 8003d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	220f      	movs	r2, #15
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	08da      	lsrs	r2, r3, #3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3208      	adds	r2, #8
 8003d60:	6939      	ldr	r1, [r7, #16]
 8003d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	2203      	movs	r2, #3
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	43db      	mvns	r3, r3
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f003 0203 	and.w	r2, r3, #3
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80a6 	beq.w	8003ef4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da8:	4b5b      	ldr	r3, [pc, #364]	; (8003f18 <HAL_GPIO_Init+0x2e4>)
 8003daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dac:	4a5a      	ldr	r2, [pc, #360]	; (8003f18 <HAL_GPIO_Init+0x2e4>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	6613      	str	r3, [r2, #96]	; 0x60
 8003db4:	4b58      	ldr	r3, [pc, #352]	; (8003f18 <HAL_GPIO_Init+0x2e4>)
 8003db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dc0:	4a56      	ldr	r2, [pc, #344]	; (8003f1c <HAL_GPIO_Init+0x2e8>)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	089b      	lsrs	r3, r3, #2
 8003dc6:	3302      	adds	r3, #2
 8003dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	220f      	movs	r2, #15
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dea:	d01f      	beq.n	8003e2c <HAL_GPIO_Init+0x1f8>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a4c      	ldr	r2, [pc, #304]	; (8003f20 <HAL_GPIO_Init+0x2ec>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d019      	beq.n	8003e28 <HAL_GPIO_Init+0x1f4>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a4b      	ldr	r2, [pc, #300]	; (8003f24 <HAL_GPIO_Init+0x2f0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d013      	beq.n	8003e24 <HAL_GPIO_Init+0x1f0>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a4a      	ldr	r2, [pc, #296]	; (8003f28 <HAL_GPIO_Init+0x2f4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00d      	beq.n	8003e20 <HAL_GPIO_Init+0x1ec>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a49      	ldr	r2, [pc, #292]	; (8003f2c <HAL_GPIO_Init+0x2f8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d007      	beq.n	8003e1c <HAL_GPIO_Init+0x1e8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a48      	ldr	r2, [pc, #288]	; (8003f30 <HAL_GPIO_Init+0x2fc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d101      	bne.n	8003e18 <HAL_GPIO_Init+0x1e4>
 8003e14:	2305      	movs	r3, #5
 8003e16:	e00a      	b.n	8003e2e <HAL_GPIO_Init+0x1fa>
 8003e18:	2306      	movs	r3, #6
 8003e1a:	e008      	b.n	8003e2e <HAL_GPIO_Init+0x1fa>
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	e006      	b.n	8003e2e <HAL_GPIO_Init+0x1fa>
 8003e20:	2303      	movs	r3, #3
 8003e22:	e004      	b.n	8003e2e <HAL_GPIO_Init+0x1fa>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e002      	b.n	8003e2e <HAL_GPIO_Init+0x1fa>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <HAL_GPIO_Init+0x1fa>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	f002 0203 	and.w	r2, r2, #3
 8003e34:	0092      	lsls	r2, r2, #2
 8003e36:	4093      	lsls	r3, r2
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e3e:	4937      	ldr	r1, [pc, #220]	; (8003f1c <HAL_GPIO_Init+0x2e8>)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	3302      	adds	r3, #2
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e4c:	4b39      	ldr	r3, [pc, #228]	; (8003f34 <HAL_GPIO_Init+0x300>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e70:	4a30      	ldr	r2, [pc, #192]	; (8003f34 <HAL_GPIO_Init+0x300>)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e76:	4b2f      	ldr	r3, [pc, #188]	; (8003f34 <HAL_GPIO_Init+0x300>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4013      	ands	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e9a:	4a26      	ldr	r2, [pc, #152]	; (8003f34 <HAL_GPIO_Init+0x300>)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003ea0:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <HAL_GPIO_Init+0x300>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4013      	ands	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ec4:	4a1b      	ldr	r2, [pc, #108]	; (8003f34 <HAL_GPIO_Init+0x300>)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003eca:	4b1a      	ldr	r3, [pc, #104]	; (8003f34 <HAL_GPIO_Init+0x300>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eee:	4a11      	ldr	r2, [pc, #68]	; (8003f34 <HAL_GPIO_Init+0x300>)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f47f ae9d 	bne.w	8003c44 <HAL_GPIO_Init+0x10>
  }
}
 8003f0a:	bf00      	nop
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	48000400 	.word	0x48000400
 8003f24:	48000800 	.word	0x48000800
 8003f28:	48000c00 	.word	0x48000c00
 8003f2c:	48001000 	.word	0x48001000
 8003f30:	48001400 	.word	0x48001400
 8003f34:	40010400 	.word	0x40010400

08003f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	807b      	strh	r3, [r7, #2]
 8003f44:	4613      	mov	r3, r2
 8003f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f48:	787b      	ldrb	r3, [r7, #1]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f4e:	887a      	ldrh	r2, [r7, #2]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f54:	e002      	b.n	8003f5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f56:	887a      	ldrh	r2, [r7, #2]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f72:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d006      	beq.n	8003f8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f7e:	4a05      	ldr	r2, [pc, #20]	; (8003f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f84:	88fb      	ldrh	r3, [r7, #6]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 f806 	bl	8003f98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40010400 	.word	0x40010400

08003f98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d141      	bne.n	8004042 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fbe:	4b4b      	ldr	r3, [pc, #300]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fca:	d131      	bne.n	8004030 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fcc:	4b47      	ldr	r3, [pc, #284]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fd2:	4a46      	ldr	r2, [pc, #280]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fdc:	4b43      	ldr	r3, [pc, #268]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fe4:	4a41      	ldr	r2, [pc, #260]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fec:	4b40      	ldr	r3, [pc, #256]	; (80040f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2232      	movs	r2, #50	; 0x32
 8003ff2:	fb02 f303 	mul.w	r3, r2, r3
 8003ff6:	4a3f      	ldr	r2, [pc, #252]	; (80040f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	0c9b      	lsrs	r3, r3, #18
 8003ffe:	3301      	adds	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004002:	e002      	b.n	800400a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3b01      	subs	r3, #1
 8004008:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800400a:	4b38      	ldr	r3, [pc, #224]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004016:	d102      	bne.n	800401e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f2      	bne.n	8004004 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800401e:	4b33      	ldr	r3, [pc, #204]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402a:	d158      	bne.n	80040de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e057      	b.n	80040e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004030:	4b2e      	ldr	r3, [pc, #184]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004036:	4a2d      	ldr	r2, [pc, #180]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800403c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004040:	e04d      	b.n	80040de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004048:	d141      	bne.n	80040ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800404a:	4b28      	ldr	r3, [pc, #160]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004056:	d131      	bne.n	80040bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004058:	4b24      	ldr	r3, [pc, #144]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800405e:	4a23      	ldr	r2, [pc, #140]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004068:	4b20      	ldr	r3, [pc, #128]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004070:	4a1e      	ldr	r2, [pc, #120]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004076:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004078:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2232      	movs	r2, #50	; 0x32
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004084:	fba2 2303 	umull	r2, r3, r2, r3
 8004088:	0c9b      	lsrs	r3, r3, #18
 800408a:	3301      	adds	r3, #1
 800408c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800408e:	e002      	b.n	8004096 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3b01      	subs	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004096:	4b15      	ldr	r3, [pc, #84]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a2:	d102      	bne.n	80040aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f2      	bne.n	8004090 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040aa:	4b10      	ldr	r3, [pc, #64]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b6:	d112      	bne.n	80040de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e011      	b.n	80040e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c2:	4a0a      	ldr	r2, [pc, #40]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040cc:	e007      	b.n	80040de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040ce:	4b07      	ldr	r3, [pc, #28]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040d6:	4a05      	ldr	r2, [pc, #20]	; (80040ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	40007000 	.word	0x40007000
 80040f0:	20000008 	.word	0x20000008
 80040f4:	431bde83 	.word	0x431bde83

080040f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80040fc:	4b05      	ldr	r3, [pc, #20]	; (8004114 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4a04      	ldr	r2, [pc, #16]	; (8004114 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004106:	6093      	str	r3, [r2, #8]
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40007000 	.word	0x40007000

08004118 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e2fe      	b.n	8004728 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d075      	beq.n	8004222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004136:	4b97      	ldr	r3, [pc, #604]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004140:	4b94      	ldr	r3, [pc, #592]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0303 	and.w	r3, r3, #3
 8004148:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b0c      	cmp	r3, #12
 800414e:	d102      	bne.n	8004156 <HAL_RCC_OscConfig+0x3e>
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d002      	beq.n	800415c <HAL_RCC_OscConfig+0x44>
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d10b      	bne.n	8004174 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800415c:	4b8d      	ldr	r3, [pc, #564]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d05b      	beq.n	8004220 <HAL_RCC_OscConfig+0x108>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d157      	bne.n	8004220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e2d9      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417c:	d106      	bne.n	800418c <HAL_RCC_OscConfig+0x74>
 800417e:	4b85      	ldr	r3, [pc, #532]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a84      	ldr	r2, [pc, #528]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 8004184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e01d      	b.n	80041c8 <HAL_RCC_OscConfig+0xb0>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004194:	d10c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x98>
 8004196:	4b7f      	ldr	r3, [pc, #508]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a7e      	ldr	r2, [pc, #504]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 800419c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	4b7c      	ldr	r3, [pc, #496]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a7b      	ldr	r2, [pc, #492]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_OscConfig+0xb0>
 80041b0:	4b78      	ldr	r3, [pc, #480]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a77      	ldr	r2, [pc, #476]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 80041b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	4b75      	ldr	r3, [pc, #468]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a74      	ldr	r2, [pc, #464]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 80041c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d013      	beq.n	80041f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fd f84c 	bl	800126c <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d8:	f7fd f848 	bl	800126c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	; 0x64
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e29e      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ea:	4b6a      	ldr	r3, [pc, #424]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0xc0>
 80041f6:	e014      	b.n	8004222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fd f838 	bl	800126c <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004200:	f7fd f834 	bl	800126c <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	; 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e28a      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004212:	4b60      	ldr	r3, [pc, #384]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0xe8>
 800421e:	e000      	b.n	8004222 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d075      	beq.n	800431a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800422e:	4b59      	ldr	r3, [pc, #356]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
 8004236:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004238:	4b56      	ldr	r3, [pc, #344]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b0c      	cmp	r3, #12
 8004246:	d102      	bne.n	800424e <HAL_RCC_OscConfig+0x136>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d002      	beq.n	8004254 <HAL_RCC_OscConfig+0x13c>
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b04      	cmp	r3, #4
 8004252:	d11f      	bne.n	8004294 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004254:	4b4f      	ldr	r3, [pc, #316]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_RCC_OscConfig+0x154>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e25d      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426c:	4b49      	ldr	r3, [pc, #292]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	061b      	lsls	r3, r3, #24
 800427a:	4946      	ldr	r1, [pc, #280]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 800427c:	4313      	orrs	r3, r2
 800427e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004280:	4b45      	ldr	r3, [pc, #276]	; (8004398 <HAL_RCC_OscConfig+0x280>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f7fc ffa5 	bl	80011d4 <HAL_InitTick>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d043      	beq.n	8004318 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e249      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d023      	beq.n	80042e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800429c:	4b3d      	ldr	r3, [pc, #244]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a3c      	ldr	r2, [pc, #240]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 80042a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7fc ffe0 	bl	800126c <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b0:	f7fc ffdc 	bl	800126c <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e232      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042c2:	4b34      	ldr	r3, [pc, #208]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0f0      	beq.n	80042b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ce:	4b31      	ldr	r3, [pc, #196]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	061b      	lsls	r3, r3, #24
 80042dc:	492d      	ldr	r1, [pc, #180]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	604b      	str	r3, [r1, #4]
 80042e2:	e01a      	b.n	800431a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042e4:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a2a      	ldr	r2, [pc, #168]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 80042ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f0:	f7fc ffbc 	bl	800126c <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f8:	f7fc ffb8 	bl	800126c <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e20e      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800430a:	4b22      	ldr	r3, [pc, #136]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x1e0>
 8004316:	e000      	b.n	800431a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004318:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d041      	beq.n	80043aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01c      	beq.n	8004368 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800432e:	4b19      	ldr	r3, [pc, #100]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 8004330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004334:	4a17      	ldr	r2, [pc, #92]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433e:	f7fc ff95 	bl	800126c <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004346:	f7fc ff91 	bl	800126c <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e1e7      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004358:	4b0e      	ldr	r3, [pc, #56]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 800435a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0ef      	beq.n	8004346 <HAL_RCC_OscConfig+0x22e>
 8004366:	e020      	b.n	80043aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 800436a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800436e:	4a09      	ldr	r2, [pc, #36]	; (8004394 <HAL_RCC_OscConfig+0x27c>)
 8004370:	f023 0301 	bic.w	r3, r3, #1
 8004374:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004378:	f7fc ff78 	bl	800126c <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800437e:	e00d      	b.n	800439c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004380:	f7fc ff74 	bl	800126c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d906      	bls.n	800439c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e1ca      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
 8004392:	bf00      	nop
 8004394:	40021000 	.word	0x40021000
 8004398:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800439c:	4b8c      	ldr	r3, [pc, #560]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 800439e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1ea      	bne.n	8004380 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 80a6 	beq.w	8004504 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b8:	2300      	movs	r3, #0
 80043ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043bc:	4b84      	ldr	r3, [pc, #528]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 80043be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_OscConfig+0x2b4>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <HAL_RCC_OscConfig+0x2b6>
 80043cc:	2300      	movs	r3, #0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00d      	beq.n	80043ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d2:	4b7f      	ldr	r3, [pc, #508]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 80043d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d6:	4a7e      	ldr	r2, [pc, #504]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 80043d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043dc:	6593      	str	r3, [r2, #88]	; 0x58
 80043de:	4b7c      	ldr	r3, [pc, #496]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043ea:	2301      	movs	r3, #1
 80043ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ee:	4b79      	ldr	r3, [pc, #484]	; (80045d4 <HAL_RCC_OscConfig+0x4bc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d118      	bne.n	800442c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043fa:	4b76      	ldr	r3, [pc, #472]	; (80045d4 <HAL_RCC_OscConfig+0x4bc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a75      	ldr	r2, [pc, #468]	; (80045d4 <HAL_RCC_OscConfig+0x4bc>)
 8004400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004406:	f7fc ff31 	bl	800126c <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440e:	f7fc ff2d 	bl	800126c <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e183      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004420:	4b6c      	ldr	r3, [pc, #432]	; (80045d4 <HAL_RCC_OscConfig+0x4bc>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d108      	bne.n	8004446 <HAL_RCC_OscConfig+0x32e>
 8004434:	4b66      	ldr	r3, [pc, #408]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	4a65      	ldr	r2, [pc, #404]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004444:	e024      	b.n	8004490 <HAL_RCC_OscConfig+0x378>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b05      	cmp	r3, #5
 800444c:	d110      	bne.n	8004470 <HAL_RCC_OscConfig+0x358>
 800444e:	4b60      	ldr	r3, [pc, #384]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004454:	4a5e      	ldr	r2, [pc, #376]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 8004456:	f043 0304 	orr.w	r3, r3, #4
 800445a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800445e:	4b5c      	ldr	r3, [pc, #368]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 8004460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004464:	4a5a      	ldr	r2, [pc, #360]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800446e:	e00f      	b.n	8004490 <HAL_RCC_OscConfig+0x378>
 8004470:	4b57      	ldr	r3, [pc, #348]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004476:	4a56      	ldr	r2, [pc, #344]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004480:	4b53      	ldr	r3, [pc, #332]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004486:	4a52      	ldr	r2, [pc, #328]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 8004488:	f023 0304 	bic.w	r3, r3, #4
 800448c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d016      	beq.n	80044c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004498:	f7fc fee8 	bl	800126c <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a0:	f7fc fee4 	bl	800126c <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e138      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b6:	4b46      	ldr	r3, [pc, #280]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 80044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0ed      	beq.n	80044a0 <HAL_RCC_OscConfig+0x388>
 80044c4:	e015      	b.n	80044f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c6:	f7fc fed1 	bl	800126c <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044cc:	e00a      	b.n	80044e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ce:	f7fc fecd 	bl	800126c <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044dc:	4293      	cmp	r3, r2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e121      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044e4:	4b3a      	ldr	r3, [pc, #232]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1ed      	bne.n	80044ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044f2:	7ffb      	ldrb	r3, [r7, #31]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d105      	bne.n	8004504 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f8:	4b35      	ldr	r3, [pc, #212]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 80044fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fc:	4a34      	ldr	r2, [pc, #208]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 80044fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004502:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d03c      	beq.n	800458a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01c      	beq.n	8004552 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004518:	4b2d      	ldr	r3, [pc, #180]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 800451a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800451e:	4a2c      	ldr	r2, [pc, #176]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7fc fea0 	bl	800126c <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004530:	f7fc fe9c 	bl	800126c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e0f2      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004542:	4b23      	ldr	r3, [pc, #140]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 8004544:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ef      	beq.n	8004530 <HAL_RCC_OscConfig+0x418>
 8004550:	e01b      	b.n	800458a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004552:	4b1f      	ldr	r3, [pc, #124]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 8004554:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004558:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004562:	f7fc fe83 	bl	800126c <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800456a:	f7fc fe7f 	bl	800126c <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e0d5      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800457c:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 800457e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1ef      	bne.n	800456a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80c9 	beq.w	8004726 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004594:	4b0e      	ldr	r3, [pc, #56]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 030c 	and.w	r3, r3, #12
 800459c:	2b0c      	cmp	r3, #12
 800459e:	f000 8083 	beq.w	80046a8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d15e      	bne.n	8004668 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045aa:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a08      	ldr	r2, [pc, #32]	; (80045d0 <HAL_RCC_OscConfig+0x4b8>)
 80045b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b6:	f7fc fe59 	bl	800126c <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045bc:	e00c      	b.n	80045d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045be:	f7fc fe55 	bl	800126c <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d905      	bls.n	80045d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e0ab      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
 80045d0:	40021000 	.word	0x40021000
 80045d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d8:	4b55      	ldr	r3, [pc, #340]	; (8004730 <HAL_RCC_OscConfig+0x618>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1ec      	bne.n	80045be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e4:	4b52      	ldr	r3, [pc, #328]	; (8004730 <HAL_RCC_OscConfig+0x618>)
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	4b52      	ldr	r3, [pc, #328]	; (8004734 <HAL_RCC_OscConfig+0x61c>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6a11      	ldr	r1, [r2, #32]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045f4:	3a01      	subs	r2, #1
 80045f6:	0112      	lsls	r2, r2, #4
 80045f8:	4311      	orrs	r1, r2
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80045fe:	0212      	lsls	r2, r2, #8
 8004600:	4311      	orrs	r1, r2
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004606:	0852      	lsrs	r2, r2, #1
 8004608:	3a01      	subs	r2, #1
 800460a:	0552      	lsls	r2, r2, #21
 800460c:	4311      	orrs	r1, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004612:	0852      	lsrs	r2, r2, #1
 8004614:	3a01      	subs	r2, #1
 8004616:	0652      	lsls	r2, r2, #25
 8004618:	4311      	orrs	r1, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800461e:	06d2      	lsls	r2, r2, #27
 8004620:	430a      	orrs	r2, r1
 8004622:	4943      	ldr	r1, [pc, #268]	; (8004730 <HAL_RCC_OscConfig+0x618>)
 8004624:	4313      	orrs	r3, r2
 8004626:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004628:	4b41      	ldr	r3, [pc, #260]	; (8004730 <HAL_RCC_OscConfig+0x618>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a40      	ldr	r2, [pc, #256]	; (8004730 <HAL_RCC_OscConfig+0x618>)
 800462e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004632:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004634:	4b3e      	ldr	r3, [pc, #248]	; (8004730 <HAL_RCC_OscConfig+0x618>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	4a3d      	ldr	r2, [pc, #244]	; (8004730 <HAL_RCC_OscConfig+0x618>)
 800463a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800463e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7fc fe14 	bl	800126c <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004648:	f7fc fe10 	bl	800126c <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e066      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800465a:	4b35      	ldr	r3, [pc, #212]	; (8004730 <HAL_RCC_OscConfig+0x618>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <HAL_RCC_OscConfig+0x530>
 8004666:	e05e      	b.n	8004726 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004668:	4b31      	ldr	r3, [pc, #196]	; (8004730 <HAL_RCC_OscConfig+0x618>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a30      	ldr	r2, [pc, #192]	; (8004730 <HAL_RCC_OscConfig+0x618>)
 800466e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fc fdfa 	bl	800126c <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467c:	f7fc fdf6 	bl	800126c <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e04c      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800468e:	4b28      	ldr	r3, [pc, #160]	; (8004730 <HAL_RCC_OscConfig+0x618>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800469a:	4b25      	ldr	r3, [pc, #148]	; (8004730 <HAL_RCC_OscConfig+0x618>)
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	4924      	ldr	r1, [pc, #144]	; (8004730 <HAL_RCC_OscConfig+0x618>)
 80046a0:	4b25      	ldr	r3, [pc, #148]	; (8004738 <HAL_RCC_OscConfig+0x620>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	60cb      	str	r3, [r1, #12]
 80046a6:	e03e      	b.n	8004726 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e039      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80046b4:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <HAL_RCC_OscConfig+0x618>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f003 0203 	and.w	r2, r3, #3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d12c      	bne.n	8004722 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	3b01      	subs	r3, #1
 80046d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d123      	bne.n	8004722 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d11b      	bne.n	8004722 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d113      	bne.n	8004722 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	085b      	lsrs	r3, r3, #1
 8004706:	3b01      	subs	r3, #1
 8004708:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800470a:	429a      	cmp	r2, r3
 800470c:	d109      	bne.n	8004722 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004718:	085b      	lsrs	r3, r3, #1
 800471a:	3b01      	subs	r3, #1
 800471c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800471e:	429a      	cmp	r2, r3
 8004720:	d001      	beq.n	8004726 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3720      	adds	r7, #32
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	019f800c 	.word	0x019f800c
 8004738:	feeefffc 	.word	0xfeeefffc

0800473c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e11e      	b.n	8004992 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004754:	4b91      	ldr	r3, [pc, #580]	; (800499c <HAL_RCC_ClockConfig+0x260>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d910      	bls.n	8004784 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004762:	4b8e      	ldr	r3, [pc, #568]	; (800499c <HAL_RCC_ClockConfig+0x260>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 020f 	bic.w	r2, r3, #15
 800476a:	498c      	ldr	r1, [pc, #560]	; (800499c <HAL_RCC_ClockConfig+0x260>)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	4313      	orrs	r3, r2
 8004770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004772:	4b8a      	ldr	r3, [pc, #552]	; (800499c <HAL_RCC_ClockConfig+0x260>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d001      	beq.n	8004784 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e106      	b.n	8004992 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d073      	beq.n	8004878 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b03      	cmp	r3, #3
 8004796:	d129      	bne.n	80047ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004798:	4b81      	ldr	r3, [pc, #516]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0f4      	b.n	8004992 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80047a8:	f000 f99e 	bl	8004ae8 <RCC_GetSysClockFreqFromPLLSource>
 80047ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4a7c      	ldr	r2, [pc, #496]	; (80049a4 <HAL_RCC_ClockConfig+0x268>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d93f      	bls.n	8004836 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047b6:	4b7a      	ldr	r3, [pc, #488]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d033      	beq.n	8004836 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d12f      	bne.n	8004836 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047d6:	4b72      	ldr	r3, [pc, #456]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047de:	4a70      	ldr	r2, [pc, #448]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 80047e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047e6:	2380      	movs	r3, #128	; 0x80
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	e024      	b.n	8004836 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d107      	bne.n	8004804 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047f4:	4b6a      	ldr	r3, [pc, #424]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d109      	bne.n	8004814 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0c6      	b.n	8004992 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004804:	4b66      	ldr	r3, [pc, #408]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0be      	b.n	8004992 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004814:	f000 f8ce 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8004818:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	4a61      	ldr	r2, [pc, #388]	; (80049a4 <HAL_RCC_ClockConfig+0x268>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d909      	bls.n	8004836 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004822:	4b5f      	ldr	r3, [pc, #380]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800482a:	4a5d      	ldr	r2, [pc, #372]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 800482c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004830:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004832:	2380      	movs	r3, #128	; 0x80
 8004834:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004836:	4b5a      	ldr	r3, [pc, #360]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f023 0203 	bic.w	r2, r3, #3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4957      	ldr	r1, [pc, #348]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 8004844:	4313      	orrs	r3, r2
 8004846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004848:	f7fc fd10 	bl	800126c <HAL_GetTick>
 800484c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484e:	e00a      	b.n	8004866 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004850:	f7fc fd0c 	bl	800126c <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	f241 3288 	movw	r2, #5000	; 0x1388
 800485e:	4293      	cmp	r3, r2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e095      	b.n	8004992 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004866:	4b4e      	ldr	r3, [pc, #312]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 020c 	and.w	r2, r3, #12
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	429a      	cmp	r2, r3
 8004876:	d1eb      	bne.n	8004850 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d023      	beq.n	80048cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004890:	4b43      	ldr	r3, [pc, #268]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4a42      	ldr	r2, [pc, #264]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 8004896:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800489a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d007      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80048a8:	4b3d      	ldr	r3, [pc, #244]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80048b0:	4a3b      	ldr	r2, [pc, #236]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 80048b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b8:	4b39      	ldr	r3, [pc, #228]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	4936      	ldr	r1, [pc, #216]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	608b      	str	r3, [r1, #8]
 80048ca:	e008      	b.n	80048de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b80      	cmp	r3, #128	; 0x80
 80048d0:	d105      	bne.n	80048de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80048d2:	4b33      	ldr	r3, [pc, #204]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	4a32      	ldr	r2, [pc, #200]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 80048d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048de:	4b2f      	ldr	r3, [pc, #188]	; (800499c <HAL_RCC_ClockConfig+0x260>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d21d      	bcs.n	8004928 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ec:	4b2b      	ldr	r3, [pc, #172]	; (800499c <HAL_RCC_ClockConfig+0x260>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 020f 	bic.w	r2, r3, #15
 80048f4:	4929      	ldr	r1, [pc, #164]	; (800499c <HAL_RCC_ClockConfig+0x260>)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048fc:	f7fc fcb6 	bl	800126c <HAL_GetTick>
 8004900:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004902:	e00a      	b.n	800491a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004904:	f7fc fcb2 	bl	800126c <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e03b      	b.n	8004992 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800491a:	4b20      	ldr	r3, [pc, #128]	; (800499c <HAL_RCC_ClockConfig+0x260>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d1ed      	bne.n	8004904 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004934:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	4917      	ldr	r1, [pc, #92]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d009      	beq.n	8004966 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004952:	4b13      	ldr	r3, [pc, #76]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	490f      	ldr	r1, [pc, #60]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 8004962:	4313      	orrs	r3, r2
 8004964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004966:	f000 f825 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 800496a:	4602      	mov	r2, r0
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <HAL_RCC_ClockConfig+0x264>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	091b      	lsrs	r3, r3, #4
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	490c      	ldr	r1, [pc, #48]	; (80049a8 <HAL_RCC_ClockConfig+0x26c>)
 8004978:	5ccb      	ldrb	r3, [r1, r3]
 800497a:	f003 031f 	and.w	r3, r3, #31
 800497e:	fa22 f303 	lsr.w	r3, r2, r3
 8004982:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <HAL_RCC_ClockConfig+0x270>)
 8004984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004986:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <HAL_RCC_ClockConfig+0x274>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fc fc22 	bl	80011d4 <HAL_InitTick>
 8004990:	4603      	mov	r3, r0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40022000 	.word	0x40022000
 80049a0:	40021000 	.word	0x40021000
 80049a4:	04c4b400 	.word	0x04c4b400
 80049a8:	08007628 	.word	0x08007628
 80049ac:	20000008 	.word	0x20000008
 80049b0:	2000000c 	.word	0x2000000c

080049b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049ba:	4b2c      	ldr	r3, [pc, #176]	; (8004a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d102      	bne.n	80049cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049c6:	4b2a      	ldr	r3, [pc, #168]	; (8004a70 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	e047      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80049cc:	4b27      	ldr	r3, [pc, #156]	; (8004a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 030c 	and.w	r3, r3, #12
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d102      	bne.n	80049de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049d8:	4b26      	ldr	r3, [pc, #152]	; (8004a74 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	e03e      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80049de:	4b23      	ldr	r3, [pc, #140]	; (8004a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b0c      	cmp	r3, #12
 80049e8:	d136      	bne.n	8004a58 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049ea:	4b20      	ldr	r3, [pc, #128]	; (8004a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049f4:	4b1d      	ldr	r3, [pc, #116]	; (8004a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	091b      	lsrs	r3, r3, #4
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	3301      	adds	r3, #1
 8004a00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	d10c      	bne.n	8004a22 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a08:	4a1a      	ldr	r2, [pc, #104]	; (8004a74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	4a16      	ldr	r2, [pc, #88]	; (8004a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a12:	68d2      	ldr	r2, [r2, #12]
 8004a14:	0a12      	lsrs	r2, r2, #8
 8004a16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a1a:	fb02 f303 	mul.w	r3, r2, r3
 8004a1e:	617b      	str	r3, [r7, #20]
      break;
 8004a20:	e00c      	b.n	8004a3c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a22:	4a13      	ldr	r2, [pc, #76]	; (8004a70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2a:	4a10      	ldr	r2, [pc, #64]	; (8004a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a2c:	68d2      	ldr	r2, [r2, #12]
 8004a2e:	0a12      	lsrs	r2, r2, #8
 8004a30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a34:	fb02 f303 	mul.w	r3, r2, r3
 8004a38:	617b      	str	r3, [r7, #20]
      break;
 8004a3a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	0e5b      	lsrs	r3, r3, #25
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	3301      	adds	r3, #1
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	e001      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a5c:	693b      	ldr	r3, [r7, #16]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	00f42400 	.word	0x00f42400
 8004a74:	016e3600 	.word	0x016e3600

08004a78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a7c:	4b03      	ldr	r3, [pc, #12]	; (8004a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	20000008 	.word	0x20000008

08004a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a94:	f7ff fff0 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	4904      	ldr	r1, [pc, #16]	; (8004ab8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004aa6:	5ccb      	ldrb	r3, [r1, r3]
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	08007638 	.word	0x08007638

08004abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ac0:	f7ff ffda 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	0adb      	lsrs	r3, r3, #11
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	4904      	ldr	r1, [pc, #16]	; (8004ae4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ad2:	5ccb      	ldrb	r3, [r1, r3]
 8004ad4:	f003 031f 	and.w	r3, r3, #31
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	08007638 	.word	0x08007638

08004ae8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aee:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004af8:	4b1b      	ldr	r3, [pc, #108]	; (8004b68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	3301      	adds	r3, #1
 8004b04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d10c      	bne.n	8004b26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b0c:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b14:	4a14      	ldr	r2, [pc, #80]	; (8004b68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b16:	68d2      	ldr	r2, [r2, #12]
 8004b18:	0a12      	lsrs	r2, r2, #8
 8004b1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	617b      	str	r3, [r7, #20]
    break;
 8004b24:	e00c      	b.n	8004b40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b26:	4a12      	ldr	r2, [pc, #72]	; (8004b70 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2e:	4a0e      	ldr	r2, [pc, #56]	; (8004b68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b30:	68d2      	ldr	r2, [r2, #12]
 8004b32:	0a12      	lsrs	r2, r2, #8
 8004b34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b38:	fb02 f303 	mul.w	r3, r2, r3
 8004b3c:	617b      	str	r3, [r7, #20]
    break;
 8004b3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b40:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	0e5b      	lsrs	r3, r3, #25
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b5a:	687b      	ldr	r3, [r7, #4]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	371c      	adds	r7, #28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	016e3600 	.word	0x016e3600
 8004b70:	00f42400 	.word	0x00f42400

08004b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b80:	2300      	movs	r3, #0
 8004b82:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8098 	beq.w	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b92:	2300      	movs	r3, #0
 8004b94:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b96:	4b43      	ldr	r3, [pc, #268]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10d      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ba2:	4b40      	ldr	r3, [pc, #256]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba6:	4a3f      	ldr	r2, [pc, #252]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bac:	6593      	str	r3, [r2, #88]	; 0x58
 8004bae:	4b3d      	ldr	r3, [pc, #244]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	60bb      	str	r3, [r7, #8]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bbe:	4b3a      	ldr	r3, [pc, #232]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a39      	ldr	r2, [pc, #228]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bca:	f7fc fb4f 	bl	800126c <HAL_GetTick>
 8004bce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bd0:	e009      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd2:	f7fc fb4b 	bl	800126c <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d902      	bls.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	74fb      	strb	r3, [r7, #19]
        break;
 8004be4:	e005      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004be6:	4b30      	ldr	r3, [pc, #192]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0ef      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004bf2:	7cfb      	ldrb	r3, [r7, #19]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d159      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bf8:	4b2a      	ldr	r3, [pc, #168]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c02:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d01e      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d019      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c14:	4b23      	ldr	r3, [pc, #140]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c20:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c26:	4a1f      	ldr	r2, [pc, #124]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c30:	4b1c      	ldr	r3, [pc, #112]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c36:	4a1b      	ldr	r2, [pc, #108]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c40:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d016      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c52:	f7fc fb0b 	bl	800126c <HAL_GetTick>
 8004c56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c58:	e00b      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c5a:	f7fc fb07 	bl	800126c <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d902      	bls.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	74fb      	strb	r3, [r7, #19]
            break;
 8004c70:	e006      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c72:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0ec      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c80:	7cfb      	ldrb	r3, [r7, #19]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10b      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c86:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c94:	4903      	ldr	r1, [pc, #12]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ca0:	74bb      	strb	r3, [r7, #18]
 8004ca2:	e005      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cac:	7cfb      	ldrb	r3, [r7, #19]
 8004cae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cb0:	7c7b      	ldrb	r3, [r7, #17]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d105      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb6:	4ba7      	ldr	r3, [pc, #668]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cba:	4aa6      	ldr	r2, [pc, #664]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cce:	4ba1      	ldr	r3, [pc, #644]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd4:	f023 0203 	bic.w	r2, r3, #3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	499d      	ldr	r1, [pc, #628]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cf0:	4b98      	ldr	r3, [pc, #608]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf6:	f023 020c 	bic.w	r2, r3, #12
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	4995      	ldr	r1, [pc, #596]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d12:	4b90      	ldr	r3, [pc, #576]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	498c      	ldr	r1, [pc, #560]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d34:	4b87      	ldr	r3, [pc, #540]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	4984      	ldr	r1, [pc, #528]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d56:	4b7f      	ldr	r3, [pc, #508]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	497b      	ldr	r1, [pc, #492]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d78:	4b76      	ldr	r3, [pc, #472]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	4973      	ldr	r1, [pc, #460]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d9a:	4b6e      	ldr	r3, [pc, #440]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	496a      	ldr	r1, [pc, #424]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dbc:	4b65      	ldr	r3, [pc, #404]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	4962      	ldr	r1, [pc, #392]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dde:	4b5d      	ldr	r3, [pc, #372]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	4959      	ldr	r1, [pc, #356]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e00:	4b54      	ldr	r3, [pc, #336]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e06:	f023 0203 	bic.w	r2, r3, #3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	4951      	ldr	r1, [pc, #324]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e22:	4b4c      	ldr	r3, [pc, #304]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	4948      	ldr	r1, [pc, #288]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d015      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e44:	4b43      	ldr	r3, [pc, #268]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e52:	4940      	ldr	r1, [pc, #256]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e62:	d105      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e64:	4b3b      	ldr	r3, [pc, #236]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	4a3a      	ldr	r2, [pc, #232]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d015      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e7c:	4b35      	ldr	r3, [pc, #212]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8a:	4932      	ldr	r1, [pc, #200]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e9a:	d105      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e9c:	4b2d      	ldr	r3, [pc, #180]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	4a2c      	ldr	r2, [pc, #176]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ea6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d015      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004eb4:	4b27      	ldr	r3, [pc, #156]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	4924      	ldr	r1, [pc, #144]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ece:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ed2:	d105      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed4:	4b1f      	ldr	r3, [pc, #124]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4a1e      	ldr	r2, [pc, #120]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ede:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d015      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eec:	4b19      	ldr	r3, [pc, #100]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efa:	4916      	ldr	r1, [pc, #88]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f0a:	d105      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f0c:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4a10      	ldr	r2, [pc, #64]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d019      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f24:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	4908      	ldr	r1, [pc, #32]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f42:	d109      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f44:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4a02      	ldr	r2, [pc, #8]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f4e:	60d3      	str	r3, [r2, #12]
 8004f50:	e002      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f52:	bf00      	nop
 8004f54:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d015      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f64:	4b29      	ldr	r3, [pc, #164]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	4926      	ldr	r1, [pc, #152]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f82:	d105      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f84:	4b21      	ldr	r3, [pc, #132]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4a20      	ldr	r2, [pc, #128]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d015      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004f9c:	4b1b      	ldr	r3, [pc, #108]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004faa:	4918      	ldr	r1, [pc, #96]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fba:	d105      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fbc:	4b13      	ldr	r3, [pc, #76]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4a12      	ldr	r2, [pc, #72]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d015      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004fd4:	4b0d      	ldr	r3, [pc, #52]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe2:	490a      	ldr	r1, [pc, #40]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ff2:	d105      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ff4:	4b05      	ldr	r3, [pc, #20]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4a04      	ldr	r2, [pc, #16]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ffe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005000:	7cbb      	ldrb	r3, [r7, #18]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	40021000 	.word	0x40021000

08005010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e042      	b.n	80050a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7fb ff77 	bl	8000f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2224      	movs	r2, #36	; 0x24
 800503e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0201 	bic.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 ff48 	bl	8005ef0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fc49 	bl	80058f8 <UART_SetConfig>
 8005066:	4603      	mov	r3, r0
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e01b      	b.n	80050a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800507e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800508e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 ffc7 	bl	8006034 <UART_CheckIdleState>
 80050a6:	4603      	mov	r3, r0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b091      	sub	sp, #68	; 0x44
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d178      	bne.n	80051ba <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_UART_Transmit_IT+0x24>
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e071      	b.n	80051bc <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	88fa      	ldrh	r2, [r7, #6]
 80050e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	88fa      	ldrh	r2, [r7, #6]
 80050ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2221      	movs	r2, #33	; 0x21
 8005100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510c:	d12a      	bne.n	8005164 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005116:	d107      	bne.n	8005128 <HAL_UART_Transmit_IT+0x78>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d103      	bne.n	8005128 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4a29      	ldr	r2, [pc, #164]	; (80051c8 <HAL_UART_Transmit_IT+0x118>)
 8005124:	679a      	str	r2, [r3, #120]	; 0x78
 8005126:	e002      	b.n	800512e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4a28      	ldr	r2, [pc, #160]	; (80051cc <HAL_UART_Transmit_IT+0x11c>)
 800512c:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3308      	adds	r3, #8
 8005134:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005144:	63bb      	str	r3, [r7, #56]	; 0x38
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3308      	adds	r3, #8
 800514c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800514e:	637a      	str	r2, [r7, #52]	; 0x34
 8005150:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005154:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800515c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e5      	bne.n	800512e <HAL_UART_Transmit_IT+0x7e>
 8005162:	e028      	b.n	80051b6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516c:	d107      	bne.n	800517e <HAL_UART_Transmit_IT+0xce>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d103      	bne.n	800517e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4a15      	ldr	r2, [pc, #84]	; (80051d0 <HAL_UART_Transmit_IT+0x120>)
 800517a:	679a      	str	r2, [r3, #120]	; 0x78
 800517c:	e002      	b.n	8005184 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <HAL_UART_Transmit_IT+0x124>)
 8005182:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	613b      	str	r3, [r7, #16]
   return(result);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a2:	623b      	str	r3, [r7, #32]
 80051a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	69f9      	ldr	r1, [r7, #28]
 80051a8:	6a3a      	ldr	r2, [r7, #32]
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e6      	bne.n	8005184 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	e000      	b.n	80051bc <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80051ba:	2302      	movs	r3, #2
  }
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3744      	adds	r7, #68	; 0x44
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	080067fb 	.word	0x080067fb
 80051cc:	0800671b 	.word	0x0800671b
 80051d0:	08006659 	.word	0x08006659
 80051d4:	080065a1 	.word	0x080065a1

080051d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	; 0x28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	4613      	mov	r3, r2
 80051e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d137      	bne.n	8005260 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_UART_Receive_IT+0x24>
 80051f6:	88fb      	ldrh	r3, [r7, #6]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e030      	b.n	8005262 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a18      	ldr	r2, [pc, #96]	; (800526c <HAL_UART_Receive_IT+0x94>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d01f      	beq.n	8005250 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d018      	beq.n	8005250 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	613b      	str	r3, [r7, #16]
   return(result);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	623b      	str	r3, [r7, #32]
 800523e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	69f9      	ldr	r1, [r7, #28]
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	61bb      	str	r3, [r7, #24]
   return(result);
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e6      	bne.n	800521e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005250:	88fb      	ldrh	r3, [r7, #6]
 8005252:	461a      	mov	r2, r3
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f001 f804 	bl	8006264 <UART_Start_Receive_IT>
 800525c:	4603      	mov	r3, r0
 800525e:	e000      	b.n	8005262 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005260:	2302      	movs	r3, #2
  }
}
 8005262:	4618      	mov	r0, r3
 8005264:	3728      	adds	r7, #40	; 0x28
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40008000 	.word	0x40008000

08005270 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b0ba      	sub	sp, #232	; 0xe8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005296:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800529a:	f640 030f 	movw	r3, #2063	; 0x80f
 800529e:	4013      	ands	r3, r2
 80052a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80052a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d11b      	bne.n	80052e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d015      	beq.n	80052e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d105      	bne.n	80052d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d009      	beq.n	80052e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 82e3 	beq.w	80058a0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	4798      	blx	r3
      }
      return;
 80052e2:	e2dd      	b.n	80058a0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80052e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 8123 	beq.w	8005534 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80052ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80052f2:	4b8d      	ldr	r3, [pc, #564]	; (8005528 <HAL_UART_IRQHandler+0x2b8>)
 80052f4:	4013      	ands	r3, r2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80052fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80052fe:	4b8b      	ldr	r3, [pc, #556]	; (800552c <HAL_UART_IRQHandler+0x2bc>)
 8005300:	4013      	ands	r3, r2
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 8116 	beq.w	8005534 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d011      	beq.n	8005338 <HAL_UART_IRQHandler+0xc8>
 8005314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00b      	beq.n	8005338 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2201      	movs	r2, #1
 8005326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	f043 0201 	orr.w	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d011      	beq.n	8005368 <HAL_UART_IRQHandler+0xf8>
 8005344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00b      	beq.n	8005368 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2202      	movs	r2, #2
 8005356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535e:	f043 0204 	orr.w	r2, r3, #4
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d011      	beq.n	8005398 <HAL_UART_IRQHandler+0x128>
 8005374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00b      	beq.n	8005398 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2204      	movs	r2, #4
 8005386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538e:	f043 0202 	orr.w	r2, r3, #2
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d017      	beq.n	80053d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80053a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d105      	bne.n	80053bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80053b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80053b4:	4b5c      	ldr	r3, [pc, #368]	; (8005528 <HAL_UART_IRQHandler+0x2b8>)
 80053b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00b      	beq.n	80053d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2208      	movs	r2, #8
 80053c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ca:	f043 0208 	orr.w	r2, r3, #8
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d012      	beq.n	8005406 <HAL_UART_IRQHandler+0x196>
 80053e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00c      	beq.n	8005406 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fc:	f043 0220 	orr.w	r2, r3, #32
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 8249 	beq.w	80058a4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d013      	beq.n	8005446 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800541e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d105      	bne.n	8005436 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800542a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800542e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d007      	beq.n	8005446 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d005      	beq.n	800546a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800545e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005462:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005466:	2b00      	cmp	r3, #0
 8005468:	d054      	beq.n	8005514 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f001 f81c 	bl	80064a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547a:	2b40      	cmp	r3, #64	; 0x40
 800547c:	d146      	bne.n	800550c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3308      	adds	r3, #8
 8005484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800548c:	e853 3f00 	ldrex	r3, [r3]
 8005490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800549c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3308      	adds	r3, #8
 80054a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1d9      	bne.n	800547e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d017      	beq.n	8005504 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054da:	4a15      	ldr	r2, [pc, #84]	; (8005530 <HAL_UART_IRQHandler+0x2c0>)
 80054dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fe f9ef 	bl	80038c8 <HAL_DMA_Abort_IT>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d019      	beq.n	8005524 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80054fe:	4610      	mov	r0, r2
 8005500:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005502:	e00f      	b.n	8005524 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f9e1 	bl	80058cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800550a:	e00b      	b.n	8005524 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f9dd 	bl	80058cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005512:	e007      	b.n	8005524 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f9d9 	bl	80058cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005522:	e1bf      	b.n	80058a4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005524:	bf00      	nop
    return;
 8005526:	e1bd      	b.n	80058a4 <HAL_UART_IRQHandler+0x634>
 8005528:	10000001 	.word	0x10000001
 800552c:	04000120 	.word	0x04000120
 8005530:	08006575 	.word	0x08006575

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005538:	2b01      	cmp	r3, #1
 800553a:	f040 8153 	bne.w	80057e4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800553e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 814c 	beq.w	80057e4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800554c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 8145 	beq.w	80057e4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2210      	movs	r2, #16
 8005560:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b40      	cmp	r3, #64	; 0x40
 800556e:	f040 80bb 	bne.w	80056e8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005580:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 818f 	beq.w	80058a8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005590:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005594:	429a      	cmp	r2, r3
 8005596:	f080 8187 	bcs.w	80058a8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f040 8087 	bne.w	80056c6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	461a      	mov	r2, r3
 80055de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1da      	bne.n	80055b8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005614:	f023 0301 	bic.w	r3, r3, #1
 8005618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3308      	adds	r3, #8
 8005622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005626:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800562a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800562e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e1      	bne.n	8005602 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3308      	adds	r3, #8
 8005644:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800564e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3308      	adds	r3, #8
 800565e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005662:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005664:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005668:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e3      	bne.n	800563e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005694:	f023 0310 	bic.w	r3, r3, #16
 8005698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	461a      	mov	r2, r3
 80056a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80056a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e4      	bne.n	8005684 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fe f8a8 	bl	8003816 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2202      	movs	r2, #2
 80056ca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056d8:	b29b      	uxth	r3, r3
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	b29b      	uxth	r3, r3
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f8fd 	bl	80058e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056e6:	e0df      	b.n	80058a8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 80d1 	beq.w	80058ac <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800570a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 80cc 	beq.w	80058ac <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571c:	e853 3f00 	ldrex	r3, [r3]
 8005720:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005724:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005728:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	461a      	mov	r2, r3
 8005732:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005736:	647b      	str	r3, [r7, #68]	; 0x44
 8005738:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800573c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1e4      	bne.n	8005714 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3308      	adds	r3, #8
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	623b      	str	r3, [r7, #32]
   return(result);
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005760:	f023 0301 	bic.w	r3, r3, #1
 8005764:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3308      	adds	r3, #8
 800576e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005772:	633a      	str	r2, [r7, #48]	; 0x30
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e1      	bne.n	800574a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	e853 3f00 	ldrex	r3, [r3]
 80057a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0310 	bic.w	r3, r3, #16
 80057ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057bc:	61fb      	str	r3, [r7, #28]
 80057be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	69b9      	ldr	r1, [r7, #24]
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	617b      	str	r3, [r7, #20]
   return(result);
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e4      	bne.n	800579a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f87f 	bl	80058e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057e2:	e063      	b.n	80058ac <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00e      	beq.n	800580e <HAL_UART_IRQHandler+0x59e>
 80057f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d008      	beq.n	800580e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005804:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f001 fdb4 	bl	8007374 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800580c:	e051      	b.n	80058b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800580e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005816:	2b00      	cmp	r3, #0
 8005818:	d014      	beq.n	8005844 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800581a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800581e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005822:	2b00      	cmp	r3, #0
 8005824:	d105      	bne.n	8005832 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800582a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d008      	beq.n	8005844 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005836:	2b00      	cmp	r3, #0
 8005838:	d03a      	beq.n	80058b0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	4798      	blx	r3
    }
    return;
 8005842:	e035      	b.n	80058b0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584c:	2b00      	cmp	r3, #0
 800584e:	d009      	beq.n	8005864 <HAL_UART_IRQHandler+0x5f4>
 8005850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f001 f841 	bl	80068e4 <UART_EndTransmit_IT>
    return;
 8005862:	e026      	b.n	80058b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005868:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d009      	beq.n	8005884 <HAL_UART_IRQHandler+0x614>
 8005870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005874:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f001 fd8d 	bl	800739c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005882:	e016      	b.n	80058b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d010      	beq.n	80058b2 <HAL_UART_IRQHandler+0x642>
 8005890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005894:	2b00      	cmp	r3, #0
 8005896:	da0c      	bge.n	80058b2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f001 fd75 	bl	8007388 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800589e:	e008      	b.n	80058b2 <HAL_UART_IRQHandler+0x642>
      return;
 80058a0:	bf00      	nop
 80058a2:	e006      	b.n	80058b2 <HAL_UART_IRQHandler+0x642>
    return;
 80058a4:	bf00      	nop
 80058a6:	e004      	b.n	80058b2 <HAL_UART_IRQHandler+0x642>
      return;
 80058a8:	bf00      	nop
 80058aa:	e002      	b.n	80058b2 <HAL_UART_IRQHandler+0x642>
      return;
 80058ac:	bf00      	nop
 80058ae:	e000      	b.n	80058b2 <HAL_UART_IRQHandler+0x642>
    return;
 80058b0:	bf00      	nop
  }
}
 80058b2:	37e8      	adds	r7, #232	; 0xe8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058fc:	b08c      	sub	sp, #48	; 0x30
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	431a      	orrs	r2, r3
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	431a      	orrs	r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	4313      	orrs	r3, r2
 800591e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4baa      	ldr	r3, [pc, #680]	; (8005bd0 <UART_SetConfig+0x2d8>)
 8005928:	4013      	ands	r3, r2
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	6812      	ldr	r2, [r2, #0]
 800592e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005930:	430b      	orrs	r3, r1
 8005932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a9f      	ldr	r2, [pc, #636]	; (8005bd4 <UART_SetConfig+0x2dc>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d004      	beq.n	8005964 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005960:	4313      	orrs	r3, r2
 8005962:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800596e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005978:	430b      	orrs	r3, r1
 800597a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	f023 010f 	bic.w	r1, r3, #15
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a90      	ldr	r2, [pc, #576]	; (8005bd8 <UART_SetConfig+0x2e0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d125      	bne.n	80059e8 <UART_SetConfig+0xf0>
 800599c:	4b8f      	ldr	r3, [pc, #572]	; (8005bdc <UART_SetConfig+0x2e4>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d81a      	bhi.n	80059e0 <UART_SetConfig+0xe8>
 80059aa:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <UART_SetConfig+0xb8>)
 80059ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b0:	080059c1 	.word	0x080059c1
 80059b4:	080059d1 	.word	0x080059d1
 80059b8:	080059c9 	.word	0x080059c9
 80059bc:	080059d9 	.word	0x080059d9
 80059c0:	2301      	movs	r3, #1
 80059c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059c6:	e116      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 80059c8:	2302      	movs	r3, #2
 80059ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ce:	e112      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 80059d0:	2304      	movs	r3, #4
 80059d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d6:	e10e      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 80059d8:	2308      	movs	r3, #8
 80059da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059de:	e10a      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 80059e0:	2310      	movs	r3, #16
 80059e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e6:	e106      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a7c      	ldr	r2, [pc, #496]	; (8005be0 <UART_SetConfig+0x2e8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d138      	bne.n	8005a64 <UART_SetConfig+0x16c>
 80059f2:	4b7a      	ldr	r3, [pc, #488]	; (8005bdc <UART_SetConfig+0x2e4>)
 80059f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f8:	f003 030c 	and.w	r3, r3, #12
 80059fc:	2b0c      	cmp	r3, #12
 80059fe:	d82d      	bhi.n	8005a5c <UART_SetConfig+0x164>
 8005a00:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <UART_SetConfig+0x110>)
 8005a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a06:	bf00      	nop
 8005a08:	08005a3d 	.word	0x08005a3d
 8005a0c:	08005a5d 	.word	0x08005a5d
 8005a10:	08005a5d 	.word	0x08005a5d
 8005a14:	08005a5d 	.word	0x08005a5d
 8005a18:	08005a4d 	.word	0x08005a4d
 8005a1c:	08005a5d 	.word	0x08005a5d
 8005a20:	08005a5d 	.word	0x08005a5d
 8005a24:	08005a5d 	.word	0x08005a5d
 8005a28:	08005a45 	.word	0x08005a45
 8005a2c:	08005a5d 	.word	0x08005a5d
 8005a30:	08005a5d 	.word	0x08005a5d
 8005a34:	08005a5d 	.word	0x08005a5d
 8005a38:	08005a55 	.word	0x08005a55
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a42:	e0d8      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005a44:	2302      	movs	r3, #2
 8005a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a4a:	e0d4      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a52:	e0d0      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005a54:	2308      	movs	r3, #8
 8005a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a5a:	e0cc      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a62:	e0c8      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a5e      	ldr	r2, [pc, #376]	; (8005be4 <UART_SetConfig+0x2ec>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d125      	bne.n	8005aba <UART_SetConfig+0x1c2>
 8005a6e:	4b5b      	ldr	r3, [pc, #364]	; (8005bdc <UART_SetConfig+0x2e4>)
 8005a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a78:	2b30      	cmp	r3, #48	; 0x30
 8005a7a:	d016      	beq.n	8005aaa <UART_SetConfig+0x1b2>
 8005a7c:	2b30      	cmp	r3, #48	; 0x30
 8005a7e:	d818      	bhi.n	8005ab2 <UART_SetConfig+0x1ba>
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d00a      	beq.n	8005a9a <UART_SetConfig+0x1a2>
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d814      	bhi.n	8005ab2 <UART_SetConfig+0x1ba>
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <UART_SetConfig+0x19a>
 8005a8c:	2b10      	cmp	r3, #16
 8005a8e:	d008      	beq.n	8005aa2 <UART_SetConfig+0x1aa>
 8005a90:	e00f      	b.n	8005ab2 <UART_SetConfig+0x1ba>
 8005a92:	2300      	movs	r3, #0
 8005a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a98:	e0ad      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aa0:	e0a9      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005aa2:	2304      	movs	r3, #4
 8005aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aa8:	e0a5      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005aaa:	2308      	movs	r3, #8
 8005aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ab0:	e0a1      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005ab2:	2310      	movs	r3, #16
 8005ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ab8:	e09d      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a4a      	ldr	r2, [pc, #296]	; (8005be8 <UART_SetConfig+0x2f0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d125      	bne.n	8005b10 <UART_SetConfig+0x218>
 8005ac4:	4b45      	ldr	r3, [pc, #276]	; (8005bdc <UART_SetConfig+0x2e4>)
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ace:	2bc0      	cmp	r3, #192	; 0xc0
 8005ad0:	d016      	beq.n	8005b00 <UART_SetConfig+0x208>
 8005ad2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ad4:	d818      	bhi.n	8005b08 <UART_SetConfig+0x210>
 8005ad6:	2b80      	cmp	r3, #128	; 0x80
 8005ad8:	d00a      	beq.n	8005af0 <UART_SetConfig+0x1f8>
 8005ada:	2b80      	cmp	r3, #128	; 0x80
 8005adc:	d814      	bhi.n	8005b08 <UART_SetConfig+0x210>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <UART_SetConfig+0x1f0>
 8005ae2:	2b40      	cmp	r3, #64	; 0x40
 8005ae4:	d008      	beq.n	8005af8 <UART_SetConfig+0x200>
 8005ae6:	e00f      	b.n	8005b08 <UART_SetConfig+0x210>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aee:	e082      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005af0:	2302      	movs	r3, #2
 8005af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005af6:	e07e      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005af8:	2304      	movs	r3, #4
 8005afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005afe:	e07a      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005b00:	2308      	movs	r3, #8
 8005b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b06:	e076      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005b08:	2310      	movs	r3, #16
 8005b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b0e:	e072      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a35      	ldr	r2, [pc, #212]	; (8005bec <UART_SetConfig+0x2f4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d12a      	bne.n	8005b70 <UART_SetConfig+0x278>
 8005b1a:	4b30      	ldr	r3, [pc, #192]	; (8005bdc <UART_SetConfig+0x2e4>)
 8005b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b28:	d01a      	beq.n	8005b60 <UART_SetConfig+0x268>
 8005b2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b2e:	d81b      	bhi.n	8005b68 <UART_SetConfig+0x270>
 8005b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b34:	d00c      	beq.n	8005b50 <UART_SetConfig+0x258>
 8005b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b3a:	d815      	bhi.n	8005b68 <UART_SetConfig+0x270>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <UART_SetConfig+0x250>
 8005b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b44:	d008      	beq.n	8005b58 <UART_SetConfig+0x260>
 8005b46:	e00f      	b.n	8005b68 <UART_SetConfig+0x270>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b4e:	e052      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005b50:	2302      	movs	r3, #2
 8005b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b56:	e04e      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005b58:	2304      	movs	r3, #4
 8005b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b5e:	e04a      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005b60:	2308      	movs	r3, #8
 8005b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b66:	e046      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005b68:	2310      	movs	r3, #16
 8005b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b6e:	e042      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a17      	ldr	r2, [pc, #92]	; (8005bd4 <UART_SetConfig+0x2dc>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d13a      	bne.n	8005bf0 <UART_SetConfig+0x2f8>
 8005b7a:	4b18      	ldr	r3, [pc, #96]	; (8005bdc <UART_SetConfig+0x2e4>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b88:	d01a      	beq.n	8005bc0 <UART_SetConfig+0x2c8>
 8005b8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b8e:	d81b      	bhi.n	8005bc8 <UART_SetConfig+0x2d0>
 8005b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b94:	d00c      	beq.n	8005bb0 <UART_SetConfig+0x2b8>
 8005b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9a:	d815      	bhi.n	8005bc8 <UART_SetConfig+0x2d0>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <UART_SetConfig+0x2b0>
 8005ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba4:	d008      	beq.n	8005bb8 <UART_SetConfig+0x2c0>
 8005ba6:	e00f      	b.n	8005bc8 <UART_SetConfig+0x2d0>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bae:	e022      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bb6:	e01e      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005bb8:	2304      	movs	r3, #4
 8005bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bbe:	e01a      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005bc0:	2308      	movs	r3, #8
 8005bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bc6:	e016      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005bc8:	2310      	movs	r3, #16
 8005bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bce:	e012      	b.n	8005bf6 <UART_SetConfig+0x2fe>
 8005bd0:	cfff69f3 	.word	0xcfff69f3
 8005bd4:	40008000 	.word	0x40008000
 8005bd8:	40013800 	.word	0x40013800
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	40004400 	.word	0x40004400
 8005be4:	40004800 	.word	0x40004800
 8005be8:	40004c00 	.word	0x40004c00
 8005bec:	40005000 	.word	0x40005000
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4aae      	ldr	r2, [pc, #696]	; (8005eb4 <UART_SetConfig+0x5bc>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	f040 8097 	bne.w	8005d30 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d823      	bhi.n	8005c52 <UART_SetConfig+0x35a>
 8005c0a:	a201      	add	r2, pc, #4	; (adr r2, 8005c10 <UART_SetConfig+0x318>)
 8005c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c10:	08005c35 	.word	0x08005c35
 8005c14:	08005c53 	.word	0x08005c53
 8005c18:	08005c3d 	.word	0x08005c3d
 8005c1c:	08005c53 	.word	0x08005c53
 8005c20:	08005c43 	.word	0x08005c43
 8005c24:	08005c53 	.word	0x08005c53
 8005c28:	08005c53 	.word	0x08005c53
 8005c2c:	08005c53 	.word	0x08005c53
 8005c30:	08005c4b 	.word	0x08005c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c34:	f7fe ff2c 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8005c38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c3a:	e010      	b.n	8005c5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c3c:	4b9e      	ldr	r3, [pc, #632]	; (8005eb8 <UART_SetConfig+0x5c0>)
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c40:	e00d      	b.n	8005c5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c42:	f7fe feb7 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005c46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c48:	e009      	b.n	8005c5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c50:	e005      	b.n	8005c5e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8130 	beq.w	8005ec6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	4a94      	ldr	r2, [pc, #592]	; (8005ebc <UART_SetConfig+0x5c4>)
 8005c6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c70:	461a      	mov	r2, r3
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	4413      	add	r3, r2
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d305      	bcc.n	8005c96 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d903      	bls.n	8005c9e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c9c:	e113      	b.n	8005ec6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	60bb      	str	r3, [r7, #8]
 8005ca4:	60fa      	str	r2, [r7, #12]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	4a84      	ldr	r2, [pc, #528]	; (8005ebc <UART_SetConfig+0x5c4>)
 8005cac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	603b      	str	r3, [r7, #0]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005cc0:	f7fa faaa 	bl	8000218 <__aeabi_uldivmod>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4610      	mov	r0, r2
 8005cca:	4619      	mov	r1, r3
 8005ccc:	f04f 0200 	mov.w	r2, #0
 8005cd0:	f04f 0300 	mov.w	r3, #0
 8005cd4:	020b      	lsls	r3, r1, #8
 8005cd6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005cda:	0202      	lsls	r2, r0, #8
 8005cdc:	6979      	ldr	r1, [r7, #20]
 8005cde:	6849      	ldr	r1, [r1, #4]
 8005ce0:	0849      	lsrs	r1, r1, #1
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	eb12 0804 	adds.w	r8, r2, r4
 8005cec:	eb43 0905 	adc.w	r9, r3, r5
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	469a      	mov	sl, r3
 8005cf8:	4693      	mov	fp, r2
 8005cfa:	4652      	mov	r2, sl
 8005cfc:	465b      	mov	r3, fp
 8005cfe:	4640      	mov	r0, r8
 8005d00:	4649      	mov	r1, r9
 8005d02:	f7fa fa89 	bl	8000218 <__aeabi_uldivmod>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d14:	d308      	bcc.n	8005d28 <UART_SetConfig+0x430>
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d1c:	d204      	bcs.n	8005d28 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6a3a      	ldr	r2, [r7, #32]
 8005d24:	60da      	str	r2, [r3, #12]
 8005d26:	e0ce      	b.n	8005ec6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d2e:	e0ca      	b.n	8005ec6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d38:	d166      	bne.n	8005e08 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005d3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d827      	bhi.n	8005d92 <UART_SetConfig+0x49a>
 8005d42:	a201      	add	r2, pc, #4	; (adr r2, 8005d48 <UART_SetConfig+0x450>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005d6d 	.word	0x08005d6d
 8005d4c:	08005d75 	.word	0x08005d75
 8005d50:	08005d7d 	.word	0x08005d7d
 8005d54:	08005d93 	.word	0x08005d93
 8005d58:	08005d83 	.word	0x08005d83
 8005d5c:	08005d93 	.word	0x08005d93
 8005d60:	08005d93 	.word	0x08005d93
 8005d64:	08005d93 	.word	0x08005d93
 8005d68:	08005d8b 	.word	0x08005d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d6c:	f7fe fe90 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8005d70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d72:	e014      	b.n	8005d9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d74:	f7fe fea2 	bl	8004abc <HAL_RCC_GetPCLK2Freq>
 8005d78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d7a:	e010      	b.n	8005d9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d7c:	4b4e      	ldr	r3, [pc, #312]	; (8005eb8 <UART_SetConfig+0x5c0>)
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d80:	e00d      	b.n	8005d9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d82:	f7fe fe17 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005d86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d88:	e009      	b.n	8005d9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d90:	e005      	b.n	8005d9e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 8090 	beq.w	8005ec6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	4a44      	ldr	r2, [pc, #272]	; (8005ebc <UART_SetConfig+0x5c4>)
 8005dac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005db0:	461a      	mov	r2, r3
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005db8:	005a      	lsls	r2, r3, #1
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	441a      	add	r2, r3
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	2b0f      	cmp	r3, #15
 8005dd0:	d916      	bls.n	8005e00 <UART_SetConfig+0x508>
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd8:	d212      	bcs.n	8005e00 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f023 030f 	bic.w	r3, r3, #15
 8005de2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	085b      	lsrs	r3, r3, #1
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	8bfb      	ldrh	r3, [r7, #30]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	8bfa      	ldrh	r2, [r7, #30]
 8005dfc:	60da      	str	r2, [r3, #12]
 8005dfe:	e062      	b.n	8005ec6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e06:	e05e      	b.n	8005ec6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d828      	bhi.n	8005e62 <UART_SetConfig+0x56a>
 8005e10:	a201      	add	r2, pc, #4	; (adr r2, 8005e18 <UART_SetConfig+0x520>)
 8005e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e16:	bf00      	nop
 8005e18:	08005e3d 	.word	0x08005e3d
 8005e1c:	08005e45 	.word	0x08005e45
 8005e20:	08005e4d 	.word	0x08005e4d
 8005e24:	08005e63 	.word	0x08005e63
 8005e28:	08005e53 	.word	0x08005e53
 8005e2c:	08005e63 	.word	0x08005e63
 8005e30:	08005e63 	.word	0x08005e63
 8005e34:	08005e63 	.word	0x08005e63
 8005e38:	08005e5b 	.word	0x08005e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e3c:	f7fe fe28 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8005e40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e42:	e014      	b.n	8005e6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e44:	f7fe fe3a 	bl	8004abc <HAL_RCC_GetPCLK2Freq>
 8005e48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e4a:	e010      	b.n	8005e6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e4c:	4b1a      	ldr	r3, [pc, #104]	; (8005eb8 <UART_SetConfig+0x5c0>)
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e50:	e00d      	b.n	8005e6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e52:	f7fe fdaf 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005e56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e58:	e009      	b.n	8005e6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e60:	e005      	b.n	8005e6e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e6c:	bf00      	nop
    }

    if (pclk != 0U)
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d028      	beq.n	8005ec6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	4a10      	ldr	r2, [pc, #64]	; (8005ebc <UART_SetConfig+0x5c4>)
 8005e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	085b      	lsrs	r3, r3, #1
 8005e8c:	441a      	add	r2, r3
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	2b0f      	cmp	r3, #15
 8005e9c:	d910      	bls.n	8005ec0 <UART_SetConfig+0x5c8>
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea4:	d20c      	bcs.n	8005ec0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60da      	str	r2, [r3, #12]
 8005eb0:	e009      	b.n	8005ec6 <UART_SetConfig+0x5ce>
 8005eb2:	bf00      	nop
 8005eb4:	40008000 	.word	0x40008000
 8005eb8:	00f42400 	.word	0x00f42400
 8005ebc:	08007640 	.word	0x08007640
      }
      else
      {
        ret = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005ee2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3730      	adds	r7, #48	; 0x30
 8005eea:	46bd      	mov	sp, r7
 8005eec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	f003 0308 	and.w	r3, r3, #8
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00a      	beq.n	8005fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01a      	beq.n	8006006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fee:	d10a      	bne.n	8006006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	605a      	str	r2, [r3, #4]
  }
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b098      	sub	sp, #96	; 0x60
 8006038:	af02      	add	r7, sp, #8
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006044:	f7fb f912 	bl	800126c <HAL_GetTick>
 8006048:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b08      	cmp	r3, #8
 8006056:	d12f      	bne.n	80060b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006060:	2200      	movs	r2, #0
 8006062:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f88e 	bl	8006188 <UART_WaitOnFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d022      	beq.n	80060b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006086:	653b      	str	r3, [r7, #80]	; 0x50
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006090:	647b      	str	r3, [r7, #68]	; 0x44
 8006092:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006096:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800609e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e6      	bne.n	8006072 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e063      	b.n	8006180 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0304 	and.w	r3, r3, #4
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d149      	bne.n	800615a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ce:	2200      	movs	r2, #0
 80060d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f857 	bl	8006188 <UART_WaitOnFlagUntilTimeout>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d03c      	beq.n	800615a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	623b      	str	r3, [r7, #32]
   return(result);
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006100:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e6      	bne.n	80060e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3308      	adds	r3, #8
 8006118:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	60fb      	str	r3, [r7, #12]
   return(result);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f023 0301 	bic.w	r3, r3, #1
 8006128:	64bb      	str	r3, [r7, #72]	; 0x48
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3308      	adds	r3, #8
 8006130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006132:	61fa      	str	r2, [r7, #28]
 8006134:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	69b9      	ldr	r1, [r7, #24]
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	617b      	str	r3, [r7, #20]
   return(result);
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e5      	bne.n	8006112 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2220      	movs	r2, #32
 800614a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e012      	b.n	8006180 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3758      	adds	r7, #88	; 0x58
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	603b      	str	r3, [r7, #0]
 8006194:	4613      	mov	r3, r2
 8006196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006198:	e04f      	b.n	800623a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a0:	d04b      	beq.n	800623a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a2:	f7fb f863 	bl	800126c <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d302      	bcc.n	80061b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e04e      	b.n	800625a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d037      	beq.n	800623a <UART_WaitOnFlagUntilTimeout+0xb2>
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b80      	cmp	r3, #128	; 0x80
 80061ce:	d034      	beq.n	800623a <UART_WaitOnFlagUntilTimeout+0xb2>
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b40      	cmp	r3, #64	; 0x40
 80061d4:	d031      	beq.n	800623a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d110      	bne.n	8006206 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2208      	movs	r2, #8
 80061ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f95b 	bl	80064a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2208      	movs	r2, #8
 80061f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e029      	b.n	800625a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006214:	d111      	bne.n	800623a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800621e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f941 	bl	80064a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e00f      	b.n	800625a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69da      	ldr	r2, [r3, #28]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4013      	ands	r3, r2
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	429a      	cmp	r2, r3
 8006248:	bf0c      	ite	eq
 800624a:	2301      	moveq	r3, #1
 800624c:	2300      	movne	r3, #0
 800624e:	b2db      	uxtb	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	429a      	cmp	r2, r3
 8006256:	d0a0      	beq.n	800619a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006264:	b480      	push	{r7}
 8006266:	b0a3      	sub	sp, #140	; 0x8c
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	4613      	mov	r3, r2
 8006270:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	88fa      	ldrh	r2, [r7, #6]
 800627c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	88fa      	ldrh	r2, [r7, #6]
 8006284:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006296:	d10e      	bne.n	80062b6 <UART_Start_Receive_IT+0x52>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d105      	bne.n	80062ac <UART_Start_Receive_IT+0x48>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80062a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062aa:	e02d      	b.n	8006308 <UART_Start_Receive_IT+0xa4>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	22ff      	movs	r2, #255	; 0xff
 80062b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062b4:	e028      	b.n	8006308 <UART_Start_Receive_IT+0xa4>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10d      	bne.n	80062da <UART_Start_Receive_IT+0x76>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d104      	bne.n	80062d0 <UART_Start_Receive_IT+0x6c>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	22ff      	movs	r2, #255	; 0xff
 80062ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062ce:	e01b      	b.n	8006308 <UART_Start_Receive_IT+0xa4>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	227f      	movs	r2, #127	; 0x7f
 80062d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062d8:	e016      	b.n	8006308 <UART_Start_Receive_IT+0xa4>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062e2:	d10d      	bne.n	8006300 <UART_Start_Receive_IT+0x9c>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d104      	bne.n	80062f6 <UART_Start_Receive_IT+0x92>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	227f      	movs	r2, #127	; 0x7f
 80062f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062f4:	e008      	b.n	8006308 <UART_Start_Receive_IT+0xa4>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	223f      	movs	r2, #63	; 0x3f
 80062fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062fe:	e003      	b.n	8006308 <UART_Start_Receive_IT+0xa4>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2222      	movs	r2, #34	; 0x22
 8006314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3308      	adds	r3, #8
 800631e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006322:	e853 3f00 	ldrex	r3, [r3]
 8006326:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006328:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800632a:	f043 0301 	orr.w	r3, r3, #1
 800632e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3308      	adds	r3, #8
 8006338:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800633c:	673a      	str	r2, [r7, #112]	; 0x70
 800633e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006342:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800634a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e3      	bne.n	8006318 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006358:	d14f      	bne.n	80063fa <UART_Start_Receive_IT+0x196>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006360:	88fa      	ldrh	r2, [r7, #6]
 8006362:	429a      	cmp	r2, r3
 8006364:	d349      	bcc.n	80063fa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636e:	d107      	bne.n	8006380 <UART_Start_Receive_IT+0x11c>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d103      	bne.n	8006380 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4a47      	ldr	r2, [pc, #284]	; (8006498 <UART_Start_Receive_IT+0x234>)
 800637c:	675a      	str	r2, [r3, #116]	; 0x74
 800637e:	e002      	b.n	8006386 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4a46      	ldr	r2, [pc, #280]	; (800649c <UART_Start_Receive_IT+0x238>)
 8006384:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d01a      	beq.n	80063c4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800639c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800639e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063b2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80063be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e4      	bne.n	800638e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3308      	adds	r3, #8
 80063ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ce:	e853 3f00 	ldrex	r3, [r3]
 80063d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3308      	adds	r3, #8
 80063e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80063e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80063e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063ec:	e841 2300 	strex	r3, r2, [r1]
 80063f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1e5      	bne.n	80063c4 <UART_Start_Receive_IT+0x160>
 80063f8:	e046      	b.n	8006488 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006402:	d107      	bne.n	8006414 <UART_Start_Receive_IT+0x1b0>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d103      	bne.n	8006414 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4a24      	ldr	r2, [pc, #144]	; (80064a0 <UART_Start_Receive_IT+0x23c>)
 8006410:	675a      	str	r2, [r3, #116]	; 0x74
 8006412:	e002      	b.n	800641a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4a23      	ldr	r2, [pc, #140]	; (80064a4 <UART_Start_Receive_IT+0x240>)
 8006418:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d019      	beq.n	8006456 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006436:	677b      	str	r3, [r7, #116]	; 0x74
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
 8006442:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e6      	bne.n	8006422 <UART_Start_Receive_IT+0x1be>
 8006454:	e018      	b.n	8006488 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	613b      	str	r3, [r7, #16]
   return(result);
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f043 0320 	orr.w	r3, r3, #32
 800646a:	67bb      	str	r3, [r7, #120]	; 0x78
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	461a      	mov	r2, r3
 8006472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006474:	623b      	str	r3, [r7, #32]
 8006476:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006478:	69f9      	ldr	r1, [r7, #28]
 800647a:	6a3a      	ldr	r2, [r7, #32]
 800647c:	e841 2300 	strex	r3, r2, [r1]
 8006480:	61bb      	str	r3, [r7, #24]
   return(result);
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e6      	bne.n	8006456 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	378c      	adds	r7, #140	; 0x8c
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	0800700d 	.word	0x0800700d
 800649c:	08006cad 	.word	0x08006cad
 80064a0:	08006af5 	.word	0x08006af5
 80064a4:	0800693d 	.word	0x0800693d

080064a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b095      	sub	sp, #84	; 0x54
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ce:	643b      	str	r3, [r7, #64]	; 0x40
 80064d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e6      	bne.n	80064b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3308      	adds	r3, #8
 80064e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064f8:	f023 0301 	bic.w	r3, r3, #1
 80064fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3308      	adds	r3, #8
 8006504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006506:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006508:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800650c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e3      	bne.n	80064e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800651e:	2b01      	cmp	r3, #1
 8006520:	d118      	bne.n	8006554 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	e853 3f00 	ldrex	r3, [r3]
 800652e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f023 0310 	bic.w	r3, r3, #16
 8006536:	647b      	str	r3, [r7, #68]	; 0x44
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006544:	6979      	ldr	r1, [r7, #20]
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	e841 2300 	strex	r3, r2, [r1]
 800654c:	613b      	str	r3, [r7, #16]
   return(result);
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1e6      	bne.n	8006522 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2220      	movs	r2, #32
 8006558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006568:	bf00      	nop
 800656a:	3754      	adds	r7, #84	; 0x54
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006580:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f7ff f99a 	bl	80058cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006598:	bf00      	nop
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b08f      	sub	sp, #60	; 0x3c
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ae:	2b21      	cmp	r3, #33	; 0x21
 80065b0:	d14c      	bne.n	800664c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d132      	bne.n	8006624 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065d2:	637b      	str	r3, [r7, #52]	; 0x34
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065de:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e6      	bne.n	80065be <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006604:	633b      	str	r3, [r7, #48]	; 0x30
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660e:	61bb      	str	r3, [r7, #24]
 8006610:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	6979      	ldr	r1, [r7, #20]
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	613b      	str	r3, [r7, #16]
   return(result);
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e6      	bne.n	80065f0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006622:	e013      	b.n	800664c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006628:	781a      	ldrb	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006640:	b29b      	uxth	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800664c:	bf00      	nop
 800664e:	373c      	adds	r7, #60	; 0x3c
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006658:	b480      	push	{r7}
 800665a:	b091      	sub	sp, #68	; 0x44
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006666:	2b21      	cmp	r3, #33	; 0x21
 8006668:	d151      	bne.n	800670e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006670:	b29b      	uxth	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d132      	bne.n	80066dc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	e853 3f00 	ldrex	r3, [r3]
 8006682:	623b      	str	r3, [r7, #32]
   return(result);
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800668a:	63bb      	str	r3, [r7, #56]	; 0x38
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006694:	633b      	str	r3, [r7, #48]	; 0x30
 8006696:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006698:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800669a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669c:	e841 2300 	strex	r3, r2, [r1]
 80066a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1e6      	bne.n	8006676 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066bc:	637b      	str	r3, [r7, #52]	; 0x34
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c6:	61fb      	str	r3, [r7, #28]
 80066c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ca:	69b9      	ldr	r1, [r7, #24]
 80066cc:	69fa      	ldr	r2, [r7, #28]
 80066ce:	e841 2300 	strex	r3, r2, [r1]
 80066d2:	617b      	str	r3, [r7, #20]
   return(result);
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1e6      	bne.n	80066a8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80066da:	e018      	b.n	800670e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80066e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066f0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f6:	1c9a      	adds	r2, r3, #2
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800670e:	bf00      	nop
 8006710:	3744      	adds	r7, #68	; 0x44
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800671a:	b480      	push	{r7}
 800671c:	b091      	sub	sp, #68	; 0x44
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006728:	2b21      	cmp	r3, #33	; 0x21
 800672a:	d160      	bne.n	80067ee <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006732:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006734:	e057      	b.n	80067e6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800673c:	b29b      	uxth	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d133      	bne.n	80067aa <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3308      	adds	r3, #8
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	623b      	str	r3, [r7, #32]
   return(result);
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006758:	63bb      	str	r3, [r7, #56]	; 0x38
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3308      	adds	r3, #8
 8006760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006762:	633a      	str	r2, [r7, #48]	; 0x30
 8006764:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e5      	bne.n	8006742 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	60fb      	str	r3, [r7, #12]
   return(result);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800678a:	637b      	str	r3, [r7, #52]	; 0x34
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006794:	61fb      	str	r3, [r7, #28]
 8006796:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	69b9      	ldr	r1, [r7, #24]
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	617b      	str	r3, [r7, #20]
   return(result);
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e6      	bne.n	8006776 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80067a8:	e021      	b.n	80067ee <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d013      	beq.n	80067e0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067bc:	781a      	ldrb	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80067e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80067e2:	3b01      	subs	r3, #1
 80067e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80067e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1a4      	bne.n	8006736 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80067ec:	e7ff      	b.n	80067ee <UART_TxISR_8BIT_FIFOEN+0xd4>
 80067ee:	bf00      	nop
 80067f0:	3744      	adds	r7, #68	; 0x44
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b091      	sub	sp, #68	; 0x44
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006808:	2b21      	cmp	r3, #33	; 0x21
 800680a:	d165      	bne.n	80068d8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006812:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006814:	e05c      	b.n	80068d0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d133      	bne.n	800688a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	61fb      	str	r3, [r7, #28]
   return(result);
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006838:	637b      	str	r3, [r7, #52]	; 0x34
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3308      	adds	r3, #8
 8006840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006842:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006844:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e5      	bne.n	8006822 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	e853 3f00 	ldrex	r3, [r3]
 8006862:	60bb      	str	r3, [r7, #8]
   return(result);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800686a:	633b      	str	r3, [r7, #48]	; 0x30
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	461a      	mov	r2, r3
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	61bb      	str	r3, [r7, #24]
 8006876:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006878:	6979      	ldr	r1, [r7, #20]
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	e841 2300 	strex	r3, r2, [r1]
 8006880:	613b      	str	r3, [r7, #16]
   return(result);
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e6      	bne.n	8006856 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8006888:	e026      	b.n	80068d8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006894:	2b00      	cmp	r3, #0
 8006896:	d018      	beq.n	80068ca <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800689c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800689e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068ac:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b2:	1c9a      	adds	r2, r3, #2
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80068be:	b29b      	uxth	r3, r3
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80068ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80068cc:	3b01      	subs	r3, #1
 80068ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80068d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d19f      	bne.n	8006816 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80068d6:	e7ff      	b.n	80068d8 <UART_TxISR_16BIT_FIFOEN+0xde>
 80068d8:	bf00      	nop
 80068da:	3744      	adds	r7, #68	; 0x44
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006900:	61fb      	str	r3, [r7, #28]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	61bb      	str	r3, [r7, #24]
 800690c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	6979      	ldr	r1, [r7, #20]
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	613b      	str	r3, [r7, #16]
   return(result);
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e6      	bne.n	80068ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2220      	movs	r2, #32
 8006922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7fe ffc3 	bl	80058b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006932:	bf00      	nop
 8006934:	3720      	adds	r7, #32
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b09c      	sub	sp, #112	; 0x70
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800694a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006954:	2b22      	cmp	r3, #34	; 0x22
 8006956:	f040 80be 	bne.w	8006ad6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006964:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006968:	b2d9      	uxtb	r1, r3
 800696a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800696e:	b2da      	uxtb	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006974:	400a      	ands	r2, r1
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f040 80a1 	bne.w	8006ae6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80069c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e6      	bne.n	80069a4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3308      	adds	r3, #8
 80069dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	e853 3f00 	ldrex	r3, [r3]
 80069e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e8:	f023 0301 	bic.w	r3, r3, #1
 80069ec:	667b      	str	r3, [r7, #100]	; 0x64
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3308      	adds	r3, #8
 80069f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80069f6:	647a      	str	r2, [r7, #68]	; 0x44
 80069f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e5      	bne.n	80069d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a33      	ldr	r2, [pc, #204]	; (8006af0 <UART_RxISR_8BIT+0x1b4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d01f      	beq.n	8006a68 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d018      	beq.n	8006a68 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	e853 3f00 	ldrex	r3, [r3]
 8006a42:	623b      	str	r3, [r7, #32]
   return(result);
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a4a:	663b      	str	r3, [r7, #96]	; 0x60
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	461a      	mov	r2, r3
 8006a52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a54:	633b      	str	r3, [r7, #48]	; 0x30
 8006a56:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e6      	bne.n	8006a36 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d12e      	bne.n	8006ace <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	e853 3f00 	ldrex	r3, [r3]
 8006a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f023 0310 	bic.w	r3, r3, #16
 8006a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a94:	61fb      	str	r3, [r7, #28]
 8006a96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a98:	69b9      	ldr	r1, [r7, #24]
 8006a9a:	69fa      	ldr	r2, [r7, #28]
 8006a9c:	e841 2300 	strex	r3, r2, [r1]
 8006aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e6      	bne.n	8006a76 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	f003 0310 	and.w	r3, r3, #16
 8006ab2:	2b10      	cmp	r3, #16
 8006ab4:	d103      	bne.n	8006abe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2210      	movs	r2, #16
 8006abc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7fe ff0a 	bl	80058e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006acc:	e00b      	b.n	8006ae6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7fa f87c 	bl	8000bcc <HAL_UART_RxCpltCallback>
}
 8006ad4:	e007      	b.n	8006ae6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	699a      	ldr	r2, [r3, #24]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f042 0208 	orr.w	r2, r2, #8
 8006ae4:	619a      	str	r2, [r3, #24]
}
 8006ae6:	bf00      	nop
 8006ae8:	3770      	adds	r7, #112	; 0x70
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	40008000 	.word	0x40008000

08006af4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b09c      	sub	sp, #112	; 0x70
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b02:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b0c:	2b22      	cmp	r3, #34	; 0x22
 8006b0e:	f040 80be 	bne.w	8006c8e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b20:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b22:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006b26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b30:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b36:	1c9a      	adds	r2, r3, #2
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	3b01      	subs	r3, #1
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f040 80a1 	bne.w	8006c9e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b70:	667b      	str	r3, [r7, #100]	; 0x64
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8006b7c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e6      	bne.n	8006b5c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3308      	adds	r3, #8
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	f023 0301 	bic.w	r3, r3, #1
 8006ba4:	663b      	str	r3, [r7, #96]	; 0x60
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3308      	adds	r3, #8
 8006bac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bae:	643a      	str	r2, [r7, #64]	; 0x40
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e5      	bne.n	8006b8e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a33      	ldr	r2, [pc, #204]	; (8006ca8 <UART_RxISR_16BIT+0x1b4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d01f      	beq.n	8006c20 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d018      	beq.n	8006c20 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	e853 3f00 	ldrex	r3, [r3]
 8006bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c0e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c14:	e841 2300 	strex	r3, r2, [r1]
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1e6      	bne.n	8006bee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d12e      	bne.n	8006c86 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	e853 3f00 	ldrex	r3, [r3]
 8006c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f023 0310 	bic.w	r3, r3, #16
 8006c42:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c4c:	61bb      	str	r3, [r7, #24]
 8006c4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c50:	6979      	ldr	r1, [r7, #20]
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	e841 2300 	strex	r3, r2, [r1]
 8006c58:	613b      	str	r3, [r7, #16]
   return(result);
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e6      	bne.n	8006c2e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	f003 0310 	and.w	r3, r3, #16
 8006c6a:	2b10      	cmp	r3, #16
 8006c6c:	d103      	bne.n	8006c76 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2210      	movs	r2, #16
 8006c74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7fe fe2e 	bl	80058e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c84:	e00b      	b.n	8006c9e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7f9 ffa0 	bl	8000bcc <HAL_UART_RxCpltCallback>
}
 8006c8c:	e007      	b.n	8006c9e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	699a      	ldr	r2, [r3, #24]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f042 0208 	orr.w	r2, r2, #8
 8006c9c:	619a      	str	r2, [r3, #24]
}
 8006c9e:	bf00      	nop
 8006ca0:	3770      	adds	r7, #112	; 0x70
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	40008000 	.word	0x40008000

08006cac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b0ac      	sub	sp, #176	; 0xb0
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006cba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce2:	2b22      	cmp	r3, #34	; 0x22
 8006ce4:	f040 8182 	bne.w	8006fec <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006cee:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006cf2:	e125      	b.n	8006f40 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cfe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006d02:	b2d9      	uxtb	r1, r3
 8006d04:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0e:	400a      	ands	r2, r1
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	3b01      	subs	r3, #1
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d3e:	f003 0307 	and.w	r3, r3, #7
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d053      	beq.n	8006dee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d011      	beq.n	8006d76 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006d52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00b      	beq.n	8006d76 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2201      	movs	r2, #1
 8006d64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6c:	f043 0201 	orr.w	r2, r3, #1
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d011      	beq.n	8006da6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00b      	beq.n	8006da6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2202      	movs	r2, #2
 8006d94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9c:	f043 0204 	orr.w	r2, r3, #4
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006daa:	f003 0304 	and.w	r3, r3, #4
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d011      	beq.n	8006dd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006db2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00b      	beq.n	8006dd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2204      	movs	r2, #4
 8006dc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dcc:	f043 0202 	orr.w	r2, r3, #2
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d006      	beq.n	8006dee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7fe fd73 	bl	80058cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f040 80a2 	bne.w	8006f40 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e04:	e853 3f00 	ldrex	r3, [r3]
 8006e08:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e20:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e22:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006e24:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006e26:	e841 2300 	strex	r3, r2, [r1]
 8006e2a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1e4      	bne.n	8006dfc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3308      	adds	r3, #8
 8006e38:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e48:	f023 0301 	bic.w	r3, r3, #1
 8006e4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3308      	adds	r3, #8
 8006e56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e5a:	66ba      	str	r2, [r7, #104]	; 0x68
 8006e5c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006e60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006e68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e1      	bne.n	8006e32 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a5f      	ldr	r2, [pc, #380]	; (8007004 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d021      	beq.n	8006ed0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d01a      	beq.n	8006ed0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ea2:	e853 3f00 	ldrex	r3, [r3]
 8006ea6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006eae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ebc:	657b      	str	r3, [r7, #84]	; 0x54
 8006ebe:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ec2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e4      	bne.n	8006e9a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d130      	bne.n	8006f3a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eee:	f023 0310 	bic.w	r3, r3, #16
 8006ef2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f00:	643b      	str	r3, [r7, #64]	; 0x40
 8006f02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e4      	bne.n	8006ede <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	f003 0310 	and.w	r3, r3, #16
 8006f1e:	2b10      	cmp	r3, #16
 8006f20:	d103      	bne.n	8006f2a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2210      	movs	r2, #16
 8006f28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7fe fcd4 	bl	80058e0 <HAL_UARTEx_RxEventCallback>
 8006f38:	e002      	b.n	8006f40 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7f9 fe46 	bl	8000bcc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f40:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d006      	beq.n	8006f56 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006f48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f4c:	f003 0320 	and.w	r3, r3, #32
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f47f aecf 	bne.w	8006cf4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f5c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006f60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d049      	beq.n	8006ffc <UART_RxISR_8BIT_FIFOEN+0x350>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f6e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d242      	bcs.n	8006ffc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	e853 3f00 	ldrex	r3, [r3]
 8006f84:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3308      	adds	r3, #8
 8006f96:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006f9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e3      	bne.n	8006f76 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a15      	ldr	r2, [pc, #84]	; (8007008 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006fb2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	f043 0320 	orr.w	r3, r3, #32
 8006fc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006fd6:	61bb      	str	r3, [r7, #24]
 8006fd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	6979      	ldr	r1, [r7, #20]
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e4      	bne.n	8006fb4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fea:	e007      	b.n	8006ffc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0208 	orr.w	r2, r2, #8
 8006ffa:	619a      	str	r2, [r3, #24]
}
 8006ffc:	bf00      	nop
 8006ffe:	37b0      	adds	r7, #176	; 0xb0
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	40008000 	.word	0x40008000
 8007008:	0800693d 	.word	0x0800693d

0800700c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b0ae      	sub	sp, #184	; 0xb8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800701a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007042:	2b22      	cmp	r3, #34	; 0x22
 8007044:	f040 8186 	bne.w	8007354 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800704e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007052:	e129      	b.n	80072a8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007066:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800706a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800706e:	4013      	ands	r3, r2
 8007070:	b29a      	uxth	r2, r3
 8007072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007076:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707c:	1c9a      	adds	r2, r3, #2
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007088:	b29b      	uxth	r3, r3
 800708a:	3b01      	subs	r3, #1
 800708c:	b29a      	uxth	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800709e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d053      	beq.n	8007152 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d011      	beq.n	80070da <UART_RxISR_16BIT_FIFOEN+0xce>
 80070b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00b      	beq.n	80070da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2201      	movs	r2, #1
 80070c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d0:	f043 0201 	orr.w	r2, r3, #1
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d011      	beq.n	800710a <UART_RxISR_16BIT_FIFOEN+0xfe>
 80070e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00b      	beq.n	800710a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2202      	movs	r2, #2
 80070f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007100:	f043 0204 	orr.w	r2, r3, #4
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800710a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800710e:	f003 0304 	and.w	r3, r3, #4
 8007112:	2b00      	cmp	r3, #0
 8007114:	d011      	beq.n	800713a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007116:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00b      	beq.n	800713a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2204      	movs	r2, #4
 8007128:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007130:	f043 0202 	orr.w	r2, r3, #2
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007140:	2b00      	cmp	r3, #0
 8007142:	d006      	beq.n	8007152 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7fe fbc1 	bl	80058cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007158:	b29b      	uxth	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	f040 80a4 	bne.w	80072a8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800716e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007174:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	461a      	mov	r2, r3
 800717e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007182:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007186:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800718a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e2      	bne.n	8007160 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3308      	adds	r3, #8
 80071a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071b0:	f023 0301 	bic.w	r3, r3, #1
 80071b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3308      	adds	r3, #8
 80071be:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80071c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80071d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e1      	bne.n	800719a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2220      	movs	r2, #32
 80071da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a5f      	ldr	r2, [pc, #380]	; (800736c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d021      	beq.n	8007238 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d01a      	beq.n	8007238 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800720a:	e853 3f00 	ldrex	r3, [r3]
 800720e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007212:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007216:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007224:	65bb      	str	r3, [r7, #88]	; 0x58
 8007226:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800722a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800722c:	e841 2300 	strex	r3, r2, [r1]
 8007230:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e4      	bne.n	8007202 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800723c:	2b01      	cmp	r3, #1
 800723e:	d130      	bne.n	80072a2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007256:	f023 0310 	bic.w	r3, r3, #16
 800725a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	461a      	mov	r2, r3
 8007264:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007268:	647b      	str	r3, [r7, #68]	; 0x44
 800726a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800726e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007270:	e841 2300 	strex	r3, r2, [r1]
 8007274:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e4      	bne.n	8007246 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	f003 0310 	and.w	r3, r3, #16
 8007286:	2b10      	cmp	r3, #16
 8007288:	d103      	bne.n	8007292 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2210      	movs	r2, #16
 8007290:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7fe fb20 	bl	80058e0 <HAL_UARTEx_RxEventCallback>
 80072a0:	e002      	b.n	80072a8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7f9 fc92 	bl	8000bcc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072a8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d006      	beq.n	80072be <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80072b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072b4:	f003 0320 	and.w	r3, r3, #32
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f47f aecb 	bne.w	8007054 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072c4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80072c8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d049      	beq.n	8007364 <UART_RxISR_16BIT_FIFOEN+0x358>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80072d6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80072da:	429a      	cmp	r2, r3
 80072dc:	d242      	bcs.n	8007364 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3308      	adds	r3, #8
 80072e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	623b      	str	r3, [r7, #32]
   return(result);
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3308      	adds	r3, #8
 80072fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007302:	633a      	str	r2, [r7, #48]	; 0x30
 8007304:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e3      	bne.n	80072de <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a15      	ldr	r2, [pc, #84]	; (8007370 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800731a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	60fb      	str	r3, [r7, #12]
   return(result);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f043 0320 	orr.w	r3, r3, #32
 8007330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	461a      	mov	r2, r3
 800733a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800733e:	61fb      	str	r3, [r7, #28]
 8007340:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	69b9      	ldr	r1, [r7, #24]
 8007344:	69fa      	ldr	r2, [r7, #28]
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	617b      	str	r3, [r7, #20]
   return(result);
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e4      	bne.n	800731c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007352:	e007      	b.n	8007364 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699a      	ldr	r2, [r3, #24]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0208 	orr.w	r2, r2, #8
 8007362:	619a      	str	r2, [r3, #24]
}
 8007364:	bf00      	nop
 8007366:	37b8      	adds	r7, #184	; 0xb8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	40008000 	.word	0x40008000
 8007370:	08006af5 	.word	0x08006af5

08007374 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d101      	bne.n	80073c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80073c2:	2302      	movs	r3, #2
 80073c4:	e027      	b.n	8007416 <HAL_UARTEx_DisableFifoMode+0x66>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2224      	movs	r2, #36	; 0x24
 80073d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 0201 	bic.w	r2, r2, #1
 80073ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80073f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2220      	movs	r2, #32
 8007408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007432:	2b01      	cmp	r3, #1
 8007434:	d101      	bne.n	800743a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007436:	2302      	movs	r3, #2
 8007438:	e02d      	b.n	8007496 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2224      	movs	r2, #36	; 0x24
 8007446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f022 0201 	bic.w	r2, r2, #1
 8007460:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f850 	bl	800751c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2220      	movs	r2, #32
 8007488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b084      	sub	sp, #16
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e02d      	b.n	8007512 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2224      	movs	r2, #36	; 0x24
 80074c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 0201 	bic.w	r2, r2, #1
 80074dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f812 	bl	800751c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2220      	movs	r2, #32
 8007504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007528:	2b00      	cmp	r3, #0
 800752a:	d108      	bne.n	800753e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800753c:	e031      	b.n	80075a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800753e:	2308      	movs	r3, #8
 8007540:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007542:	2308      	movs	r3, #8
 8007544:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	0e5b      	lsrs	r3, r3, #25
 800754e:	b2db      	uxtb	r3, r3
 8007550:	f003 0307 	and.w	r3, r3, #7
 8007554:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	0f5b      	lsrs	r3, r3, #29
 800755e:	b2db      	uxtb	r3, r3
 8007560:	f003 0307 	and.w	r3, r3, #7
 8007564:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007566:	7bbb      	ldrb	r3, [r7, #14]
 8007568:	7b3a      	ldrb	r2, [r7, #12]
 800756a:	4911      	ldr	r1, [pc, #68]	; (80075b0 <UARTEx_SetNbDataToProcess+0x94>)
 800756c:	5c8a      	ldrb	r2, [r1, r2]
 800756e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007572:	7b3a      	ldrb	r2, [r7, #12]
 8007574:	490f      	ldr	r1, [pc, #60]	; (80075b4 <UARTEx_SetNbDataToProcess+0x98>)
 8007576:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007578:	fb93 f3f2 	sdiv	r3, r3, r2
 800757c:	b29a      	uxth	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	7b7a      	ldrb	r2, [r7, #13]
 8007588:	4909      	ldr	r1, [pc, #36]	; (80075b0 <UARTEx_SetNbDataToProcess+0x94>)
 800758a:	5c8a      	ldrb	r2, [r1, r2]
 800758c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007590:	7b7a      	ldrb	r2, [r7, #13]
 8007592:	4908      	ldr	r1, [pc, #32]	; (80075b4 <UARTEx_SetNbDataToProcess+0x98>)
 8007594:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007596:	fb93 f3f2 	sdiv	r3, r3, r2
 800759a:	b29a      	uxth	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80075a2:	bf00      	nop
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	08007658 	.word	0x08007658
 80075b4:	08007660 	.word	0x08007660

080075b8 <memset>:
 80075b8:	4402      	add	r2, r0
 80075ba:	4603      	mov	r3, r0
 80075bc:	4293      	cmp	r3, r2
 80075be:	d100      	bne.n	80075c2 <memset+0xa>
 80075c0:	4770      	bx	lr
 80075c2:	f803 1b01 	strb.w	r1, [r3], #1
 80075c6:	e7f9      	b.n	80075bc <memset+0x4>

080075c8 <__libc_init_array>:
 80075c8:	b570      	push	{r4, r5, r6, lr}
 80075ca:	4d0d      	ldr	r5, [pc, #52]	; (8007600 <__libc_init_array+0x38>)
 80075cc:	4c0d      	ldr	r4, [pc, #52]	; (8007604 <__libc_init_array+0x3c>)
 80075ce:	1b64      	subs	r4, r4, r5
 80075d0:	10a4      	asrs	r4, r4, #2
 80075d2:	2600      	movs	r6, #0
 80075d4:	42a6      	cmp	r6, r4
 80075d6:	d109      	bne.n	80075ec <__libc_init_array+0x24>
 80075d8:	4d0b      	ldr	r5, [pc, #44]	; (8007608 <__libc_init_array+0x40>)
 80075da:	4c0c      	ldr	r4, [pc, #48]	; (800760c <__libc_init_array+0x44>)
 80075dc:	f000 f818 	bl	8007610 <_init>
 80075e0:	1b64      	subs	r4, r4, r5
 80075e2:	10a4      	asrs	r4, r4, #2
 80075e4:	2600      	movs	r6, #0
 80075e6:	42a6      	cmp	r6, r4
 80075e8:	d105      	bne.n	80075f6 <__libc_init_array+0x2e>
 80075ea:	bd70      	pop	{r4, r5, r6, pc}
 80075ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80075f0:	4798      	blx	r3
 80075f2:	3601      	adds	r6, #1
 80075f4:	e7ee      	b.n	80075d4 <__libc_init_array+0xc>
 80075f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075fa:	4798      	blx	r3
 80075fc:	3601      	adds	r6, #1
 80075fe:	e7f2      	b.n	80075e6 <__libc_init_array+0x1e>
 8007600:	08007670 	.word	0x08007670
 8007604:	08007670 	.word	0x08007670
 8007608:	08007670 	.word	0x08007670
 800760c:	08007674 	.word	0x08007674

08007610 <_init>:
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	bf00      	nop
 8007614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007616:	bc08      	pop	{r3}
 8007618:	469e      	mov	lr, r3
 800761a:	4770      	bx	lr

0800761c <_fini>:
 800761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761e:	bf00      	nop
 8007620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007622:	bc08      	pop	{r3}
 8007624:	469e      	mov	lr, r3
 8007626:	4770      	bx	lr
