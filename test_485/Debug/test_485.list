
test_485.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037cc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080039a4  080039a4  000139a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039e8  080039e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080039e8  080039e8  000139e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039f0  080039f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039f4  080039f4  000139f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08003a04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003a04  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d34a  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d5c  00000000  00000000  0002d3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f8  00000000  00000000  0002f128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ab  00000000  00000000  0002fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024074  00000000  00000000  000302cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c915  00000000  00000000  0005433f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5aa0  00000000  00000000  00060c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027f0  00000000  00000000  001466f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00148ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800398c 	.word	0x0800398c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800398c 	.word	0x0800398c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fad4 	bl	8000ac6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f819 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f8fd 	bl	8000720 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000526:	f000 f861 	bl	80005ec <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800052a:	f000 f8a9 	bl	8000680 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t send1[3] =  "hi";
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <main+0x38>)
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	6812      	ldr	r2, [r2, #0]
 8000534:	4611      	mov	r1, r2
 8000536:	8019      	strh	r1, [r3, #0]
 8000538:	3302      	adds	r3, #2
 800053a:	0c12      	lsrs	r2, r2, #16
 800053c:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, send1, 3, 10);
 800053e:	1d39      	adds	r1, r7, #4
 8000540:	230a      	movs	r3, #10
 8000542:	2203      	movs	r2, #3
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <main+0x3c>)
 8000546:	f001 ff3d 	bl	80023c4 <HAL_UART_Transmit>
  {
 800054a:	e7f0      	b.n	800052e <main+0x1a>
 800054c:	080039a4 	.word	0x080039a4
 8000550:	200000bc 	.word	0x200000bc

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0318 	add.w	r3, r7, #24
 800055e:	2238      	movs	r2, #56	; 0x38
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f003 f9e6 	bl	8003934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000576:	2000      	movs	r0, #0
 8000578:	f000 fea4 	bl	80012c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2340      	movs	r3, #64	; 0x40
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000592:	2304      	movs	r3, #4
 8000594:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000596:	2355      	movs	r3, #85	; 0x55
 8000598:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 ff3e 	bl	800142c <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005b6:	f000 f921 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2104      	movs	r1, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fa3c 	bl	8001a50 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005de:	f000 f90d 	bl	80007fc <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 80005f2:	4a22      	ldr	r2, [pc, #136]	; (800067c <MX_LPUART1_UART_Init+0x90>)
 80005f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 80005f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005fc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000612:	220c      	movs	r2, #12
 8000614:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800062e:	4812      	ldr	r0, [pc, #72]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000630:	f001 fe78 	bl	8002324 <HAL_UART_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800063a:	f000 f8df 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800063e:	2100      	movs	r1, #0
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000642:	f003 f8ad 	bl	80037a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800064c:	f000 f8d6 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000650:	2100      	movs	r1, #0
 8000652:	4809      	ldr	r0, [pc, #36]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000654:	f003 f8e2 	bl	800381c <HAL_UARTEx_SetRxFifoThreshold>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800065e:	f000 f8cd 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000664:	f003 f863 	bl	800372e <HAL_UARTEx_DisableFifoMode>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800066e:	f000 f8c5 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000028 	.word	0x20000028
 800067c:	40008000 	.word	0x40008000

08000680 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <MX_USART1_UART_Init+0x98>)
 8000686:	4a25      	ldr	r2, [pc, #148]	; (800071c <MX_USART1_UART_Init+0x9c>)
 8000688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800068a:	4b23      	ldr	r3, [pc, #140]	; (8000718 <MX_USART1_UART_Init+0x98>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <MX_USART1_UART_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <MX_USART1_UART_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069e:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_USART1_UART_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <MX_USART1_UART_Init+0x98>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_USART1_UART_Init+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_USART1_UART_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b6:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_USART1_UART_Init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_USART1_UART_Init+0x98>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_USART1_UART_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80006c8:	2300      	movs	r3, #0
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	4812      	ldr	r0, [pc, #72]	; (8000718 <MX_USART1_UART_Init+0x98>)
 80006d0:	f002 ffa6 	bl	8003620 <HAL_RS485Ex_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 80006da:	f000 f88f 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <MX_USART1_UART_Init+0x98>)
 80006e2:	f003 f85d 	bl	80037a0 <HAL_UARTEx_SetTxFifoThreshold>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 80006ec:	f000 f886 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f0:	2100      	movs	r1, #0
 80006f2:	4809      	ldr	r0, [pc, #36]	; (8000718 <MX_USART1_UART_Init+0x98>)
 80006f4:	f003 f892 	bl	800381c <HAL_UARTEx_SetRxFifoThreshold>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 80006fe:	f000 f87d 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART1_UART_Init+0x98>)
 8000704:	f003 f813 	bl	800372e <HAL_UARTEx_DisableFifoMode>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 800070e:	f000 f875 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000bc 	.word	0x200000bc
 800071c:	40013800 	.word	0x40013800

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a2e      	ldr	r2, [pc, #184]	; (80007f4 <MX_GPIO_Init+0xd4>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b2c      	ldr	r3, [pc, #176]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074e:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a28      	ldr	r2, [pc, #160]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000754:	f043 0320 	orr.w	r3, r3, #32
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <MX_GPIO_Init+0xd4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a22      	ldr	r2, [pc, #136]	; (80007f4 <MX_GPIO_Init+0xd4>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <MX_GPIO_Init+0xd4>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_GPIO_Init+0xd4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079e:	f000 fd55 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	480f      	ldr	r0, [pc, #60]	; (80007f8 <MX_GPIO_Init+0xd8>)
 80007ba:	f000 fbc5 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007be:	2320      	movs	r3, #32
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d8:	f000 fbb6 	bl	8000f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	2028      	movs	r0, #40	; 0x28
 80007e2:	f000 fabc 	bl	8000d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007e6:	2028      	movs	r0, #40	; 0x28
 80007e8:	f000 fad3 	bl	8000d92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	; 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000
 80007f8:	48000800 	.word	0x48000800

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <HAL_MspInit+0x44>)
 8000810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <HAL_MspInit+0x44>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6613      	str	r3, [r2, #96]	; 0x60
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <HAL_MspInit+0x44>)
 800081c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_MspInit+0x44>)
 8000828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082a:	4a08      	ldr	r2, [pc, #32]	; (800084c <HAL_MspInit+0x44>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6593      	str	r3, [r2, #88]	; 0x58
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_MspInit+0x44>)
 8000834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800083e:	f000 fde5 	bl	800140c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b0a2      	sub	sp, #136	; 0x88
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000868:	f107 0320 	add.w	r3, r7, #32
 800086c:	2254      	movs	r2, #84	; 0x54
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f003 f85f 	bl	8003934 <memset>
  if(huart->Instance==LPUART1)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a53      	ldr	r2, [pc, #332]	; (80009c8 <HAL_UART_MspInit+0x178>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d139      	bne.n	80008f4 <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000880:	2320      	movs	r3, #32
 8000882:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000884:	2300      	movs	r3, #0
 8000886:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000888:	f107 0320 	add.w	r3, r7, #32
 800088c:	4618      	mov	r0, r3
 800088e:	f001 fafb 	bl	8001e88 <HAL_RCCEx_PeriphCLKConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000898:	f7ff ffb0 	bl	80007fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800089c:	4b4b      	ldr	r3, [pc, #300]	; (80009cc <HAL_UART_MspInit+0x17c>)
 800089e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008a0:	4a4a      	ldr	r2, [pc, #296]	; (80009cc <HAL_UART_MspInit+0x17c>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008a8:	4b48      	ldr	r3, [pc, #288]	; (80009cc <HAL_UART_MspInit+0x17c>)
 80008aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
 80008b2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b4:	4b45      	ldr	r3, [pc, #276]	; (80009cc <HAL_UART_MspInit+0x17c>)
 80008b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b8:	4a44      	ldr	r2, [pc, #272]	; (80009cc <HAL_UART_MspInit+0x17c>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c0:	4b42      	ldr	r3, [pc, #264]	; (80009cc <HAL_UART_MspInit+0x17c>)
 80008c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80008cc:	230c      	movs	r3, #12
 80008ce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80008de:	230c      	movs	r3, #12
 80008e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008e8:	4619      	mov	r1, r3
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f000 fb2b 	bl	8000f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008f2:	e064      	b.n	80009be <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a35      	ldr	r2, [pc, #212]	; (80009d0 <HAL_UART_MspInit+0x180>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d15f      	bne.n	80009be <HAL_UART_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fabc 	bl	8001e88 <HAL_RCCEx_PeriphCLKConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <HAL_UART_MspInit+0xca>
      Error_Handler();
 8000916:	f7ff ff71 	bl	80007fc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800091a:	4b2c      	ldr	r3, [pc, #176]	; (80009cc <HAL_UART_MspInit+0x17c>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	4a2b      	ldr	r2, [pc, #172]	; (80009cc <HAL_UART_MspInit+0x17c>)
 8000920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000924:	6613      	str	r3, [r2, #96]	; 0x60
 8000926:	4b29      	ldr	r3, [pc, #164]	; (80009cc <HAL_UART_MspInit+0x17c>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <HAL_UART_MspInit+0x17c>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a25      	ldr	r2, [pc, #148]	; (80009cc <HAL_UART_MspInit+0x17c>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b23      	ldr	r3, [pc, #140]	; (80009cc <HAL_UART_MspInit+0x17c>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b20      	ldr	r3, [pc, #128]	; (80009cc <HAL_UART_MspInit+0x17c>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a1f      	ldr	r2, [pc, #124]	; (80009cc <HAL_UART_MspInit+0x17c>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <HAL_UART_MspInit+0x17c>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000962:	2330      	movs	r3, #48	; 0x30
 8000964:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000974:	2307      	movs	r3, #7
 8000976:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800097e:	4619      	mov	r1, r3
 8000980:	4814      	ldr	r0, [pc, #80]	; (80009d4 <HAL_UART_MspInit+0x184>)
 8000982:	f000 fae1 	bl	8000f48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800099a:	2307      	movs	r3, #7
 800099c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009a4:	4619      	mov	r1, r3
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009aa:	f000 facd 	bl	8000f48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	2025      	movs	r0, #37	; 0x25
 80009b4:	f000 f9d3 	bl	8000d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009b8:	2025      	movs	r0, #37	; 0x25
 80009ba:	f000 f9ea 	bl	8000d92 <HAL_NVIC_EnableIRQ>
}
 80009be:	bf00      	nop
 80009c0:	3788      	adds	r7, #136	; 0x88
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40008000 	.word	0x40008000
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40013800 	.word	0x40013800
 80009d4:	48000800 	.word	0x48000800

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f8a2 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <USART1_IRQHandler+0x10>)
 8000a32:	f001 fd55 	bl	80024e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000bc 	.word	0x200000bc

08000a40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a48:	f000 fc18 	bl	800127c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <SystemInit+0x20>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <SystemInit+0x20>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a78:	f7ff ffea 	bl	8000a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	; (8000ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <LoopForever+0xe>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	; (8000ac0 <LoopForever+0x16>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f002 ff4f 	bl	8003944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aa6:	f7ff fd35 	bl	8000514 <main>

08000aaa <LoopForever>:

LoopForever:
    b LoopForever
 8000aaa:	e7fe      	b.n	8000aaa <LoopForever>
  ldr   r0, =_estack
 8000aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ab8:	080039f8 	.word	0x080039f8
  ldr r2, =_sbss
 8000abc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ac0:	20000154 	.word	0x20000154

08000ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC1_2_IRQHandler>

08000ac6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000acc:	2300      	movs	r3, #0
 8000ace:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f939 	bl	8000d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 f80e 	bl	8000af8 <HAL_InitTick>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d002      	beq.n	8000ae8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	71fb      	strb	r3, [r7, #7]
 8000ae6:	e001      	b.n	8000aec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ae8:	f7ff fe8e 	bl	8000808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aec:	79fb      	ldrb	r3, [r7, #7]

}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <HAL_InitTick+0x68>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d022      	beq.n	8000b52 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_InitTick+0x6c>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <HAL_InitTick+0x68>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b18:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 f944 	bl	8000dae <HAL_SYSTICK_Config>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d10f      	bne.n	8000b4c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b0f      	cmp	r3, #15
 8000b30:	d809      	bhi.n	8000b46 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b32:	2200      	movs	r2, #0
 8000b34:	6879      	ldr	r1, [r7, #4]
 8000b36:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3a:	f000 f910 	bl	8000d5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <HAL_InitTick+0x70>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	e007      	b.n	8000b56 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	73fb      	strb	r3, [r7, #15]
 8000b4a:	e004      	b.n	8000b56 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	e001      	b.n	8000b56 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_IncTick+0x1c>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_IncTick+0x20>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a03      	ldr	r2, [pc, #12]	; (8000b88 <HAL_IncTick+0x1c>)
 8000b7c:	6013      	str	r3, [r2, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	20000150 	.word	0x20000150
 8000b8c:	20000008 	.word	0x20000008

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <HAL_GetTick+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000150 	.word	0x20000150

08000ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db0b      	blt.n	8000c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 021f 	and.w	r2, r3, #31
 8000c24:	4907      	ldr	r1, [pc, #28]	; (8000c44 <__NVIC_EnableIRQ+0x38>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db0a      	blt.n	8000c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	490c      	ldr	r1, [pc, #48]	; (8000c94 <__NVIC_SetPriority+0x4c>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c70:	e00a      	b.n	8000c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4908      	ldr	r1, [pc, #32]	; (8000c98 <__NVIC_SetPriority+0x50>)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	3b04      	subs	r3, #4
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	440b      	add	r3, r1
 8000c86:	761a      	strb	r2, [r3, #24]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f1c3 0307 	rsb	r3, r3, #7
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	bf28      	it	cs
 8000cba:	2304      	movcs	r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d902      	bls.n	8000ccc <NVIC_EncodePriority+0x30>
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3b03      	subs	r3, #3
 8000cca:	e000      	b.n	8000cce <NVIC_EncodePriority+0x32>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	401a      	ands	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43d9      	mvns	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	4313      	orrs	r3, r2
         );
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3724      	adds	r7, #36	; 0x24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d14:	d301      	bcc.n	8000d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d16:	2301      	movs	r3, #1
 8000d18:	e00f      	b.n	8000d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <SysTick_Config+0x40>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d22:	210f      	movs	r1, #15
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f7ff ff8e 	bl	8000c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <SysTick_Config+0x40>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d32:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <SysTick_Config+0x40>)
 8000d34:	2207      	movs	r2, #7
 8000d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	e000e010 	.word	0xe000e010

08000d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff29 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6c:	f7ff ff40 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000d70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f7ff ff90 	bl	8000c9c <NVIC_EncodePriority>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff5f 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff33 	bl	8000c0c <__NVIC_EnableIRQ>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffa4 	bl	8000d04 <SysTick_Config>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b085      	sub	sp, #20
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d005      	beq.n	8000dea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2204      	movs	r2, #4
 8000de2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	e037      	b.n	8000e5a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 020e 	bic.w	r2, r2, #14
 8000df8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e08:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 0201 	bic.w	r2, r2, #1
 8000e18:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f003 021f 	and.w	r2, r3, #31
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	2101      	movs	r1, #1
 8000e28:	fa01 f202 	lsl.w	r2, r1, r2
 8000e2c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e36:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00c      	beq.n	8000e5a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e4e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e58:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d00d      	beq.n	8000eac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2204      	movs	r2, #4
 8000e94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]
 8000eaa:	e047      	b.n	8000f3c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 020e 	bic.w	r2, r2, #14
 8000eba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0201 	bic.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ed6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000eda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fa01 f202 	lsl.w	r2, r1, r2
 8000eee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000ef8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00c      	beq.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f10:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f1a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	4798      	blx	r3
    }
  }
  return status;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f56:	e15a      	b.n	800120e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 814c 	beq.w	8001208 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d005      	beq.n	8000f88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d130      	bne.n	8000fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	091b      	lsrs	r3, r3, #4
 8000fd4:	f003 0201 	and.w	r2, r3, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d017      	beq.n	8001026 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d123      	bne.n	800107a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	08da      	lsrs	r2, r3, #3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3208      	adds	r2, #8
 800103a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	220f      	movs	r2, #15
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	691a      	ldr	r2, [r3, #16]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	08da      	lsrs	r2, r3, #3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3208      	adds	r2, #8
 8001074:	6939      	ldr	r1, [r7, #16]
 8001076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0203 	and.w	r2, r3, #3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 80a6 	beq.w	8001208 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010bc:	4b5b      	ldr	r3, [pc, #364]	; (800122c <HAL_GPIO_Init+0x2e4>)
 80010be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c0:	4a5a      	ldr	r2, [pc, #360]	; (800122c <HAL_GPIO_Init+0x2e4>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6613      	str	r3, [r2, #96]	; 0x60
 80010c8:	4b58      	ldr	r3, [pc, #352]	; (800122c <HAL_GPIO_Init+0x2e4>)
 80010ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d4:	4a56      	ldr	r2, [pc, #344]	; (8001230 <HAL_GPIO_Init+0x2e8>)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010fe:	d01f      	beq.n	8001140 <HAL_GPIO_Init+0x1f8>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a4c      	ldr	r2, [pc, #304]	; (8001234 <HAL_GPIO_Init+0x2ec>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d019      	beq.n	800113c <HAL_GPIO_Init+0x1f4>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a4b      	ldr	r2, [pc, #300]	; (8001238 <HAL_GPIO_Init+0x2f0>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d013      	beq.n	8001138 <HAL_GPIO_Init+0x1f0>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a4a      	ldr	r2, [pc, #296]	; (800123c <HAL_GPIO_Init+0x2f4>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d00d      	beq.n	8001134 <HAL_GPIO_Init+0x1ec>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a49      	ldr	r2, [pc, #292]	; (8001240 <HAL_GPIO_Init+0x2f8>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d007      	beq.n	8001130 <HAL_GPIO_Init+0x1e8>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a48      	ldr	r2, [pc, #288]	; (8001244 <HAL_GPIO_Init+0x2fc>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d101      	bne.n	800112c <HAL_GPIO_Init+0x1e4>
 8001128:	2305      	movs	r3, #5
 800112a:	e00a      	b.n	8001142 <HAL_GPIO_Init+0x1fa>
 800112c:	2306      	movs	r3, #6
 800112e:	e008      	b.n	8001142 <HAL_GPIO_Init+0x1fa>
 8001130:	2304      	movs	r3, #4
 8001132:	e006      	b.n	8001142 <HAL_GPIO_Init+0x1fa>
 8001134:	2303      	movs	r3, #3
 8001136:	e004      	b.n	8001142 <HAL_GPIO_Init+0x1fa>
 8001138:	2302      	movs	r3, #2
 800113a:	e002      	b.n	8001142 <HAL_GPIO_Init+0x1fa>
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <HAL_GPIO_Init+0x1fa>
 8001140:	2300      	movs	r3, #0
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	f002 0203 	and.w	r2, r2, #3
 8001148:	0092      	lsls	r2, r2, #2
 800114a:	4093      	lsls	r3, r2
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001152:	4937      	ldr	r1, [pc, #220]	; (8001230 <HAL_GPIO_Init+0x2e8>)
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001160:	4b39      	ldr	r3, [pc, #228]	; (8001248 <HAL_GPIO_Init+0x300>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001184:	4a30      	ldr	r2, [pc, #192]	; (8001248 <HAL_GPIO_Init+0x300>)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800118a:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <HAL_GPIO_Init+0x300>)
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011ae:	4a26      	ldr	r2, [pc, #152]	; (8001248 <HAL_GPIO_Init+0x300>)
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011b4:	4b24      	ldr	r3, [pc, #144]	; (8001248 <HAL_GPIO_Init+0x300>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <HAL_GPIO_Init+0x300>)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <HAL_GPIO_Init+0x300>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001202:	4a11      	ldr	r2, [pc, #68]	; (8001248 <HAL_GPIO_Init+0x300>)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3301      	adds	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	fa22 f303 	lsr.w	r3, r2, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	f47f ae9d 	bne.w	8000f58 <HAL_GPIO_Init+0x10>
  }
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	40021000 	.word	0x40021000
 8001230:	40010000 	.word	0x40010000
 8001234:	48000400 	.word	0x48000400
 8001238:	48000800 	.word	0x48000800
 800123c:	48000c00 	.word	0x48000c00
 8001240:	48001000 	.word	0x48001000
 8001244:	48001400 	.word	0x48001400
 8001248:	40010400 	.word	0x40010400

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
 8001258:	4613      	mov	r3, r2
 800125a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001268:	e002      	b.n	8001270 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001288:	695a      	ldr	r2, [r3, #20]
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	4013      	ands	r3, r2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f806 	bl	80012ac <HAL_GPIO_EXTI_Callback>
  }
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40010400 	.word	0x40010400

080012ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d141      	bne.n	8001356 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012d2:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012de:	d131      	bne.n	8001344 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012e0:	4b47      	ldr	r3, [pc, #284]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012e6:	4a46      	ldr	r2, [pc, #280]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f0:	4b43      	ldr	r3, [pc, #268]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012f8:	4a41      	ldr	r2, [pc, #260]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001300:	4b40      	ldr	r3, [pc, #256]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2232      	movs	r2, #50	; 0x32
 8001306:	fb02 f303 	mul.w	r3, r2, r3
 800130a:	4a3f      	ldr	r2, [pc, #252]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	0c9b      	lsrs	r3, r3, #18
 8001312:	3301      	adds	r3, #1
 8001314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001316:	e002      	b.n	800131e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3b01      	subs	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800131e:	4b38      	ldr	r3, [pc, #224]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800132a:	d102      	bne.n	8001332 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f2      	bne.n	8001318 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001332:	4b33      	ldr	r3, [pc, #204]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800133e:	d158      	bne.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e057      	b.n	80013f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001344:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800134a:	4a2d      	ldr	r2, [pc, #180]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001354:	e04d      	b.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800135c:	d141      	bne.n	80013e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800136a:	d131      	bne.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800136c:	4b24      	ldr	r3, [pc, #144]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001372:	4a23      	ldr	r2, [pc, #140]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001384:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800138a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2232      	movs	r2, #50	; 0x32
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001398:	fba2 2303 	umull	r2, r3, r2, r3
 800139c:	0c9b      	lsrs	r3, r3, #18
 800139e:	3301      	adds	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013a2:	e002      	b.n	80013aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b6:	d102      	bne.n	80013be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f2      	bne.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ca:	d112      	bne.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e011      	b.n	80013f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013e0:	e007      	b.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40007000 	.word	0x40007000
 8001404:	20000000 	.word	0x20000000
 8001408:	431bde83 	.word	0x431bde83

0800140c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141a:	6093      	str	r3, [r2, #8]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40007000 	.word	0x40007000

0800142c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e2fe      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d075      	beq.n	8001536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800144a:	4b97      	ldr	r3, [pc, #604]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001454:	4b94      	ldr	r3, [pc, #592]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	2b0c      	cmp	r3, #12
 8001462:	d102      	bne.n	800146a <HAL_RCC_OscConfig+0x3e>
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d002      	beq.n	8001470 <HAL_RCC_OscConfig+0x44>
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	2b08      	cmp	r3, #8
 800146e:	d10b      	bne.n	8001488 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	4b8d      	ldr	r3, [pc, #564]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d05b      	beq.n	8001534 <HAL_RCC_OscConfig+0x108>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d157      	bne.n	8001534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e2d9      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001490:	d106      	bne.n	80014a0 <HAL_RCC_OscConfig+0x74>
 8001492:	4b85      	ldr	r3, [pc, #532]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a84      	ldr	r2, [pc, #528]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e01d      	b.n	80014dc <HAL_RCC_OscConfig+0xb0>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x98>
 80014aa:	4b7f      	ldr	r3, [pc, #508]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a7e      	ldr	r2, [pc, #504]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 80014b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	4b7c      	ldr	r3, [pc, #496]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a7b      	ldr	r2, [pc, #492]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 80014bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e00b      	b.n	80014dc <HAL_RCC_OscConfig+0xb0>
 80014c4:	4b78      	ldr	r3, [pc, #480]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a77      	ldr	r2, [pc, #476]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 80014ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b75      	ldr	r3, [pc, #468]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a74      	ldr	r2, [pc, #464]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 80014d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d013      	beq.n	800150c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fb54 	bl	8000b90 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fb50 	bl	8000b90 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e29e      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fe:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0xc0>
 800150a:	e014      	b.n	8001536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff fb40 	bl	8000b90 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fb3c 	bl	8000b90 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	; 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e28a      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001526:	4b60      	ldr	r3, [pc, #384]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0xe8>
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d075      	beq.n	800162e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001542:	4b59      	ldr	r3, [pc, #356]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800154c:	4b56      	ldr	r3, [pc, #344]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	2b0c      	cmp	r3, #12
 800155a:	d102      	bne.n	8001562 <HAL_RCC_OscConfig+0x136>
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d002      	beq.n	8001568 <HAL_RCC_OscConfig+0x13c>
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b04      	cmp	r3, #4
 8001566:	d11f      	bne.n	80015a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001568:	4b4f      	ldr	r3, [pc, #316]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_RCC_OscConfig+0x154>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e25d      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001580:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	061b      	lsls	r3, r3, #24
 800158e:	4946      	ldr	r1, [pc, #280]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001594:	4b45      	ldr	r3, [pc, #276]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff faad 	bl	8000af8 <HAL_InitTick>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d043      	beq.n	800162c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e249      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d023      	beq.n	80015f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b0:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a3c      	ldr	r2, [pc, #240]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 80015b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fae8 	bl	8000b90 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff fae4 	bl	8000b90 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e232      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e2:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	061b      	lsls	r3, r3, #24
 80015f0:	492d      	ldr	r1, [pc, #180]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	604b      	str	r3, [r1, #4]
 80015f6:	e01a      	b.n	800162e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a2a      	ldr	r2, [pc, #168]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 80015fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001604:	f7ff fac4 	bl	8000b90 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160c:	f7ff fac0 	bl	8000b90 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e20e      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x1e0>
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800162c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d041      	beq.n	80016be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d01c      	beq.n	800167c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 8001644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001648:	4a17      	ldr	r2, [pc, #92]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001652:	f7ff fa9d 	bl	8000b90 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800165a:	f7ff fa99 	bl	8000b90 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e1e7      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 800166e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0ef      	beq.n	800165a <HAL_RCC_OscConfig+0x22e>
 800167a:	e020      	b.n	80016be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 800167e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001682:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff fa80 	bl	8000b90 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001692:	e00d      	b.n	80016b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff fa7c 	bl	8000b90 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d906      	bls.n	80016b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e1ca      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b0:	4b8c      	ldr	r3, [pc, #560]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 80016b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1ea      	bne.n	8001694 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 80a6 	beq.w	8001818 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016d0:	4b84      	ldr	r3, [pc, #528]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_OscConfig+0x2b4>
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x2b6>
 80016e0:	2300      	movs	r3, #0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00d      	beq.n	8001702 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b7f      	ldr	r3, [pc, #508]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ea:	4a7e      	ldr	r2, [pc, #504]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	6593      	str	r3, [r2, #88]	; 0x58
 80016f2:	4b7c      	ldr	r3, [pc, #496]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016fe:	2301      	movs	r3, #1
 8001700:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001702:	4b79      	ldr	r3, [pc, #484]	; (80018e8 <HAL_RCC_OscConfig+0x4bc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d118      	bne.n	8001740 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800170e:	4b76      	ldr	r3, [pc, #472]	; (80018e8 <HAL_RCC_OscConfig+0x4bc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a75      	ldr	r2, [pc, #468]	; (80018e8 <HAL_RCC_OscConfig+0x4bc>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171a:	f7ff fa39 	bl	8000b90 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001722:	f7ff fa35 	bl	8000b90 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e183      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001734:	4b6c      	ldr	r3, [pc, #432]	; (80018e8 <HAL_RCC_OscConfig+0x4bc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d108      	bne.n	800175a <HAL_RCC_OscConfig+0x32e>
 8001748:	4b66      	ldr	r3, [pc, #408]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174e:	4a65      	ldr	r2, [pc, #404]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001758:	e024      	b.n	80017a4 <HAL_RCC_OscConfig+0x378>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d110      	bne.n	8001784 <HAL_RCC_OscConfig+0x358>
 8001762:	4b60      	ldr	r3, [pc, #384]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 8001764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001768:	4a5e      	ldr	r2, [pc, #376]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001772:	4b5c      	ldr	r3, [pc, #368]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 8001774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001778:	4a5a      	ldr	r2, [pc, #360]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001782:	e00f      	b.n	80017a4 <HAL_RCC_OscConfig+0x378>
 8001784:	4b57      	ldr	r3, [pc, #348]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 8001786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178a:	4a56      	ldr	r2, [pc, #344]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179a:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d016      	beq.n	80017da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ac:	f7ff f9f0 	bl	8000b90 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b4:	f7ff f9ec 	bl	8000b90 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e138      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ca:	4b46      	ldr	r3, [pc, #280]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 80017cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0ed      	beq.n	80017b4 <HAL_RCC_OscConfig+0x388>
 80017d8:	e015      	b.n	8001806 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017da:	f7ff f9d9 	bl	8000b90 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e0:	e00a      	b.n	80017f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7ff f9d5 	bl	8000b90 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e121      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f8:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 80017fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1ed      	bne.n	80017e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001806:	7ffb      	ldrb	r3, [r7, #31]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d105      	bne.n	8001818 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180c:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001810:	4a34      	ldr	r2, [pc, #208]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 8001812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001816:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0320 	and.w	r3, r3, #32
 8001820:	2b00      	cmp	r3, #0
 8001822:	d03c      	beq.n	800189e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d01c      	beq.n	8001866 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800182c:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 800182e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001832:	4a2c      	ldr	r2, [pc, #176]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183c:	f7ff f9a8 	bl	8000b90 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001844:	f7ff f9a4 	bl	8000b90 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e0f2      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001856:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 8001858:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0ef      	beq.n	8001844 <HAL_RCC_OscConfig+0x418>
 8001864:	e01b      	b.n	800189e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001866:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 8001868:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800186c:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 800186e:	f023 0301 	bic.w	r3, r3, #1
 8001872:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001876:	f7ff f98b 	bl	8000b90 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800187e:	f7ff f987 	bl	8000b90 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e0d5      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 8001892:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1ef      	bne.n	800187e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80c9 	beq.w	8001a3a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b0c      	cmp	r3, #12
 80018b2:	f000 8083 	beq.w	80019bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d15e      	bne.n	800197c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <HAL_RCC_OscConfig+0x4b8>)
 80018c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ca:	f7ff f961 	bl	8000b90 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d0:	e00c      	b.n	80018ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff f95d 	bl	8000b90 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d905      	bls.n	80018ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0ab      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ec:	4b55      	ldr	r3, [pc, #340]	; (8001a44 <HAL_RCC_OscConfig+0x618>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1ec      	bne.n	80018d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f8:	4b52      	ldr	r3, [pc, #328]	; (8001a44 <HAL_RCC_OscConfig+0x618>)
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	4b52      	ldr	r3, [pc, #328]	; (8001a48 <HAL_RCC_OscConfig+0x61c>)
 80018fe:	4013      	ands	r3, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6a11      	ldr	r1, [r2, #32]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001908:	3a01      	subs	r2, #1
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	4311      	orrs	r1, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001912:	0212      	lsls	r2, r2, #8
 8001914:	4311      	orrs	r1, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800191a:	0852      	lsrs	r2, r2, #1
 800191c:	3a01      	subs	r2, #1
 800191e:	0552      	lsls	r2, r2, #21
 8001920:	4311      	orrs	r1, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001926:	0852      	lsrs	r2, r2, #1
 8001928:	3a01      	subs	r2, #1
 800192a:	0652      	lsls	r2, r2, #25
 800192c:	4311      	orrs	r1, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001932:	06d2      	lsls	r2, r2, #27
 8001934:	430a      	orrs	r2, r1
 8001936:	4943      	ldr	r1, [pc, #268]	; (8001a44 <HAL_RCC_OscConfig+0x618>)
 8001938:	4313      	orrs	r3, r2
 800193a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800193c:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <HAL_RCC_OscConfig+0x618>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a40      	ldr	r2, [pc, #256]	; (8001a44 <HAL_RCC_OscConfig+0x618>)
 8001942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001946:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001948:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <HAL_RCC_OscConfig+0x618>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4a3d      	ldr	r2, [pc, #244]	; (8001a44 <HAL_RCC_OscConfig+0x618>)
 800194e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001952:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff f91c 	bl	8000b90 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff f918 	bl	8000b90 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e066      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196e:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <HAL_RCC_OscConfig+0x618>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x530>
 800197a:	e05e      	b.n	8001a3a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197c:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <HAL_RCC_OscConfig+0x618>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a30      	ldr	r2, [pc, #192]	; (8001a44 <HAL_RCC_OscConfig+0x618>)
 8001982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff f902 	bl	8000b90 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff f8fe 	bl	8000b90 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e04c      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a2:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <HAL_RCC_OscConfig+0x618>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80019ae:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <HAL_RCC_OscConfig+0x618>)
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	4924      	ldr	r1, [pc, #144]	; (8001a44 <HAL_RCC_OscConfig+0x618>)
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <HAL_RCC_OscConfig+0x620>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	60cb      	str	r3, [r1, #12]
 80019ba:	e03e      	b.n	8001a3a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e039      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <HAL_RCC_OscConfig+0x618>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 0203 	and.w	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d12c      	bne.n	8001a36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	3b01      	subs	r3, #1
 80019e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d123      	bne.n	8001a36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d11b      	bne.n	8001a36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d113      	bne.n	8001a36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	085b      	lsrs	r3, r3, #1
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d109      	bne.n	8001a36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2c:	085b      	lsrs	r3, r3, #1
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d001      	beq.n	8001a3a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40021000 	.word	0x40021000
 8001a48:	019f800c 	.word	0x019f800c
 8001a4c:	feeefffc 	.word	0xfeeefffc

08001a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e11e      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a68:	4b91      	ldr	r3, [pc, #580]	; (8001cb0 <HAL_RCC_ClockConfig+0x260>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 030f 	and.w	r3, r3, #15
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d910      	bls.n	8001a98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a76:	4b8e      	ldr	r3, [pc, #568]	; (8001cb0 <HAL_RCC_ClockConfig+0x260>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 020f 	bic.w	r2, r3, #15
 8001a7e:	498c      	ldr	r1, [pc, #560]	; (8001cb0 <HAL_RCC_ClockConfig+0x260>)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	4b8a      	ldr	r3, [pc, #552]	; (8001cb0 <HAL_RCC_ClockConfig+0x260>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e106      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d073      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d129      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aac:	4b81      	ldr	r3, [pc, #516]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0f4      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001abc:	f000 f99e 	bl	8001dfc <RCC_GetSysClockFreqFromPLLSource>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4a7c      	ldr	r2, [pc, #496]	; (8001cb8 <HAL_RCC_ClockConfig+0x268>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d93f      	bls.n	8001b4a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001aca:	4b7a      	ldr	r3, [pc, #488]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d009      	beq.n	8001aea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d033      	beq.n	8001b4a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d12f      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001aea:	4b72      	ldr	r3, [pc, #456]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001af2:	4a70      	ldr	r2, [pc, #448]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e024      	b.n	8001b4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b08:	4b6a      	ldr	r3, [pc, #424]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d109      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0c6      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b18:	4b66      	ldr	r3, [pc, #408]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0be      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b28:	f000 f8ce 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001b2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4a61      	ldr	r2, [pc, #388]	; (8001cb8 <HAL_RCC_ClockConfig+0x268>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d909      	bls.n	8001b4a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b36:	4b5f      	ldr	r3, [pc, #380]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b3e:	4a5d      	ldr	r2, [pc, #372]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b44:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b4a:	4b5a      	ldr	r3, [pc, #360]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f023 0203 	bic.w	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4957      	ldr	r1, [pc, #348]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b5c:	f7ff f818 	bl	8000b90 <HAL_GetTick>
 8001b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b64:	f7ff f814 	bl	8000b90 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e095      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	4b4e      	ldr	r3, [pc, #312]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 020c 	and.w	r2, r3, #12
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d1eb      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d023      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba4:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4a42      	ldr	r2, [pc, #264]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001baa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001bbc:	4b3d      	ldr	r3, [pc, #244]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001bc4:	4a3b      	ldr	r2, [pc, #236]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001bc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bcc:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4936      	ldr	r1, [pc, #216]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2b80      	cmp	r3, #128	; 0x80
 8001be4:	d105      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001be6:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	4a32      	ldr	r2, [pc, #200]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001bec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bf0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <HAL_RCC_ClockConfig+0x260>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d21d      	bcs.n	8001c3c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c00:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_RCC_ClockConfig+0x260>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f023 020f 	bic.w	r2, r3, #15
 8001c08:	4929      	ldr	r1, [pc, #164]	; (8001cb0 <HAL_RCC_ClockConfig+0x260>)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c10:	f7fe ffbe 	bl	8000b90 <HAL_GetTick>
 8001c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c18:	f7fe ffba 	bl	8000b90 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e03b      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_RCC_ClockConfig+0x260>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d1ed      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d008      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4917      	ldr	r1, [pc, #92]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	490f      	ldr	r1, [pc, #60]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c7a:	f000 f825 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <HAL_RCC_ClockConfig+0x264>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	490c      	ldr	r1, [pc, #48]	; (8001cbc <HAL_RCC_ClockConfig+0x26c>)
 8001c8c:	5ccb      	ldrb	r3, [r1, r3]
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	fa22 f303 	lsr.w	r3, r2, r3
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_RCC_ClockConfig+0x270>)
 8001c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_RCC_ClockConfig+0x274>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe ff2a 	bl	8000af8 <HAL_InitTick>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	04c4b400 	.word	0x04c4b400
 8001cbc:	080039a8 	.word	0x080039a8
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d102      	bne.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cda:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	e047      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ce0:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d102      	bne.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cec:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	e03e      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001cf2:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d136      	bne.n	8001d6c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d08:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3301      	adds	r3, #1
 8001d14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d10c      	bne.n	8001d36 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d1c:	4a1a      	ldr	r2, [pc, #104]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	4a16      	ldr	r2, [pc, #88]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d26:	68d2      	ldr	r2, [r2, #12]
 8001d28:	0a12      	lsrs	r2, r2, #8
 8001d2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d2e:	fb02 f303 	mul.w	r3, r2, r3
 8001d32:	617b      	str	r3, [r7, #20]
      break;
 8001d34:	e00c      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d36:	4a13      	ldr	r2, [pc, #76]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d40:	68d2      	ldr	r2, [r2, #12]
 8001d42:	0a12      	lsrs	r2, r2, #8
 8001d44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d48:	fb02 f303 	mul.w	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
      break;
 8001d4e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0e5b      	lsrs	r3, r3, #25
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	e001      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d70:	693b      	ldr	r3, [r7, #16]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	371c      	adds	r7, #28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000
 8001d84:	00f42400 	.word	0x00f42400
 8001d88:	016e3600 	.word	0x016e3600

08001d8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000000 	.word	0x20000000

08001da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001da8:	f7ff fff0 	bl	8001d8c <HAL_RCC_GetHCLKFreq>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	4904      	ldr	r1, [pc, #16]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dba:	5ccb      	ldrb	r3, [r1, r3]
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	080039b8 	.word	0x080039b8

08001dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dd4:	f7ff ffda 	bl	8001d8c <HAL_RCC_GetHCLKFreq>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	0adb      	lsrs	r3, r3, #11
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	4904      	ldr	r1, [pc, #16]	; (8001df8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	080039b8 	.word	0x080039b8

08001dfc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e02:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3301      	adds	r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d10c      	bne.n	8001e3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e20:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e28:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e2a:	68d2      	ldr	r2, [r2, #12]
 8001e2c:	0a12      	lsrs	r2, r2, #8
 8001e2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e32:	fb02 f303 	mul.w	r3, r2, r3
 8001e36:	617b      	str	r3, [r7, #20]
    break;
 8001e38:	e00c      	b.n	8001e54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e42:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e44:	68d2      	ldr	r2, [r2, #12]
 8001e46:	0a12      	lsrs	r2, r2, #8
 8001e48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e4c:	fb02 f303 	mul.w	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
    break;
 8001e52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0e5b      	lsrs	r3, r3, #25
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	3301      	adds	r3, #1
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e6e:	687b      	ldr	r3, [r7, #4]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	371c      	adds	r7, #28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	016e3600 	.word	0x016e3600
 8001e84:	00f42400 	.word	0x00f42400

08001e88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e90:	2300      	movs	r3, #0
 8001e92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e94:	2300      	movs	r3, #0
 8001e96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 8098 	beq.w	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eaa:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10d      	bne.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	4b40      	ldr	r3, [pc, #256]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	4a3f      	ldr	r2, [pc, #252]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec2:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ed2:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a39      	ldr	r2, [pc, #228]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ede:	f7fe fe57 	bl	8000b90 <HAL_GetTick>
 8001ee2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ee4:	e009      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7fe fe53 	bl	8000b90 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d902      	bls.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	74fb      	strb	r3, [r7, #19]
        break;
 8001ef8:	e005      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0ef      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001f06:	7cfb      	ldrb	r3, [r7, #19]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d159      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d01e      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d019      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f28:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f34:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3a:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f44:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4a:	4a1b      	ldr	r2, [pc, #108]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f54:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d016      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7fe fe13 	bl	8000b90 <HAL_GetTick>
 8001f6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f6c:	e00b      	b.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6e:	f7fe fe0f 	bl	8000b90 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d902      	bls.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	74fb      	strb	r3, [r7, #19]
            break;
 8001f84:	e006      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0ec      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10b      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f9a:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa8:	4903      	ldr	r1, [pc, #12]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fb2:	7cfb      	ldrb	r3, [r7, #19]
 8001fb4:	74bb      	strb	r3, [r7, #18]
 8001fb6:	e005      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc4:	7c7b      	ldrb	r3, [r7, #17]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d105      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fca:	4ba7      	ldr	r3, [pc, #668]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	4aa6      	ldr	r2, [pc, #664]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fe2:	4ba1      	ldr	r3, [pc, #644]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe8:	f023 0203 	bic.w	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	499d      	ldr	r1, [pc, #628]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002004:	4b98      	ldr	r3, [pc, #608]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200a:	f023 020c 	bic.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	4995      	ldr	r1, [pc, #596]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002026:	4b90      	ldr	r3, [pc, #576]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	498c      	ldr	r1, [pc, #560]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00a      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002048:	4b87      	ldr	r3, [pc, #540]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	4984      	ldr	r1, [pc, #528]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800206a:	4b7f      	ldr	r3, [pc, #508]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800206c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	497b      	ldr	r1, [pc, #492]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800208c:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002092:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	4973      	ldr	r1, [pc, #460]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ae:	4b6e      	ldr	r3, [pc, #440]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	496a      	ldr	r1, [pc, #424]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020d0:	4b65      	ldr	r3, [pc, #404]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4962      	ldr	r1, [pc, #392]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020f2:	4b5d      	ldr	r3, [pc, #372]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	4959      	ldr	r1, [pc, #356]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002114:	4b54      	ldr	r3, [pc, #336]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002116:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800211a:	f023 0203 	bic.w	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	4951      	ldr	r1, [pc, #324]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002136:	4b4c      	ldr	r3, [pc, #304]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	4948      	ldr	r1, [pc, #288]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002154:	2b00      	cmp	r3, #0
 8002156:	d015      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002158:	4b43      	ldr	r3, [pc, #268]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4940      	ldr	r1, [pc, #256]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002176:	d105      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002178:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a3a      	ldr	r2, [pc, #232]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002182:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800218c:	2b00      	cmp	r3, #0
 800218e:	d015      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002190:	4b35      	ldr	r3, [pc, #212]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002196:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219e:	4932      	ldr	r1, [pc, #200]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ae:	d105      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021b0:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a2c      	ldr	r2, [pc, #176]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d015      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d6:	4924      	ldr	r1, [pc, #144]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e6:	d105      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021e8:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4a1e      	ldr	r2, [pc, #120]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d015      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002200:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220e:	4916      	ldr	r1, [pc, #88]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800221e:	d105      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a10      	ldr	r2, [pc, #64]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800222a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d019      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	4908      	ldr	r1, [pc, #32]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002256:	d109      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a02      	ldr	r2, [pc, #8]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800225e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002262:	60d3      	str	r3, [r2, #12]
 8002264:	e002      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d015      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002278:	4b29      	ldr	r3, [pc, #164]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	4926      	ldr	r1, [pc, #152]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002296:	d105      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002298:	4b21      	ldr	r3, [pc, #132]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4a20      	ldr	r2, [pc, #128]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800229e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d015      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80022b0:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022be:	4918      	ldr	r1, [pc, #96]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ce:	d105      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a12      	ldr	r2, [pc, #72]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d015      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	490a      	ldr	r1, [pc, #40]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002306:	d105      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800230e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002312:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002314:	7cbb      	ldrb	r3, [r7, #18]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000

08002324 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e042      	b.n	80023bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233c:	2b00      	cmp	r3, #0
 800233e:	d106      	bne.n	800234e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7fe fa81 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2224      	movs	r2, #36	; 0x24
 8002352:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0201 	bic.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fef6 	bl	8003160 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fbf7 	bl	8002b68 <UART_SetConfig>
 800237a:	4603      	mov	r3, r0
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e01b      	b.n	80023bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002392:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 ff75 	bl	80032a4 <UART_CheckIdleState>
 80023ba:	4603      	mov	r3, r0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d17b      	bne.n	80024d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_UART_Transmit+0x26>
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e074      	b.n	80024d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2221      	movs	r2, #33	; 0x21
 80023fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023fe:	f7fe fbc7 	bl	8000b90 <HAL_GetTick>
 8002402:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	88fa      	ldrh	r2, [r7, #6]
 8002408:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	88fa      	ldrh	r2, [r7, #6]
 8002410:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800241c:	d108      	bne.n	8002430 <HAL_UART_Transmit+0x6c>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d104      	bne.n	8002430 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	e003      	b.n	8002438 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002438:	e030      	b.n	800249c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2200      	movs	r2, #0
 8002442:	2180      	movs	r1, #128	; 0x80
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 ffd7 	bl	80033f8 <UART_WaitOnFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e03d      	b.n	80024d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10b      	bne.n	800247a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002470:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	3302      	adds	r3, #2
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	e007      	b.n	800248a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	781a      	ldrb	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	3301      	adds	r3, #1
 8002488:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1c8      	bne.n	800243a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2200      	movs	r2, #0
 80024b0:	2140      	movs	r1, #64	; 0x40
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 ffa0 	bl	80033f8 <UART_WaitOnFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e006      	b.n	80024d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2220      	movs	r2, #32
 80024ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e000      	b.n	80024d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80024d6:	2302      	movs	r3, #2
  }
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3720      	adds	r7, #32
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b0ba      	sub	sp, #232	; 0xe8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002506:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800250a:	f640 030f 	movw	r3, #2063	; 0x80f
 800250e:	4013      	ands	r3, r2
 8002510:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d11b      	bne.n	8002554 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800251c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b00      	cmp	r3, #0
 8002526:	d015      	beq.n	8002554 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d105      	bne.n	8002540 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d009      	beq.n	8002554 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 82e3 	beq.w	8002b10 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
      }
      return;
 8002552:	e2dd      	b.n	8002b10 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 8123 	beq.w	80027a4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800255e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002562:	4b8d      	ldr	r3, [pc, #564]	; (8002798 <HAL_UART_IRQHandler+0x2b8>)
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800256a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800256e:	4b8b      	ldr	r3, [pc, #556]	; (800279c <HAL_UART_IRQHandler+0x2bc>)
 8002570:	4013      	ands	r3, r2
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8116 	beq.w	80027a4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d011      	beq.n	80025a8 <HAL_UART_IRQHandler+0xc8>
 8002584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00b      	beq.n	80025a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2201      	movs	r2, #1
 8002596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	f043 0201 	orr.w	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80025a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d011      	beq.n	80025d8 <HAL_UART_IRQHandler+0xf8>
 80025b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00b      	beq.n	80025d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2202      	movs	r2, #2
 80025c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ce:	f043 0204 	orr.w	r2, r3, #4
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80025d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d011      	beq.n	8002608 <HAL_UART_IRQHandler+0x128>
 80025e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00b      	beq.n	8002608 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2204      	movs	r2, #4
 80025f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	f043 0202 	orr.w	r2, r3, #2
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d017      	beq.n	8002644 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b00      	cmp	r3, #0
 800261e:	d105      	bne.n	800262c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002620:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002624:	4b5c      	ldr	r3, [pc, #368]	; (8002798 <HAL_UART_IRQHandler+0x2b8>)
 8002626:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00b      	beq.n	8002644 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2208      	movs	r2, #8
 8002632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	f043 0208 	orr.w	r2, r3, #8
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264c:	2b00      	cmp	r3, #0
 800264e:	d012      	beq.n	8002676 <HAL_UART_IRQHandler+0x196>
 8002650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002654:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00c      	beq.n	8002676 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002664:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266c:	f043 0220 	orr.w	r2, r3, #32
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8249 	beq.w	8002b14 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b00      	cmp	r3, #0
 800268c:	d013      	beq.n	80026b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800268e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b00      	cmp	r3, #0
 8002698:	d105      	bne.n	80026a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800269a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ca:	2b40      	cmp	r3, #64	; 0x40
 80026cc:	d005      	beq.n	80026da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80026ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d054      	beq.n	8002784 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fef9 	bl	80034d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ea:	2b40      	cmp	r3, #64	; 0x40
 80026ec:	d146      	bne.n	800277c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	3308      	adds	r3, #8
 80026f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026fc:	e853 3f00 	ldrex	r3, [r3]
 8002700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002704:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800270c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3308      	adds	r3, #8
 8002716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800271a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800271e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002722:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800272a:	e841 2300 	strex	r3, r2, [r1]
 800272e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1d9      	bne.n	80026ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002740:	2b00      	cmp	r3, #0
 8002742:	d017      	beq.n	8002774 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800274a:	4a15      	ldr	r2, [pc, #84]	; (80027a0 <HAL_UART_IRQHandler+0x2c0>)
 800274c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe fb8f 	bl	8000e78 <HAL_DMA_Abort_IT>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d019      	beq.n	8002794 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800276e:	4610      	mov	r0, r2
 8002770:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002772:	e00f      	b.n	8002794 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f9e1 	bl	8002b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800277a:	e00b      	b.n	8002794 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f9dd 	bl	8002b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002782:	e007      	b.n	8002794 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f9d9 	bl	8002b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8002792:	e1bf      	b.n	8002b14 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002794:	bf00      	nop
    return;
 8002796:	e1bd      	b.n	8002b14 <HAL_UART_IRQHandler+0x634>
 8002798:	10000001 	.word	0x10000001
 800279c:	04000120 	.word	0x04000120
 80027a0:	0800359f 	.word	0x0800359f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	f040 8153 	bne.w	8002a54 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80027ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 814c 	beq.w	8002a54 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80027bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 8145 	beq.w	8002a54 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2210      	movs	r2, #16
 80027d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027dc:	2b40      	cmp	r3, #64	; 0x40
 80027de:	f040 80bb 	bne.w	8002958 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 818f 	beq.w	8002b18 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002800:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002804:	429a      	cmp	r2, r3
 8002806:	f080 8187 	bcs.w	8002b18 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002810:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b00      	cmp	r3, #0
 8002824:	f040 8087 	bne.w	8002936 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002830:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002834:	e853 3f00 	ldrex	r3, [r3]
 8002838:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800283c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002844:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002856:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800285e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002862:	e841 2300 	strex	r3, r2, [r1]
 8002866:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800286a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1da      	bne.n	8002828 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3308      	adds	r3, #8
 8002878:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800287c:	e853 3f00 	ldrex	r3, [r3]
 8002880:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3308      	adds	r3, #8
 8002892:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002896:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800289a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800289e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028a2:	e841 2300 	strex	r3, r2, [r1]
 80028a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1e1      	bne.n	8002872 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3308      	adds	r3, #8
 80028b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028b8:	e853 3f00 	ldrex	r3, [r3]
 80028bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	3308      	adds	r3, #8
 80028ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028da:	e841 2300 	strex	r3, r2, [r1]
 80028de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1e3      	bne.n	80028ae <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028fc:	e853 3f00 	ldrex	r3, [r3]
 8002900:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002904:	f023 0310 	bic.w	r3, r3, #16
 8002908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002916:	65bb      	str	r3, [r7, #88]	; 0x58
 8002918:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800291c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800291e:	e841 2300 	strex	r3, r2, [r1]
 8002922:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1e4      	bne.n	80028f4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fa48 	bl	8000dc6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002948:	b29b      	uxth	r3, r3
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	b29b      	uxth	r3, r3
 800294e:	4619      	mov	r1, r3
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f8fd 	bl	8002b50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002956:	e0df      	b.n	8002b18 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002964:	b29b      	uxth	r3, r3
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80d1 	beq.w	8002b1c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800297a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80cc 	beq.w	8002b1c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298c:	e853 3f00 	ldrex	r3, [r3]
 8002990:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002994:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002998:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029a6:	647b      	str	r3, [r7, #68]	; 0x44
 80029a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029ae:	e841 2300 	strex	r3, r2, [r1]
 80029b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1e4      	bne.n	8002984 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	3308      	adds	r3, #8
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	e853 3f00 	ldrex	r3, [r3]
 80029c8:	623b      	str	r3, [r7, #32]
   return(result);
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3308      	adds	r3, #8
 80029de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029e2:	633a      	str	r2, [r7, #48]	; 0x30
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ea:	e841 2300 	strex	r3, r2, [r1]
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1e1      	bne.n	80029ba <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	e853 3f00 	ldrex	r3, [r3]
 8002a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0310 	bic.w	r3, r3, #16
 8002a1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a30:	69b9      	ldr	r1, [r7, #24]
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	e841 2300 	strex	r3, r2, [r1]
 8002a38:	617b      	str	r3, [r7, #20]
   return(result);
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e4      	bne.n	8002a0a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f87f 	bl	8002b50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a52:	e063      	b.n	8002b1c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00e      	beq.n	8002a7e <HAL_UART_IRQHandler+0x59e>
 8002a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fe3b 	bl	80036f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a7c:	e051      	b.n	8002b22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d014      	beq.n	8002ab4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d105      	bne.n	8002aa2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d03a      	beq.n	8002b20 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
    }
    return;
 8002ab2:	e035      	b.n	8002b20 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d009      	beq.n	8002ad4 <HAL_UART_IRQHandler+0x5f4>
 8002ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fd7c 	bl	80035ca <UART_EndTransmit_IT>
    return;
 8002ad2:	e026      	b.n	8002b22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d009      	beq.n	8002af4 <HAL_UART_IRQHandler+0x614>
 8002ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fe14 	bl	800371a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002af2:	e016      	b.n	8002b22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d010      	beq.n	8002b22 <HAL_UART_IRQHandler+0x642>
 8002b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	da0c      	bge.n	8002b22 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fdfc 	bl	8003706 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b0e:	e008      	b.n	8002b22 <HAL_UART_IRQHandler+0x642>
      return;
 8002b10:	bf00      	nop
 8002b12:	e006      	b.n	8002b22 <HAL_UART_IRQHandler+0x642>
    return;
 8002b14:	bf00      	nop
 8002b16:	e004      	b.n	8002b22 <HAL_UART_IRQHandler+0x642>
      return;
 8002b18:	bf00      	nop
 8002b1a:	e002      	b.n	8002b22 <HAL_UART_IRQHandler+0x642>
      return;
 8002b1c:	bf00      	nop
 8002b1e:	e000      	b.n	8002b22 <HAL_UART_IRQHandler+0x642>
    return;
 8002b20:	bf00      	nop
  }
}
 8002b22:	37e8      	adds	r7, #232	; 0xe8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b6c:	b08c      	sub	sp, #48	; 0x30
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	431a      	orrs	r2, r3
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4baa      	ldr	r3, [pc, #680]	; (8002e40 <UART_SetConfig+0x2d8>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a9f      	ldr	r2, [pc, #636]	; (8002e44 <UART_SetConfig+0x2dc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d004      	beq.n	8002bd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002bde:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002be8:	430b      	orrs	r3, r1
 8002bea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	f023 010f 	bic.w	r1, r3, #15
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a90      	ldr	r2, [pc, #576]	; (8002e48 <UART_SetConfig+0x2e0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d125      	bne.n	8002c58 <UART_SetConfig+0xf0>
 8002c0c:	4b8f      	ldr	r3, [pc, #572]	; (8002e4c <UART_SetConfig+0x2e4>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d81a      	bhi.n	8002c50 <UART_SetConfig+0xe8>
 8002c1a:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <UART_SetConfig+0xb8>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002c31 	.word	0x08002c31
 8002c24:	08002c41 	.word	0x08002c41
 8002c28:	08002c39 	.word	0x08002c39
 8002c2c:	08002c49 	.word	0x08002c49
 8002c30:	2301      	movs	r3, #1
 8002c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c36:	e116      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c3e:	e112      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002c40:	2304      	movs	r3, #4
 8002c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c46:	e10e      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002c48:	2308      	movs	r3, #8
 8002c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c4e:	e10a      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002c50:	2310      	movs	r3, #16
 8002c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c56:	e106      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a7c      	ldr	r2, [pc, #496]	; (8002e50 <UART_SetConfig+0x2e8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d138      	bne.n	8002cd4 <UART_SetConfig+0x16c>
 8002c62:	4b7a      	ldr	r3, [pc, #488]	; (8002e4c <UART_SetConfig+0x2e4>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f003 030c 	and.w	r3, r3, #12
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	d82d      	bhi.n	8002ccc <UART_SetConfig+0x164>
 8002c70:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <UART_SetConfig+0x110>)
 8002c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c76:	bf00      	nop
 8002c78:	08002cad 	.word	0x08002cad
 8002c7c:	08002ccd 	.word	0x08002ccd
 8002c80:	08002ccd 	.word	0x08002ccd
 8002c84:	08002ccd 	.word	0x08002ccd
 8002c88:	08002cbd 	.word	0x08002cbd
 8002c8c:	08002ccd 	.word	0x08002ccd
 8002c90:	08002ccd 	.word	0x08002ccd
 8002c94:	08002ccd 	.word	0x08002ccd
 8002c98:	08002cb5 	.word	0x08002cb5
 8002c9c:	08002ccd 	.word	0x08002ccd
 8002ca0:	08002ccd 	.word	0x08002ccd
 8002ca4:	08002ccd 	.word	0x08002ccd
 8002ca8:	08002cc5 	.word	0x08002cc5
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cb2:	e0d8      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cba:	e0d4      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cc2:	e0d0      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002cc4:	2308      	movs	r3, #8
 8002cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cca:	e0cc      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002ccc:	2310      	movs	r3, #16
 8002cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cd2:	e0c8      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a5e      	ldr	r2, [pc, #376]	; (8002e54 <UART_SetConfig+0x2ec>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d125      	bne.n	8002d2a <UART_SetConfig+0x1c2>
 8002cde:	4b5b      	ldr	r3, [pc, #364]	; (8002e4c <UART_SetConfig+0x2e4>)
 8002ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ce8:	2b30      	cmp	r3, #48	; 0x30
 8002cea:	d016      	beq.n	8002d1a <UART_SetConfig+0x1b2>
 8002cec:	2b30      	cmp	r3, #48	; 0x30
 8002cee:	d818      	bhi.n	8002d22 <UART_SetConfig+0x1ba>
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d00a      	beq.n	8002d0a <UART_SetConfig+0x1a2>
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d814      	bhi.n	8002d22 <UART_SetConfig+0x1ba>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <UART_SetConfig+0x19a>
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d008      	beq.n	8002d12 <UART_SetConfig+0x1aa>
 8002d00:	e00f      	b.n	8002d22 <UART_SetConfig+0x1ba>
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d08:	e0ad      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d10:	e0a9      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002d12:	2304      	movs	r3, #4
 8002d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d18:	e0a5      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d20:	e0a1      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002d22:	2310      	movs	r3, #16
 8002d24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d28:	e09d      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a4a      	ldr	r2, [pc, #296]	; (8002e58 <UART_SetConfig+0x2f0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d125      	bne.n	8002d80 <UART_SetConfig+0x218>
 8002d34:	4b45      	ldr	r3, [pc, #276]	; (8002e4c <UART_SetConfig+0x2e4>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d3e:	2bc0      	cmp	r3, #192	; 0xc0
 8002d40:	d016      	beq.n	8002d70 <UART_SetConfig+0x208>
 8002d42:	2bc0      	cmp	r3, #192	; 0xc0
 8002d44:	d818      	bhi.n	8002d78 <UART_SetConfig+0x210>
 8002d46:	2b80      	cmp	r3, #128	; 0x80
 8002d48:	d00a      	beq.n	8002d60 <UART_SetConfig+0x1f8>
 8002d4a:	2b80      	cmp	r3, #128	; 0x80
 8002d4c:	d814      	bhi.n	8002d78 <UART_SetConfig+0x210>
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <UART_SetConfig+0x1f0>
 8002d52:	2b40      	cmp	r3, #64	; 0x40
 8002d54:	d008      	beq.n	8002d68 <UART_SetConfig+0x200>
 8002d56:	e00f      	b.n	8002d78 <UART_SetConfig+0x210>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d5e:	e082      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002d60:	2302      	movs	r3, #2
 8002d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d66:	e07e      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d6e:	e07a      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002d70:	2308      	movs	r3, #8
 8002d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d76:	e076      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002d78:	2310      	movs	r3, #16
 8002d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d7e:	e072      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a35      	ldr	r2, [pc, #212]	; (8002e5c <UART_SetConfig+0x2f4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d12a      	bne.n	8002de0 <UART_SetConfig+0x278>
 8002d8a:	4b30      	ldr	r3, [pc, #192]	; (8002e4c <UART_SetConfig+0x2e4>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d98:	d01a      	beq.n	8002dd0 <UART_SetConfig+0x268>
 8002d9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d9e:	d81b      	bhi.n	8002dd8 <UART_SetConfig+0x270>
 8002da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da4:	d00c      	beq.n	8002dc0 <UART_SetConfig+0x258>
 8002da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002daa:	d815      	bhi.n	8002dd8 <UART_SetConfig+0x270>
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <UART_SetConfig+0x250>
 8002db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db4:	d008      	beq.n	8002dc8 <UART_SetConfig+0x260>
 8002db6:	e00f      	b.n	8002dd8 <UART_SetConfig+0x270>
 8002db8:	2300      	movs	r3, #0
 8002dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dbe:	e052      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dc6:	e04e      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002dc8:	2304      	movs	r3, #4
 8002dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dce:	e04a      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002dd0:	2308      	movs	r3, #8
 8002dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dd6:	e046      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002dd8:	2310      	movs	r3, #16
 8002dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dde:	e042      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <UART_SetConfig+0x2dc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d13a      	bne.n	8002e60 <UART_SetConfig+0x2f8>
 8002dea:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <UART_SetConfig+0x2e4>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002df4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002df8:	d01a      	beq.n	8002e30 <UART_SetConfig+0x2c8>
 8002dfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dfe:	d81b      	bhi.n	8002e38 <UART_SetConfig+0x2d0>
 8002e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e04:	d00c      	beq.n	8002e20 <UART_SetConfig+0x2b8>
 8002e06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e0a:	d815      	bhi.n	8002e38 <UART_SetConfig+0x2d0>
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <UART_SetConfig+0x2b0>
 8002e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e14:	d008      	beq.n	8002e28 <UART_SetConfig+0x2c0>
 8002e16:	e00f      	b.n	8002e38 <UART_SetConfig+0x2d0>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e1e:	e022      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002e20:	2302      	movs	r3, #2
 8002e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e26:	e01e      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002e28:	2304      	movs	r3, #4
 8002e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e2e:	e01a      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002e30:	2308      	movs	r3, #8
 8002e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e36:	e016      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002e38:	2310      	movs	r3, #16
 8002e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e3e:	e012      	b.n	8002e66 <UART_SetConfig+0x2fe>
 8002e40:	cfff69f3 	.word	0xcfff69f3
 8002e44:	40008000 	.word	0x40008000
 8002e48:	40013800 	.word	0x40013800
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40004400 	.word	0x40004400
 8002e54:	40004800 	.word	0x40004800
 8002e58:	40004c00 	.word	0x40004c00
 8002e5c:	40005000 	.word	0x40005000
 8002e60:	2310      	movs	r3, #16
 8002e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4aae      	ldr	r2, [pc, #696]	; (8003124 <UART_SetConfig+0x5bc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	f040 8097 	bne.w	8002fa0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d823      	bhi.n	8002ec2 <UART_SetConfig+0x35a>
 8002e7a:	a201      	add	r2, pc, #4	; (adr r2, 8002e80 <UART_SetConfig+0x318>)
 8002e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e80:	08002ea5 	.word	0x08002ea5
 8002e84:	08002ec3 	.word	0x08002ec3
 8002e88:	08002ead 	.word	0x08002ead
 8002e8c:	08002ec3 	.word	0x08002ec3
 8002e90:	08002eb3 	.word	0x08002eb3
 8002e94:	08002ec3 	.word	0x08002ec3
 8002e98:	08002ec3 	.word	0x08002ec3
 8002e9c:	08002ec3 	.word	0x08002ec3
 8002ea0:	08002ebb 	.word	0x08002ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea4:	f7fe ff7e 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 8002ea8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002eaa:	e010      	b.n	8002ece <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eac:	4b9e      	ldr	r3, [pc, #632]	; (8003128 <UART_SetConfig+0x5c0>)
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002eb0:	e00d      	b.n	8002ece <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eb2:	f7fe ff09 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8002eb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002eb8:	e009      	b.n	8002ece <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ec0:	e005      	b.n	8002ece <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002ecc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8130 	beq.w	8003136 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	4a94      	ldr	r2, [pc, #592]	; (800312c <UART_SetConfig+0x5c4>)
 8002edc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d305      	bcc.n	8002f06 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d903      	bls.n	8002f0e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002f0c:	e113      	b.n	8003136 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	2200      	movs	r2, #0
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	60fa      	str	r2, [r7, #12]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	4a84      	ldr	r2, [pc, #528]	; (800312c <UART_SetConfig+0x5c4>)
 8002f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2200      	movs	r2, #0
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f30:	f7fd f972 	bl	8000218 <__aeabi_uldivmod>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	020b      	lsls	r3, r1, #8
 8002f46:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002f4a:	0202      	lsls	r2, r0, #8
 8002f4c:	6979      	ldr	r1, [r7, #20]
 8002f4e:	6849      	ldr	r1, [r1, #4]
 8002f50:	0849      	lsrs	r1, r1, #1
 8002f52:	2000      	movs	r0, #0
 8002f54:	460c      	mov	r4, r1
 8002f56:	4605      	mov	r5, r0
 8002f58:	eb12 0804 	adds.w	r8, r2, r4
 8002f5c:	eb43 0905 	adc.w	r9, r3, r5
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	469a      	mov	sl, r3
 8002f68:	4693      	mov	fp, r2
 8002f6a:	4652      	mov	r2, sl
 8002f6c:	465b      	mov	r3, fp
 8002f6e:	4640      	mov	r0, r8
 8002f70:	4649      	mov	r1, r9
 8002f72:	f7fd f951 	bl	8000218 <__aeabi_uldivmod>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f84:	d308      	bcc.n	8002f98 <UART_SetConfig+0x430>
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f8c:	d204      	bcs.n	8002f98 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6a3a      	ldr	r2, [r7, #32]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	e0ce      	b.n	8003136 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002f9e:	e0ca      	b.n	8003136 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa8:	d166      	bne.n	8003078 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002faa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d827      	bhi.n	8003002 <UART_SetConfig+0x49a>
 8002fb2:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <UART_SetConfig+0x450>)
 8002fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb8:	08002fdd 	.word	0x08002fdd
 8002fbc:	08002fe5 	.word	0x08002fe5
 8002fc0:	08002fed 	.word	0x08002fed
 8002fc4:	08003003 	.word	0x08003003
 8002fc8:	08002ff3 	.word	0x08002ff3
 8002fcc:	08003003 	.word	0x08003003
 8002fd0:	08003003 	.word	0x08003003
 8002fd4:	08003003 	.word	0x08003003
 8002fd8:	08002ffb 	.word	0x08002ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fdc:	f7fe fee2 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 8002fe0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002fe2:	e014      	b.n	800300e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fe4:	f7fe fef4 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 8002fe8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002fea:	e010      	b.n	800300e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fec:	4b4e      	ldr	r3, [pc, #312]	; (8003128 <UART_SetConfig+0x5c0>)
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ff0:	e00d      	b.n	800300e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff2:	f7fe fe69 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8002ff6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ff8:	e009      	b.n	800300e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003000:	e005      	b.n	800300e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800300c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 8090 	beq.w	8003136 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	4a44      	ldr	r2, [pc, #272]	; (800312c <UART_SetConfig+0x5c4>)
 800301c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003020:	461a      	mov	r2, r3
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	fbb3 f3f2 	udiv	r3, r3, r2
 8003028:	005a      	lsls	r2, r3, #1
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	085b      	lsrs	r3, r3, #1
 8003030:	441a      	add	r2, r3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	fbb2 f3f3 	udiv	r3, r2, r3
 800303a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	2b0f      	cmp	r3, #15
 8003040:	d916      	bls.n	8003070 <UART_SetConfig+0x508>
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d212      	bcs.n	8003070 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	b29b      	uxth	r3, r3
 800304e:	f023 030f 	bic.w	r3, r3, #15
 8003052:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	b29b      	uxth	r3, r3
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	b29a      	uxth	r2, r3
 8003060:	8bfb      	ldrh	r3, [r7, #30]
 8003062:	4313      	orrs	r3, r2
 8003064:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	8bfa      	ldrh	r2, [r7, #30]
 800306c:	60da      	str	r2, [r3, #12]
 800306e:	e062      	b.n	8003136 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003076:	e05e      	b.n	8003136 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003078:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800307c:	2b08      	cmp	r3, #8
 800307e:	d828      	bhi.n	80030d2 <UART_SetConfig+0x56a>
 8003080:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <UART_SetConfig+0x520>)
 8003082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003086:	bf00      	nop
 8003088:	080030ad 	.word	0x080030ad
 800308c:	080030b5 	.word	0x080030b5
 8003090:	080030bd 	.word	0x080030bd
 8003094:	080030d3 	.word	0x080030d3
 8003098:	080030c3 	.word	0x080030c3
 800309c:	080030d3 	.word	0x080030d3
 80030a0:	080030d3 	.word	0x080030d3
 80030a4:	080030d3 	.word	0x080030d3
 80030a8:	080030cb 	.word	0x080030cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030ac:	f7fe fe7a 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 80030b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80030b2:	e014      	b.n	80030de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030b4:	f7fe fe8c 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 80030b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80030ba:	e010      	b.n	80030de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030bc:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <UART_SetConfig+0x5c0>)
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80030c0:	e00d      	b.n	80030de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030c2:	f7fe fe01 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 80030c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80030c8:	e009      	b.n	80030de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80030d0:	e005      	b.n	80030de <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80030dc:	bf00      	nop
    }

    if (pclk != 0U)
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d028      	beq.n	8003136 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	4a10      	ldr	r2, [pc, #64]	; (800312c <UART_SetConfig+0x5c4>)
 80030ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030ee:	461a      	mov	r2, r3
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	085b      	lsrs	r3, r3, #1
 80030fc:	441a      	add	r2, r3
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	2b0f      	cmp	r3, #15
 800310c:	d910      	bls.n	8003130 <UART_SetConfig+0x5c8>
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003114:	d20c      	bcs.n	8003130 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	b29a      	uxth	r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60da      	str	r2, [r3, #12]
 8003120:	e009      	b.n	8003136 <UART_SetConfig+0x5ce>
 8003122:	bf00      	nop
 8003124:	40008000 	.word	0x40008000
 8003128:	00f42400 	.word	0x00f42400
 800312c:	080039c0 	.word	0x080039c0
      }
      else
      {
        ret = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2201      	movs	r2, #1
 800313a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2201      	movs	r2, #1
 8003142:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2200      	movs	r2, #0
 800314a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2200      	movs	r2, #0
 8003150:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003152:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003156:	4618      	mov	r0, r3
 8003158:	3730      	adds	r7, #48	; 0x30
 800315a:	46bd      	mov	sp, r7
 800315c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01a      	beq.n	8003276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800325e:	d10a      	bne.n	8003276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	605a      	str	r2, [r3, #4]
  }
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b098      	sub	sp, #96	; 0x60
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032b4:	f7fd fc6c 	bl	8000b90 <HAL_GetTick>
 80032b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d12f      	bne.n	8003328 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d0:	2200      	movs	r2, #0
 80032d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f88e 	bl	80033f8 <UART_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d022      	beq.n	8003328 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ea:	e853 3f00 	ldrex	r3, [r3]
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f6:	653b      	str	r3, [r7, #80]	; 0x50
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	461a      	mov	r2, r3
 80032fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003300:	647b      	str	r3, [r7, #68]	; 0x44
 8003302:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003304:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003308:	e841 2300 	strex	r3, r2, [r1]
 800330c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800330e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e6      	bne.n	80032e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e063      	b.n	80033f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b04      	cmp	r3, #4
 8003334:	d149      	bne.n	80033ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003336:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800333e:	2200      	movs	r2, #0
 8003340:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f857 	bl	80033f8 <UART_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d03c      	beq.n	80033ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	623b      	str	r3, [r7, #32]
   return(result);
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003364:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
 8003370:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e6      	bne.n	8003350 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3308      	adds	r3, #8
 8003388:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	60fb      	str	r3, [r7, #12]
   return(result);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	64bb      	str	r3, [r7, #72]	; 0x48
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3308      	adds	r3, #8
 80033a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033a2:	61fa      	str	r2, [r7, #28]
 80033a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	69b9      	ldr	r1, [r7, #24]
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	617b      	str	r3, [r7, #20]
   return(result);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e5      	bne.n	8003382 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e012      	b.n	80033f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3758      	adds	r7, #88	; 0x58
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	4613      	mov	r3, r2
 8003406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003408:	e04f      	b.n	80034aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d04b      	beq.n	80034aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003412:	f7fd fbbd 	bl	8000b90 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	429a      	cmp	r2, r3
 8003420:	d302      	bcc.n	8003428 <UART_WaitOnFlagUntilTimeout+0x30>
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e04e      	b.n	80034ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	d037      	beq.n	80034aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b80      	cmp	r3, #128	; 0x80
 800343e:	d034      	beq.n	80034aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b40      	cmp	r3, #64	; 0x40
 8003444:	d031      	beq.n	80034aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b08      	cmp	r3, #8
 8003452:	d110      	bne.n	8003476 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2208      	movs	r2, #8
 800345a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f838 	bl	80034d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2208      	movs	r2, #8
 8003466:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e029      	b.n	80034ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003484:	d111      	bne.n	80034aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800348e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f81e 	bl	80034d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e00f      	b.n	80034ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4013      	ands	r3, r2
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	bf0c      	ite	eq
 80034ba:	2301      	moveq	r3, #1
 80034bc:	2300      	movne	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d0a0      	beq.n	800340a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b095      	sub	sp, #84	; 0x54
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f8:	643b      	str	r3, [r7, #64]	; 0x40
 80034fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e6      	bne.n	80034da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3308      	adds	r3, #8
 8003512:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	61fb      	str	r3, [r7, #28]
   return(result);
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	64bb      	str	r3, [r7, #72]	; 0x48
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3308      	adds	r3, #8
 800352e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003530:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003538:	e841 2300 	strex	r3, r2, [r1]
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e3      	bne.n	800350c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d118      	bne.n	800357e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	60bb      	str	r3, [r7, #8]
   return(result);
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f023 0310 	bic.w	r3, r3, #16
 8003560:	647b      	str	r3, [r7, #68]	; 0x44
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356e:	6979      	ldr	r1, [r7, #20]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	613b      	str	r3, [r7, #16]
   return(result);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1e6      	bne.n	800354c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003592:	bf00      	nop
 8003594:	3754      	adds	r7, #84	; 0x54
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff fabd 	bl	8002b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b088      	sub	sp, #32
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	e853 3f00 	ldrex	r3, [r3]
 80035de:	60bb      	str	r3, [r7, #8]
   return(result);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035e6:	61fb      	str	r3, [r7, #28]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	461a      	mov	r2, r3
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f4:	6979      	ldr	r1, [r7, #20]
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	e841 2300 	strex	r3, r2, [r1]
 80035fc:	613b      	str	r3, [r7, #16]
   return(result);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1e6      	bne.n	80035d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff fa88 	bl	8002b28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003618:	bf00      	nop
 800361a:	3720      	adds	r7, #32
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e058      	b.n	80036ea <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f7fd f900 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2224      	movs	r2, #36	; 0x24
 8003654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7ff fd75 	bl	8003160 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f7ff fa76 	bl	8002b68 <UART_SetConfig>
 800367c:	4603      	mov	r3, r0
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e031      	b.n	80036ea <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003694:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	055b      	lsls	r3, r3, #21
 80036ae:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	041b      	lsls	r3, r3, #16
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 80036c4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	6979      	ldr	r1, [r7, #20]
 80036ce:	430b      	orrs	r3, r1
 80036d0:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f7ff fdde 	bl	80032a4 <UART_CheckIdleState>
 80036e8:	4603      	mov	r3, r0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_UARTEx_DisableFifoMode+0x16>
 8003740:	2302      	movs	r3, #2
 8003742:	e027      	b.n	8003794 <HAL_UARTEx_DisableFifoMode+0x66>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2224      	movs	r2, #36	; 0x24
 8003750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003772:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e02d      	b.n	8003814 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2224      	movs	r2, #36	; 0x24
 80037c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f84f 	bl	8003898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003830:	2302      	movs	r3, #2
 8003832:	e02d      	b.n	8003890 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2224      	movs	r2, #36	; 0x24
 8003840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f811 	bl	8003898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d108      	bne.n	80038ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80038b8:	e031      	b.n	800391e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80038ba:	2308      	movs	r3, #8
 80038bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80038be:	2308      	movs	r3, #8
 80038c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	0e5b      	lsrs	r3, r3, #25
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	0f5b      	lsrs	r3, r3, #29
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038e2:	7bbb      	ldrb	r3, [r7, #14]
 80038e4:	7b3a      	ldrb	r2, [r7, #12]
 80038e6:	4911      	ldr	r1, [pc, #68]	; (800392c <UARTEx_SetNbDataToProcess+0x94>)
 80038e8:	5c8a      	ldrb	r2, [r1, r2]
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038ee:	7b3a      	ldrb	r2, [r7, #12]
 80038f0:	490f      	ldr	r1, [pc, #60]	; (8003930 <UARTEx_SetNbDataToProcess+0x98>)
 80038f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	7b7a      	ldrb	r2, [r7, #13]
 8003904:	4909      	ldr	r1, [pc, #36]	; (800392c <UARTEx_SetNbDataToProcess+0x94>)
 8003906:	5c8a      	ldrb	r2, [r1, r2]
 8003908:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800390c:	7b7a      	ldrb	r2, [r7, #13]
 800390e:	4908      	ldr	r1, [pc, #32]	; (8003930 <UARTEx_SetNbDataToProcess+0x98>)
 8003910:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003912:	fb93 f3f2 	sdiv	r3, r3, r2
 8003916:	b29a      	uxth	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800391e:	bf00      	nop
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	080039d8 	.word	0x080039d8
 8003930:	080039e0 	.word	0x080039e0

08003934 <memset>:
 8003934:	4402      	add	r2, r0
 8003936:	4603      	mov	r3, r0
 8003938:	4293      	cmp	r3, r2
 800393a:	d100      	bne.n	800393e <memset+0xa>
 800393c:	4770      	bx	lr
 800393e:	f803 1b01 	strb.w	r1, [r3], #1
 8003942:	e7f9      	b.n	8003938 <memset+0x4>

08003944 <__libc_init_array>:
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	4d0d      	ldr	r5, [pc, #52]	; (800397c <__libc_init_array+0x38>)
 8003948:	4c0d      	ldr	r4, [pc, #52]	; (8003980 <__libc_init_array+0x3c>)
 800394a:	1b64      	subs	r4, r4, r5
 800394c:	10a4      	asrs	r4, r4, #2
 800394e:	2600      	movs	r6, #0
 8003950:	42a6      	cmp	r6, r4
 8003952:	d109      	bne.n	8003968 <__libc_init_array+0x24>
 8003954:	4d0b      	ldr	r5, [pc, #44]	; (8003984 <__libc_init_array+0x40>)
 8003956:	4c0c      	ldr	r4, [pc, #48]	; (8003988 <__libc_init_array+0x44>)
 8003958:	f000 f818 	bl	800398c <_init>
 800395c:	1b64      	subs	r4, r4, r5
 800395e:	10a4      	asrs	r4, r4, #2
 8003960:	2600      	movs	r6, #0
 8003962:	42a6      	cmp	r6, r4
 8003964:	d105      	bne.n	8003972 <__libc_init_array+0x2e>
 8003966:	bd70      	pop	{r4, r5, r6, pc}
 8003968:	f855 3b04 	ldr.w	r3, [r5], #4
 800396c:	4798      	blx	r3
 800396e:	3601      	adds	r6, #1
 8003970:	e7ee      	b.n	8003950 <__libc_init_array+0xc>
 8003972:	f855 3b04 	ldr.w	r3, [r5], #4
 8003976:	4798      	blx	r3
 8003978:	3601      	adds	r6, #1
 800397a:	e7f2      	b.n	8003962 <__libc_init_array+0x1e>
 800397c:	080039f0 	.word	0x080039f0
 8003980:	080039f0 	.word	0x080039f0
 8003984:	080039f0 	.word	0x080039f0
 8003988:	080039f4 	.word	0x080039f4

0800398c <_init>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr

08003998 <_fini>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	bf00      	nop
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr
