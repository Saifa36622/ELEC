
control_lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009968  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08009b40  08009b40  00019b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bb0  08009bb0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009bb0  08009bb0  00019bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bb8  08009bb8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bb8  08009bb8  00019bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bbc  08009bbc  00019bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009bc0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  20000088  08009c48  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08009c48  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018eee  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ca7  00000000  00000000  00038fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  0003bc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010b5  00000000  00000000  0003d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a86  00000000  00000000  0003e2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000187ee  00000000  00000000  00066d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114fc8  00000000  00000000  0007f521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006390  00000000  00000000  001944ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0019a87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000088 	.word	0x20000088
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009b28 	.word	0x08009b28

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000008c 	.word	0x2000008c
 8000214:	08009b28 	.word	0x08009b28

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b98e 	b.w	8000ec4 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f824 	bl	8000bfc <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_d2ulz>:
 8000bc0:	b5d0      	push	{r4, r6, r7, lr}
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <__aeabi_d2ulz+0x34>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4606      	mov	r6, r0
 8000bc8:	460f      	mov	r7, r1
 8000bca:	f7ff fce1 	bl	8000590 <__aeabi_dmul>
 8000bce:	f000 f97b 	bl	8000ec8 <__aeabi_d2uiz>
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	f7ff fc62 	bl	800049c <__aeabi_ui2d>
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <__aeabi_d2ulz+0x38>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f7ff fcd8 	bl	8000590 <__aeabi_dmul>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4630      	mov	r0, r6
 8000be6:	4639      	mov	r1, r7
 8000be8:	f7ff fb1a 	bl	8000220 <__aeabi_dsub>
 8000bec:	f000 f96c 	bl	8000ec8 <__aeabi_d2uiz>
 8000bf0:	4621      	mov	r1, r4
 8000bf2:	bdd0      	pop	{r4, r6, r7, pc}
 8000bf4:	3df00000 	.word	0x3df00000
 8000bf8:	41f00000 	.word	0x41f00000

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9e08      	ldr	r6, [sp, #32]
 8000c02:	460d      	mov	r5, r1
 8000c04:	4604      	mov	r4, r0
 8000c06:	460f      	mov	r7, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14a      	bne.n	8000ca2 <__udivmoddi4+0xa6>
 8000c0c:	428a      	cmp	r2, r1
 8000c0e:	4694      	mov	ip, r2
 8000c10:	d965      	bls.n	8000cde <__udivmoddi4+0xe2>
 8000c12:	fab2 f382 	clz	r3, r2
 8000c16:	b143      	cbz	r3, 8000c2a <__udivmoddi4+0x2e>
 8000c18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c1c:	f1c3 0220 	rsb	r2, r3, #32
 8000c20:	409f      	lsls	r7, r3
 8000c22:	fa20 f202 	lsr.w	r2, r0, r2
 8000c26:	4317      	orrs	r7, r2
 8000c28:	409c      	lsls	r4, r3
 8000c2a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2e:	fa1f f58c 	uxth.w	r5, ip
 8000c32:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c36:	0c22      	lsrs	r2, r4, #16
 8000c38:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c3c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c40:	fb01 f005 	mul.w	r0, r1, r5
 8000c44:	4290      	cmp	r0, r2
 8000c46:	d90a      	bls.n	8000c5e <__udivmoddi4+0x62>
 8000c48:	eb1c 0202 	adds.w	r2, ip, r2
 8000c4c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c50:	f080 811c 	bcs.w	8000e8c <__udivmoddi4+0x290>
 8000c54:	4290      	cmp	r0, r2
 8000c56:	f240 8119 	bls.w	8000e8c <__udivmoddi4+0x290>
 8000c5a:	3902      	subs	r1, #2
 8000c5c:	4462      	add	r2, ip
 8000c5e:	1a12      	subs	r2, r2, r0
 8000c60:	b2a4      	uxth	r4, r4
 8000c62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6e:	fb00 f505 	mul.w	r5, r0, r5
 8000c72:	42a5      	cmp	r5, r4
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x90>
 8000c76:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7e:	f080 8107 	bcs.w	8000e90 <__udivmoddi4+0x294>
 8000c82:	42a5      	cmp	r5, r4
 8000c84:	f240 8104 	bls.w	8000e90 <__udivmoddi4+0x294>
 8000c88:	4464      	add	r4, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c90:	1b64      	subs	r4, r4, r5
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11e      	cbz	r6, 8000c9e <__udivmoddi4+0xa2>
 8000c96:	40dc      	lsrs	r4, r3
 8000c98:	2300      	movs	r3, #0
 8000c9a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0xbc>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80ed 	beq.w	8000e86 <__udivmoddi4+0x28a>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d149      	bne.n	8000d54 <__udivmoddi4+0x158>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0xce>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80f8 	bhi.w	8000eba <__udivmoddi4+0x2be>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0203 	sbc.w	r2, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	4617      	mov	r7, r2
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0e2      	beq.n	8000c9e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cdc:	e7df      	b.n	8000c9e <__udivmoddi4+0xa2>
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xe6>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f382 	clz	r3, r2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x210>
 8000cec:	1a8a      	subs	r2, r1, r2
 8000cee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf2:	fa1f fe8c 	uxth.w	lr, ip
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cfc:	fb07 2015 	mls	r0, r7, r5, r2
 8000d00:	0c22      	lsrs	r2, r4, #16
 8000d02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d06:	fb0e f005 	mul.w	r0, lr, r5
 8000d0a:	4290      	cmp	r0, r2
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x124>
 8000d0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x122>
 8000d18:	4290      	cmp	r0, r2
 8000d1a:	f200 80cb 	bhi.w	8000eb4 <__udivmoddi4+0x2b8>
 8000d1e:	4645      	mov	r5, r8
 8000d20:	1a12      	subs	r2, r2, r0
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d28:	fb07 2210 	mls	r2, r7, r0, r2
 8000d2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d30:	fb0e fe00 	mul.w	lr, lr, r0
 8000d34:	45a6      	cmp	lr, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x14e>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d40:	d202      	bcs.n	8000d48 <__udivmoddi4+0x14c>
 8000d42:	45a6      	cmp	lr, r4
 8000d44:	f200 80bb 	bhi.w	8000ebe <__udivmoddi4+0x2c2>
 8000d48:	4610      	mov	r0, r2
 8000d4a:	eba4 040e 	sub.w	r4, r4, lr
 8000d4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d52:	e79f      	b.n	8000c94 <__udivmoddi4+0x98>
 8000d54:	f1c1 0720 	rsb	r7, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d62:	fa05 f401 	lsl.w	r4, r5, r1
 8000d66:	fa20 f307 	lsr.w	r3, r0, r7
 8000d6a:	40fd      	lsrs	r5, r7
 8000d6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d70:	4323      	orrs	r3, r4
 8000d72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7e:	0c1c      	lsrs	r4, r3, #16
 8000d80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d84:	fb08 f50e 	mul.w	r5, r8, lr
 8000d88:	42a5      	cmp	r5, r4
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d92:	d90b      	bls.n	8000dac <__udivmoddi4+0x1b0>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d9c:	f080 8088 	bcs.w	8000eb0 <__udivmoddi4+0x2b4>
 8000da0:	42a5      	cmp	r5, r4
 8000da2:	f240 8085 	bls.w	8000eb0 <__udivmoddi4+0x2b4>
 8000da6:	f1a8 0802 	sub.w	r8, r8, #2
 8000daa:	4464      	add	r4, ip
 8000dac:	1b64      	subs	r4, r4, r5
 8000dae:	b29d      	uxth	r5, r3
 8000db0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db4:	fb09 4413 	mls	r4, r9, r3, r4
 8000db8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dbc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x1da>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dcc:	d26c      	bcs.n	8000ea8 <__udivmoddi4+0x2ac>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	d96a      	bls.n	8000ea8 <__udivmoddi4+0x2ac>
 8000dd2:	3b02      	subs	r3, #2
 8000dd4:	4464      	add	r4, ip
 8000dd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dda:	fba3 9502 	umull	r9, r5, r3, r2
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	42ac      	cmp	r4, r5
 8000de4:	46c8      	mov	r8, r9
 8000de6:	46ae      	mov	lr, r5
 8000de8:	d356      	bcc.n	8000e98 <__udivmoddi4+0x29c>
 8000dea:	d053      	beq.n	8000e94 <__udivmoddi4+0x298>
 8000dec:	b156      	cbz	r6, 8000e04 <__udivmoddi4+0x208>
 8000dee:	ebb0 0208 	subs.w	r2, r0, r8
 8000df2:	eb64 040e 	sbc.w	r4, r4, lr
 8000df6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dfa:	40ca      	lsrs	r2, r1
 8000dfc:	40cc      	lsrs	r4, r1
 8000dfe:	4317      	orrs	r7, r2
 8000e00:	e9c6 7400 	strd	r7, r4, [r6]
 8000e04:	4618      	mov	r0, r3
 8000e06:	2100      	movs	r1, #0
 8000e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0c:	f1c3 0120 	rsb	r1, r3, #32
 8000e10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e14:	fa20 f201 	lsr.w	r2, r0, r1
 8000e18:	fa25 f101 	lsr.w	r1, r5, r1
 8000e1c:	409d      	lsls	r5, r3
 8000e1e:	432a      	orrs	r2, r5
 8000e20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e24:	fa1f fe8c 	uxth.w	lr, ip
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e30:	0c11      	lsrs	r1, r2, #16
 8000e32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e36:	fb00 f50e 	mul.w	r5, r0, lr
 8000e3a:	428d      	cmp	r5, r1
 8000e3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x258>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4a:	d22f      	bcs.n	8000eac <__udivmoddi4+0x2b0>
 8000e4c:	428d      	cmp	r5, r1
 8000e4e:	d92d      	bls.n	8000eac <__udivmoddi4+0x2b0>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4461      	add	r1, ip
 8000e54:	1b49      	subs	r1, r1, r5
 8000e56:	b292      	uxth	r2, r2
 8000e58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	fb05 f10e 	mul.w	r1, r5, lr
 8000e68:	4291      	cmp	r1, r2
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x282>
 8000e6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e74:	d216      	bcs.n	8000ea4 <__udivmoddi4+0x2a8>
 8000e76:	4291      	cmp	r1, r2
 8000e78:	d914      	bls.n	8000ea4 <__udivmoddi4+0x2a8>
 8000e7a:	3d02      	subs	r5, #2
 8000e7c:	4462      	add	r2, ip
 8000e7e:	1a52      	subs	r2, r2, r1
 8000e80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e84:	e738      	b.n	8000cf8 <__udivmoddi4+0xfc>
 8000e86:	4631      	mov	r1, r6
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e708      	b.n	8000c9e <__udivmoddi4+0xa2>
 8000e8c:	4639      	mov	r1, r7
 8000e8e:	e6e6      	b.n	8000c5e <__udivmoddi4+0x62>
 8000e90:	4610      	mov	r0, r2
 8000e92:	e6fb      	b.n	8000c8c <__udivmoddi4+0x90>
 8000e94:	4548      	cmp	r0, r9
 8000e96:	d2a9      	bcs.n	8000dec <__udivmoddi4+0x1f0>
 8000e98:	ebb9 0802 	subs.w	r8, r9, r2
 8000e9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	e7a3      	b.n	8000dec <__udivmoddi4+0x1f0>
 8000ea4:	4645      	mov	r5, r8
 8000ea6:	e7ea      	b.n	8000e7e <__udivmoddi4+0x282>
 8000ea8:	462b      	mov	r3, r5
 8000eaa:	e794      	b.n	8000dd6 <__udivmoddi4+0x1da>
 8000eac:	4640      	mov	r0, r8
 8000eae:	e7d1      	b.n	8000e54 <__udivmoddi4+0x258>
 8000eb0:	46d0      	mov	r8, sl
 8000eb2:	e77b      	b.n	8000dac <__udivmoddi4+0x1b0>
 8000eb4:	3d02      	subs	r5, #2
 8000eb6:	4462      	add	r2, ip
 8000eb8:	e732      	b.n	8000d20 <__udivmoddi4+0x124>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e70a      	b.n	8000cd4 <__udivmoddi4+0xd8>
 8000ebe:	4464      	add	r4, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e742      	b.n	8000d4a <__udivmoddi4+0x14e>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_d2uiz>:
 8000ec8:	004a      	lsls	r2, r1, #1
 8000eca:	d211      	bcs.n	8000ef0 <__aeabi_d2uiz+0x28>
 8000ecc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ed0:	d211      	bcs.n	8000ef6 <__aeabi_d2uiz+0x2e>
 8000ed2:	d50d      	bpl.n	8000ef0 <__aeabi_d2uiz+0x28>
 8000ed4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ed8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000edc:	d40e      	bmi.n	8000efc <__aeabi_d2uiz+0x34>
 8000ede:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ee2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ee6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000eea:	fa23 f002 	lsr.w	r0, r3, r2
 8000eee:	4770      	bx	lr
 8000ef0:	f04f 0000 	mov.w	r0, #0
 8000ef4:	4770      	bx	lr
 8000ef6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000efa:	d102      	bne.n	8000f02 <__aeabi_d2uiz+0x3a>
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	4770      	bx	lr
 8000f02:	f04f 0000 	mov.w	r0, #0
 8000f06:	4770      	bx	lr

08000f08 <micro.0>:
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  void micro()
     {
 8000f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f0c:	b08a      	sub	sp, #40	; 0x28
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	f8c7 c024 	str.w	ip, [r7, #36]	; 0x24
    	  real_time = (__HAL_TIM_GET_COUNTER(&htim2) + ((lower - 1) * 4294967295)) / 100;
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <micro.0+0xa0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	61fa      	str	r2, [r7, #28]
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <micro.0+0xa4>)
 8000f22:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000f26:	4622      	mov	r2, r4
 8000f28:	462b      	mov	r3, r5
 8000f2a:	f04f 0800 	mov.w	r8, #0
 8000f2e:	f04f 0900 	mov.w	r9, #0
 8000f32:	ea4f 79c3 	mov.w	r9, r3, lsl #31
 8000f36:	ea49 0952 	orr.w	r9, r9, r2, lsr #1
 8000f3a:	ea4f 78c2 	mov.w	r8, r2, lsl #31
 8000f3e:	4642      	mov	r2, r8
 8000f40:	464b      	mov	r3, r9
 8000f42:	1b10      	subs	r0, r2, r4
 8000f44:	eb63 0105 	sbc.w	r1, r3, r5
 8000f48:	1803      	adds	r3, r0, r0
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	eb41 0301 	adc.w	r3, r1, r1
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f56:	1903      	adds	r3, r0, r4
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	eb41 0305 	adc.w	r3, r1, r5
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000f64:	4623      	mov	r3, r4
 8000f66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	eb13 0a02 	adds.w	sl, r3, r2
 8000f70:	462b      	mov	r3, r5
 8000f72:	460a      	mov	r2, r1
 8000f74:	eb43 0b02 	adc.w	fp, r3, r2
 8000f78:	f11a 0301 	adds.w	r3, sl, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	f14b 33ff 	adc.w	r3, fp, #4294967295
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f90:	f7ff fdfe 	bl	8000b90 <__aeabi_uldivmod>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4905      	ldr	r1, [pc, #20]	; (8000fb0 <micro.0+0xa8>)
 8000f9a:	e9c1 2300 	strd	r2, r3, [r1]

     }
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	; 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000fa8:	200002ac 	.word	0x200002ac
 8000fac:	20000368 	.word	0x20000368
 8000fb0:	20000360 	.word	0x20000360
 8000fb4:	00000000 	.word	0x00000000

08000fb8 <main>:
{
 8000fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
int main(void)
 8000fc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fc4:	613b      	str	r3, [r7, #16]
  HAL_Init();
 8000fc6:	f001 f816 	bl	8001ff6 <HAL_Init>
  SystemClock_Config();
 8000fca:	f000 fa69 	bl	80014a0 <SystemClock_Config>
  MX_GPIO_Init();
 8000fce:	f000 fcf5 	bl	80019bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000fd2:	f000 fcc9 	bl	8001968 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000fd6:	f000 fb61 	bl	800169c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000fda:	f000 faad 	bl	8001538 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000fde:	f000 fc41 	bl	8001864 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000fe2:	f000 fbf1 	bl	80017c8 <MX_TIM2_Init>
  MX_DAC1_Init();
 8000fe6:	f000 fb1f 	bl	8001628 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8000fea:	f000 fba1 	bl	8001730 <MX_USART1_UART_Init>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000fee:	217f      	movs	r1, #127	; 0x7f
 8000ff0:	481a      	ldr	r0, [pc, #104]	; (800105c <main+0xa4>)
 8000ff2:	f002 fe0b 	bl	8003c0c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 10);
 8000ff6:	220a      	movs	r2, #10
 8000ff8:	4919      	ldr	r1, [pc, #100]	; (8001060 <main+0xa8>)
 8000ffa:	4818      	ldr	r0, [pc, #96]	; (800105c <main+0xa4>)
 8000ffc:	f001 fc8e 	bl	800291c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8001000:	4818      	ldr	r0, [pc, #96]	; (8001064 <main+0xac>)
 8001002:	f005 f89b 	bl	800613c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001006:	2100      	movs	r1, #0
 8001008:	4816      	ldr	r0, [pc, #88]	; (8001064 <main+0xac>)
 800100a:	f005 f9e1 	bl	80063d0 <HAL_TIM_PWM_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800100e:	2100      	movs	r1, #0
 8001010:	4815      	ldr	r0, [pc, #84]	; (8001068 <main+0xb0>)
 8001012:	f003 f8c9 	bl	80041a8 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001016:	4815      	ldr	r0, [pc, #84]	; (800106c <main+0xb4>)
 8001018:	f005 f900 	bl	800621c <HAL_TIM_Base_Start_IT>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  micro();
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	469c      	mov	ip, r3
 8001022:	f7ff ff71 	bl	8000f08 <micro.0>
	  if (real_time - timestamp < 1000)
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <main+0xb8>)
 8001028:	e9d3 0100 	ldrd	r0, r1, [r3]
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <main+0xbc>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	ebb0 0802 	subs.w	r8, r0, r2
 8001036:	eb61 0903 	sbc.w	r9, r1, r3
 800103a:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 800103e:	f179 0300 	sbcs.w	r3, r9, #0
 8001042:	f0c0 8218 	bcc.w	8001476 <main+0x4be>
	  {
		  continue;
	  }
	  avg_in = 0;
 8001046:	490c      	ldr	r1, [pc, #48]	; (8001078 <main+0xc0>)
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e9c1 2300 	strd	r2, r3, [r1]
	  for(int i=0;i <= 9 ;i ++)
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	e029      	b.n	80010ae <main+0xf6>
 800105a:	bf00      	nop
 800105c:	200000a4 	.word	0x200000a4
 8001060:	20000344 	.word	0x20000344
 8001064:	200002f8 	.word	0x200002f8
 8001068:	20000170 	.word	0x20000170
 800106c:	200002ac 	.word	0x200002ac
 8001070:	20000360 	.word	0x20000360
 8001074:	20000358 	.word	0x20000358
 8001078:	20000370 	.word	0x20000370
	  {
		  avg_in += ADC_RawRead[i];
 800107c:	4ace      	ldr	r2, [pc, #824]	; (80013b8 <main+0x400>)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001084:	b29b      	uxth	r3, r3
 8001086:	2200      	movs	r2, #0
 8001088:	469a      	mov	sl, r3
 800108a:	4693      	mov	fp, r2
 800108c:	4bcb      	ldr	r3, [pc, #812]	; (80013bc <main+0x404>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001092:	eb1a 0102 	adds.w	r1, sl, r2
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	eb4b 0303 	adc.w	r3, fp, r3
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4bc7      	ldr	r3, [pc, #796]	; (80013bc <main+0x404>)
 80010a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80010a4:	e9c3 1200 	strd	r1, r2, [r3]
	  for(int i=0;i <= 9 ;i ++)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2b09      	cmp	r3, #9
 80010b2:	dde3      	ble.n	800107c <main+0xc4>
	  }
	  avg_in2 = avg_in /10;
 80010b4:	4bc1      	ldr	r3, [pc, #772]	; (80013bc <main+0x404>)
 80010b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ba:	f04f 020a 	mov.w	r2, #10
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	f7ff fd65 	bl	8000b90 <__aeabi_uldivmod>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	49bd      	ldr	r1, [pc, #756]	; (80013c0 <main+0x408>)
 80010cc:	e9c1 2300 	strd	r2, r3, [r1]

	  avg_v = (avg_in2 *3.3)/4096.0;
 80010d0:	4bbb      	ldr	r3, [pc, #748]	; (80013c0 <main+0x408>)
 80010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f7ff fa23 	bl	8000524 <__aeabi_ul2d>
 80010de:	a3b0      	add	r3, pc, #704	; (adr r3, 80013a0 <main+0x3e8>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff fa54 	bl	8000590 <__aeabi_dmul>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	4bb3      	ldr	r3, [pc, #716]	; (80013c4 <main+0x40c>)
 80010f6:	f7ff fb75 	bl	80007e4 <__aeabi_ddiv>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fcf5 	bl	8000af0 <__aeabi_d2f>
 8001106:	4603      	mov	r3, r0
 8001108:	4aaf      	ldr	r2, [pc, #700]	; (80013c8 <main+0x410>)
 800110a:	6013      	str	r3, [r2, #0]

	  input = (avg_v*12) /3.3;
 800110c:	4bae      	ldr	r3, [pc, #696]	; (80013c8 <main+0x410>)
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111a:	ee17 0a90 	vmov	r0, s15
 800111e:	f7ff f9df 	bl	80004e0 <__aeabi_f2d>
 8001122:	a39f      	add	r3, pc, #636	; (adr r3, 80013a0 <main+0x3e8>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff fb5c 	bl	80007e4 <__aeabi_ddiv>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fcdc 	bl	8000af0 <__aeabi_d2f>
 8001138:	4603      	mov	r3, r0
 800113a:	4aa4      	ldr	r2, [pc, #656]	; (80013cc <main+0x414>)
 800113c:	6013      	str	r3, [r2, #0]
	  num = (input * kt * pow(T,2)) + (omega_fi *((2*J*L) +(T*R*J)+(T*B*L)) - (omega_se * J*L));
 800113e:	4ba3      	ldr	r3, [pc, #652]	; (80013cc <main+0x414>)
 8001140:	ed93 7a00 	vldr	s14, [r3]
 8001144:	4ba2      	ldr	r3, [pc, #648]	; (80013d0 <main+0x418>)
 8001146:	edd3 7a00 	vldr	s15, [r3]
 800114a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800114e:	ee17 0a90 	vmov	r0, s15
 8001152:	f7ff f9c5 	bl	80004e0 <__aeabi_f2d>
 8001156:	4604      	mov	r4, r0
 8001158:	460d      	mov	r5, r1
 800115a:	4b9e      	ldr	r3, [pc, #632]	; (80013d4 <main+0x41c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f9be 	bl	80004e0 <__aeabi_f2d>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	ed9f 1b8f 	vldr	d1, [pc, #572]	; 80013a8 <main+0x3f0>
 800116c:	ec43 2b10 	vmov	d0, r2, r3
 8001170:	f007 fda2 	bl	8008cb8 <pow>
 8001174:	ec53 2b10 	vmov	r2, r3, d0
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff fa08 	bl	8000590 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4614      	mov	r4, r2
 8001186:	461d      	mov	r5, r3
 8001188:	4b93      	ldr	r3, [pc, #588]	; (80013d8 <main+0x420>)
 800118a:	edd3 7a00 	vldr	s15, [r3]
 800118e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001192:	4b92      	ldr	r3, [pc, #584]	; (80013dc <main+0x424>)
 8001194:	edd3 7a00 	vldr	s15, [r3]
 8001198:	ee27 7a27 	vmul.f32	s14, s14, s15
 800119c:	4b8d      	ldr	r3, [pc, #564]	; (80013d4 <main+0x41c>)
 800119e:	edd3 6a00 	vldr	s13, [r3]
 80011a2:	4b8f      	ldr	r3, [pc, #572]	; (80013e0 <main+0x428>)
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011ac:	4b8a      	ldr	r3, [pc, #552]	; (80013d8 <main+0x420>)
 80011ae:	edd3 7a00 	vldr	s15, [r3]
 80011b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011ba:	4b86      	ldr	r3, [pc, #536]	; (80013d4 <main+0x41c>)
 80011bc:	edd3 6a00 	vldr	s13, [r3]
 80011c0:	4b88      	ldr	r3, [pc, #544]	; (80013e4 <main+0x42c>)
 80011c2:	edd3 7a00 	vldr	s15, [r3]
 80011c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011ca:	4b84      	ldr	r3, [pc, #528]	; (80013dc <main+0x424>)
 80011cc:	edd3 7a00 	vldr	s15, [r3]
 80011d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d8:	4b83      	ldr	r3, [pc, #524]	; (80013e8 <main+0x430>)
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011e2:	4b82      	ldr	r3, [pc, #520]	; (80013ec <main+0x434>)
 80011e4:	edd3 6a00 	vldr	s13, [r3]
 80011e8:	4b7b      	ldr	r3, [pc, #492]	; (80013d8 <main+0x420>)
 80011ea:	edd3 7a00 	vldr	s15, [r3]
 80011ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011f2:	4b7a      	ldr	r3, [pc, #488]	; (80013dc <main+0x424>)
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001200:	ee17 0a90 	vmov	r0, s15
 8001204:	f7ff f96c 	bl	80004e0 <__aeabi_f2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4620      	mov	r0, r4
 800120e:	4629      	mov	r1, r5
 8001210:	f7ff f808 	bl	8000224 <__adddf3>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fc68 	bl	8000af0 <__aeabi_d2f>
 8001220:	4603      	mov	r3, r0
 8001222:	4a73      	ldr	r2, [pc, #460]	; (80013f0 <main+0x438>)
 8001224:	6013      	str	r3, [r2, #0]
	  den = (J*L) + (T*R*J) + (T*B*L) + (pow(T,2)*R*B)+ (pow(T,2)*kt*ke);
 8001226:	4b6c      	ldr	r3, [pc, #432]	; (80013d8 <main+0x420>)
 8001228:	ed93 7a00 	vldr	s14, [r3]
 800122c:	4b6b      	ldr	r3, [pc, #428]	; (80013dc <main+0x424>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001236:	4b67      	ldr	r3, [pc, #412]	; (80013d4 <main+0x41c>)
 8001238:	edd3 6a00 	vldr	s13, [r3]
 800123c:	4b68      	ldr	r3, [pc, #416]	; (80013e0 <main+0x428>)
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001246:	4b64      	ldr	r3, [pc, #400]	; (80013d8 <main+0x420>)
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001250:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001254:	4b5f      	ldr	r3, [pc, #380]	; (80013d4 <main+0x41c>)
 8001256:	edd3 6a00 	vldr	s13, [r3]
 800125a:	4b62      	ldr	r3, [pc, #392]	; (80013e4 <main+0x42c>)
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001264:	4b5d      	ldr	r3, [pc, #372]	; (80013dc <main+0x424>)
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800126e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001272:	ee17 0a90 	vmov	r0, s15
 8001276:	f7ff f933 	bl	80004e0 <__aeabi_f2d>
 800127a:	e9c7 0100 	strd	r0, r1, [r7]
 800127e:	4b55      	ldr	r3, [pc, #340]	; (80013d4 <main+0x41c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f92c 	bl	80004e0 <__aeabi_f2d>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	ed9f 1b46 	vldr	d1, [pc, #280]	; 80013a8 <main+0x3f0>
 8001290:	ec43 2b10 	vmov	d0, r2, r3
 8001294:	f007 fd10 	bl	8008cb8 <pow>
 8001298:	ec55 4b10 	vmov	r4, r5, d0
 800129c:	4b50      	ldr	r3, [pc, #320]	; (80013e0 <main+0x428>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f91d 	bl	80004e0 <__aeabi_f2d>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4620      	mov	r0, r4
 80012ac:	4629      	mov	r1, r5
 80012ae:	f7ff f96f 	bl	8000590 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <main+0x42c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f90e 	bl	80004e0 <__aeabi_f2d>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4620      	mov	r0, r4
 80012ca:	4629      	mov	r1, r5
 80012cc:	f7ff f960 	bl	8000590 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012d8:	f7fe ffa4 	bl	8000224 <__adddf3>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	e9c7 2300 	strd	r2, r3, [r7]
 80012e4:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <main+0x41c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f8f9 	bl	80004e0 <__aeabi_f2d>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 80013a8 <main+0x3f0>
 80012f6:	ec43 2b10 	vmov	d0, r2, r3
 80012fa:	f007 fcdd 	bl	8008cb8 <pow>
 80012fe:	ec55 4b10 	vmov	r4, r5, d0
 8001302:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <main+0x418>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f8ea 	bl	80004e0 <__aeabi_f2d>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	f7ff f93c 	bl	8000590 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4614      	mov	r4, r2
 800131e:	461d      	mov	r5, r3
 8001320:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <main+0x43c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f8db 	bl	80004e0 <__aeabi_f2d>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4620      	mov	r0, r4
 8001330:	4629      	mov	r1, r5
 8001332:	f7ff f92d 	bl	8000590 <__aeabi_dmul>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800133e:	f7fe ff71 	bl	8000224 <__adddf3>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	f7ff fbd1 	bl	8000af0 <__aeabi_d2f>
 800134e:	4603      	mov	r3, r0
 8001350:	4a29      	ldr	r2, [pc, #164]	; (80013f8 <main+0x440>)
 8001352:	6013      	str	r3, [r2, #0]

	  omega = num / den;
 8001354:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <main+0x438>)
 8001356:	edd3 6a00 	vldr	s13, [r3]
 800135a:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <main+0x440>)
 800135c:	ed93 7a00 	vldr	s14, [r3]
 8001360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001364:	4b25      	ldr	r3, [pc, #148]	; (80013fc <main+0x444>)
 8001366:	edc3 7a00 	vstr	s15, [r3]
	  omega_se = omega_fi;
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <main+0x430>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1f      	ldr	r2, [pc, #124]	; (80013ec <main+0x434>)
 8001370:	6013      	str	r3, [r2, #0]
	  omega_fi = omega;
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <main+0x444>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <main+0x430>)
 8001378:	6013      	str	r3, [r2, #0]

	  output =(omega /100) +1.65; //omega_to_volt
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <main+0x444>)
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001400 <main+0x448>
 8001384:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001388:	ee16 0a90 	vmov	r0, s13
 800138c:	f7ff f8a8 	bl	80004e0 <__aeabi_f2d>
 8001390:	a307      	add	r3, pc, #28	; (adr r3, 80013b0 <main+0x3f8>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	f7fe ff45 	bl	8000224 <__adddf3>
 800139a:	e033      	b.n	8001404 <main+0x44c>
 800139c:	f3af 8000 	nop.w
 80013a0:	66666666 	.word	0x66666666
 80013a4:	400a6666 	.word	0x400a6666
 80013a8:	00000000 	.word	0x00000000
 80013ac:	40000000 	.word	0x40000000
 80013b0:	66666666 	.word	0x66666666
 80013b4:	3ffa6666 	.word	0x3ffa6666
 80013b8:	20000344 	.word	0x20000344
 80013bc:	20000370 	.word	0x20000370
 80013c0:	20000378 	.word	0x20000378
 80013c4:	40b00000 	.word	0x40b00000
 80013c8:	20000380 	.word	0x20000380
 80013cc:	20000384 	.word	0x20000384
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000018 	.word	0x20000018
 80013d8:	20000004 	.word	0x20000004
 80013dc:	20000008 	.word	0x20000008
 80013e0:	2000000c 	.word	0x2000000c
 80013e4:	20000010 	.word	0x20000010
 80013e8:	20000394 	.word	0x20000394
 80013ec:	20000398 	.word	0x20000398
 80013f0:	20000388 	.word	0x20000388
 80013f4:	20000014 	.word	0x20000014
 80013f8:	2000038c 	.word	0x2000038c
 80013fc:	20000390 	.word	0x20000390
 8001400:	42c80000 	.word	0x42c80000
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f7ff fb70 	bl	8000af0 <__aeabi_d2f>
 8001410:	4603      	mov	r3, r0
 8001412:	4a1d      	ldr	r2, [pc, #116]	; (8001488 <main+0x4d0>)
 8001414:	6013      	str	r3, [r2, #0]
	  Dac_out = (output*4096) /3.3; //outputpassbroad
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <main+0x4d0>)
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800148c <main+0x4d4>
 8001420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001424:	ee17 0a90 	vmov	r0, s15
 8001428:	f7ff f85a 	bl	80004e0 <__aeabi_f2d>
 800142c:	a314      	add	r3, pc, #80	; (adr r3, 8001480 <main+0x4c8>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff f9d7 	bl	80007e4 <__aeabi_ddiv>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff fbbf 	bl	8000bc0 <__aeabi_d2ulz>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4912      	ldr	r1, [pc, #72]	; (8001490 <main+0x4d8>)
 8001448:	e9c1 2300 	strd	r2, r3, [r1]
//	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Dac_out);
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, Dac_out);
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <main+0x4d8>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	4613      	mov	r3, r2
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	480e      	ldr	r0, [pc, #56]	; (8001494 <main+0x4dc>)
 800145a:	f002 ff11 	bl	8004280 <HAL_DAC_SetValue>




//	  num = (avg_in * (0.0692) *
	  micro();
 800145e:	f107 0310 	add.w	r3, r7, #16
 8001462:	469c      	mov	ip, r3
 8001464:	f7ff fd50 	bl	8000f08 <micro.0>
	  timestamp = real_time;
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <main+0x4e0>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	490b      	ldr	r1, [pc, #44]	; (800149c <main+0x4e4>)
 8001470:	e9c1 2300 	strd	r2, r3, [r1]
 8001474:	e5d2      	b.n	800101c <main+0x64>
		  continue;
 8001476:	bf00      	nop
	  micro();
 8001478:	e5d0      	b.n	800101c <main+0x64>
 800147a:	bf00      	nop
 800147c:	f3af 8000 	nop.w
 8001480:	66666666 	.word	0x66666666
 8001484:	400a6666 	.word	0x400a6666
 8001488:	2000039c 	.word	0x2000039c
 800148c:	45800000 	.word	0x45800000
 8001490:	200003a0 	.word	0x200003a0
 8001494:	20000170 	.word	0x20000170
 8001498:	20000360 	.word	0x20000360
 800149c:	20000358 	.word	0x20000358

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	; 0x50
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0318 	add.w	r3, r7, #24
 80014aa:	2238      	movs	r2, #56	; 0x38
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f007 fbd0 	bl	8008c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014c2:	2000      	movs	r0, #0
 80014c4:	f003 fdb2 	bl	800502c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d2:	2340      	movs	r3, #64	; 0x40
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d6:	2302      	movs	r3, #2
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014da:	2302      	movs	r3, #2
 80014dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80014de:	2304      	movs	r3, #4
 80014e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014e2:	2355      	movs	r3, #85	; 0x55
 80014e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e6:	2302      	movs	r3, #2
 80014e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ea:	2302      	movs	r3, #2
 80014ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f2:	f107 0318 	add.w	r3, r7, #24
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 fe4c 	bl	8005194 <HAL_RCC_OscConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001502:	f000 fae3 	bl	8001acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001506:	230f      	movs	r3, #15
 8001508:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150a:	2303      	movs	r3, #3
 800150c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2104      	movs	r1, #4
 800151e:	4618      	mov	r0, r3
 8001520:	f004 f94a 	bl	80057b8 <HAL_RCC_ClockConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800152a:	f000 facf 	bl	8001acc <Error_Handler>
  }
}
 800152e:	bf00      	nop
 8001530:	3750      	adds	r7, #80	; 0x50
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08c      	sub	sp, #48	; 0x30
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800153e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2220      	movs	r2, #32
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f007 fb7f 	bl	8008c54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001556:	4b32      	ldr	r3, [pc, #200]	; (8001620 <MX_ADC1_Init+0xe8>)
 8001558:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800155c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <MX_ADC1_Init+0xe8>)
 8001560:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001564:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001566:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <MX_ADC1_Init+0xe8>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800156c:	4b2c      	ldr	r3, [pc, #176]	; (8001620 <MX_ADC1_Init+0xe8>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001572:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <MX_ADC1_Init+0xe8>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <MX_ADC1_Init+0xe8>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800157e:	4b28      	ldr	r3, [pc, #160]	; (8001620 <MX_ADC1_Init+0xe8>)
 8001580:	2204      	movs	r2, #4
 8001582:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001584:	4b26      	ldr	r3, [pc, #152]	; (8001620 <MX_ADC1_Init+0xe8>)
 8001586:	2200      	movs	r2, #0
 8001588:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800158a:	4b25      	ldr	r3, [pc, #148]	; (8001620 <MX_ADC1_Init+0xe8>)
 800158c:	2201      	movs	r2, #1
 800158e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001590:	4b23      	ldr	r3, [pc, #140]	; (8001620 <MX_ADC1_Init+0xe8>)
 8001592:	2201      	movs	r2, #1
 8001594:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001596:	4b22      	ldr	r3, [pc, #136]	; (8001620 <MX_ADC1_Init+0xe8>)
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800159e:	4b20      	ldr	r3, [pc, #128]	; (8001620 <MX_ADC1_Init+0xe8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <MX_ADC1_Init+0xe8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <MX_ADC1_Init+0xe8>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <MX_ADC1_Init+0xe8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <MX_ADC1_Init+0xe8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015c0:	4817      	ldr	r0, [pc, #92]	; (8001620 <MX_ADC1_Init+0xe8>)
 80015c2:	f000 ffef 	bl	80025a4 <HAL_ADC_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80015cc:	f000 fa7e 	bl	8001acc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	4811      	ldr	r0, [pc, #68]	; (8001620 <MX_ADC1_Init+0xe8>)
 80015dc:	f002 fbaa 	bl	8003d34 <HAL_ADCEx_MultiModeConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80015e6:	f000 fa71 	bl	8001acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_ADC1_Init+0xec>)
 80015ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015ee:	2306      	movs	r3, #6
 80015f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015f6:	237f      	movs	r3, #127	; 0x7f
 80015f8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015fa:	2304      	movs	r3, #4
 80015fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <MX_ADC1_Init+0xe8>)
 8001608:	f001 fce4 	bl	8002fd4 <HAL_ADC_ConfigChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001612:	f000 fa5b 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	3730      	adds	r7, #48	; 0x30
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200000a4 	.word	0x200000a4
 8001624:	04300002 	.word	0x04300002

08001628 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08c      	sub	sp, #48	; 0x30
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800162e:	463b      	mov	r3, r7
 8001630:	2230      	movs	r2, #48	; 0x30
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f007 fb0d 	bl	8008c54 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MX_DAC1_Init+0x6c>)
 800163c:	4a16      	ldr	r2, [pc, #88]	; (8001698 <MX_DAC1_Init+0x70>)
 800163e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001640:	4814      	ldr	r0, [pc, #80]	; (8001694 <MX_DAC1_Init+0x6c>)
 8001642:	f002 fd8e 	bl	8004162 <HAL_DAC_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800164c:	f000 fa3e 	bl	8001acc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001650:	2302      	movs	r3, #2
 8001652:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800166c:	2301      	movs	r3, #1
 800166e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001674:	463b      	mov	r3, r7
 8001676:	2200      	movs	r2, #0
 8001678:	4619      	mov	r1, r3
 800167a:	4806      	ldr	r0, [pc, #24]	; (8001694 <MX_DAC1_Init+0x6c>)
 800167c:	f002 fe2e 	bl	80042dc <HAL_DAC_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001686:	f000 fa21 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	3730      	adds	r7, #48	; 0x30
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000170 	.word	0x20000170
 8001698:	50000800 	.word	0x50000800

0800169c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80016a0:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_LPUART1_UART_Init+0x8c>)
 80016a2:	4a22      	ldr	r2, [pc, #136]	; (800172c <MX_LPUART1_UART_Init+0x90>)
 80016a4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <MX_LPUART1_UART_Init+0x8c>)
 80016a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016ac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <MX_LPUART1_UART_Init+0x8c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <MX_LPUART1_UART_Init+0x8c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <MX_LPUART1_UART_Init+0x8c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <MX_LPUART1_UART_Init+0x8c>)
 80016c2:	220c      	movs	r2, #12
 80016c4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <MX_LPUART1_UART_Init+0x8c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <MX_LPUART1_UART_Init+0x8c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <MX_LPUART1_UART_Init+0x8c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <MX_LPUART1_UART_Init+0x8c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016de:	4812      	ldr	r0, [pc, #72]	; (8001728 <MX_LPUART1_UART_Init+0x8c>)
 80016e0:	f006 f8a6 	bl	8007830 <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80016ea:	f000 f9ef 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ee:	2100      	movs	r1, #0
 80016f0:	480d      	ldr	r0, [pc, #52]	; (8001728 <MX_LPUART1_UART_Init+0x8c>)
 80016f2:	f007 f9e4 	bl	8008abe <HAL_UARTEx_SetTxFifoThreshold>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80016fc:	f000 f9e6 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001700:	2100      	movs	r1, #0
 8001702:	4809      	ldr	r0, [pc, #36]	; (8001728 <MX_LPUART1_UART_Init+0x8c>)
 8001704:	f007 fa19 	bl	8008b3a <HAL_UARTEx_SetRxFifoThreshold>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800170e:	f000 f9dd 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_LPUART1_UART_Init+0x8c>)
 8001714:	f007 f99a 	bl	8008a4c <HAL_UARTEx_DisableFifoMode>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800171e:	f000 f9d5 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000184 	.word	0x20000184
 800172c:	40008000 	.word	0x40008000

08001730 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001734:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001736:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <MX_USART1_UART_Init+0x94>)
 8001738:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800173c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001740:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001742:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001756:	220c      	movs	r2, #12
 8001758:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800176e:	2200      	movs	r2, #0
 8001770:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001778:	4811      	ldr	r0, [pc, #68]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800177a:	f006 f859 	bl	8007830 <HAL_UART_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001784:	f000 f9a2 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001788:	2100      	movs	r1, #0
 800178a:	480d      	ldr	r0, [pc, #52]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800178c:	f007 f997 	bl	8008abe <HAL_UARTEx_SetTxFifoThreshold>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001796:	f000 f999 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800179a:	2100      	movs	r1, #0
 800179c:	4808      	ldr	r0, [pc, #32]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800179e:	f007 f9cc 	bl	8008b3a <HAL_UARTEx_SetRxFifoThreshold>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017a8:	f000 f990 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 80017ae:	f007 f94d 	bl	8008a4c <HAL_UARTEx_DisableFifoMode>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017b8:	f000 f988 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000218 	.word	0x20000218
 80017c4:	40013800 	.word	0x40013800

080017c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <MX_TIM2_Init+0x98>)
 80017e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <MX_TIM2_Init+0x98>)
 80017f0:	22a9      	movs	r2, #169	; 0xa9
 80017f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_TIM2_Init+0x98>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <MX_TIM2_Init+0x98>)
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <MX_TIM2_Init+0x98>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <MX_TIM2_Init+0x98>)
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800180e:	4814      	ldr	r0, [pc, #80]	; (8001860 <MX_TIM2_Init+0x98>)
 8001810:	f004 fc3c 	bl	800608c <HAL_TIM_Base_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800181a:	f000 f957 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001822:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	4619      	mov	r1, r3
 800182a:	480d      	ldr	r0, [pc, #52]	; (8001860 <MX_TIM2_Init+0x98>)
 800182c:	f005 f946 	bl	8006abc <HAL_TIM_ConfigClockSource>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001836:	f000 f949 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	4619      	mov	r1, r3
 8001846:	4806      	ldr	r0, [pc, #24]	; (8001860 <MX_TIM2_Init+0x98>)
 8001848:	f005 ff16 	bl	8007678 <HAL_TIMEx_MasterConfigSynchronization>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001852:	f000 f93b 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200002ac 	.word	0x200002ac

08001864 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08e      	sub	sp, #56	; 0x38
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001884:	463b      	mov	r3, r7
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]
 8001892:	615a      	str	r2, [r3, #20]
 8001894:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001896:	4b32      	ldr	r3, [pc, #200]	; (8001960 <MX_TIM3_Init+0xfc>)
 8001898:	4a32      	ldr	r2, [pc, #200]	; (8001964 <MX_TIM3_Init+0x100>)
 800189a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 800189c:	4b30      	ldr	r3, [pc, #192]	; (8001960 <MX_TIM3_Init+0xfc>)
 800189e:	22a9      	movs	r2, #169	; 0xa9
 80018a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a2:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <MX_TIM3_Init+0xfc>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <MX_TIM3_Init+0xfc>)
 80018aa:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80018ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <MX_TIM3_Init+0xfc>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b6:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <MX_TIM3_Init+0xfc>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018bc:	4828      	ldr	r0, [pc, #160]	; (8001960 <MX_TIM3_Init+0xfc>)
 80018be:	f004 fbe5 	bl	800608c <HAL_TIM_Base_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80018c8:	f000 f900 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d6:	4619      	mov	r1, r3
 80018d8:	4821      	ldr	r0, [pc, #132]	; (8001960 <MX_TIM3_Init+0xfc>)
 80018da:	f005 f8ef 	bl	8006abc <HAL_TIM_ConfigClockSource>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80018e4:	f000 f8f2 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018e8:	481d      	ldr	r0, [pc, #116]	; (8001960 <MX_TIM3_Init+0xfc>)
 80018ea:	f004 fd0f 	bl	800630c <HAL_TIM_PWM_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80018f4:	f000 f8ea 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	4619      	mov	r1, r3
 8001906:	4816      	ldr	r0, [pc, #88]	; (8001960 <MX_TIM3_Init+0xfc>)
 8001908:	f005 feb6 	bl	8007678 <HAL_TIMEx_MasterConfigSynchronization>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001912:	f000 f8db 	bl	8001acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001916:	2360      	movs	r3, #96	; 0x60
 8001918:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001926:	463b      	mov	r3, r7
 8001928:	2200      	movs	r2, #0
 800192a:	4619      	mov	r1, r3
 800192c:	480c      	ldr	r0, [pc, #48]	; (8001960 <MX_TIM3_Init+0xfc>)
 800192e:	f004 ffb1 	bl	8006894 <HAL_TIM_PWM_ConfigChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001938:	f000 f8c8 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800193c:	463b      	mov	r3, r7
 800193e:	2204      	movs	r2, #4
 8001940:	4619      	mov	r1, r3
 8001942:	4807      	ldr	r0, [pc, #28]	; (8001960 <MX_TIM3_Init+0xfc>)
 8001944:	f004 ffa6 	bl	8006894 <HAL_TIM_PWM_ConfigChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800194e:	f000 f8bd 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001952:	4803      	ldr	r0, [pc, #12]	; (8001960 <MX_TIM3_Init+0xfc>)
 8001954:	f000 fa84 	bl	8001e60 <HAL_TIM_MspPostInit>

}
 8001958:	bf00      	nop
 800195a:	3738      	adds	r7, #56	; 0x38
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200002f8 	.word	0x200002f8
 8001964:	40000400 	.word	0x40000400

08001968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MX_DMA_Init+0x50>)
 8001970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001972:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <MX_DMA_Init+0x50>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	6493      	str	r3, [r2, #72]	; 0x48
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_DMA_Init+0x50>)
 800197c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_DMA_Init+0x50>)
 8001988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800198a:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <MX_DMA_Init+0x50>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6493      	str	r3, [r2, #72]	; 0x48
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_DMA_Init+0x50>)
 8001994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	200b      	movs	r0, #11
 80019a4:	f002 fba9 	bl	80040fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019a8:	200b      	movs	r0, #11
 80019aa:	f002 fbc0 	bl	800412e <HAL_NVIC_EnableIRQ>

}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000

080019bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
 80019d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d2:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <MX_GPIO_Init+0xd4>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	4a2e      	ldr	r2, [pc, #184]	; (8001a90 <MX_GPIO_Init+0xd4>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019de:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <MX_GPIO_Init+0xd4>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ea:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <MX_GPIO_Init+0xd4>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ee:	4a28      	ldr	r2, [pc, #160]	; (8001a90 <MX_GPIO_Init+0xd4>)
 80019f0:	f043 0320 	orr.w	r3, r3, #32
 80019f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <MX_GPIO_Init+0xd4>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	f003 0320 	and.w	r3, r3, #32
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <MX_GPIO_Init+0xd4>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	4a22      	ldr	r2, [pc, #136]	; (8001a90 <MX_GPIO_Init+0xd4>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0e:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <MX_GPIO_Init+0xd4>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <MX_GPIO_Init+0xd4>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	4a1c      	ldr	r2, [pc, #112]	; (8001a90 <MX_GPIO_Init+0xd4>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <MX_GPIO_Init+0xd4>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2120      	movs	r1, #32
 8001a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3a:	f003 fabb 	bl	8004fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	480f      	ldr	r0, [pc, #60]	; (8001a94 <MX_GPIO_Init+0xd8>)
 8001a56:	f003 f92b 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a5a:	2320      	movs	r3, #32
 8001a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a74:	f003 f91c 	bl	8004cb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2028      	movs	r0, #40	; 0x28
 8001a7e:	f002 fb3c 	bl	80040fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a82:	2028      	movs	r0, #40	; 0x28
 8001a84:	f002 fb53 	bl	800412e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a88:	bf00      	nop
 8001a8a:	3728      	adds	r7, #40	; 0x28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000
 8001a94:	48000800 	.word	0x48000800

08001a98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a98:	b4b0      	push	{r4, r5, r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
if(htim == &htim2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d108      	bne.n	8001aba <HAL_TIM_PeriodElapsedCallback+0x22>
{
	lower += 1;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	1c54      	adds	r4, r2, #1
 8001ab0:	f143 0500 	adc.w	r5, r3, #0
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001ab6:	e9c3 4500 	strd	r4, r5, [r3]
}
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bcb0      	pop	{r4, r5, r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	200002ac 	.word	0x200002ac
 8001ac8:	20000368 	.word	0x20000368

08001acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad0:	b672      	cpsid	i
}
 8001ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <Error_Handler+0x8>
	...

08001ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_MspInit+0x44>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <HAL_MspInit+0x44>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_MspInit+0x44>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_MspInit+0x44>)
 8001af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afa:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <HAL_MspInit+0x44>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6593      	str	r3, [r2, #88]	; 0x58
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_MspInit+0x44>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b0e:	f003 fb31 	bl	8005174 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000

08001b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b09e      	sub	sp, #120	; 0x78
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	2254      	movs	r2, #84	; 0x54
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f007 f887 	bl	8008c54 <memset>
  if(hadc->Instance==ADC1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b4e:	d167      	bne.n	8001c20 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001b50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b54:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b56:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b5a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4618      	mov	r0, r3
 8001b62:	f004 f845 	bl	8005bf0 <HAL_RCCEx_PeriphCLKConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001b6c:	f7ff ffae 	bl	8001acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b70:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <HAL_ADC_MspInit+0x108>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b74:	4a2c      	ldr	r2, [pc, #176]	; (8001c28 <HAL_ADC_MspInit+0x108>)
 8001b76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7c:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <HAL_ADC_MspInit+0x108>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b88:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <HAL_ADC_MspInit+0x108>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	4a26      	ldr	r2, [pc, #152]	; (8001c28 <HAL_ADC_MspInit+0x108>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <HAL_ADC_MspInit+0x108>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb6:	f003 f87b 	bl	8004cb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <HAL_ADC_MspInit+0x10c>)
 8001bbc:	4a1c      	ldr	r2, [pc, #112]	; (8001c30 <HAL_ADC_MspInit+0x110>)
 8001bbe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <HAL_ADC_MspInit+0x10c>)
 8001bc2:	2205      	movs	r2, #5
 8001bc4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc6:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_ADC_MspInit+0x10c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bcc:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <HAL_ADC_MspInit+0x10c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bd2:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_ADC_MspInit+0x10c>)
 8001bd4:	2280      	movs	r2, #128	; 0x80
 8001bd6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <HAL_ADC_MspInit+0x10c>)
 8001bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bde:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_ADC_MspInit+0x10c>)
 8001be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001be6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001be8:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <HAL_ADC_MspInit+0x10c>)
 8001bea:	2220      	movs	r2, #32
 8001bec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <HAL_ADC_MspInit+0x10c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <HAL_ADC_MspInit+0x10c>)
 8001bf6:	f002 fd29 	bl	800464c <HAL_DMA_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001c00:	f7ff ff64 	bl	8001acc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a09      	ldr	r2, [pc, #36]	; (8001c2c <HAL_ADC_MspInit+0x10c>)
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54
 8001c0a:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <HAL_ADC_MspInit+0x10c>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	2012      	movs	r0, #18
 8001c16:	f002 fa70 	bl	80040fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c1a:	2012      	movs	r0, #18
 8001c1c:	f002 fa87 	bl	800412e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c20:	bf00      	nop
 8001c22:	3778      	adds	r7, #120	; 0x78
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	20000110 	.word	0x20000110
 8001c30:	40020008 	.word	0x40020008

08001c34 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a15      	ldr	r2, [pc, #84]	; (8001ca8 <HAL_DAC_MspInit+0x74>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d124      	bne.n	8001ca0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_DAC_MspInit+0x78>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	4a14      	ldr	r2, [pc, #80]	; (8001cac <HAL_DAC_MspInit+0x78>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_DAC_MspInit+0x78>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_DAC_MspInit+0x78>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <HAL_DAC_MspInit+0x78>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_DAC_MspInit+0x78>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c86:	2310      	movs	r3, #16
 8001c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f003 f808 	bl	8004cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	50000800 	.word	0x50000800
 8001cac:	40021000 	.word	0x40021000

08001cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0a0      	sub	sp, #128	; 0x80
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc8:	f107 0318 	add.w	r3, r7, #24
 8001ccc:	2254      	movs	r2, #84	; 0x54
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f006 ffbf 	bl	8008c54 <memset>
  if(huart->Instance==LPUART1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a41      	ldr	r2, [pc, #260]	; (8001de0 <HAL_UART_MspInit+0x130>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d137      	bne.n	8001d50 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce8:	f107 0318 	add.w	r3, r7, #24
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 ff7f 	bl	8005bf0 <HAL_RCCEx_PeriphCLKConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cf8:	f7ff fee8 	bl	8001acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001cfc:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <HAL_UART_MspInit+0x134>)
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	4a38      	ldr	r2, [pc, #224]	; (8001de4 <HAL_UART_MspInit+0x134>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001d08:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <HAL_UART_MspInit+0x134>)
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d14:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <HAL_UART_MspInit+0x134>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	4a32      	ldr	r2, [pc, #200]	; (8001de4 <HAL_UART_MspInit+0x134>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d20:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <HAL_UART_MspInit+0x134>)
 8001d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001d2c:	230c      	movs	r3, #12
 8001d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001d3c:	230c      	movs	r3, #12
 8001d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d44:	4619      	mov	r1, r3
 8001d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4a:	f002 ffb1 	bl	8004cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d4e:	e042      	b.n	8001dd6 <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a24      	ldr	r2, [pc, #144]	; (8001de8 <HAL_UART_MspInit+0x138>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d13d      	bne.n	8001dd6 <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d62:	f107 0318 	add.w	r3, r7, #24
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 ff42 	bl	8005bf0 <HAL_RCCEx_PeriphCLKConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001d72:	f7ff feab 	bl	8001acc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d76:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_UART_MspInit+0x134>)
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	4a1a      	ldr	r2, [pc, #104]	; (8001de4 <HAL_UART_MspInit+0x134>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d80:	6613      	str	r3, [r2, #96]	; 0x60
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_UART_MspInit+0x134>)
 8001d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_UART_MspInit+0x134>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <HAL_UART_MspInit+0x134>)
 8001d94:	f043 0304 	orr.w	r3, r3, #4
 8001d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_UART_MspInit+0x134>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001da6:	2330      	movs	r3, #48	; 0x30
 8001da8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001db6:	2307      	movs	r3, #7
 8001db8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	480a      	ldr	r0, [pc, #40]	; (8001dec <HAL_UART_MspInit+0x13c>)
 8001dc2:	f002 ff75 	bl	8004cb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2025      	movs	r0, #37	; 0x25
 8001dcc:	f002 f995 	bl	80040fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dd0:	2025      	movs	r0, #37	; 0x25
 8001dd2:	f002 f9ac 	bl	800412e <HAL_NVIC_EnableIRQ>
}
 8001dd6:	bf00      	nop
 8001dd8:	3780      	adds	r7, #128	; 0x80
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40008000 	.word	0x40008000
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40013800 	.word	0x40013800
 8001dec:	48000800 	.word	0x48000800

08001df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e00:	d114      	bne.n	8001e2c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_TIM_Base_MspInit+0x68>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <HAL_TIM_Base_MspInit+0x68>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_TIM_Base_MspInit+0x68>)
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	201c      	movs	r0, #28
 8001e20:	f002 f96b 	bl	80040fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e24:	201c      	movs	r0, #28
 8001e26:	f002 f982 	bl	800412e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e2a:	e010      	b.n	8001e4e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <HAL_TIM_Base_MspInit+0x6c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d10b      	bne.n	8001e4e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_TIM_Base_MspInit+0x68>)
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <HAL_TIM_Base_MspInit+0x68>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	6593      	str	r3, [r2, #88]	; 0x58
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_TIM_Base_MspInit+0x68>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
}
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40000400 	.word	0x40000400

08001e60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a11      	ldr	r2, [pc, #68]	; (8001ec4 <HAL_TIM_MspPostInit+0x64>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d11c      	bne.n	8001ebc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_TIM_MspPostInit+0x68>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	4a10      	ldr	r2, [pc, #64]	; (8001ec8 <HAL_TIM_MspPostInit+0x68>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <HAL_TIM_MspPostInit+0x68>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e9a:	23c0      	movs	r3, #192	; 0xc0
 8001e9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 030c 	add.w	r3, r7, #12
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb8:	f002 fefa 	bl	8004cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ebc:	bf00      	nop
 8001ebe:	3720      	adds	r7, #32
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40000400 	.word	0x40000400
 8001ec8:	40021000 	.word	0x40021000

08001ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <NMI_Handler+0x4>

08001ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <HardFault_Handler+0x4>

08001ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <MemManage_Handler+0x4>

08001ede <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <BusFault_Handler+0x4>

08001ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <UsageFault_Handler+0x4>

08001eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f18:	f000 f8c0 	bl	800209c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <DMA1_Channel1_IRQHandler+0x10>)
 8001f26:	f002 fd74 	bl	8004a12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000110 	.word	0x20000110

08001f34 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <ADC1_2_IRQHandler+0x10>)
 8001f3a:	f000 fdc3 	bl	8002ac4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200000a4 	.word	0x200000a4

08001f48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <TIM2_IRQHandler+0x10>)
 8001f4e:	f004 fb51 	bl	80065f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200002ac 	.word	0x200002ac

08001f5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <USART1_IRQHandler+0x10>)
 8001f62:	f005 fcb5 	bl	80078d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000218 	.word	0x20000218

08001f70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001f74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f78:	f003 f834 	bl	8004fe4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <SystemInit+0x20>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <SystemInit+0x20>)
 8001f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fa4:	480d      	ldr	r0, [pc, #52]	; (8001fdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fa6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fa8:	f7ff ffea 	bl	8001f80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fac:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fae:	490d      	ldr	r1, [pc, #52]	; (8001fe4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <LoopForever+0xe>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001fb4:	e002      	b.n	8001fbc <LoopCopyDataInit>

08001fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fba:	3304      	adds	r3, #4

08001fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc0:	d3f9      	bcc.n	8001fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fc4:	4c0a      	ldr	r4, [pc, #40]	; (8001ff0 <LoopForever+0x16>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc8:	e001      	b.n	8001fce <LoopFillZerobss>

08001fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fcc:	3204      	adds	r2, #4

08001fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd0:	d3fb      	bcc.n	8001fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fd2:	f006 fe4d 	bl	8008c70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fd6:	f7fe ffef 	bl	8000fb8 <main>

08001fda <LoopForever>:

LoopForever:
    b LoopForever
 8001fda:	e7fe      	b.n	8001fda <LoopForever>
  ldr   r0, =_estack
 8001fdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001fe8:	08009bc0 	.word	0x08009bc0
  ldr r2, =_sbss
 8001fec:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001ff0:	200004e4 	.word	0x200004e4

08001ff4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ff4:	e7fe      	b.n	8001ff4 <ADC3_IRQHandler>

08001ff6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002000:	2003      	movs	r0, #3
 8002002:	f002 f86f 	bl	80040e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002006:	2000      	movs	r0, #0
 8002008:	f000 f80e 	bl	8002028 <HAL_InitTick>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	71fb      	strb	r3, [r7, #7]
 8002016:	e001      	b.n	800201c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002018:	f7ff fd5e 	bl	8001ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800201c:	79fb      	ldrb	r3, [r7, #7]

}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <HAL_InitTick+0x68>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d022      	beq.n	8002082 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800203c:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_InitTick+0x6c>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_InitTick+0x68>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002048:	fbb1 f3f3 	udiv	r3, r1, r3
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	4618      	mov	r0, r3
 8002052:	f002 f87a 	bl	800414a <HAL_SYSTICK_Config>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10f      	bne.n	800207c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b0f      	cmp	r3, #15
 8002060:	d809      	bhi.n	8002076 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002062:	2200      	movs	r2, #0
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	f04f 30ff 	mov.w	r0, #4294967295
 800206a:	f002 f846 	bl	80040fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <HAL_InitTick+0x70>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	e007      	b.n	8002086 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	73fb      	strb	r3, [r7, #15]
 800207a:	e004      	b.n	8002086 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	e001      	b.n	8002086 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002086:	7bfb      	ldrb	r3, [r7, #15]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000024 	.word	0x20000024
 8002094:	2000001c 	.word	0x2000001c
 8002098:	20000020 	.word	0x20000020

0800209c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_IncTick+0x1c>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_IncTick+0x20>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4413      	add	r3, r2
 80020aa:	4a03      	ldr	r2, [pc, #12]	; (80020b8 <HAL_IncTick+0x1c>)
 80020ac:	6013      	str	r3, [r2, #0]
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	200003a8 	.word	0x200003a8
 80020bc:	20000024 	.word	0x20000024

080020c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return uwTick;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_GetTick+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	200003a8 	.word	0x200003a8

080020d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	609a      	str	r2, [r3, #8]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	609a      	str	r2, [r3, #8]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3360      	adds	r3, #96	; 0x60
 8002152:	461a      	mov	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <LL_ADC_SetOffset+0x44>)
 8002162:	4013      	ands	r3, r2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	4313      	orrs	r3, r2
 8002170:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002178:	bf00      	nop
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	03fff000 	.word	0x03fff000

08002188 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3360      	adds	r3, #96	; 0x60
 8002196:	461a      	mov	r2, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	3360      	adds	r3, #96	; 0x60
 80021c4:	461a      	mov	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	431a      	orrs	r2, r3
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021de:	bf00      	nop
 80021e0:	371c      	adds	r7, #28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b087      	sub	sp, #28
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3360      	adds	r3, #96	; 0x60
 80021fa:	461a      	mov	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	431a      	orrs	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002214:	bf00      	nop
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	3360      	adds	r3, #96	; 0x60
 8002230:	461a      	mov	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	431a      	orrs	r2, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800224a:	bf00      	nop
 800224c:	371c      	adds	r7, #28
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	615a      	str	r2, [r3, #20]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b087      	sub	sp, #28
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3330      	adds	r3, #48	; 0x30
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	4413      	add	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	211f      	movs	r1, #31
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	401a      	ands	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0e9b      	lsrs	r3, r3, #26
 80022da:	f003 011f 	and.w	r1, r3, #31
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	431a      	orrs	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022ee:	bf00      	nop
 80022f0:	371c      	adds	r7, #28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3314      	adds	r3, #20
 8002330:	461a      	mov	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	0e5b      	lsrs	r3, r3, #25
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	4413      	add	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	0d1b      	lsrs	r3, r3, #20
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	2107      	movs	r1, #7
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	401a      	ands	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	0d1b      	lsrs	r3, r3, #20
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	431a      	orrs	r2, r3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800236a:	bf00      	nop
 800236c:	371c      	adds	r7, #28
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002390:	43db      	mvns	r3, r3
 8002392:	401a      	ands	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0318 	and.w	r3, r3, #24
 800239a:	4908      	ldr	r1, [pc, #32]	; (80023bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800239c:	40d9      	lsrs	r1, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	400b      	ands	r3, r1
 80023a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a6:	431a      	orrs	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	0007ffff 	.word	0x0007ffff

080023c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 031f 	and.w	r3, r3, #31
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6093      	str	r3, [r2, #8]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800242c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002430:	d101      	bne.n	8002436 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002454:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002458:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002480:	d101      	bne.n	8002486 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024a8:	f043 0201 	orr.w	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024d0:	f043 0202 	orr.w	r2, r3, #2
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <LL_ADC_IsEnabled+0x18>
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <LL_ADC_IsEnabled+0x1a>
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b02      	cmp	r3, #2
 800251c:	d101      	bne.n	8002522 <LL_ADC_IsDisableOngoing+0x18>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <LL_ADC_IsDisableOngoing+0x1a>
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002540:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002544:	f043 0204 	orr.w	r2, r3, #4
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b04      	cmp	r3, #4
 800256a:	d101      	bne.n	8002570 <LL_ADC_REG_IsConversionOngoing+0x18>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b08      	cmp	r3, #8
 8002590:	d101      	bne.n	8002596 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e1a9      	b.n	8002912 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d109      	bne.n	80025e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff faa7 	bl	8001b20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff19 	bl	800241c <LL_ADC_IsDeepPowerDownEnabled>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d004      	beq.n	80025fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff feff 	bl	80023f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff34 	bl	800246c <LL_ADC_IsInternalRegulatorEnabled>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d115      	bne.n	8002636 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff18 	bl	8002444 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002614:	4b9c      	ldr	r3, [pc, #624]	; (8002888 <HAL_ADC_Init+0x2e4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	099b      	lsrs	r3, r3, #6
 800261a:	4a9c      	ldr	r2, [pc, #624]	; (800288c <HAL_ADC_Init+0x2e8>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	3301      	adds	r3, #1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002628:	e002      	b.n	8002630 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3b01      	subs	r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f9      	bne.n	800262a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff16 	bl	800246c <LL_ADC_IsInternalRegulatorEnabled>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10d      	bne.n	8002662 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264a:	f043 0210 	orr.w	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002656:	f043 0201 	orr.w	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff ff76 	bl	8002558 <LL_ADC_REG_IsConversionOngoing>
 800266c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 8142 	bne.w	8002900 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 813e 	bne.w	8002900 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002688:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800268c:	f043 0202 	orr.w	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff23 	bl	80024e4 <LL_ADC_IsEnabled>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d141      	bne.n	8002728 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ac:	d004      	beq.n	80026b8 <HAL_ADC_Init+0x114>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a77      	ldr	r2, [pc, #476]	; (8002890 <HAL_ADC_Init+0x2ec>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d10f      	bne.n	80026d8 <HAL_ADC_Init+0x134>
 80026b8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80026bc:	f7ff ff12 	bl	80024e4 <LL_ADC_IsEnabled>
 80026c0:	4604      	mov	r4, r0
 80026c2:	4873      	ldr	r0, [pc, #460]	; (8002890 <HAL_ADC_Init+0x2ec>)
 80026c4:	f7ff ff0e 	bl	80024e4 <LL_ADC_IsEnabled>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4323      	orrs	r3, r4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	e012      	b.n	80026fe <HAL_ADC_Init+0x15a>
 80026d8:	486e      	ldr	r0, [pc, #440]	; (8002894 <HAL_ADC_Init+0x2f0>)
 80026da:	f7ff ff03 	bl	80024e4 <LL_ADC_IsEnabled>
 80026de:	4604      	mov	r4, r0
 80026e0:	486d      	ldr	r0, [pc, #436]	; (8002898 <HAL_ADC_Init+0x2f4>)
 80026e2:	f7ff feff 	bl	80024e4 <LL_ADC_IsEnabled>
 80026e6:	4603      	mov	r3, r0
 80026e8:	431c      	orrs	r4, r3
 80026ea:	486c      	ldr	r0, [pc, #432]	; (800289c <HAL_ADC_Init+0x2f8>)
 80026ec:	f7ff fefa 	bl	80024e4 <LL_ADC_IsEnabled>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4323      	orrs	r3, r4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d012      	beq.n	8002728 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800270a:	d004      	beq.n	8002716 <HAL_ADC_Init+0x172>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a5f      	ldr	r2, [pc, #380]	; (8002890 <HAL_ADC_Init+0x2ec>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_ADC_Init+0x176>
 8002716:	4a62      	ldr	r2, [pc, #392]	; (80028a0 <HAL_ADC_Init+0x2fc>)
 8002718:	e000      	b.n	800271c <HAL_ADC_Init+0x178>
 800271a:	4a62      	ldr	r2, [pc, #392]	; (80028a4 <HAL_ADC_Init+0x300>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4619      	mov	r1, r3
 8002722:	4610      	mov	r0, r2
 8002724:	f7ff fcd8 	bl	80020d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7f5b      	ldrb	r3, [r3, #29]
 800272c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002732:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002738:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800273e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002746:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002752:	2b01      	cmp	r3, #1
 8002754:	d106      	bne.n	8002764 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	3b01      	subs	r3, #1
 800275c:	045b      	lsls	r3, r3, #17
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d009      	beq.n	8002780 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	4b48      	ldr	r3, [pc, #288]	; (80028a8 <HAL_ADC_Init+0x304>)
 8002788:	4013      	ands	r3, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	69b9      	ldr	r1, [r7, #24]
 8002790:	430b      	orrs	r3, r1
 8002792:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fee5 	bl	800257e <LL_ADC_INJ_IsConversionOngoing>
 80027b4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d17f      	bne.n	80028bc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d17c      	bne.n	80028bc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027c6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027ce:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027de:	f023 0302 	bic.w	r3, r3, #2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	69b9      	ldr	r1, [r7, #24]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d017      	beq.n	8002824 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002802:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800280c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6911      	ldr	r1, [r2, #16]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	430b      	orrs	r3, r1
 800281e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002822:	e013      	b.n	800284c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002832:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002844:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002848:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002852:	2b01      	cmp	r3, #1
 8002854:	d12a      	bne.n	80028ac <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002860:	f023 0304 	bic.w	r3, r3, #4
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800286c:	4311      	orrs	r1, r2
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002872:	4311      	orrs	r1, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002878:	430a      	orrs	r2, r1
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	611a      	str	r2, [r3, #16]
 8002886:	e019      	b.n	80028bc <HAL_ADC_Init+0x318>
 8002888:	2000001c 	.word	0x2000001c
 800288c:	053e2d63 	.word	0x053e2d63
 8002890:	50000100 	.word	0x50000100
 8002894:	50000400 	.word	0x50000400
 8002898:	50000500 	.word	0x50000500
 800289c:	50000600 	.word	0x50000600
 80028a0:	50000300 	.word	0x50000300
 80028a4:	50000700 	.word	0x50000700
 80028a8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0201 	bic.w	r2, r2, #1
 80028ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d10c      	bne.n	80028de <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f023 010f 	bic.w	r1, r3, #15
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	1e5a      	subs	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
 80028dc:	e007      	b.n	80028ee <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 020f 	bic.w	r2, r2, #15
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f2:	f023 0303 	bic.w	r3, r3, #3
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80028fe:	e007      	b.n	8002910 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	f043 0210 	orr.w	r2, r3, #16
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002910:	7ffb      	ldrb	r3, [r7, #31]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3724      	adds	r7, #36	; 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd90      	pop	{r4, r7, pc}
 800291a:	bf00      	nop

0800291c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002930:	d004      	beq.n	800293c <HAL_ADC_Start_DMA+0x20>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a5a      	ldr	r2, [pc, #360]	; (8002aa0 <HAL_ADC_Start_DMA+0x184>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d101      	bne.n	8002940 <HAL_ADC_Start_DMA+0x24>
 800293c:	4b59      	ldr	r3, [pc, #356]	; (8002aa4 <HAL_ADC_Start_DMA+0x188>)
 800293e:	e000      	b.n	8002942 <HAL_ADC_Start_DMA+0x26>
 8002940:	4b59      	ldr	r3, [pc, #356]	; (8002aa8 <HAL_ADC_Start_DMA+0x18c>)
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fd3c 	bl	80023c0 <LL_ADC_GetMultimode>
 8002948:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fe02 	bl	8002558 <LL_ADC_REG_IsConversionOngoing>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 809b 	bne.w	8002a92 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_ADC_Start_DMA+0x4e>
 8002966:	2302      	movs	r3, #2
 8002968:	e096      	b.n	8002a98 <HAL_ADC_Start_DMA+0x17c>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a4d      	ldr	r2, [pc, #308]	; (8002aac <HAL_ADC_Start_DMA+0x190>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d008      	beq.n	800298e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b05      	cmp	r3, #5
 8002986:	d002      	beq.n	800298e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b09      	cmp	r3, #9
 800298c:	d17a      	bne.n	8002a84 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 ff60 	bl	8003854 <ADC_Enable>
 8002994:	4603      	mov	r3, r0
 8002996:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d16d      	bne.n	8002a7a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029a6:	f023 0301 	bic.w	r3, r3, #1
 80029aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a3a      	ldr	r2, [pc, #232]	; (8002aa0 <HAL_ADC_Start_DMA+0x184>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d009      	beq.n	80029d0 <HAL_ADC_Start_DMA+0xb4>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a3b      	ldr	r2, [pc, #236]	; (8002ab0 <HAL_ADC_Start_DMA+0x194>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d002      	beq.n	80029cc <HAL_ADC_Start_DMA+0xb0>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	e003      	b.n	80029d4 <HAL_ADC_Start_DMA+0xb8>
 80029cc:	4b39      	ldr	r3, [pc, #228]	; (8002ab4 <HAL_ADC_Start_DMA+0x198>)
 80029ce:	e001      	b.n	80029d4 <HAL_ADC_Start_DMA+0xb8>
 80029d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	4293      	cmp	r3, r2
 80029da:	d002      	beq.n	80029e2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d105      	bne.n	80029ee <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d006      	beq.n	8002a08 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fe:	f023 0206 	bic.w	r2, r3, #6
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	661a      	str	r2, [r3, #96]	; 0x60
 8002a06:	e002      	b.n	8002a0e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	4a29      	ldr	r2, [pc, #164]	; (8002ab8 <HAL_ADC_Start_DMA+0x19c>)
 8002a14:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	4a28      	ldr	r2, [pc, #160]	; (8002abc <HAL_ADC_Start_DMA+0x1a0>)
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	4a27      	ldr	r2, [pc, #156]	; (8002ac0 <HAL_ADC_Start_DMA+0x1a4>)
 8002a24:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	221c      	movs	r2, #28
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0210 	orr.w	r2, r2, #16
 8002a44:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0201 	orr.w	r2, r2, #1
 8002a54:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	3340      	adds	r3, #64	; 0x40
 8002a60:	4619      	mov	r1, r3
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f001 fe99 	bl	800479c <HAL_DMA_Start_IT>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fd5c 	bl	8002530 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002a78:	e00d      	b.n	8002a96 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002a82:	e008      	b.n	8002a96 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002a90:	e001      	b.n	8002a96 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a92:	2302      	movs	r3, #2
 8002a94:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	50000100 	.word	0x50000100
 8002aa4:	50000300 	.word	0x50000300
 8002aa8:	50000700 	.word	0x50000700
 8002aac:	50000600 	.word	0x50000600
 8002ab0:	50000500 	.word	0x50000500
 8002ab4:	50000400 	.word	0x50000400
 8002ab8:	08003a3f 	.word	0x08003a3f
 8002abc:	08003b17 	.word	0x08003b17
 8002ac0:	08003b33 	.word	0x08003b33

08002ac4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002acc:	2300      	movs	r3, #0
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae8:	d004      	beq.n	8002af4 <HAL_ADC_IRQHandler+0x30>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a8e      	ldr	r2, [pc, #568]	; (8002d28 <HAL_ADC_IRQHandler+0x264>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d101      	bne.n	8002af8 <HAL_ADC_IRQHandler+0x34>
 8002af4:	4b8d      	ldr	r3, [pc, #564]	; (8002d2c <HAL_ADC_IRQHandler+0x268>)
 8002af6:	e000      	b.n	8002afa <HAL_ADC_IRQHandler+0x36>
 8002af8:	4b8d      	ldr	r3, [pc, #564]	; (8002d30 <HAL_ADC_IRQHandler+0x26c>)
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fc60 	bl	80023c0 <LL_ADC_GetMultimode>
 8002b00:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d017      	beq.n	8002b3c <HAL_ADC_IRQHandler+0x78>
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d012      	beq.n	8002b3c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d105      	bne.n	8002b2e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f001 f8f6 	bl	8003d20 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d004      	beq.n	8002b50 <HAL_ADC_IRQHandler+0x8c>
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10b      	bne.n	8002b68 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8094 	beq.w	8002c84 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 808e 	beq.w	8002c84 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fb79 	bl	800227c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d072      	beq.n	8002c76 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a64      	ldr	r2, [pc, #400]	; (8002d28 <HAL_ADC_IRQHandler+0x264>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d009      	beq.n	8002bae <HAL_ADC_IRQHandler+0xea>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a65      	ldr	r2, [pc, #404]	; (8002d34 <HAL_ADC_IRQHandler+0x270>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d002      	beq.n	8002baa <HAL_ADC_IRQHandler+0xe6>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	e003      	b.n	8002bb2 <HAL_ADC_IRQHandler+0xee>
 8002baa:	4b63      	ldr	r3, [pc, #396]	; (8002d38 <HAL_ADC_IRQHandler+0x274>)
 8002bac:	e001      	b.n	8002bb2 <HAL_ADC_IRQHandler+0xee>
 8002bae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d008      	beq.n	8002bcc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b05      	cmp	r3, #5
 8002bc4:	d002      	beq.n	8002bcc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b09      	cmp	r3, #9
 8002bca:	d104      	bne.n	8002bd6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	623b      	str	r3, [r7, #32]
 8002bd4:	e014      	b.n	8002c00 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a53      	ldr	r2, [pc, #332]	; (8002d28 <HAL_ADC_IRQHandler+0x264>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d009      	beq.n	8002bf4 <HAL_ADC_IRQHandler+0x130>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a53      	ldr	r2, [pc, #332]	; (8002d34 <HAL_ADC_IRQHandler+0x270>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d002      	beq.n	8002bf0 <HAL_ADC_IRQHandler+0x12c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	e003      	b.n	8002bf8 <HAL_ADC_IRQHandler+0x134>
 8002bf0:	4b51      	ldr	r3, [pc, #324]	; (8002d38 <HAL_ADC_IRQHandler+0x274>)
 8002bf2:	e001      	b.n	8002bf8 <HAL_ADC_IRQHandler+0x134>
 8002bf4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bf8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d135      	bne.n	8002c76 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d12e      	bne.n	8002c76 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fc9b 	bl	8002558 <LL_ADC_REG_IsConversionOngoing>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d11a      	bne.n	8002c5e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 020c 	bic.w	r2, r2, #12
 8002c36:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d112      	bne.n	8002c76 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c5c:	e00b      	b.n	8002c76 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	f043 0210 	orr.w	r2, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6e:	f043 0201 	orr.w	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f984 	bl	8002f84 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	220c      	movs	r2, #12
 8002c82:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d004      	beq.n	8002c98 <HAL_ADC_IRQHandler+0x1d4>
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10b      	bne.n	8002cb0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80b3 	beq.w	8002e0a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 80ad 	beq.w	8002e0a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d105      	bne.n	8002cc8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fb14 	bl	80022fa <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002cd2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff facf 	bl	800227c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cde:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a10      	ldr	r2, [pc, #64]	; (8002d28 <HAL_ADC_IRQHandler+0x264>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d009      	beq.n	8002cfe <HAL_ADC_IRQHandler+0x23a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a11      	ldr	r2, [pc, #68]	; (8002d34 <HAL_ADC_IRQHandler+0x270>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d002      	beq.n	8002cfa <HAL_ADC_IRQHandler+0x236>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	e003      	b.n	8002d02 <HAL_ADC_IRQHandler+0x23e>
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <HAL_ADC_IRQHandler+0x274>)
 8002cfc:	e001      	b.n	8002d02 <HAL_ADC_IRQHandler+0x23e>
 8002cfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d008      	beq.n	8002d1c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d002      	beq.n	8002d1c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2b07      	cmp	r3, #7
 8002d1a:	d10f      	bne.n	8002d3c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	623b      	str	r3, [r7, #32]
 8002d24:	e01f      	b.n	8002d66 <HAL_ADC_IRQHandler+0x2a2>
 8002d26:	bf00      	nop
 8002d28:	50000100 	.word	0x50000100
 8002d2c:	50000300 	.word	0x50000300
 8002d30:	50000700 	.word	0x50000700
 8002d34:	50000500 	.word	0x50000500
 8002d38:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a8b      	ldr	r2, [pc, #556]	; (8002f70 <HAL_ADC_IRQHandler+0x4ac>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d009      	beq.n	8002d5a <HAL_ADC_IRQHandler+0x296>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a8a      	ldr	r2, [pc, #552]	; (8002f74 <HAL_ADC_IRQHandler+0x4b0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d002      	beq.n	8002d56 <HAL_ADC_IRQHandler+0x292>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	e003      	b.n	8002d5e <HAL_ADC_IRQHandler+0x29a>
 8002d56:	4b88      	ldr	r3, [pc, #544]	; (8002f78 <HAL_ADC_IRQHandler+0x4b4>)
 8002d58:	e001      	b.n	8002d5e <HAL_ADC_IRQHandler+0x29a>
 8002d5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d5e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d047      	beq.n	8002dfc <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <HAL_ADC_IRQHandler+0x2c2>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d03f      	beq.n	8002dfc <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d13a      	bne.n	8002dfc <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	2b40      	cmp	r3, #64	; 0x40
 8002d92:	d133      	bne.n	8002dfc <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d12e      	bne.n	8002dfc <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fbeb 	bl	800257e <LL_ADC_INJ_IsConversionOngoing>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d11a      	bne.n	8002de4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dbc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d112      	bne.n	8002dfc <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dda:	f043 0201 	orr.w	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002de2:	e00b      	b.n	8002dfc <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	f043 0210 	orr.w	r2, r3, #16
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df4:	f043 0201 	orr.w	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 ff67 	bl	8003cd0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2260      	movs	r2, #96	; 0x60
 8002e08:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d011      	beq.n	8002e38 <HAL_ADC_IRQHandler+0x374>
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00c      	beq.n	8002e38 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f8be 	bl	8002fac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d012      	beq.n	8002e68 <HAL_ADC_IRQHandler+0x3a4>
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00d      	beq.n	8002e68 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e50:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 ff4d 	bl	8003cf8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d012      	beq.n	8002e98 <HAL_ADC_IRQHandler+0x3d4>
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00d      	beq.n	8002e98 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 ff3f 	bl	8003d0c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d043      	beq.n	8002f2a <HAL_ADC_IRQHandler+0x466>
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d03e      	beq.n	8002f2a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb8:	e021      	b.n	8002efe <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d015      	beq.n	8002eec <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ec8:	d004      	beq.n	8002ed4 <HAL_ADC_IRQHandler+0x410>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <HAL_ADC_IRQHandler+0x4ac>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d101      	bne.n	8002ed8 <HAL_ADC_IRQHandler+0x414>
 8002ed4:	4b29      	ldr	r3, [pc, #164]	; (8002f7c <HAL_ADC_IRQHandler+0x4b8>)
 8002ed6:	e000      	b.n	8002eda <HAL_ADC_IRQHandler+0x416>
 8002ed8:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <HAL_ADC_IRQHandler+0x4bc>)
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fa7e 	bl	80023dc <LL_ADC_GetMultiDMATransfer>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00b      	beq.n	8002efe <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eea:	e008      	b.n	8002efe <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002efa:	2301      	movs	r3, #1
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d10e      	bne.n	8002f22 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f14:	f043 0202 	orr.w	r2, r3, #2
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f84f 	bl	8002fc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2210      	movs	r2, #16
 8002f28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d018      	beq.n	8002f66 <HAL_ADC_IRQHandler+0x4a2>
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d013      	beq.n	8002f66 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f42:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4e:	f043 0208 	orr.w	r2, r3, #8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f5e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 febf 	bl	8003ce4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002f66:	bf00      	nop
 8002f68:	3728      	adds	r7, #40	; 0x28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	50000100 	.word	0x50000100
 8002f74:	50000500 	.word	0x50000500
 8002f78:	50000400 	.word	0x50000400
 8002f7c:	50000300 	.word	0x50000300
 8002f80:	50000700 	.word	0x50000700

08002f84 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b0b6      	sub	sp, #216	; 0xd8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d102      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x24>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	f000 bc13 	b.w	800381e <HAL_ADC_ConfigChannel+0x84a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff faa7 	bl	8002558 <LL_ADC_REG_IsConversionOngoing>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	f040 83f3 	bne.w	80037f8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6859      	ldr	r1, [r3, #4]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	f7ff f93f 	bl	80022a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fa95 	bl	8002558 <LL_ADC_REG_IsConversionOngoing>
 800302e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff faa1 	bl	800257e <LL_ADC_INJ_IsConversionOngoing>
 800303c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003040:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003044:	2b00      	cmp	r3, #0
 8003046:	f040 81d9 	bne.w	80033fc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800304a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800304e:	2b00      	cmp	r3, #0
 8003050:	f040 81d4 	bne.w	80033fc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800305c:	d10f      	bne.n	800307e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2200      	movs	r2, #0
 8003068:	4619      	mov	r1, r3
 800306a:	f7ff f959 	bl	8002320 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff f8ed 	bl	8002256 <LL_ADC_SetSamplingTimeCommonConfig>
 800307c:	e00e      	b.n	800309c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6819      	ldr	r1, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	461a      	mov	r2, r3
 800308c:	f7ff f948 	bl	8002320 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff f8dd 	bl	8002256 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	08db      	lsrs	r3, r3, #3
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d022      	beq.n	8003104 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	6919      	ldr	r1, [r3, #16]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030ce:	f7ff f837 	bl	8002140 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6919      	ldr	r1, [r3, #16]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	461a      	mov	r2, r3
 80030e0:	f7ff f883 	bl	80021ea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6818      	ldr	r0, [r3, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d102      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x126>
 80030f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030f8:	e000      	b.n	80030fc <HAL_ADC_ConfigChannel+0x128>
 80030fa:	2300      	movs	r3, #0
 80030fc:	461a      	mov	r2, r3
 80030fe:	f7ff f88f 	bl	8002220 <LL_ADC_SetOffsetSaturation>
 8003102:	e17b      	b.n	80033fc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff f83c 	bl	8002188 <LL_ADC_GetOffsetChannel>
 8003110:	4603      	mov	r3, r0
 8003112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10a      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x15c>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff f831 	bl	8002188 <LL_ADC_GetOffsetChannel>
 8003126:	4603      	mov	r3, r0
 8003128:	0e9b      	lsrs	r3, r3, #26
 800312a:	f003 021f 	and.w	r2, r3, #31
 800312e:	e01e      	b.n	800316e <HAL_ADC_ConfigChannel+0x19a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2100      	movs	r1, #0
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff f826 	bl	8002188 <LL_ADC_GetOffsetChannel>
 800313c:	4603      	mov	r3, r0
 800313e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800314e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003152:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003156:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800315e:	2320      	movs	r3, #32
 8003160:	e004      	b.n	800316c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003162:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003176:	2b00      	cmp	r3, #0
 8003178:	d105      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x1b2>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	0e9b      	lsrs	r3, r3, #26
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	e018      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x1e4>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800319a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800319e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80031a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80031aa:	2320      	movs	r3, #32
 80031ac:	e004      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80031ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d106      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2200      	movs	r2, #0
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe fff5 	bl	80021b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2101      	movs	r1, #1
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe ffd9 	bl	8002188 <LL_ADC_GetOffsetChannel>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x222>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2101      	movs	r1, #1
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe ffce 	bl	8002188 <LL_ADC_GetOffsetChannel>
 80031ec:	4603      	mov	r3, r0
 80031ee:	0e9b      	lsrs	r3, r3, #26
 80031f0:	f003 021f 	and.w	r2, r3, #31
 80031f4:	e01e      	b.n	8003234 <HAL_ADC_ConfigChannel+0x260>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2101      	movs	r1, #1
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fe ffc3 	bl	8002188 <LL_ADC_GetOffsetChannel>
 8003202:	4603      	mov	r3, r0
 8003204:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003214:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003218:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800321c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003224:	2320      	movs	r3, #32
 8003226:	e004      	b.n	8003232 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800322c:	fab3 f383 	clz	r3, r3
 8003230:	b2db      	uxtb	r3, r3
 8003232:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323c:	2b00      	cmp	r3, #0
 800323e:	d105      	bne.n	800324c <HAL_ADC_ConfigChannel+0x278>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	0e9b      	lsrs	r3, r3, #26
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	e018      	b.n	800327e <HAL_ADC_ConfigChannel+0x2aa>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003260:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003268:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003270:	2320      	movs	r3, #32
 8003272:	e004      	b.n	800327e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003274:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003278:	fab3 f383 	clz	r3, r3
 800327c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800327e:	429a      	cmp	r2, r3
 8003280:	d106      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2200      	movs	r2, #0
 8003288:	2101      	movs	r1, #1
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe ff92 	bl	80021b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2102      	movs	r1, #2
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe ff76 	bl	8002188 <LL_ADC_GetOffsetChannel>
 800329c:	4603      	mov	r3, r0
 800329e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x2e8>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2102      	movs	r1, #2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fe ff6b 	bl	8002188 <LL_ADC_GetOffsetChannel>
 80032b2:	4603      	mov	r3, r0
 80032b4:	0e9b      	lsrs	r3, r3, #26
 80032b6:	f003 021f 	and.w	r2, r3, #31
 80032ba:	e01e      	b.n	80032fa <HAL_ADC_ConfigChannel+0x326>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2102      	movs	r1, #2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe ff60 	bl	8002188 <LL_ADC_GetOffsetChannel>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80032da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80032e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80032ea:	2320      	movs	r3, #32
 80032ec:	e004      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80032ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003302:	2b00      	cmp	r3, #0
 8003304:	d105      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x33e>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	0e9b      	lsrs	r3, r3, #26
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	e016      	b.n	8003340 <HAL_ADC_ConfigChannel+0x36c>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003324:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003326:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800332a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003332:	2320      	movs	r3, #32
 8003334:	e004      	b.n	8003340 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003336:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800333a:	fab3 f383 	clz	r3, r3
 800333e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003340:	429a      	cmp	r2, r3
 8003342:	d106      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2200      	movs	r2, #0
 800334a:	2102      	movs	r1, #2
 800334c:	4618      	mov	r0, r3
 800334e:	f7fe ff31 	bl	80021b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2103      	movs	r1, #3
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe ff15 	bl	8002188 <LL_ADC_GetOffsetChannel>
 800335e:	4603      	mov	r3, r0
 8003360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10a      	bne.n	800337e <HAL_ADC_ConfigChannel+0x3aa>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2103      	movs	r1, #3
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe ff0a 	bl	8002188 <LL_ADC_GetOffsetChannel>
 8003374:	4603      	mov	r3, r0
 8003376:	0e9b      	lsrs	r3, r3, #26
 8003378:	f003 021f 	and.w	r2, r3, #31
 800337c:	e017      	b.n	80033ae <HAL_ADC_ConfigChannel+0x3da>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2103      	movs	r1, #3
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe feff 	bl	8002188 <LL_ADC_GetOffsetChannel>
 800338a:	4603      	mov	r3, r0
 800338c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003390:	fa93 f3a3 	rbit	r3, r3
 8003394:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003398:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800339a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80033a0:	2320      	movs	r3, #32
 80033a2:	e003      	b.n	80033ac <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80033a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d105      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x3f2>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	0e9b      	lsrs	r3, r3, #26
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	e011      	b.n	80033ea <HAL_ADC_ConfigChannel+0x416>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80033d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80033d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80033de:	2320      	movs	r3, #32
 80033e0:	e003      	b.n	80033ea <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80033e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e4:	fab3 f383 	clz	r3, r3
 80033e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d106      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2200      	movs	r2, #0
 80033f4:	2103      	movs	r1, #3
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe fedc 	bl	80021b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff f86f 	bl	80024e4 <LL_ADC_IsEnabled>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	f040 813d 	bne.w	8003688 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6819      	ldr	r1, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	461a      	mov	r2, r3
 800341c:	f7fe ffac 	bl	8002378 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4aa2      	ldr	r2, [pc, #648]	; (80036b0 <HAL_ADC_ConfigChannel+0x6dc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	f040 812e 	bne.w	8003688 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10b      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x480>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	0e9b      	lsrs	r3, r3, #26
 8003442:	3301      	adds	r3, #1
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	2b09      	cmp	r3, #9
 800344a:	bf94      	ite	ls
 800344c:	2301      	movls	r3, #1
 800344e:	2300      	movhi	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e019      	b.n	8003488 <HAL_ADC_ConfigChannel+0x4b4>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003464:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800346c:	2320      	movs	r3, #32
 800346e:	e003      	b.n	8003478 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003470:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	3301      	adds	r3, #1
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	2b09      	cmp	r3, #9
 8003480:	bf94      	ite	ls
 8003482:	2301      	movls	r3, #1
 8003484:	2300      	movhi	r3, #0
 8003486:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003488:	2b00      	cmp	r3, #0
 800348a:	d079      	beq.n	8003580 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003494:	2b00      	cmp	r3, #0
 8003496:	d107      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x4d4>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	0e9b      	lsrs	r3, r3, #26
 800349e:	3301      	adds	r3, #1
 80034a0:	069b      	lsls	r3, r3, #26
 80034a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034a6:	e015      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x500>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034b0:	fa93 f3a3 	rbit	r3, r3
 80034b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80034ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80034c0:	2320      	movs	r3, #32
 80034c2:	e003      	b.n	80034cc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80034c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	3301      	adds	r3, #1
 80034ce:	069b      	lsls	r3, r3, #26
 80034d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x520>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	0e9b      	lsrs	r3, r3, #26
 80034e6:	3301      	adds	r3, #1
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	2101      	movs	r1, #1
 80034ee:	fa01 f303 	lsl.w	r3, r1, r3
 80034f2:	e017      	b.n	8003524 <HAL_ADC_ConfigChannel+0x550>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003504:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800350c:	2320      	movs	r3, #32
 800350e:	e003      	b.n	8003518 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	3301      	adds	r3, #1
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	2101      	movs	r1, #1
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	ea42 0103 	orr.w	r1, r2, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10a      	bne.n	800354a <HAL_ADC_ConfigChannel+0x576>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	0e9b      	lsrs	r3, r3, #26
 800353a:	3301      	adds	r3, #1
 800353c:	f003 021f 	and.w	r2, r3, #31
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	051b      	lsls	r3, r3, #20
 8003548:	e018      	b.n	800357c <HAL_ADC_ConfigChannel+0x5a8>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003552:	fa93 f3a3 	rbit	r3, r3
 8003556:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800355c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003562:	2320      	movs	r3, #32
 8003564:	e003      	b.n	800356e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003568:	fab3 f383 	clz	r3, r3
 800356c:	b2db      	uxtb	r3, r3
 800356e:	3301      	adds	r3, #1
 8003570:	f003 021f 	and.w	r2, r3, #31
 8003574:	4613      	mov	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4413      	add	r3, r2
 800357a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800357c:	430b      	orrs	r3, r1
 800357e:	e07e      	b.n	800367e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003588:	2b00      	cmp	r3, #0
 800358a:	d107      	bne.n	800359c <HAL_ADC_ConfigChannel+0x5c8>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	0e9b      	lsrs	r3, r3, #26
 8003592:	3301      	adds	r3, #1
 8003594:	069b      	lsls	r3, r3, #26
 8003596:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800359a:	e015      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x5f4>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80035b4:	2320      	movs	r3, #32
 80035b6:	e003      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	069b      	lsls	r3, r3, #26
 80035c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d109      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x614>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	0e9b      	lsrs	r3, r3, #26
 80035da:	3301      	adds	r3, #1
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	2101      	movs	r1, #1
 80035e2:	fa01 f303 	lsl.w	r3, r1, r3
 80035e6:	e017      	b.n	8003618 <HAL_ADC_ConfigChannel+0x644>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	fa93 f3a3 	rbit	r3, r3
 80035f4:	61fb      	str	r3, [r7, #28]
  return result;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003600:	2320      	movs	r3, #32
 8003602:	e003      	b.n	800360c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	3301      	adds	r3, #1
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	2101      	movs	r1, #1
 8003614:	fa01 f303 	lsl.w	r3, r1, r3
 8003618:	ea42 0103 	orr.w	r1, r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10d      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x670>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	0e9b      	lsrs	r3, r3, #26
 800362e:	3301      	adds	r3, #1
 8003630:	f003 021f 	and.w	r2, r3, #31
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	3b1e      	subs	r3, #30
 800363c:	051b      	lsls	r3, r3, #20
 800363e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003642:	e01b      	b.n	800367c <HAL_ADC_ConfigChannel+0x6a8>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	613b      	str	r3, [r7, #16]
  return result;
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800365c:	2320      	movs	r3, #32
 800365e:	e003      	b.n	8003668 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	3301      	adds	r3, #1
 800366a:	f003 021f 	and.w	r2, r3, #31
 800366e:	4613      	mov	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	4413      	add	r3, r2
 8003674:	3b1e      	subs	r3, #30
 8003676:	051b      	lsls	r3, r3, #20
 8003678:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800367c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003682:	4619      	mov	r1, r3
 8003684:	f7fe fe4c 	bl	8002320 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_ADC_ConfigChannel+0x6e0>)
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80be 	beq.w	8003812 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800369e:	d004      	beq.n	80036aa <HAL_ADC_ConfigChannel+0x6d6>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <HAL_ADC_ConfigChannel+0x6e4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d10a      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x6ec>
 80036aa:	4b04      	ldr	r3, [pc, #16]	; (80036bc <HAL_ADC_ConfigChannel+0x6e8>)
 80036ac:	e009      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x6ee>
 80036ae:	bf00      	nop
 80036b0:	407f0000 	.word	0x407f0000
 80036b4:	80080000 	.word	0x80080000
 80036b8:	50000100 	.word	0x50000100
 80036bc:	50000300 	.word	0x50000300
 80036c0:	4b59      	ldr	r3, [pc, #356]	; (8003828 <HAL_ADC_ConfigChannel+0x854>)
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe fd2e 	bl	8002124 <LL_ADC_GetCommonPathInternalCh>
 80036c8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a56      	ldr	r2, [pc, #344]	; (800382c <HAL_ADC_ConfigChannel+0x858>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d004      	beq.n	80036e0 <HAL_ADC_ConfigChannel+0x70c>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a55      	ldr	r2, [pc, #340]	; (8003830 <HAL_ADC_ConfigChannel+0x85c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d13a      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d134      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036f4:	d005      	beq.n	8003702 <HAL_ADC_ConfigChannel+0x72e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a4e      	ldr	r2, [pc, #312]	; (8003834 <HAL_ADC_ConfigChannel+0x860>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	f040 8085 	bne.w	800380c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800370a:	d004      	beq.n	8003716 <HAL_ADC_ConfigChannel+0x742>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a49      	ldr	r2, [pc, #292]	; (8003838 <HAL_ADC_ConfigChannel+0x864>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <HAL_ADC_ConfigChannel+0x746>
 8003716:	4a49      	ldr	r2, [pc, #292]	; (800383c <HAL_ADC_ConfigChannel+0x868>)
 8003718:	e000      	b.n	800371c <HAL_ADC_ConfigChannel+0x748>
 800371a:	4a43      	ldr	r2, [pc, #268]	; (8003828 <HAL_ADC_ConfigChannel+0x854>)
 800371c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003720:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003724:	4619      	mov	r1, r3
 8003726:	4610      	mov	r0, r2
 8003728:	f7fe fce9 	bl	80020fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800372c:	4b44      	ldr	r3, [pc, #272]	; (8003840 <HAL_ADC_ConfigChannel+0x86c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	099b      	lsrs	r3, r3, #6
 8003732:	4a44      	ldr	r2, [pc, #272]	; (8003844 <HAL_ADC_ConfigChannel+0x870>)
 8003734:	fba2 2303 	umull	r2, r3, r2, r3
 8003738:	099b      	lsrs	r3, r3, #6
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	4613      	mov	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003746:	e002      	b.n	800374e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	3b01      	subs	r3, #1
 800374c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f9      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003754:	e05a      	b.n	800380c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a3b      	ldr	r2, [pc, #236]	; (8003848 <HAL_ADC_ConfigChannel+0x874>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d125      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003760:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d11f      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a31      	ldr	r2, [pc, #196]	; (8003838 <HAL_ADC_ConfigChannel+0x864>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d104      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x7ac>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a34      	ldr	r2, [pc, #208]	; (800384c <HAL_ADC_ConfigChannel+0x878>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d047      	beq.n	8003810 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003788:	d004      	beq.n	8003794 <HAL_ADC_ConfigChannel+0x7c0>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a2a      	ldr	r2, [pc, #168]	; (8003838 <HAL_ADC_ConfigChannel+0x864>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d101      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x7c4>
 8003794:	4a29      	ldr	r2, [pc, #164]	; (800383c <HAL_ADC_ConfigChannel+0x868>)
 8003796:	e000      	b.n	800379a <HAL_ADC_ConfigChannel+0x7c6>
 8003798:	4a23      	ldr	r2, [pc, #140]	; (8003828 <HAL_ADC_ConfigChannel+0x854>)
 800379a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800379e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037a2:	4619      	mov	r1, r3
 80037a4:	4610      	mov	r0, r2
 80037a6:	f7fe fcaa 	bl	80020fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037aa:	e031      	b.n	8003810 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a27      	ldr	r2, [pc, #156]	; (8003850 <HAL_ADC_ConfigChannel+0x87c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d12d      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d127      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1c      	ldr	r2, [pc, #112]	; (8003838 <HAL_ADC_ConfigChannel+0x864>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d022      	beq.n	8003812 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037d4:	d004      	beq.n	80037e0 <HAL_ADC_ConfigChannel+0x80c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a17      	ldr	r2, [pc, #92]	; (8003838 <HAL_ADC_ConfigChannel+0x864>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d101      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x810>
 80037e0:	4a16      	ldr	r2, [pc, #88]	; (800383c <HAL_ADC_ConfigChannel+0x868>)
 80037e2:	e000      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x812>
 80037e4:	4a10      	ldr	r2, [pc, #64]	; (8003828 <HAL_ADC_ConfigChannel+0x854>)
 80037e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037ee:	4619      	mov	r1, r3
 80037f0:	4610      	mov	r0, r2
 80037f2:	f7fe fc84 	bl	80020fe <LL_ADC_SetCommonPathInternalCh>
 80037f6:	e00c      	b.n	8003812 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fc:	f043 0220 	orr.w	r2, r3, #32
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800380a:	e002      	b.n	8003812 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800380c:	bf00      	nop
 800380e:	e000      	b.n	8003812 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003810:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800381a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800381e:	4618      	mov	r0, r3
 8003820:	37d8      	adds	r7, #216	; 0xd8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	50000700 	.word	0x50000700
 800382c:	c3210000 	.word	0xc3210000
 8003830:	90c00010 	.word	0x90c00010
 8003834:	50000600 	.word	0x50000600
 8003838:	50000100 	.word	0x50000100
 800383c:	50000300 	.word	0x50000300
 8003840:	2000001c 	.word	0x2000001c
 8003844:	053e2d63 	.word	0x053e2d63
 8003848:	c7520000 	.word	0xc7520000
 800384c:	50000500 	.word	0x50000500
 8003850:	cb840000 	.word	0xcb840000

08003854 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800385c:	2300      	movs	r3, #0
 800385e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f7fe fe3d 	bl	80024e4 <LL_ADC_IsEnabled>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d176      	bne.n	800395e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	4b3c      	ldr	r3, [pc, #240]	; (8003968 <ADC_Enable+0x114>)
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00d      	beq.n	800389a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003882:	f043 0210 	orr.w	r2, r3, #16
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388e:	f043 0201 	orr.w	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e062      	b.n	8003960 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe fdf8 	bl	8002494 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ac:	d004      	beq.n	80038b8 <ADC_Enable+0x64>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2e      	ldr	r2, [pc, #184]	; (800396c <ADC_Enable+0x118>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d101      	bne.n	80038bc <ADC_Enable+0x68>
 80038b8:	4b2d      	ldr	r3, [pc, #180]	; (8003970 <ADC_Enable+0x11c>)
 80038ba:	e000      	b.n	80038be <ADC_Enable+0x6a>
 80038bc:	4b2d      	ldr	r3, [pc, #180]	; (8003974 <ADC_Enable+0x120>)
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe fc30 	bl	8002124 <LL_ADC_GetCommonPathInternalCh>
 80038c4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80038c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d013      	beq.n	80038f6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038ce:	4b2a      	ldr	r3, [pc, #168]	; (8003978 <ADC_Enable+0x124>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	099b      	lsrs	r3, r3, #6
 80038d4:	4a29      	ldr	r2, [pc, #164]	; (800397c <ADC_Enable+0x128>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	099b      	lsrs	r3, r3, #6
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	4613      	mov	r3, r2
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038e8:	e002      	b.n	80038f0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f9      	bne.n	80038ea <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80038f6:	f7fe fbe3 	bl	80020c0 <HAL_GetTick>
 80038fa:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038fc:	e028      	b.n	8003950 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fdee 	bl	80024e4 <LL_ADC_IsEnabled>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d104      	bne.n	8003918 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fdbe 	bl	8002494 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003918:	f7fe fbd2 	bl	80020c0 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d914      	bls.n	8003950 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b01      	cmp	r3, #1
 8003932:	d00d      	beq.n	8003950 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003938:	f043 0210 	orr.w	r2, r3, #16
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003944:	f043 0201 	orr.w	r2, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e007      	b.n	8003960 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b01      	cmp	r3, #1
 800395c:	d1cf      	bne.n	80038fe <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	8000003f 	.word	0x8000003f
 800396c:	50000100 	.word	0x50000100
 8003970:	50000300 	.word	0x50000300
 8003974:	50000700 	.word	0x50000700
 8003978:	2000001c 	.word	0x2000001c
 800397c:	053e2d63 	.word	0x053e2d63

08003980 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7fe fdbc 	bl	800250a <LL_ADC_IsDisableOngoing>
 8003992:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fda3 	bl	80024e4 <LL_ADC_IsEnabled>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d047      	beq.n	8003a34 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d144      	bne.n	8003a34 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 030d 	and.w	r3, r3, #13
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d10c      	bne.n	80039d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fe fd7d 	bl	80024bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2203      	movs	r2, #3
 80039c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039ca:	f7fe fb79 	bl	80020c0 <HAL_GetTick>
 80039ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039d0:	e029      	b.n	8003a26 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d6:	f043 0210 	orr.w	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e2:	f043 0201 	orr.w	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e023      	b.n	8003a36 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039ee:	f7fe fb67 	bl	80020c0 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d914      	bls.n	8003a26 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00d      	beq.n	8003a26 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0e:	f043 0210 	orr.w	r2, r3, #16
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1a:	f043 0201 	orr.w	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e007      	b.n	8003a36 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1dc      	bne.n	80039ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d14b      	bne.n	8003af0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d021      	beq.n	8003ab6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe fc00 	bl	800227c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d032      	beq.n	8003ae8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d12b      	bne.n	8003ae8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d11f      	bne.n	8003ae8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aac:	f043 0201 	orr.w	r2, r3, #1
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ab4:	e018      	b.n	8003ae8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d111      	bne.n	8003ae8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d105      	bne.n	8003ae8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	f043 0201 	orr.w	r2, r3, #1
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f7ff fa4b 	bl	8002f84 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003aee:	e00e      	b.n	8003b0e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f7ff fa5f 	bl	8002fc0 <HAL_ADC_ErrorCallback>
}
 8003b02:	e004      	b.n	8003b0e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	4798      	blx	r3
}
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f7ff fa37 	bl	8002f98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b2a:	bf00      	nop
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b50:	f043 0204 	orr.w	r2, r3, #4
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f7ff fa31 	bl	8002fc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <LL_ADC_IsEnabled>:
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <LL_ADC_IsEnabled+0x18>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <LL_ADC_IsEnabled+0x1a>
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <LL_ADC_StartCalibration>:
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003b9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	609a      	str	r2, [r3, #8]
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_ADC_IsCalibrationOnGoing>:
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bd2:	d101      	bne.n	8003bd8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <LL_ADC_REG_IsConversionOngoing>:
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d101      	bne.n	8003bfe <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_ADCEx_Calibration_Start+0x1c>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e04d      	b.n	8003cc4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff fea5 	bl	8003980 <ADC_Disable>
 8003c36:	4603      	mov	r3, r0
 8003c38:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d136      	bne.n	8003cae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c48:	f023 0302 	bic.w	r3, r3, #2
 8003c4c:	f043 0202 	orr.w	r2, r3, #2
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6839      	ldr	r1, [r7, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff ff96 	bl	8003b8c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c60:	e014      	b.n	8003c8c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	3301      	adds	r3, #1
 8003c66:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4a18      	ldr	r2, [pc, #96]	; (8003ccc <HAL_ADCEx_Calibration_Start+0xc0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d90d      	bls.n	8003c8c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c74:	f023 0312 	bic.w	r3, r3, #18
 8003c78:	f043 0210 	orr.w	r2, r3, #16
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e01b      	b.n	8003cc4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff ff94 	bl	8003bbe <LL_ADC_IsCalibrationOnGoing>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e2      	bne.n	8003c62 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca0:	f023 0303 	bic.w	r3, r3, #3
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cac:	e005      	b.n	8003cba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb2:	f043 0210 	orr.w	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	0004de01 	.word	0x0004de01

08003cd0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003d34:	b590      	push	{r4, r7, lr}
 8003d36:	b0a1      	sub	sp, #132	; 0x84
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e0e7      	b.n	8003f22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d6a:	d102      	bne.n	8003d72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d6c:	4b6f      	ldr	r3, [pc, #444]	; (8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	e009      	b.n	8003d86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a6e      	ldr	r2, [pc, #440]	; (8003f30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d102      	bne.n	8003d82 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003d7c:	4b6d      	ldr	r3, [pc, #436]	; (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d7e:	60bb      	str	r3, [r7, #8]
 8003d80:	e001      	b.n	8003d86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10b      	bne.n	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0be      	b.n	8003f22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff ff1d 	bl	8003be6 <LL_ADC_REG_IsConversionOngoing>
 8003dac:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff ff17 	bl	8003be6 <LL_ADC_REG_IsConversionOngoing>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f040 80a0 	bne.w	8003f00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f040 809c 	bne.w	8003f00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dd0:	d004      	beq.n	8003ddc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a55      	ldr	r2, [pc, #340]	; (8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d101      	bne.n	8003de0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003ddc:	4b56      	ldr	r3, [pc, #344]	; (8003f38 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003dde:	e000      	b.n	8003de2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003de0:	4b56      	ldr	r3, [pc, #344]	; (8003f3c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003de2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d04b      	beq.n	8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dfe:	035b      	lsls	r3, r3, #13
 8003e00:	430b      	orrs	r3, r1
 8003e02:	431a      	orrs	r2, r3
 8003e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e10:	d004      	beq.n	8003e1c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a45      	ldr	r2, [pc, #276]	; (8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d10f      	bne.n	8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003e1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e20:	f7ff fea1 	bl	8003b66 <LL_ADC_IsEnabled>
 8003e24:	4604      	mov	r4, r0
 8003e26:	4841      	ldr	r0, [pc, #260]	; (8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e28:	f7ff fe9d 	bl	8003b66 <LL_ADC_IsEnabled>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	4323      	orrs	r3, r4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	e012      	b.n	8003e62 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003e3c:	483c      	ldr	r0, [pc, #240]	; (8003f30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e3e:	f7ff fe92 	bl	8003b66 <LL_ADC_IsEnabled>
 8003e42:	4604      	mov	r4, r0
 8003e44:	483b      	ldr	r0, [pc, #236]	; (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e46:	f7ff fe8e 	bl	8003b66 <LL_ADC_IsEnabled>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	431c      	orrs	r4, r3
 8003e4e:	483c      	ldr	r0, [pc, #240]	; (8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003e50:	f7ff fe89 	bl	8003b66 <LL_ADC_IsEnabled>
 8003e54:	4603      	mov	r3, r0
 8003e56:	4323      	orrs	r3, r4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d056      	beq.n	8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e6e:	f023 030f 	bic.w	r3, r3, #15
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	6811      	ldr	r1, [r2, #0]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	6892      	ldr	r2, [r2, #8]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e80:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e82:	e047      	b.n	8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e8e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e98:	d004      	beq.n	8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a23      	ldr	r2, [pc, #140]	; (8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d10f      	bne.n	8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003ea4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ea8:	f7ff fe5d 	bl	8003b66 <LL_ADC_IsEnabled>
 8003eac:	4604      	mov	r4, r0
 8003eae:	481f      	ldr	r0, [pc, #124]	; (8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003eb0:	f7ff fe59 	bl	8003b66 <LL_ADC_IsEnabled>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	4323      	orrs	r3, r4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bf0c      	ite	eq
 8003ebc:	2301      	moveq	r3, #1
 8003ebe:	2300      	movne	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	e012      	b.n	8003eea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003ec4:	481a      	ldr	r0, [pc, #104]	; (8003f30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ec6:	f7ff fe4e 	bl	8003b66 <LL_ADC_IsEnabled>
 8003eca:	4604      	mov	r4, r0
 8003ecc:	4819      	ldr	r0, [pc, #100]	; (8003f34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ece:	f7ff fe4a 	bl	8003b66 <LL_ADC_IsEnabled>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	431c      	orrs	r4, r3
 8003ed6:	481a      	ldr	r0, [pc, #104]	; (8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ed8:	f7ff fe45 	bl	8003b66 <LL_ADC_IsEnabled>
 8003edc:	4603      	mov	r3, r0
 8003ede:	4323      	orrs	r3, r4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d012      	beq.n	8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ef6:	f023 030f 	bic.w	r3, r3, #15
 8003efa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003efc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003efe:	e009      	b.n	8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	f043 0220 	orr.w	r2, r3, #32
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003f12:	e000      	b.n	8003f16 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f1e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3784      	adds	r7, #132	; 0x84
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd90      	pop	{r4, r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	50000100 	.word	0x50000100
 8003f30:	50000400 	.word	0x50000400
 8003f34:	50000500 	.word	0x50000500
 8003f38:	50000300 	.word	0x50000300
 8003f3c:	50000700 	.word	0x50000700
 8003f40:	50000600 	.word	0x50000600

08003f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f54:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <__NVIC_SetPriorityGrouping+0x44>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f60:	4013      	ands	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f76:	4a04      	ldr	r2, [pc, #16]	; (8003f88 <__NVIC_SetPriorityGrouping+0x44>)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	60d3      	str	r3, [r2, #12]
}
 8003f7c:	bf00      	nop
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f90:	4b04      	ldr	r3, [pc, #16]	; (8003fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	0a1b      	lsrs	r3, r3, #8
 8003f96:	f003 0307 	and.w	r3, r3, #7
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	e000ed00 	.word	0xe000ed00

08003fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	db0b      	blt.n	8003fd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fba:	79fb      	ldrb	r3, [r7, #7]
 8003fbc:	f003 021f 	and.w	r2, r3, #31
 8003fc0:	4907      	ldr	r1, [pc, #28]	; (8003fe0 <__NVIC_EnableIRQ+0x38>)
 8003fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	2001      	movs	r0, #1
 8003fca:	fa00 f202 	lsl.w	r2, r0, r2
 8003fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	e000e100 	.word	0xe000e100

08003fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	6039      	str	r1, [r7, #0]
 8003fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	db0a      	blt.n	800400e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	490c      	ldr	r1, [pc, #48]	; (8004030 <__NVIC_SetPriority+0x4c>)
 8003ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004002:	0112      	lsls	r2, r2, #4
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	440b      	add	r3, r1
 8004008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800400c:	e00a      	b.n	8004024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	b2da      	uxtb	r2, r3
 8004012:	4908      	ldr	r1, [pc, #32]	; (8004034 <__NVIC_SetPriority+0x50>)
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	3b04      	subs	r3, #4
 800401c:	0112      	lsls	r2, r2, #4
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	440b      	add	r3, r1
 8004022:	761a      	strb	r2, [r3, #24]
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	e000e100 	.word	0xe000e100
 8004034:	e000ed00 	.word	0xe000ed00

08004038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004038:	b480      	push	{r7}
 800403a:	b089      	sub	sp, #36	; 0x24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f1c3 0307 	rsb	r3, r3, #7
 8004052:	2b04      	cmp	r3, #4
 8004054:	bf28      	it	cs
 8004056:	2304      	movcs	r3, #4
 8004058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3304      	adds	r3, #4
 800405e:	2b06      	cmp	r3, #6
 8004060:	d902      	bls.n	8004068 <NVIC_EncodePriority+0x30>
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	3b03      	subs	r3, #3
 8004066:	e000      	b.n	800406a <NVIC_EncodePriority+0x32>
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800406c:	f04f 32ff 	mov.w	r2, #4294967295
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43da      	mvns	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	401a      	ands	r2, r3
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004080:	f04f 31ff 	mov.w	r1, #4294967295
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	fa01 f303 	lsl.w	r3, r1, r3
 800408a:	43d9      	mvns	r1, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004090:	4313      	orrs	r3, r2
         );
}
 8004092:	4618      	mov	r0, r3
 8004094:	3724      	adds	r7, #36	; 0x24
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
	...

080040a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040b0:	d301      	bcc.n	80040b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040b2:	2301      	movs	r3, #1
 80040b4:	e00f      	b.n	80040d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <SysTick_Config+0x40>)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040be:	210f      	movs	r1, #15
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295
 80040c4:	f7ff ff8e 	bl	8003fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <SysTick_Config+0x40>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040ce:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <SysTick_Config+0x40>)
 80040d0:	2207      	movs	r2, #7
 80040d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	e000e010 	.word	0xe000e010

080040e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff ff29 	bl	8003f44 <__NVIC_SetPriorityGrouping>
}
 80040f2:	bf00      	nop
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b086      	sub	sp, #24
 80040fe:	af00      	add	r7, sp, #0
 8004100:	4603      	mov	r3, r0
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004108:	f7ff ff40 	bl	8003f8c <__NVIC_GetPriorityGrouping>
 800410c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68b9      	ldr	r1, [r7, #8]
 8004112:	6978      	ldr	r0, [r7, #20]
 8004114:	f7ff ff90 	bl	8004038 <NVIC_EncodePriority>
 8004118:	4602      	mov	r2, r0
 800411a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800411e:	4611      	mov	r1, r2
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff ff5f 	bl	8003fe4 <__NVIC_SetPriority>
}
 8004126:	bf00      	nop
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	af00      	add	r7, sp, #0
 8004134:	4603      	mov	r3, r0
 8004136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff ff33 	bl	8003fa8 <__NVIC_EnableIRQ>
}
 8004142:	bf00      	nop
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff ffa4 	bl	80040a0 <SysTick_Config>
 8004158:	4603      	mov	r3, r0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e014      	b.n	800419e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	791b      	ldrb	r3, [r3, #4]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d105      	bne.n	800418a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7fd fd55 	bl	8001c34 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2202      	movs	r2, #2
 800418e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e056      	b.n	800426a <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	795b      	ldrb	r3, [r3, #5]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_DAC_Start+0x20>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e050      	b.n	800426a <HAL_DAC_Start+0xc2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2202      	movs	r2, #2
 80041d2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6819      	ldr	r1, [r3, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2201      	movs	r2, #1
 80041e2:	409a      	lsls	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041ec:	4b22      	ldr	r3, [pc, #136]	; (8004278 <HAL_DAC_Start+0xd0>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	099b      	lsrs	r3, r3, #6
 80041f2:	4a22      	ldr	r2, [pc, #136]	; (800427c <HAL_DAC_Start+0xd4>)
 80041f4:	fba2 2303 	umull	r2, r3, r2, r3
 80041f8:	099b      	lsrs	r3, r3, #6
 80041fa:	3301      	adds	r3, #1
 80041fc:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80041fe:	e002      	b.n	8004206 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	3b01      	subs	r3, #1
 8004204:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f9      	bne.n	8004200 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10f      	bne.n	8004232 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800421c:	2b02      	cmp	r3, #2
 800421e:	d11d      	bne.n	800425c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	605a      	str	r2, [r3, #4]
 8004230:	e014      	b.n	800425c <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	2102      	movs	r1, #2
 8004244:	fa01 f303 	lsl.w	r3, r1, r3
 8004248:	429a      	cmp	r2, r3
 800424a:	d107      	bne.n	800425c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0202 	orr.w	r2, r2, #2
 800425a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	2000001c 	.word	0x2000001c
 800427c:	053e2d63 	.word	0x053e2d63

08004280 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e018      	b.n	80042ce <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d105      	bne.n	80042ba <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4413      	add	r3, r2
 80042b4:	3308      	adds	r3, #8
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	e004      	b.n	80042c4 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4413      	add	r3, r2
 80042c0:	3314      	adds	r3, #20
 80042c2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	461a      	mov	r2, r3
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
	...

080042dc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	; 0x28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <HAL_DAC_ConfigChannel+0x1c>
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e19e      	b.n	800463a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	795b      	ldrb	r3, [r3, #5]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_DAC_ConfigChannel+0x2c>
 8004304:	2302      	movs	r3, #2
 8004306:	e198      	b.n	800463a <HAL_DAC_ConfigChannel+0x35e>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2202      	movs	r2, #2
 8004312:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b04      	cmp	r3, #4
 800431a:	d17a      	bne.n	8004412 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800431c:	f7fd fed0 	bl	80020c0 <HAL_GetTick>
 8004320:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d13d      	bne.n	80043a4 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004328:	e018      	b.n	800435c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800432a:	f7fd fec9 	bl	80020c0 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	d911      	bls.n	800435c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f043 0208 	orr.w	r2, r3, #8
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2203      	movs	r2, #3
 8004356:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e16e      	b.n	800463a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1df      	bne.n	800432a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004372:	641a      	str	r2, [r3, #64]	; 0x40
 8004374:	e020      	b.n	80043b8 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004376:	f7fd fea3 	bl	80020c0 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	d90f      	bls.n	80043a4 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438a:	2b00      	cmp	r3, #0
 800438c:	da0a      	bge.n	80043a4 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f043 0208 	orr.w	r2, r3, #8
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2203      	movs	r2, #3
 800439e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e14a      	b.n	800463a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	dbe3      	blt.n	8004376 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043b6:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80043c8:	fa01 f303 	lsl.w	r3, r1, r3
 80043cc:	43db      	mvns	r3, r3
 80043ce:	ea02 0103 	and.w	r1, r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	409a      	lsls	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	21ff      	movs	r1, #255	; 0xff
 80043f4:	fa01 f303 	lsl.w	r3, r1, r3
 80043f8:	43db      	mvns	r3, r3
 80043fa:	ea02 0103 	and.w	r1, r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	409a      	lsls	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d11d      	bne.n	8004456 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	221f      	movs	r2, #31
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43db      	mvns	r3, r3
 8004430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004432:	4013      	ands	r3, r2
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444a:	4313      	orrs	r3, r2
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2207      	movs	r2, #7
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	43db      	mvns	r3, r3
 800446c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446e:	4013      	ands	r3, r2
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d102      	bne.n	8004480 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800447a:	2300      	movs	r3, #0
 800447c:	623b      	str	r3, [r7, #32]
 800447e:	e00f      	b.n	80044a0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d102      	bne.n	800448e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004488:	2301      	movs	r3, #1
 800448a:	623b      	str	r3, [r7, #32]
 800448c:	e008      	b.n	80044a0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d102      	bne.n	800449c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004496:	2301      	movs	r3, #1
 8004498:	623b      	str	r3, [r7, #32]
 800449a:	e001      	b.n	80044a0 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800449c:	2300      	movs	r3, #0
 800449e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	6a3a      	ldr	r2, [r7, #32]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c2:	4013      	ands	r3, r2
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	791b      	ldrb	r3, [r3, #4]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d102      	bne.n	80044d4 <HAL_DAC_ConfigChannel+0x1f8>
 80044ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044d2:	e000      	b.n	80044d6 <HAL_DAC_ConfigChannel+0x1fa>
 80044d4:	2300      	movs	r3, #0
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43db      	mvns	r3, r3
 80044ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ee:	4013      	ands	r3, r2
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	795b      	ldrb	r3, [r3, #5]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d102      	bne.n	8004500 <HAL_DAC_ConfigChannel+0x224>
 80044fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044fe:	e000      	b.n	8004502 <HAL_DAC_ConfigChannel+0x226>
 8004500:	2300      	movs	r3, #0
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d114      	bne.n	8004542 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004518:	f001 faec 	bl	8005af4 <HAL_RCC_GetHCLKFreq>
 800451c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	4a48      	ldr	r2, [pc, #288]	; (8004644 <HAL_DAC_ConfigChannel+0x368>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d904      	bls.n	8004530 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
 800452e:	e00f      	b.n	8004550 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	4a45      	ldr	r2, [pc, #276]	; (8004648 <HAL_DAC_ConfigChannel+0x36c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d90a      	bls.n	800454e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
 8004540:	e006      	b.n	8004550 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004548:	4313      	orrs	r3, r2
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
 800454c:	e000      	b.n	8004550 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800454e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800455e:	4313      	orrs	r3, r2
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004568:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6819      	ldr	r1, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f003 0310 	and.w	r3, r3, #16
 8004576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43da      	mvns	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	400a      	ands	r2, r1
 8004586:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	f640 72fe 	movw	r2, #4094	; 0xffe
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a2:	4013      	ands	r3, r2
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ba:	4313      	orrs	r3, r2
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6819      	ldr	r1, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	22c0      	movs	r2, #192	; 0xc0
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	43da      	mvns	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	400a      	ands	r2, r1
 80045e0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	089b      	lsrs	r3, r3, #2
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	089b      	lsrs	r3, r3, #2
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004610:	fa01 f303 	lsl.w	r3, r1, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	ea02 0103 	and.w	r1, r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	409a      	lsls	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004638:	7ffb      	ldrb	r3, [r7, #31]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3728      	adds	r7, #40	; 0x28
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	09896800 	.word	0x09896800
 8004648:	04c4b400 	.word	0x04c4b400

0800464c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e08d      	b.n	800477a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	4b47      	ldr	r3, [pc, #284]	; (8004784 <HAL_DMA_Init+0x138>)
 8004666:	429a      	cmp	r2, r3
 8004668:	d80f      	bhi.n	800468a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	4b45      	ldr	r3, [pc, #276]	; (8004788 <HAL_DMA_Init+0x13c>)
 8004672:	4413      	add	r3, r2
 8004674:	4a45      	ldr	r2, [pc, #276]	; (800478c <HAL_DMA_Init+0x140>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	009a      	lsls	r2, r3, #2
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a42      	ldr	r2, [pc, #264]	; (8004790 <HAL_DMA_Init+0x144>)
 8004686:	641a      	str	r2, [r3, #64]	; 0x40
 8004688:	e00e      	b.n	80046a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	4b40      	ldr	r3, [pc, #256]	; (8004794 <HAL_DMA_Init+0x148>)
 8004692:	4413      	add	r3, r2
 8004694:	4a3d      	ldr	r2, [pc, #244]	; (800478c <HAL_DMA_Init+0x140>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	091b      	lsrs	r3, r3, #4
 800469c:	009a      	lsls	r2, r3, #2
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a3c      	ldr	r2, [pc, #240]	; (8004798 <HAL_DMA_Init+0x14c>)
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80046cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fa76 	bl	8004bec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004708:	d102      	bne.n	8004710 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004724:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d010      	beq.n	8004750 <HAL_DMA_Init+0x104>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b04      	cmp	r3, #4
 8004734:	d80c      	bhi.n	8004750 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fa96 	bl	8004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800474c:	605a      	str	r2, [r3, #4]
 800474e:	e008      	b.n	8004762 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40020407 	.word	0x40020407
 8004788:	bffdfff8 	.word	0xbffdfff8
 800478c:	cccccccd 	.word	0xcccccccd
 8004790:	40020000 	.word	0x40020000
 8004794:	bffdfbf8 	.word	0xbffdfbf8
 8004798:	40020400 	.word	0x40020400

0800479c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_DMA_Start_IT+0x20>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e066      	b.n	800488a <HAL_DMA_Start_IT+0xee>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d155      	bne.n	800487c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f9bb 	bl	8004b70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d008      	beq.n	8004814 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 020e 	orr.w	r2, r2, #14
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	e00f      	b.n	8004834 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0204 	bic.w	r2, r2, #4
 8004822:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 020a 	orr.w	r2, r2, #10
 8004832:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800484c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004850:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004856:	2b00      	cmp	r3, #0
 8004858:	d007      	beq.n	800486a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004868:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0201 	orr.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e005      	b.n	8004888 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004884:	2302      	movs	r3, #2
 8004886:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004888:	7dfb      	ldrb	r3, [r7, #23]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004892:	b480      	push	{r7}
 8004894:	b085      	sub	sp, #20
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d005      	beq.n	80048b6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2204      	movs	r2, #4
 80048ae:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
 80048b4:	e037      	b.n	8004926 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 020e 	bic.w	r2, r2, #14
 80048c4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048d4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	f003 021f 	and.w	r2, r3, #31
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	2101      	movs	r1, #1
 80048f4:	fa01 f202 	lsl.w	r2, r1, r2
 80048f8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004902:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00c      	beq.n	8004926 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004916:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800491a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004924:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004936:	7bfb      	ldrb	r3, [r7, #15]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d00d      	beq.n	8004978 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2204      	movs	r2, #4
 8004960:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
 8004976:	e047      	b.n	8004a08 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 020e 	bic.w	r2, r2, #14
 8004986:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0201 	bic.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ac:	f003 021f 	and.w	r2, r3, #31
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	2101      	movs	r1, #1
 80049b6:	fa01 f202 	lsl.w	r2, r1, r2
 80049ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00c      	beq.n	80049e8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	4798      	blx	r3
    }
  }
  return status;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2e:	f003 031f 	and.w	r3, r3, #31
 8004a32:	2204      	movs	r2, #4
 8004a34:	409a      	lsls	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d026      	beq.n	8004a8c <HAL_DMA_IRQHandler+0x7a>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d021      	beq.n	8004a8c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d107      	bne.n	8004a66 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0204 	bic.w	r2, r2, #4
 8004a64:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6a:	f003 021f 	and.w	r2, r3, #31
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	2104      	movs	r1, #4
 8004a74:	fa01 f202 	lsl.w	r2, r1, r2
 8004a78:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d071      	beq.n	8004b66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a8a:	e06c      	b.n	8004b66 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a90:	f003 031f 	and.w	r3, r3, #31
 8004a94:	2202      	movs	r2, #2
 8004a96:	409a      	lsls	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d02e      	beq.n	8004afe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d029      	beq.n	8004afe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10b      	bne.n	8004ad0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 020a 	bic.w	r2, r2, #10
 8004ac6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad4:	f003 021f 	and.w	r2, r3, #31
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	2102      	movs	r1, #2
 8004ade:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d038      	beq.n	8004b66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004afc:	e033      	b.n	8004b66 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b02:	f003 031f 	and.w	r3, r3, #31
 8004b06:	2208      	movs	r2, #8
 8004b08:	409a      	lsls	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d02a      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d025      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 020e 	bic.w	r2, r2, #14
 8004b2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b30:	f003 021f 	and.w	r2, r3, #31
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	2101      	movs	r1, #1
 8004b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d004      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
}
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b86:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d004      	beq.n	8004b9a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b98:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9e:	f003 021f 	and.w	r2, r3, #31
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2b10      	cmp	r3, #16
 8004bbc:	d108      	bne.n	8004bd0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004bce:	e007      	b.n	8004be0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	60da      	str	r2, [r3, #12]
}
 8004be0:	bf00      	nop
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4b16      	ldr	r3, [pc, #88]	; (8004c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d802      	bhi.n	8004c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004c00:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	e001      	b.n	8004c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004c06:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c08:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	3b08      	subs	r3, #8
 8004c16:	4a12      	ldr	r2, [pc, #72]	; (8004c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c18:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1c:	091b      	lsrs	r3, r3, #4
 8004c1e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c24:	089b      	lsrs	r3, r3, #2
 8004c26:	009a      	lsls	r2, r3, #2
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a0b      	ldr	r2, [pc, #44]	; (8004c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c36:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	2201      	movs	r2, #1
 8004c40:	409a      	lsls	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c46:	bf00      	nop
 8004c48:	371c      	adds	r7, #28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40020407 	.word	0x40020407
 8004c58:	40020800 	.word	0x40020800
 8004c5c:	40020820 	.word	0x40020820
 8004c60:	cccccccd 	.word	0xcccccccd
 8004c64:	40020880 	.word	0x40020880

08004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	461a      	mov	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a08      	ldr	r2, [pc, #32]	; (8004cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c8a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	f003 031f 	and.w	r3, r3, #31
 8004c94:	2201      	movs	r2, #1
 8004c96:	409a      	lsls	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004c9c:	bf00      	nop
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	1000823f 	.word	0x1000823f
 8004cac:	40020940 	.word	0x40020940

08004cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004cbe:	e15a      	b.n	8004f76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 814c 	beq.w	8004f70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d005      	beq.n	8004cf0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d130      	bne.n	8004d52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	43db      	mvns	r3, r3
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4013      	ands	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d26:	2201      	movs	r2, #1
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4013      	ands	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	091b      	lsrs	r3, r3, #4
 8004d3c:	f003 0201 	and.w	r2, r3, #1
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d017      	beq.n	8004d8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	2203      	movs	r2, #3
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4013      	ands	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d123      	bne.n	8004de2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	08da      	lsrs	r2, r3, #3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3208      	adds	r2, #8
 8004da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	220f      	movs	r2, #15
 8004db2:	fa02 f303 	lsl.w	r3, r2, r3
 8004db6:	43db      	mvns	r3, r3
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	691a      	ldr	r2, [r3, #16]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	08da      	lsrs	r2, r3, #3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3208      	adds	r2, #8
 8004ddc:	6939      	ldr	r1, [r7, #16]
 8004dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	2203      	movs	r2, #3
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	43db      	mvns	r3, r3
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4013      	ands	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f003 0203 	and.w	r2, r3, #3
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 80a6 	beq.w	8004f70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e24:	4b5b      	ldr	r3, [pc, #364]	; (8004f94 <HAL_GPIO_Init+0x2e4>)
 8004e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e28:	4a5a      	ldr	r2, [pc, #360]	; (8004f94 <HAL_GPIO_Init+0x2e4>)
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	6613      	str	r3, [r2, #96]	; 0x60
 8004e30:	4b58      	ldr	r3, [pc, #352]	; (8004f94 <HAL_GPIO_Init+0x2e4>)
 8004e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e3c:	4a56      	ldr	r2, [pc, #344]	; (8004f98 <HAL_GPIO_Init+0x2e8>)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	089b      	lsrs	r3, r3, #2
 8004e42:	3302      	adds	r3, #2
 8004e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	220f      	movs	r2, #15
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e66:	d01f      	beq.n	8004ea8 <HAL_GPIO_Init+0x1f8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a4c      	ldr	r2, [pc, #304]	; (8004f9c <HAL_GPIO_Init+0x2ec>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d019      	beq.n	8004ea4 <HAL_GPIO_Init+0x1f4>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a4b      	ldr	r2, [pc, #300]	; (8004fa0 <HAL_GPIO_Init+0x2f0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d013      	beq.n	8004ea0 <HAL_GPIO_Init+0x1f0>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a4a      	ldr	r2, [pc, #296]	; (8004fa4 <HAL_GPIO_Init+0x2f4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00d      	beq.n	8004e9c <HAL_GPIO_Init+0x1ec>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a49      	ldr	r2, [pc, #292]	; (8004fa8 <HAL_GPIO_Init+0x2f8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d007      	beq.n	8004e98 <HAL_GPIO_Init+0x1e8>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a48      	ldr	r2, [pc, #288]	; (8004fac <HAL_GPIO_Init+0x2fc>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d101      	bne.n	8004e94 <HAL_GPIO_Init+0x1e4>
 8004e90:	2305      	movs	r3, #5
 8004e92:	e00a      	b.n	8004eaa <HAL_GPIO_Init+0x1fa>
 8004e94:	2306      	movs	r3, #6
 8004e96:	e008      	b.n	8004eaa <HAL_GPIO_Init+0x1fa>
 8004e98:	2304      	movs	r3, #4
 8004e9a:	e006      	b.n	8004eaa <HAL_GPIO_Init+0x1fa>
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e004      	b.n	8004eaa <HAL_GPIO_Init+0x1fa>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e002      	b.n	8004eaa <HAL_GPIO_Init+0x1fa>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <HAL_GPIO_Init+0x1fa>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	f002 0203 	and.w	r2, r2, #3
 8004eb0:	0092      	lsls	r2, r2, #2
 8004eb2:	4093      	lsls	r3, r2
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004eba:	4937      	ldr	r1, [pc, #220]	; (8004f98 <HAL_GPIO_Init+0x2e8>)
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	089b      	lsrs	r3, r3, #2
 8004ec0:	3302      	adds	r3, #2
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ec8:	4b39      	ldr	r3, [pc, #228]	; (8004fb0 <HAL_GPIO_Init+0x300>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004eec:	4a30      	ldr	r2, [pc, #192]	; (8004fb0 <HAL_GPIO_Init+0x300>)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ef2:	4b2f      	ldr	r3, [pc, #188]	; (8004fb0 <HAL_GPIO_Init+0x300>)
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	43db      	mvns	r3, r3
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4013      	ands	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f16:	4a26      	ldr	r2, [pc, #152]	; (8004fb0 <HAL_GPIO_Init+0x300>)
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004f1c:	4b24      	ldr	r3, [pc, #144]	; (8004fb0 <HAL_GPIO_Init+0x300>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	43db      	mvns	r3, r3
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f40:	4a1b      	ldr	r2, [pc, #108]	; (8004fb0 <HAL_GPIO_Init+0x300>)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f46:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <HAL_GPIO_Init+0x300>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	4013      	ands	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f6a:	4a11      	ldr	r2, [pc, #68]	; (8004fb0 <HAL_GPIO_Init+0x300>)
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	3301      	adds	r3, #1
 8004f74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f47f ae9d 	bne.w	8004cc0 <HAL_GPIO_Init+0x10>
  }
}
 8004f86:	bf00      	nop
 8004f88:	bf00      	nop
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	40021000 	.word	0x40021000
 8004f98:	40010000 	.word	0x40010000
 8004f9c:	48000400 	.word	0x48000400
 8004fa0:	48000800 	.word	0x48000800
 8004fa4:	48000c00 	.word	0x48000c00
 8004fa8:	48001000 	.word	0x48001000
 8004fac:	48001400 	.word	0x48001400
 8004fb0:	40010400 	.word	0x40010400

08004fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	807b      	strh	r3, [r7, #2]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fc4:	787b      	ldrb	r3, [r7, #1]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fca:	887a      	ldrh	r2, [r7, #2]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fd0:	e002      	b.n	8004fd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fd2:	887a      	ldrh	r2, [r7, #2]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4603      	mov	r3, r0
 8004fec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004fee:	4b08      	ldr	r3, [pc, #32]	; (8005010 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ff0:	695a      	ldr	r2, [r3, #20]
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d006      	beq.n	8005008 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ffa:	4a05      	ldr	r2, [pc, #20]	; (8005010 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	4618      	mov	r0, r3
 8005004:	f000 f806 	bl	8005014 <HAL_GPIO_EXTI_Callback>
  }
}
 8005008:	bf00      	nop
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40010400 	.word	0x40010400

08005014 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d141      	bne.n	80050be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800503a:	4b4b      	ldr	r3, [pc, #300]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005046:	d131      	bne.n	80050ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005048:	4b47      	ldr	r3, [pc, #284]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800504a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800504e:	4a46      	ldr	r2, [pc, #280]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005054:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005058:	4b43      	ldr	r3, [pc, #268]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005060:	4a41      	ldr	r2, [pc, #260]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005066:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005068:	4b40      	ldr	r3, [pc, #256]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2232      	movs	r2, #50	; 0x32
 800506e:	fb02 f303 	mul.w	r3, r2, r3
 8005072:	4a3f      	ldr	r2, [pc, #252]	; (8005170 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005074:	fba2 2303 	umull	r2, r3, r2, r3
 8005078:	0c9b      	lsrs	r3, r3, #18
 800507a:	3301      	adds	r3, #1
 800507c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800507e:	e002      	b.n	8005086 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3b01      	subs	r3, #1
 8005084:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005086:	4b38      	ldr	r3, [pc, #224]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800508e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005092:	d102      	bne.n	800509a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f2      	bne.n	8005080 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800509a:	4b33      	ldr	r3, [pc, #204]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a6:	d158      	bne.n	800515a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e057      	b.n	800515c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050ac:	4b2e      	ldr	r3, [pc, #184]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050b2:	4a2d      	ldr	r2, [pc, #180]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80050bc:	e04d      	b.n	800515a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c4:	d141      	bne.n	800514a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050c6:	4b28      	ldr	r3, [pc, #160]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d2:	d131      	bne.n	8005138 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050d4:	4b24      	ldr	r3, [pc, #144]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050da:	4a23      	ldr	r2, [pc, #140]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050e4:	4b20      	ldr	r3, [pc, #128]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050ec:	4a1e      	ldr	r2, [pc, #120]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050f4:	4b1d      	ldr	r3, [pc, #116]	; (800516c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2232      	movs	r2, #50	; 0x32
 80050fa:	fb02 f303 	mul.w	r3, r2, r3
 80050fe:	4a1c      	ldr	r2, [pc, #112]	; (8005170 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	0c9b      	lsrs	r3, r3, #18
 8005106:	3301      	adds	r3, #1
 8005108:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800510a:	e002      	b.n	8005112 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3b01      	subs	r3, #1
 8005110:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005112:	4b15      	ldr	r3, [pc, #84]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800511a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511e:	d102      	bne.n	8005126 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f2      	bne.n	800510c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005126:	4b10      	ldr	r3, [pc, #64]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800512e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005132:	d112      	bne.n	800515a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e011      	b.n	800515c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800513a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800513e:	4a0a      	ldr	r2, [pc, #40]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005144:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005148:	e007      	b.n	800515a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800514a:	4b07      	ldr	r3, [pc, #28]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005152:	4a05      	ldr	r2, [pc, #20]	; (8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005154:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005158:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	40007000 	.word	0x40007000
 800516c:	2000001c 	.word	0x2000001c
 8005170:	431bde83 	.word	0x431bde83

08005174 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005178:	4b05      	ldr	r3, [pc, #20]	; (8005190 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	4a04      	ldr	r2, [pc, #16]	; (8005190 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800517e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005182:	6093      	str	r3, [r2, #8]
}
 8005184:	bf00      	nop
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40007000 	.word	0x40007000

08005194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e2fe      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d075      	beq.n	800529e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051b2:	4b97      	ldr	r3, [pc, #604]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 030c 	and.w	r3, r3, #12
 80051ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051bc:	4b94      	ldr	r3, [pc, #592]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b0c      	cmp	r3, #12
 80051ca:	d102      	bne.n	80051d2 <HAL_RCC_OscConfig+0x3e>
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d002      	beq.n	80051d8 <HAL_RCC_OscConfig+0x44>
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d10b      	bne.n	80051f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d8:	4b8d      	ldr	r3, [pc, #564]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d05b      	beq.n	800529c <HAL_RCC_OscConfig+0x108>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d157      	bne.n	800529c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e2d9      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f8:	d106      	bne.n	8005208 <HAL_RCC_OscConfig+0x74>
 80051fa:	4b85      	ldr	r3, [pc, #532]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a84      	ldr	r2, [pc, #528]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	e01d      	b.n	8005244 <HAL_RCC_OscConfig+0xb0>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005210:	d10c      	bne.n	800522c <HAL_RCC_OscConfig+0x98>
 8005212:	4b7f      	ldr	r3, [pc, #508]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a7e      	ldr	r2, [pc, #504]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	4b7c      	ldr	r3, [pc, #496]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a7b      	ldr	r2, [pc, #492]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	e00b      	b.n	8005244 <HAL_RCC_OscConfig+0xb0>
 800522c:	4b78      	ldr	r3, [pc, #480]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a77      	ldr	r2, [pc, #476]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005236:	6013      	str	r3, [r2, #0]
 8005238:	4b75      	ldr	r3, [pc, #468]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a74      	ldr	r2, [pc, #464]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 800523e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d013      	beq.n	8005274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524c:	f7fc ff38 	bl	80020c0 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005254:	f7fc ff34 	bl	80020c0 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b64      	cmp	r3, #100	; 0x64
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e29e      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005266:	4b6a      	ldr	r3, [pc, #424]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0xc0>
 8005272:	e014      	b.n	800529e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005274:	f7fc ff24 	bl	80020c0 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800527c:	f7fc ff20 	bl	80020c0 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b64      	cmp	r3, #100	; 0x64
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e28a      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800528e:	4b60      	ldr	r3, [pc, #384]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f0      	bne.n	800527c <HAL_RCC_OscConfig+0xe8>
 800529a:	e000      	b.n	800529e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800529c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d075      	beq.n	8005396 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052aa:	4b59      	ldr	r3, [pc, #356]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 030c 	and.w	r3, r3, #12
 80052b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052b4:	4b56      	ldr	r3, [pc, #344]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b0c      	cmp	r3, #12
 80052c2:	d102      	bne.n	80052ca <HAL_RCC_OscConfig+0x136>
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d002      	beq.n	80052d0 <HAL_RCC_OscConfig+0x13c>
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d11f      	bne.n	8005310 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052d0:	4b4f      	ldr	r3, [pc, #316]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <HAL_RCC_OscConfig+0x154>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e25d      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e8:	4b49      	ldr	r3, [pc, #292]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	061b      	lsls	r3, r3, #24
 80052f6:	4946      	ldr	r1, [pc, #280]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052fc:	4b45      	ldr	r3, [pc, #276]	; (8005414 <HAL_RCC_OscConfig+0x280>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4618      	mov	r0, r3
 8005302:	f7fc fe91 	bl	8002028 <HAL_InitTick>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d043      	beq.n	8005394 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e249      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d023      	beq.n	8005360 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005318:	4b3d      	ldr	r3, [pc, #244]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a3c      	ldr	r2, [pc, #240]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 800531e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005324:	f7fc fecc 	bl	80020c0 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800532c:	f7fc fec8 	bl	80020c0 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e232      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800533e:	4b34      	ldr	r3, [pc, #208]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534a:	4b31      	ldr	r3, [pc, #196]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	061b      	lsls	r3, r3, #24
 8005358:	492d      	ldr	r1, [pc, #180]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 800535a:	4313      	orrs	r3, r2
 800535c:	604b      	str	r3, [r1, #4]
 800535e:	e01a      	b.n	8005396 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005360:	4b2b      	ldr	r3, [pc, #172]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a2a      	ldr	r2, [pc, #168]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800536a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536c:	f7fc fea8 	bl	80020c0 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005374:	f7fc fea4 	bl	80020c0 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e20e      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005386:	4b22      	ldr	r3, [pc, #136]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0x1e0>
 8005392:	e000      	b.n	8005396 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005394:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d041      	beq.n	8005426 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d01c      	beq.n	80053e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053aa:	4b19      	ldr	r3, [pc, #100]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80053ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053b0:	4a17      	ldr	r2, [pc, #92]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ba:	f7fc fe81 	bl	80020c0 <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053c2:	f7fc fe7d 	bl	80020c0 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e1e7      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053d4:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80053d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0ef      	beq.n	80053c2 <HAL_RCC_OscConfig+0x22e>
 80053e2:	e020      	b.n	8005426 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053e4:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80053e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ea:	4a09      	ldr	r2, [pc, #36]	; (8005410 <HAL_RCC_OscConfig+0x27c>)
 80053ec:	f023 0301 	bic.w	r3, r3, #1
 80053f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f4:	f7fc fe64 	bl	80020c0 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053fa:	e00d      	b.n	8005418 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053fc:	f7fc fe60 	bl	80020c0 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d906      	bls.n	8005418 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e1ca      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
 800540e:	bf00      	nop
 8005410:	40021000 	.word	0x40021000
 8005414:	20000020 	.word	0x20000020
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005418:	4b8c      	ldr	r3, [pc, #560]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 800541a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1ea      	bne.n	80053fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 80a6 	beq.w	8005580 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005434:	2300      	movs	r3, #0
 8005436:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005438:	4b84      	ldr	r3, [pc, #528]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 800543a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_RCC_OscConfig+0x2b4>
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <HAL_RCC_OscConfig+0x2b6>
 8005448:	2300      	movs	r3, #0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00d      	beq.n	800546a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800544e:	4b7f      	ldr	r3, [pc, #508]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005452:	4a7e      	ldr	r2, [pc, #504]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005458:	6593      	str	r3, [r2, #88]	; 0x58
 800545a:	4b7c      	ldr	r3, [pc, #496]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 800545c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005466:	2301      	movs	r3, #1
 8005468:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800546a:	4b79      	ldr	r3, [pc, #484]	; (8005650 <HAL_RCC_OscConfig+0x4bc>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005472:	2b00      	cmp	r3, #0
 8005474:	d118      	bne.n	80054a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005476:	4b76      	ldr	r3, [pc, #472]	; (8005650 <HAL_RCC_OscConfig+0x4bc>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a75      	ldr	r2, [pc, #468]	; (8005650 <HAL_RCC_OscConfig+0x4bc>)
 800547c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005482:	f7fc fe1d 	bl	80020c0 <HAL_GetTick>
 8005486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005488:	e008      	b.n	800549c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800548a:	f7fc fe19 	bl	80020c0 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d901      	bls.n	800549c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e183      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800549c:	4b6c      	ldr	r3, [pc, #432]	; (8005650 <HAL_RCC_OscConfig+0x4bc>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0f0      	beq.n	800548a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d108      	bne.n	80054c2 <HAL_RCC_OscConfig+0x32e>
 80054b0:	4b66      	ldr	r3, [pc, #408]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b6:	4a65      	ldr	r2, [pc, #404]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054b8:	f043 0301 	orr.w	r3, r3, #1
 80054bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054c0:	e024      	b.n	800550c <HAL_RCC_OscConfig+0x378>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	2b05      	cmp	r3, #5
 80054c8:	d110      	bne.n	80054ec <HAL_RCC_OscConfig+0x358>
 80054ca:	4b60      	ldr	r3, [pc, #384]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d0:	4a5e      	ldr	r2, [pc, #376]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054d2:	f043 0304 	orr.w	r3, r3, #4
 80054d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054da:	4b5c      	ldr	r3, [pc, #368]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e0:	4a5a      	ldr	r2, [pc, #360]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054ea:	e00f      	b.n	800550c <HAL_RCC_OscConfig+0x378>
 80054ec:	4b57      	ldr	r3, [pc, #348]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f2:	4a56      	ldr	r2, [pc, #344]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054f4:	f023 0301 	bic.w	r3, r3, #1
 80054f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054fc:	4b53      	ldr	r3, [pc, #332]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005502:	4a52      	ldr	r2, [pc, #328]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005504:	f023 0304 	bic.w	r3, r3, #4
 8005508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d016      	beq.n	8005542 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005514:	f7fc fdd4 	bl	80020c0 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800551a:	e00a      	b.n	8005532 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800551c:	f7fc fdd0 	bl	80020c0 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f241 3288 	movw	r2, #5000	; 0x1388
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e138      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005532:	4b46      	ldr	r3, [pc, #280]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0ed      	beq.n	800551c <HAL_RCC_OscConfig+0x388>
 8005540:	e015      	b.n	800556e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005542:	f7fc fdbd 	bl	80020c0 <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005548:	e00a      	b.n	8005560 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554a:	f7fc fdb9 	bl	80020c0 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	f241 3288 	movw	r2, #5000	; 0x1388
 8005558:	4293      	cmp	r3, r2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e121      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005560:	4b3a      	ldr	r3, [pc, #232]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1ed      	bne.n	800554a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800556e:	7ffb      	ldrb	r3, [r7, #31]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d105      	bne.n	8005580 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005574:	4b35      	ldr	r3, [pc, #212]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005578:	4a34      	ldr	r2, [pc, #208]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 800557a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800557e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b00      	cmp	r3, #0
 800558a:	d03c      	beq.n	8005606 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01c      	beq.n	80055ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005594:	4b2d      	ldr	r3, [pc, #180]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800559a:	4a2c      	ldr	r2, [pc, #176]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 800559c:	f043 0301 	orr.w	r3, r3, #1
 80055a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a4:	f7fc fd8c 	bl	80020c0 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055ac:	f7fc fd88 	bl	80020c0 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e0f2      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055be:	4b23      	ldr	r3, [pc, #140]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80055c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0ef      	beq.n	80055ac <HAL_RCC_OscConfig+0x418>
 80055cc:	e01b      	b.n	8005606 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055ce:	4b1f      	ldr	r3, [pc, #124]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80055d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055d4:	4a1d      	ldr	r2, [pc, #116]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80055d6:	f023 0301 	bic.w	r3, r3, #1
 80055da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055de:	f7fc fd6f 	bl	80020c0 <HAL_GetTick>
 80055e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055e4:	e008      	b.n	80055f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055e6:	f7fc fd6b 	bl	80020c0 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e0d5      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055f8:	4b14      	ldr	r3, [pc, #80]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 80055fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1ef      	bne.n	80055e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 80c9 	beq.w	80057a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005610:	4b0e      	ldr	r3, [pc, #56]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 030c 	and.w	r3, r3, #12
 8005618:	2b0c      	cmp	r3, #12
 800561a:	f000 8083 	beq.w	8005724 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d15e      	bne.n	80056e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005626:	4b09      	ldr	r3, [pc, #36]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a08      	ldr	r2, [pc, #32]	; (800564c <HAL_RCC_OscConfig+0x4b8>)
 800562c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005632:	f7fc fd45 	bl	80020c0 <HAL_GetTick>
 8005636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005638:	e00c      	b.n	8005654 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800563a:	f7fc fd41 	bl	80020c0 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d905      	bls.n	8005654 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e0ab      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
 800564c:	40021000 	.word	0x40021000
 8005650:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005654:	4b55      	ldr	r3, [pc, #340]	; (80057ac <HAL_RCC_OscConfig+0x618>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1ec      	bne.n	800563a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005660:	4b52      	ldr	r3, [pc, #328]	; (80057ac <HAL_RCC_OscConfig+0x618>)
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	4b52      	ldr	r3, [pc, #328]	; (80057b0 <HAL_RCC_OscConfig+0x61c>)
 8005666:	4013      	ands	r3, r2
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6a11      	ldr	r1, [r2, #32]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005670:	3a01      	subs	r2, #1
 8005672:	0112      	lsls	r2, r2, #4
 8005674:	4311      	orrs	r1, r2
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800567a:	0212      	lsls	r2, r2, #8
 800567c:	4311      	orrs	r1, r2
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005682:	0852      	lsrs	r2, r2, #1
 8005684:	3a01      	subs	r2, #1
 8005686:	0552      	lsls	r2, r2, #21
 8005688:	4311      	orrs	r1, r2
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800568e:	0852      	lsrs	r2, r2, #1
 8005690:	3a01      	subs	r2, #1
 8005692:	0652      	lsls	r2, r2, #25
 8005694:	4311      	orrs	r1, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800569a:	06d2      	lsls	r2, r2, #27
 800569c:	430a      	orrs	r2, r1
 800569e:	4943      	ldr	r1, [pc, #268]	; (80057ac <HAL_RCC_OscConfig+0x618>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056a4:	4b41      	ldr	r3, [pc, #260]	; (80057ac <HAL_RCC_OscConfig+0x618>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a40      	ldr	r2, [pc, #256]	; (80057ac <HAL_RCC_OscConfig+0x618>)
 80056aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056b0:	4b3e      	ldr	r3, [pc, #248]	; (80057ac <HAL_RCC_OscConfig+0x618>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	4a3d      	ldr	r2, [pc, #244]	; (80057ac <HAL_RCC_OscConfig+0x618>)
 80056b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056bc:	f7fc fd00 	bl	80020c0 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c4:	f7fc fcfc 	bl	80020c0 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e066      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056d6:	4b35      	ldr	r3, [pc, #212]	; (80057ac <HAL_RCC_OscConfig+0x618>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0f0      	beq.n	80056c4 <HAL_RCC_OscConfig+0x530>
 80056e2:	e05e      	b.n	80057a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e4:	4b31      	ldr	r3, [pc, #196]	; (80057ac <HAL_RCC_OscConfig+0x618>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a30      	ldr	r2, [pc, #192]	; (80057ac <HAL_RCC_OscConfig+0x618>)
 80056ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f0:	f7fc fce6 	bl	80020c0 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f8:	f7fc fce2 	bl	80020c0 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e04c      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800570a:	4b28      	ldr	r3, [pc, #160]	; (80057ac <HAL_RCC_OscConfig+0x618>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005716:	4b25      	ldr	r3, [pc, #148]	; (80057ac <HAL_RCC_OscConfig+0x618>)
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	4924      	ldr	r1, [pc, #144]	; (80057ac <HAL_RCC_OscConfig+0x618>)
 800571c:	4b25      	ldr	r3, [pc, #148]	; (80057b4 <HAL_RCC_OscConfig+0x620>)
 800571e:	4013      	ands	r3, r2
 8005720:	60cb      	str	r3, [r1, #12]
 8005722:	e03e      	b.n	80057a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e039      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005730:	4b1e      	ldr	r3, [pc, #120]	; (80057ac <HAL_RCC_OscConfig+0x618>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f003 0203 	and.w	r2, r3, #3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	429a      	cmp	r2, r3
 8005742:	d12c      	bne.n	800579e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	3b01      	subs	r3, #1
 8005750:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005752:	429a      	cmp	r2, r3
 8005754:	d123      	bne.n	800579e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005762:	429a      	cmp	r2, r3
 8005764:	d11b      	bne.n	800579e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005772:	429a      	cmp	r2, r3
 8005774:	d113      	bne.n	800579e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	085b      	lsrs	r3, r3, #1
 8005782:	3b01      	subs	r3, #1
 8005784:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005786:	429a      	cmp	r2, r3
 8005788:	d109      	bne.n	800579e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	3b01      	subs	r3, #1
 8005798:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800579a:	429a      	cmp	r2, r3
 800579c:	d001      	beq.n	80057a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e000      	b.n	80057a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3720      	adds	r7, #32
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40021000 	.word	0x40021000
 80057b0:	019f800c 	.word	0x019f800c
 80057b4:	feeefffc 	.word	0xfeeefffc

080057b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e11e      	b.n	8005a0e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057d0:	4b91      	ldr	r3, [pc, #580]	; (8005a18 <HAL_RCC_ClockConfig+0x260>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 030f 	and.w	r3, r3, #15
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d910      	bls.n	8005800 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057de:	4b8e      	ldr	r3, [pc, #568]	; (8005a18 <HAL_RCC_ClockConfig+0x260>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f023 020f 	bic.w	r2, r3, #15
 80057e6:	498c      	ldr	r1, [pc, #560]	; (8005a18 <HAL_RCC_ClockConfig+0x260>)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ee:	4b8a      	ldr	r3, [pc, #552]	; (8005a18 <HAL_RCC_ClockConfig+0x260>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d001      	beq.n	8005800 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e106      	b.n	8005a0e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d073      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b03      	cmp	r3, #3
 8005812:	d129      	bne.n	8005868 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005814:	4b81      	ldr	r3, [pc, #516]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0f4      	b.n	8005a0e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005824:	f000 f99e 	bl	8005b64 <RCC_GetSysClockFreqFromPLLSource>
 8005828:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4a7c      	ldr	r2, [pc, #496]	; (8005a20 <HAL_RCC_ClockConfig+0x268>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d93f      	bls.n	80058b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005832:	4b7a      	ldr	r3, [pc, #488]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d009      	beq.n	8005852 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005846:	2b00      	cmp	r3, #0
 8005848:	d033      	beq.n	80058b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800584e:	2b00      	cmp	r3, #0
 8005850:	d12f      	bne.n	80058b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005852:	4b72      	ldr	r3, [pc, #456]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800585a:	4a70      	ldr	r2, [pc, #448]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 800585c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005860:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005862:	2380      	movs	r3, #128	; 0x80
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	e024      	b.n	80058b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b02      	cmp	r3, #2
 800586e:	d107      	bne.n	8005880 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005870:	4b6a      	ldr	r3, [pc, #424]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d109      	bne.n	8005890 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e0c6      	b.n	8005a0e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005880:	4b66      	ldr	r3, [pc, #408]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e0be      	b.n	8005a0e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005890:	f000 f8ce 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 8005894:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	4a61      	ldr	r2, [pc, #388]	; (8005a20 <HAL_RCC_ClockConfig+0x268>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d909      	bls.n	80058b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800589e:	4b5f      	ldr	r3, [pc, #380]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058a6:	4a5d      	ldr	r2, [pc, #372]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 80058a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80058ae:	2380      	movs	r3, #128	; 0x80
 80058b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058b2:	4b5a      	ldr	r3, [pc, #360]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f023 0203 	bic.w	r2, r3, #3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	4957      	ldr	r1, [pc, #348]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c4:	f7fc fbfc 	bl	80020c0 <HAL_GetTick>
 80058c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ca:	e00a      	b.n	80058e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058cc:	f7fc fbf8 	bl	80020c0 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058da:	4293      	cmp	r3, r2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e095      	b.n	8005a0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058e2:	4b4e      	ldr	r3, [pc, #312]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 020c 	and.w	r2, r3, #12
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d1eb      	bne.n	80058cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d023      	beq.n	8005948 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800590c:	4b43      	ldr	r3, [pc, #268]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	4a42      	ldr	r2, [pc, #264]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 8005912:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005916:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b00      	cmp	r3, #0
 8005922:	d007      	beq.n	8005934 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005924:	4b3d      	ldr	r3, [pc, #244]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800592c:	4a3b      	ldr	r2, [pc, #236]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 800592e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005932:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005934:	4b39      	ldr	r3, [pc, #228]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	4936      	ldr	r1, [pc, #216]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 8005942:	4313      	orrs	r3, r2
 8005944:	608b      	str	r3, [r1, #8]
 8005946:	e008      	b.n	800595a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b80      	cmp	r3, #128	; 0x80
 800594c:	d105      	bne.n	800595a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800594e:	4b33      	ldr	r3, [pc, #204]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	4a32      	ldr	r2, [pc, #200]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 8005954:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005958:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800595a:	4b2f      	ldr	r3, [pc, #188]	; (8005a18 <HAL_RCC_ClockConfig+0x260>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d21d      	bcs.n	80059a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005968:	4b2b      	ldr	r3, [pc, #172]	; (8005a18 <HAL_RCC_ClockConfig+0x260>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f023 020f 	bic.w	r2, r3, #15
 8005970:	4929      	ldr	r1, [pc, #164]	; (8005a18 <HAL_RCC_ClockConfig+0x260>)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	4313      	orrs	r3, r2
 8005976:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005978:	f7fc fba2 	bl	80020c0 <HAL_GetTick>
 800597c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800597e:	e00a      	b.n	8005996 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005980:	f7fc fb9e 	bl	80020c0 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	f241 3288 	movw	r2, #5000	; 0x1388
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e03b      	b.n	8005a0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005996:	4b20      	ldr	r3, [pc, #128]	; (8005a18 <HAL_RCC_ClockConfig+0x260>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d1ed      	bne.n	8005980 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b0:	4b1a      	ldr	r3, [pc, #104]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	4917      	ldr	r1, [pc, #92]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d009      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059ce:	4b13      	ldr	r3, [pc, #76]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	490f      	ldr	r1, [pc, #60]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059e2:	f000 f825 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 80059e6:	4602      	mov	r2, r0
 80059e8:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <HAL_RCC_ClockConfig+0x264>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	490c      	ldr	r1, [pc, #48]	; (8005a24 <HAL_RCC_ClockConfig+0x26c>)
 80059f4:	5ccb      	ldrb	r3, [r1, r3]
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	fa22 f303 	lsr.w	r3, r2, r3
 80059fe:	4a0a      	ldr	r2, [pc, #40]	; (8005a28 <HAL_RCC_ClockConfig+0x270>)
 8005a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a02:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <HAL_RCC_ClockConfig+0x274>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fc fb0e 	bl	8002028 <HAL_InitTick>
 8005a0c:	4603      	mov	r3, r0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40022000 	.word	0x40022000
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	04c4b400 	.word	0x04c4b400
 8005a24:	08009b40 	.word	0x08009b40
 8005a28:	2000001c 	.word	0x2000001c
 8005a2c:	20000020 	.word	0x20000020

08005a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a36:	4b2c      	ldr	r3, [pc, #176]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 030c 	and.w	r3, r3, #12
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d102      	bne.n	8005a48 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a42:	4b2a      	ldr	r3, [pc, #168]	; (8005aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	e047      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a48:	4b27      	ldr	r3, [pc, #156]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f003 030c 	and.w	r3, r3, #12
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d102      	bne.n	8005a5a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a54:	4b26      	ldr	r3, [pc, #152]	; (8005af0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a56:	613b      	str	r3, [r7, #16]
 8005a58:	e03e      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a5a:	4b23      	ldr	r3, [pc, #140]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 030c 	and.w	r3, r3, #12
 8005a62:	2b0c      	cmp	r3, #12
 8005a64:	d136      	bne.n	8005ad4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a66:	4b20      	ldr	r3, [pc, #128]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a70:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	091b      	lsrs	r3, r3, #4
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	d10c      	bne.n	8005a9e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a84:	4a1a      	ldr	r2, [pc, #104]	; (8005af0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8c:	4a16      	ldr	r2, [pc, #88]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a8e:	68d2      	ldr	r2, [r2, #12]
 8005a90:	0a12      	lsrs	r2, r2, #8
 8005a92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a96:	fb02 f303 	mul.w	r3, r2, r3
 8005a9a:	617b      	str	r3, [r7, #20]
      break;
 8005a9c:	e00c      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a9e:	4a13      	ldr	r2, [pc, #76]	; (8005aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa6:	4a10      	ldr	r2, [pc, #64]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aa8:	68d2      	ldr	r2, [r2, #12]
 8005aaa:	0a12      	lsrs	r2, r2, #8
 8005aac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ab0:	fb02 f303 	mul.w	r3, r2, r3
 8005ab4:	617b      	str	r3, [r7, #20]
      break;
 8005ab6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	0e5b      	lsrs	r3, r3, #25
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	e001      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ad8:	693b      	ldr	r3, [r7, #16]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	371c      	adds	r7, #28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	00f42400 	.word	0x00f42400
 8005af0:	016e3600 	.word	0x016e3600

08005af4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005af8:	4b03      	ldr	r3, [pc, #12]	; (8005b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8005afa:	681b      	ldr	r3, [r3, #0]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	2000001c 	.word	0x2000001c

08005b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b10:	f7ff fff0 	bl	8005af4 <HAL_RCC_GetHCLKFreq>
 8005b14:	4602      	mov	r2, r0
 8005b16:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	0a1b      	lsrs	r3, r3, #8
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	4904      	ldr	r1, [pc, #16]	; (8005b34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b22:	5ccb      	ldrb	r3, [r1, r3]
 8005b24:	f003 031f 	and.w	r3, r3, #31
 8005b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40021000 	.word	0x40021000
 8005b34:	08009b50 	.word	0x08009b50

08005b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b3c:	f7ff ffda 	bl	8005af4 <HAL_RCC_GetHCLKFreq>
 8005b40:	4602      	mov	r2, r0
 8005b42:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	0adb      	lsrs	r3, r3, #11
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	4904      	ldr	r1, [pc, #16]	; (8005b60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b4e:	5ccb      	ldrb	r3, [r1, r3]
 8005b50:	f003 031f 	and.w	r3, r3, #31
 8005b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	08009b50 	.word	0x08009b50

08005b64 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b6a:	4b1e      	ldr	r3, [pc, #120]	; (8005be4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b74:	4b1b      	ldr	r3, [pc, #108]	; (8005be4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	091b      	lsrs	r3, r3, #4
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	3301      	adds	r3, #1
 8005b80:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d10c      	bne.n	8005ba2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b88:	4a17      	ldr	r2, [pc, #92]	; (8005be8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b90:	4a14      	ldr	r2, [pc, #80]	; (8005be4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b92:	68d2      	ldr	r2, [r2, #12]
 8005b94:	0a12      	lsrs	r2, r2, #8
 8005b96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b9a:	fb02 f303 	mul.w	r3, r2, r3
 8005b9e:	617b      	str	r3, [r7, #20]
    break;
 8005ba0:	e00c      	b.n	8005bbc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ba2:	4a12      	ldr	r2, [pc, #72]	; (8005bec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005baa:	4a0e      	ldr	r2, [pc, #56]	; (8005be4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bac:	68d2      	ldr	r2, [r2, #12]
 8005bae:	0a12      	lsrs	r2, r2, #8
 8005bb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bb4:	fb02 f303 	mul.w	r3, r2, r3
 8005bb8:	617b      	str	r3, [r7, #20]
    break;
 8005bba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bbc:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	0e5b      	lsrs	r3, r3, #25
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005bd6:	687b      	ldr	r3, [r7, #4]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	40021000 	.word	0x40021000
 8005be8:	016e3600 	.word	0x016e3600
 8005bec:	00f42400 	.word	0x00f42400

08005bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 8098 	beq.w	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c12:	4b43      	ldr	r3, [pc, #268]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10d      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c1e:	4b40      	ldr	r3, [pc, #256]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c22:	4a3f      	ldr	r2, [pc, #252]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c28:	6593      	str	r3, [r2, #88]	; 0x58
 8005c2a:	4b3d      	ldr	r3, [pc, #244]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c32:	60bb      	str	r3, [r7, #8]
 8005c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c36:	2301      	movs	r3, #1
 8005c38:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c3a:	4b3a      	ldr	r3, [pc, #232]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a39      	ldr	r2, [pc, #228]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c46:	f7fc fa3b 	bl	80020c0 <HAL_GetTick>
 8005c4a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c4c:	e009      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c4e:	f7fc fa37 	bl	80020c0 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d902      	bls.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	74fb      	strb	r3, [r7, #19]
        break;
 8005c60:	e005      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c62:	4b30      	ldr	r3, [pc, #192]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0ef      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c6e:	7cfb      	ldrb	r3, [r7, #19]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d159      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c74:	4b2a      	ldr	r3, [pc, #168]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c7e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d01e      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d019      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c90:	4b23      	ldr	r3, [pc, #140]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c9c:	4b20      	ldr	r3, [pc, #128]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca2:	4a1f      	ldr	r2, [pc, #124]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cac:	4b1c      	ldr	r3, [pc, #112]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb2:	4a1b      	ldr	r2, [pc, #108]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cbc:	4a18      	ldr	r2, [pc, #96]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d016      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cce:	f7fc f9f7 	bl	80020c0 <HAL_GetTick>
 8005cd2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cd4:	e00b      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd6:	f7fc f9f3 	bl	80020c0 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d902      	bls.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	74fb      	strb	r3, [r7, #19]
            break;
 8005cec:	e006      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cee:	4b0c      	ldr	r3, [pc, #48]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0ec      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005cfc:	7cfb      	ldrb	r3, [r7, #19]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10b      	bne.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d02:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d10:	4903      	ldr	r1, [pc, #12]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d18:	e008      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d1a:	7cfb      	ldrb	r3, [r7, #19]
 8005d1c:	74bb      	strb	r3, [r7, #18]
 8005d1e:	e005      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d20:	40021000 	.word	0x40021000
 8005d24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d28:	7cfb      	ldrb	r3, [r7, #19]
 8005d2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d2c:	7c7b      	ldrb	r3, [r7, #17]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d105      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d32:	4ba7      	ldr	r3, [pc, #668]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d36:	4aa6      	ldr	r2, [pc, #664]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d4a:	4ba1      	ldr	r3, [pc, #644]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d50:	f023 0203 	bic.w	r2, r3, #3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	499d      	ldr	r1, [pc, #628]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d6c:	4b98      	ldr	r3, [pc, #608]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d72:	f023 020c 	bic.w	r2, r3, #12
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	4995      	ldr	r1, [pc, #596]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d8e:	4b90      	ldr	r3, [pc, #576]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	498c      	ldr	r1, [pc, #560]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0308 	and.w	r3, r3, #8
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005db0:	4b87      	ldr	r3, [pc, #540]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	4984      	ldr	r1, [pc, #528]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dd2:	4b7f      	ldr	r3, [pc, #508]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	497b      	ldr	r1, [pc, #492]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0320 	and.w	r3, r3, #32
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00a      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005df4:	4b76      	ldr	r3, [pc, #472]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	4973      	ldr	r1, [pc, #460]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e16:	4b6e      	ldr	r3, [pc, #440]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	496a      	ldr	r1, [pc, #424]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00a      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e38:	4b65      	ldr	r3, [pc, #404]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	4962      	ldr	r1, [pc, #392]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e5a:	4b5d      	ldr	r3, [pc, #372]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	4959      	ldr	r1, [pc, #356]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00a      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e7c:	4b54      	ldr	r3, [pc, #336]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e82:	f023 0203 	bic.w	r2, r3, #3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8a:	4951      	ldr	r1, [pc, #324]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e9e:	4b4c      	ldr	r3, [pc, #304]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	4948      	ldr	r1, [pc, #288]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d015      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ec0:	4b43      	ldr	r3, [pc, #268]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ece:	4940      	ldr	r1, [pc, #256]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ede:	d105      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ee0:	4b3b      	ldr	r3, [pc, #236]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	4a3a      	ldr	r2, [pc, #232]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d015      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ef8:	4b35      	ldr	r3, [pc, #212]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f06:	4932      	ldr	r1, [pc, #200]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f16:	d105      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f18:	4b2d      	ldr	r3, [pc, #180]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	4a2c      	ldr	r2, [pc, #176]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f22:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d015      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f30:	4b27      	ldr	r3, [pc, #156]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3e:	4924      	ldr	r1, [pc, #144]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f4e:	d105      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f50:	4b1f      	ldr	r3, [pc, #124]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	4a1e      	ldr	r2, [pc, #120]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f5a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d015      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f68:	4b19      	ldr	r3, [pc, #100]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f76:	4916      	ldr	r1, [pc, #88]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f86:	d105      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f88:	4b11      	ldr	r3, [pc, #68]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	4a10      	ldr	r2, [pc, #64]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f92:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d019      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	4908      	ldr	r1, [pc, #32]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fbe:	d109      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fc0:	4b03      	ldr	r3, [pc, #12]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	4a02      	ldr	r2, [pc, #8]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fca:	60d3      	str	r3, [r2, #12]
 8005fcc:	e002      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005fce:	bf00      	nop
 8005fd0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d015      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005fe0:	4b29      	ldr	r3, [pc, #164]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fee:	4926      	ldr	r1, [pc, #152]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ffe:	d105      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006000:	4b21      	ldr	r3, [pc, #132]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4a20      	ldr	r2, [pc, #128]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800600a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d015      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006018:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800601a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006026:	4918      	ldr	r1, [pc, #96]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006028:	4313      	orrs	r3, r2
 800602a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006036:	d105      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006038:	4b13      	ldr	r3, [pc, #76]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	4a12      	ldr	r2, [pc, #72]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800603e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006042:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d015      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006050:	4b0d      	ldr	r3, [pc, #52]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006052:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006056:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800605e:	490a      	ldr	r1, [pc, #40]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006060:	4313      	orrs	r3, r2
 8006062:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800606a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800606e:	d105      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006070:	4b05      	ldr	r3, [pc, #20]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	4a04      	ldr	r2, [pc, #16]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006076:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800607a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800607c:	7cbb      	ldrb	r3, [r7, #18]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	40021000 	.word	0x40021000

0800608c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e049      	b.n	8006132 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fb fe9c 	bl	8001df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f000 fe34 	bl	8006d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b01      	cmp	r3, #1
 800614e:	d001      	beq.n	8006154 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e04c      	b.n	80061ee <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a26      	ldr	r2, [pc, #152]	; (80061fc <HAL_TIM_Base_Start+0xc0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d022      	beq.n	80061ac <HAL_TIM_Base_Start+0x70>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616e:	d01d      	beq.n	80061ac <HAL_TIM_Base_Start+0x70>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a22      	ldr	r2, [pc, #136]	; (8006200 <HAL_TIM_Base_Start+0xc4>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d018      	beq.n	80061ac <HAL_TIM_Base_Start+0x70>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a21      	ldr	r2, [pc, #132]	; (8006204 <HAL_TIM_Base_Start+0xc8>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d013      	beq.n	80061ac <HAL_TIM_Base_Start+0x70>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a1f      	ldr	r2, [pc, #124]	; (8006208 <HAL_TIM_Base_Start+0xcc>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00e      	beq.n	80061ac <HAL_TIM_Base_Start+0x70>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a1e      	ldr	r2, [pc, #120]	; (800620c <HAL_TIM_Base_Start+0xd0>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d009      	beq.n	80061ac <HAL_TIM_Base_Start+0x70>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a1c      	ldr	r2, [pc, #112]	; (8006210 <HAL_TIM_Base_Start+0xd4>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d004      	beq.n	80061ac <HAL_TIM_Base_Start+0x70>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a1b      	ldr	r2, [pc, #108]	; (8006214 <HAL_TIM_Base_Start+0xd8>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d115      	bne.n	80061d8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	4b19      	ldr	r3, [pc, #100]	; (8006218 <HAL_TIM_Base_Start+0xdc>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b06      	cmp	r3, #6
 80061bc:	d015      	beq.n	80061ea <HAL_TIM_Base_Start+0xae>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c4:	d011      	beq.n	80061ea <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f042 0201 	orr.w	r2, r2, #1
 80061d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d6:	e008      	b.n	80061ea <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0201 	orr.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	e000      	b.n	80061ec <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40012c00 	.word	0x40012c00
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800
 8006208:	40000c00 	.word	0x40000c00
 800620c:	40013400 	.word	0x40013400
 8006210:	40014000 	.word	0x40014000
 8006214:	40015000 	.word	0x40015000
 8006218:	00010007 	.word	0x00010007

0800621c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b01      	cmp	r3, #1
 800622e:	d001      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e054      	b.n	80062de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0201 	orr.w	r2, r2, #1
 800624a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a26      	ldr	r2, [pc, #152]	; (80062ec <HAL_TIM_Base_Start_IT+0xd0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d022      	beq.n	800629c <HAL_TIM_Base_Start_IT+0x80>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625e:	d01d      	beq.n	800629c <HAL_TIM_Base_Start_IT+0x80>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a22      	ldr	r2, [pc, #136]	; (80062f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d018      	beq.n	800629c <HAL_TIM_Base_Start_IT+0x80>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a21      	ldr	r2, [pc, #132]	; (80062f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d013      	beq.n	800629c <HAL_TIM_Base_Start_IT+0x80>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a1f      	ldr	r2, [pc, #124]	; (80062f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00e      	beq.n	800629c <HAL_TIM_Base_Start_IT+0x80>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a1e      	ldr	r2, [pc, #120]	; (80062fc <HAL_TIM_Base_Start_IT+0xe0>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d009      	beq.n	800629c <HAL_TIM_Base_Start_IT+0x80>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a1c      	ldr	r2, [pc, #112]	; (8006300 <HAL_TIM_Base_Start_IT+0xe4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d004      	beq.n	800629c <HAL_TIM_Base_Start_IT+0x80>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1b      	ldr	r2, [pc, #108]	; (8006304 <HAL_TIM_Base_Start_IT+0xe8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d115      	bne.n	80062c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	4b19      	ldr	r3, [pc, #100]	; (8006308 <HAL_TIM_Base_Start_IT+0xec>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b06      	cmp	r3, #6
 80062ac:	d015      	beq.n	80062da <HAL_TIM_Base_Start_IT+0xbe>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b4:	d011      	beq.n	80062da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0201 	orr.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c6:	e008      	b.n	80062da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0201 	orr.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	e000      	b.n	80062dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40012c00 	.word	0x40012c00
 80062f0:	40000400 	.word	0x40000400
 80062f4:	40000800 	.word	0x40000800
 80062f8:	40000c00 	.word	0x40000c00
 80062fc:	40013400 	.word	0x40013400
 8006300:	40014000 	.word	0x40014000
 8006304:	40015000 	.word	0x40015000
 8006308:	00010007 	.word	0x00010007

0800630c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e049      	b.n	80063b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d106      	bne.n	8006338 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f841 	bl	80063ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3304      	adds	r3, #4
 8006348:	4619      	mov	r1, r3
 800634a:	4610      	mov	r0, r2
 800634c:	f000 fcf4 	bl	8006d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063c2:	bf00      	nop
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
	...

080063d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d109      	bne.n	80063f4 <HAL_TIM_PWM_Start+0x24>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	bf14      	ite	ne
 80063ec:	2301      	movne	r3, #1
 80063ee:	2300      	moveq	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	e03c      	b.n	800646e <HAL_TIM_PWM_Start+0x9e>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d109      	bne.n	800640e <HAL_TIM_PWM_Start+0x3e>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b01      	cmp	r3, #1
 8006404:	bf14      	ite	ne
 8006406:	2301      	movne	r3, #1
 8006408:	2300      	moveq	r3, #0
 800640a:	b2db      	uxtb	r3, r3
 800640c:	e02f      	b.n	800646e <HAL_TIM_PWM_Start+0x9e>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d109      	bne.n	8006428 <HAL_TIM_PWM_Start+0x58>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	bf14      	ite	ne
 8006420:	2301      	movne	r3, #1
 8006422:	2300      	moveq	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	e022      	b.n	800646e <HAL_TIM_PWM_Start+0x9e>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b0c      	cmp	r3, #12
 800642c:	d109      	bne.n	8006442 <HAL_TIM_PWM_Start+0x72>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b01      	cmp	r3, #1
 8006438:	bf14      	ite	ne
 800643a:	2301      	movne	r3, #1
 800643c:	2300      	moveq	r3, #0
 800643e:	b2db      	uxtb	r3, r3
 8006440:	e015      	b.n	800646e <HAL_TIM_PWM_Start+0x9e>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b10      	cmp	r3, #16
 8006446:	d109      	bne.n	800645c <HAL_TIM_PWM_Start+0x8c>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b01      	cmp	r3, #1
 8006452:	bf14      	ite	ne
 8006454:	2301      	movne	r3, #1
 8006456:	2300      	moveq	r3, #0
 8006458:	b2db      	uxtb	r3, r3
 800645a:	e008      	b.n	800646e <HAL_TIM_PWM_Start+0x9e>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b01      	cmp	r3, #1
 8006466:	bf14      	ite	ne
 8006468:	2301      	movne	r3, #1
 800646a:	2300      	moveq	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e0a6      	b.n	80065c4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d104      	bne.n	8006486 <HAL_TIM_PWM_Start+0xb6>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006484:	e023      	b.n	80064ce <HAL_TIM_PWM_Start+0xfe>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b04      	cmp	r3, #4
 800648a:	d104      	bne.n	8006496 <HAL_TIM_PWM_Start+0xc6>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006494:	e01b      	b.n	80064ce <HAL_TIM_PWM_Start+0xfe>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b08      	cmp	r3, #8
 800649a:	d104      	bne.n	80064a6 <HAL_TIM_PWM_Start+0xd6>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064a4:	e013      	b.n	80064ce <HAL_TIM_PWM_Start+0xfe>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b0c      	cmp	r3, #12
 80064aa:	d104      	bne.n	80064b6 <HAL_TIM_PWM_Start+0xe6>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064b4:	e00b      	b.n	80064ce <HAL_TIM_PWM_Start+0xfe>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b10      	cmp	r3, #16
 80064ba:	d104      	bne.n	80064c6 <HAL_TIM_PWM_Start+0xf6>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064c4:	e003      	b.n	80064ce <HAL_TIM_PWM_Start+0xfe>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2202      	movs	r2, #2
 80064ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2201      	movs	r2, #1
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f001 f8a8 	bl	800762c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a3a      	ldr	r2, [pc, #232]	; (80065cc <HAL_TIM_PWM_Start+0x1fc>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d018      	beq.n	8006518 <HAL_TIM_PWM_Start+0x148>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a39      	ldr	r2, [pc, #228]	; (80065d0 <HAL_TIM_PWM_Start+0x200>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d013      	beq.n	8006518 <HAL_TIM_PWM_Start+0x148>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a37      	ldr	r2, [pc, #220]	; (80065d4 <HAL_TIM_PWM_Start+0x204>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d00e      	beq.n	8006518 <HAL_TIM_PWM_Start+0x148>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a36      	ldr	r2, [pc, #216]	; (80065d8 <HAL_TIM_PWM_Start+0x208>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d009      	beq.n	8006518 <HAL_TIM_PWM_Start+0x148>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a34      	ldr	r2, [pc, #208]	; (80065dc <HAL_TIM_PWM_Start+0x20c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d004      	beq.n	8006518 <HAL_TIM_PWM_Start+0x148>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a33      	ldr	r2, [pc, #204]	; (80065e0 <HAL_TIM_PWM_Start+0x210>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d101      	bne.n	800651c <HAL_TIM_PWM_Start+0x14c>
 8006518:	2301      	movs	r3, #1
 800651a:	e000      	b.n	800651e <HAL_TIM_PWM_Start+0x14e>
 800651c:	2300      	movs	r3, #0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d007      	beq.n	8006532 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006530:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a25      	ldr	r2, [pc, #148]	; (80065cc <HAL_TIM_PWM_Start+0x1fc>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d022      	beq.n	8006582 <HAL_TIM_PWM_Start+0x1b2>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006544:	d01d      	beq.n	8006582 <HAL_TIM_PWM_Start+0x1b2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a26      	ldr	r2, [pc, #152]	; (80065e4 <HAL_TIM_PWM_Start+0x214>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d018      	beq.n	8006582 <HAL_TIM_PWM_Start+0x1b2>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a24      	ldr	r2, [pc, #144]	; (80065e8 <HAL_TIM_PWM_Start+0x218>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d013      	beq.n	8006582 <HAL_TIM_PWM_Start+0x1b2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a23      	ldr	r2, [pc, #140]	; (80065ec <HAL_TIM_PWM_Start+0x21c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00e      	beq.n	8006582 <HAL_TIM_PWM_Start+0x1b2>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a19      	ldr	r2, [pc, #100]	; (80065d0 <HAL_TIM_PWM_Start+0x200>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d009      	beq.n	8006582 <HAL_TIM_PWM_Start+0x1b2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a18      	ldr	r2, [pc, #96]	; (80065d4 <HAL_TIM_PWM_Start+0x204>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d004      	beq.n	8006582 <HAL_TIM_PWM_Start+0x1b2>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a18      	ldr	r2, [pc, #96]	; (80065e0 <HAL_TIM_PWM_Start+0x210>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d115      	bne.n	80065ae <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	4b19      	ldr	r3, [pc, #100]	; (80065f0 <HAL_TIM_PWM_Start+0x220>)
 800658a:	4013      	ands	r3, r2
 800658c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2b06      	cmp	r3, #6
 8006592:	d015      	beq.n	80065c0 <HAL_TIM_PWM_Start+0x1f0>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800659a:	d011      	beq.n	80065c0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0201 	orr.w	r2, r2, #1
 80065aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ac:	e008      	b.n	80065c0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f042 0201 	orr.w	r2, r2, #1
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	e000      	b.n	80065c2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40013400 	.word	0x40013400
 80065d4:	40014000 	.word	0x40014000
 80065d8:	40014400 	.word	0x40014400
 80065dc:	40014800 	.word	0x40014800
 80065e0:	40015000 	.word	0x40015000
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800
 80065ec:	40000c00 	.word	0x40000c00
 80065f0:	00010007 	.word	0x00010007

080065f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d020      	beq.n	8006658 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01b      	beq.n	8006658 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0202 	mvn.w	r2, #2
 8006628:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fb5c 	bl	8006cfc <HAL_TIM_IC_CaptureCallback>
 8006644:	e005      	b.n	8006652 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fb4e 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fb5f 	bl	8006d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	2b00      	cmp	r3, #0
 8006660:	d020      	beq.n	80066a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01b      	beq.n	80066a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f06f 0204 	mvn.w	r2, #4
 8006674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2202      	movs	r2, #2
 800667a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fb36 	bl	8006cfc <HAL_TIM_IC_CaptureCallback>
 8006690:	e005      	b.n	800669e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fb28 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fb39 	bl	8006d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d020      	beq.n	80066f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f003 0308 	and.w	r3, r3, #8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01b      	beq.n	80066f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f06f 0208 	mvn.w	r2, #8
 80066c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2204      	movs	r2, #4
 80066c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fb10 	bl	8006cfc <HAL_TIM_IC_CaptureCallback>
 80066dc:	e005      	b.n	80066ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fb02 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fb13 	bl	8006d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f003 0310 	and.w	r3, r3, #16
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d020      	beq.n	800673c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f003 0310 	and.w	r3, r3, #16
 8006700:	2b00      	cmp	r3, #0
 8006702:	d01b      	beq.n	800673c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f06f 0210 	mvn.w	r2, #16
 800670c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2208      	movs	r2, #8
 8006712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 faea 	bl	8006cfc <HAL_TIM_IC_CaptureCallback>
 8006728:	e005      	b.n	8006736 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fadc 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 faed 	bl	8006d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00c      	beq.n	8006760 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d007      	beq.n	8006760 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f06f 0201 	mvn.w	r2, #1
 8006758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fb f99c 	bl	8001a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006766:	2b00      	cmp	r3, #0
 8006768:	d104      	bne.n	8006774 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00c      	beq.n	800678e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800677a:	2b00      	cmp	r3, #0
 800677c:	d007      	beq.n	800678e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 f815 	bl	80077b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00c      	beq.n	80067b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d007      	beq.n	80067b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 f80d 	bl	80077cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00c      	beq.n	80067d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d007      	beq.n	80067d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 faa7 	bl	8006d24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00c      	beq.n	80067fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d007      	beq.n	80067fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f06f 0220 	mvn.w	r2, #32
 80067f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 ffd5 	bl	80077a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00c      	beq.n	800681e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d007      	beq.n	800681e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 ffe1 	bl	80077e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00c      	beq.n	8006842 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d007      	beq.n	8006842 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800683a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 ffd9 	bl	80077f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00c      	beq.n	8006866 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d007      	beq.n	8006866 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800685e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 ffd1 	bl	8007808 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00c      	beq.n	800688a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 ffc9 	bl	800781c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d101      	bne.n	80068b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068ae:	2302      	movs	r3, #2
 80068b0:	e0ff      	b.n	8006ab2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b14      	cmp	r3, #20
 80068be:	f200 80f0 	bhi.w	8006aa2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80068c2:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c8:	0800691d 	.word	0x0800691d
 80068cc:	08006aa3 	.word	0x08006aa3
 80068d0:	08006aa3 	.word	0x08006aa3
 80068d4:	08006aa3 	.word	0x08006aa3
 80068d8:	0800695d 	.word	0x0800695d
 80068dc:	08006aa3 	.word	0x08006aa3
 80068e0:	08006aa3 	.word	0x08006aa3
 80068e4:	08006aa3 	.word	0x08006aa3
 80068e8:	0800699f 	.word	0x0800699f
 80068ec:	08006aa3 	.word	0x08006aa3
 80068f0:	08006aa3 	.word	0x08006aa3
 80068f4:	08006aa3 	.word	0x08006aa3
 80068f8:	080069df 	.word	0x080069df
 80068fc:	08006aa3 	.word	0x08006aa3
 8006900:	08006aa3 	.word	0x08006aa3
 8006904:	08006aa3 	.word	0x08006aa3
 8006908:	08006a21 	.word	0x08006a21
 800690c:	08006aa3 	.word	0x08006aa3
 8006910:	08006aa3 	.word	0x08006aa3
 8006914:	08006aa3 	.word	0x08006aa3
 8006918:	08006a61 	.word	0x08006a61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fabc 	bl	8006ea0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0208 	orr.w	r2, r2, #8
 8006936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0204 	bic.w	r2, r2, #4
 8006946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6999      	ldr	r1, [r3, #24]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	691a      	ldr	r2, [r3, #16]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	619a      	str	r2, [r3, #24]
      break;
 800695a:	e0a5      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fb36 	bl	8006fd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699a      	ldr	r2, [r3, #24]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6999      	ldr	r1, [r3, #24]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	021a      	lsls	r2, r3, #8
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	619a      	str	r2, [r3, #24]
      break;
 800699c:	e084      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68b9      	ldr	r1, [r7, #8]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 fba9 	bl	80070fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69da      	ldr	r2, [r3, #28]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f042 0208 	orr.w	r2, r2, #8
 80069b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69da      	ldr	r2, [r3, #28]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 0204 	bic.w	r2, r2, #4
 80069c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69d9      	ldr	r1, [r3, #28]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	61da      	str	r2, [r3, #28]
      break;
 80069dc:	e064      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fc1b 	bl	8007220 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69da      	ldr	r2, [r3, #28]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69d9      	ldr	r1, [r3, #28]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	021a      	lsls	r2, r3, #8
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	61da      	str	r2, [r3, #28]
      break;
 8006a1e:	e043      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 fc8e 	bl	8007348 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0208 	orr.w	r2, r2, #8
 8006a3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0204 	bic.w	r2, r2, #4
 8006a4a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	691a      	ldr	r2, [r3, #16]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006a5e:	e023      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68b9      	ldr	r1, [r7, #8]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 fcd8 	bl	800741c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a8a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	021a      	lsls	r2, r3, #8
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006aa0:	e002      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8006aa6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop

08006abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d101      	bne.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1c>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e0f6      	b.n	8006cc6 <HAL_TIM_ConfigClockSource+0x20a>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006af6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a6f      	ldr	r2, [pc, #444]	; (8006cd0 <HAL_TIM_ConfigClockSource+0x214>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	f000 80c1 	beq.w	8006c9a <HAL_TIM_ConfigClockSource+0x1de>
 8006b18:	4a6d      	ldr	r2, [pc, #436]	; (8006cd0 <HAL_TIM_ConfigClockSource+0x214>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	f200 80c6 	bhi.w	8006cac <HAL_TIM_ConfigClockSource+0x1f0>
 8006b20:	4a6c      	ldr	r2, [pc, #432]	; (8006cd4 <HAL_TIM_ConfigClockSource+0x218>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	f000 80b9 	beq.w	8006c9a <HAL_TIM_ConfigClockSource+0x1de>
 8006b28:	4a6a      	ldr	r2, [pc, #424]	; (8006cd4 <HAL_TIM_ConfigClockSource+0x218>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	f200 80be 	bhi.w	8006cac <HAL_TIM_ConfigClockSource+0x1f0>
 8006b30:	4a69      	ldr	r2, [pc, #420]	; (8006cd8 <HAL_TIM_ConfigClockSource+0x21c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	f000 80b1 	beq.w	8006c9a <HAL_TIM_ConfigClockSource+0x1de>
 8006b38:	4a67      	ldr	r2, [pc, #412]	; (8006cd8 <HAL_TIM_ConfigClockSource+0x21c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	f200 80b6 	bhi.w	8006cac <HAL_TIM_ConfigClockSource+0x1f0>
 8006b40:	4a66      	ldr	r2, [pc, #408]	; (8006cdc <HAL_TIM_ConfigClockSource+0x220>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	f000 80a9 	beq.w	8006c9a <HAL_TIM_ConfigClockSource+0x1de>
 8006b48:	4a64      	ldr	r2, [pc, #400]	; (8006cdc <HAL_TIM_ConfigClockSource+0x220>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	f200 80ae 	bhi.w	8006cac <HAL_TIM_ConfigClockSource+0x1f0>
 8006b50:	4a63      	ldr	r2, [pc, #396]	; (8006ce0 <HAL_TIM_ConfigClockSource+0x224>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	f000 80a1 	beq.w	8006c9a <HAL_TIM_ConfigClockSource+0x1de>
 8006b58:	4a61      	ldr	r2, [pc, #388]	; (8006ce0 <HAL_TIM_ConfigClockSource+0x224>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	f200 80a6 	bhi.w	8006cac <HAL_TIM_ConfigClockSource+0x1f0>
 8006b60:	4a60      	ldr	r2, [pc, #384]	; (8006ce4 <HAL_TIM_ConfigClockSource+0x228>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	f000 8099 	beq.w	8006c9a <HAL_TIM_ConfigClockSource+0x1de>
 8006b68:	4a5e      	ldr	r2, [pc, #376]	; (8006ce4 <HAL_TIM_ConfigClockSource+0x228>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	f200 809e 	bhi.w	8006cac <HAL_TIM_ConfigClockSource+0x1f0>
 8006b70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b74:	f000 8091 	beq.w	8006c9a <HAL_TIM_ConfigClockSource+0x1de>
 8006b78:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b7c:	f200 8096 	bhi.w	8006cac <HAL_TIM_ConfigClockSource+0x1f0>
 8006b80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b84:	f000 8089 	beq.w	8006c9a <HAL_TIM_ConfigClockSource+0x1de>
 8006b88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b8c:	f200 808e 	bhi.w	8006cac <HAL_TIM_ConfigClockSource+0x1f0>
 8006b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b94:	d03e      	beq.n	8006c14 <HAL_TIM_ConfigClockSource+0x158>
 8006b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b9a:	f200 8087 	bhi.w	8006cac <HAL_TIM_ConfigClockSource+0x1f0>
 8006b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ba2:	f000 8086 	beq.w	8006cb2 <HAL_TIM_ConfigClockSource+0x1f6>
 8006ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006baa:	d87f      	bhi.n	8006cac <HAL_TIM_ConfigClockSource+0x1f0>
 8006bac:	2b70      	cmp	r3, #112	; 0x70
 8006bae:	d01a      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0x12a>
 8006bb0:	2b70      	cmp	r3, #112	; 0x70
 8006bb2:	d87b      	bhi.n	8006cac <HAL_TIM_ConfigClockSource+0x1f0>
 8006bb4:	2b60      	cmp	r3, #96	; 0x60
 8006bb6:	d050      	beq.n	8006c5a <HAL_TIM_ConfigClockSource+0x19e>
 8006bb8:	2b60      	cmp	r3, #96	; 0x60
 8006bba:	d877      	bhi.n	8006cac <HAL_TIM_ConfigClockSource+0x1f0>
 8006bbc:	2b50      	cmp	r3, #80	; 0x50
 8006bbe:	d03c      	beq.n	8006c3a <HAL_TIM_ConfigClockSource+0x17e>
 8006bc0:	2b50      	cmp	r3, #80	; 0x50
 8006bc2:	d873      	bhi.n	8006cac <HAL_TIM_ConfigClockSource+0x1f0>
 8006bc4:	2b40      	cmp	r3, #64	; 0x40
 8006bc6:	d058      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0x1be>
 8006bc8:	2b40      	cmp	r3, #64	; 0x40
 8006bca:	d86f      	bhi.n	8006cac <HAL_TIM_ConfigClockSource+0x1f0>
 8006bcc:	2b30      	cmp	r3, #48	; 0x30
 8006bce:	d064      	beq.n	8006c9a <HAL_TIM_ConfigClockSource+0x1de>
 8006bd0:	2b30      	cmp	r3, #48	; 0x30
 8006bd2:	d86b      	bhi.n	8006cac <HAL_TIM_ConfigClockSource+0x1f0>
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	d060      	beq.n	8006c9a <HAL_TIM_ConfigClockSource+0x1de>
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d867      	bhi.n	8006cac <HAL_TIM_ConfigClockSource+0x1f0>
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d05c      	beq.n	8006c9a <HAL_TIM_ConfigClockSource+0x1de>
 8006be0:	2b10      	cmp	r3, #16
 8006be2:	d05a      	beq.n	8006c9a <HAL_TIM_ConfigClockSource+0x1de>
 8006be4:	e062      	b.n	8006cac <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bf6:	f000 fcf9 	bl	80075ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	609a      	str	r2, [r3, #8]
      break;
 8006c12:	e04f      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c24:	f000 fce2 	bl	80075ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689a      	ldr	r2, [r3, #8]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c36:	609a      	str	r2, [r3, #8]
      break;
 8006c38:	e03c      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c46:	461a      	mov	r2, r3
 8006c48:	f000 fc54 	bl	80074f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2150      	movs	r1, #80	; 0x50
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fcad 	bl	80075b2 <TIM_ITRx_SetConfig>
      break;
 8006c58:	e02c      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c66:	461a      	mov	r2, r3
 8006c68:	f000 fc73 	bl	8007552 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2160      	movs	r1, #96	; 0x60
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 fc9d 	bl	80075b2 <TIM_ITRx_SetConfig>
      break;
 8006c78:	e01c      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c86:	461a      	mov	r2, r3
 8006c88:	f000 fc34 	bl	80074f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2140      	movs	r1, #64	; 0x40
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fc8d 	bl	80075b2 <TIM_ITRx_SetConfig>
      break;
 8006c98:	e00c      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	f000 fc84 	bl	80075b2 <TIM_ITRx_SetConfig>
      break;
 8006caa:	e003      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb0:	e000      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006cb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	00100070 	.word	0x00100070
 8006cd4:	00100060 	.word	0x00100060
 8006cd8:	00100050 	.word	0x00100050
 8006cdc:	00100040 	.word	0x00100040
 8006ce0:	00100030 	.word	0x00100030
 8006ce4:	00100020 	.word	0x00100020

08006ce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a4c      	ldr	r2, [pc, #304]	; (8006e7c <TIM_Base_SetConfig+0x144>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d017      	beq.n	8006d80 <TIM_Base_SetConfig+0x48>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d56:	d013      	beq.n	8006d80 <TIM_Base_SetConfig+0x48>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a49      	ldr	r2, [pc, #292]	; (8006e80 <TIM_Base_SetConfig+0x148>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00f      	beq.n	8006d80 <TIM_Base_SetConfig+0x48>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a48      	ldr	r2, [pc, #288]	; (8006e84 <TIM_Base_SetConfig+0x14c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00b      	beq.n	8006d80 <TIM_Base_SetConfig+0x48>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a47      	ldr	r2, [pc, #284]	; (8006e88 <TIM_Base_SetConfig+0x150>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d007      	beq.n	8006d80 <TIM_Base_SetConfig+0x48>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a46      	ldr	r2, [pc, #280]	; (8006e8c <TIM_Base_SetConfig+0x154>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d003      	beq.n	8006d80 <TIM_Base_SetConfig+0x48>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a45      	ldr	r2, [pc, #276]	; (8006e90 <TIM_Base_SetConfig+0x158>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d108      	bne.n	8006d92 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a39      	ldr	r2, [pc, #228]	; (8006e7c <TIM_Base_SetConfig+0x144>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d023      	beq.n	8006de2 <TIM_Base_SetConfig+0xaa>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da0:	d01f      	beq.n	8006de2 <TIM_Base_SetConfig+0xaa>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a36      	ldr	r2, [pc, #216]	; (8006e80 <TIM_Base_SetConfig+0x148>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d01b      	beq.n	8006de2 <TIM_Base_SetConfig+0xaa>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a35      	ldr	r2, [pc, #212]	; (8006e84 <TIM_Base_SetConfig+0x14c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d017      	beq.n	8006de2 <TIM_Base_SetConfig+0xaa>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a34      	ldr	r2, [pc, #208]	; (8006e88 <TIM_Base_SetConfig+0x150>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d013      	beq.n	8006de2 <TIM_Base_SetConfig+0xaa>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a33      	ldr	r2, [pc, #204]	; (8006e8c <TIM_Base_SetConfig+0x154>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d00f      	beq.n	8006de2 <TIM_Base_SetConfig+0xaa>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a33      	ldr	r2, [pc, #204]	; (8006e94 <TIM_Base_SetConfig+0x15c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00b      	beq.n	8006de2 <TIM_Base_SetConfig+0xaa>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a32      	ldr	r2, [pc, #200]	; (8006e98 <TIM_Base_SetConfig+0x160>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d007      	beq.n	8006de2 <TIM_Base_SetConfig+0xaa>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a31      	ldr	r2, [pc, #196]	; (8006e9c <TIM_Base_SetConfig+0x164>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d003      	beq.n	8006de2 <TIM_Base_SetConfig+0xaa>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a2c      	ldr	r2, [pc, #176]	; (8006e90 <TIM_Base_SetConfig+0x158>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d108      	bne.n	8006df4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	689a      	ldr	r2, [r3, #8]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a18      	ldr	r2, [pc, #96]	; (8006e7c <TIM_Base_SetConfig+0x144>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d013      	beq.n	8006e48 <TIM_Base_SetConfig+0x110>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a1a      	ldr	r2, [pc, #104]	; (8006e8c <TIM_Base_SetConfig+0x154>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00f      	beq.n	8006e48 <TIM_Base_SetConfig+0x110>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a1a      	ldr	r2, [pc, #104]	; (8006e94 <TIM_Base_SetConfig+0x15c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00b      	beq.n	8006e48 <TIM_Base_SetConfig+0x110>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a19      	ldr	r2, [pc, #100]	; (8006e98 <TIM_Base_SetConfig+0x160>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d007      	beq.n	8006e48 <TIM_Base_SetConfig+0x110>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a18      	ldr	r2, [pc, #96]	; (8006e9c <TIM_Base_SetConfig+0x164>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d003      	beq.n	8006e48 <TIM_Base_SetConfig+0x110>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a13      	ldr	r2, [pc, #76]	; (8006e90 <TIM_Base_SetConfig+0x158>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d103      	bne.n	8006e50 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	691a      	ldr	r2, [r3, #16]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d105      	bne.n	8006e6e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f023 0201 	bic.w	r2, r3, #1
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	611a      	str	r2, [r3, #16]
  }
}
 8006e6e:	bf00      	nop
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	40012c00 	.word	0x40012c00
 8006e80:	40000400 	.word	0x40000400
 8006e84:	40000800 	.word	0x40000800
 8006e88:	40000c00 	.word	0x40000c00
 8006e8c:	40013400 	.word	0x40013400
 8006e90:	40015000 	.word	0x40015000
 8006e94:	40014000 	.word	0x40014000
 8006e98:	40014400 	.word	0x40014400
 8006e9c:	40014800 	.word	0x40014800

08006ea0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	f023 0201 	bic.w	r2, r3, #1
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0303 	bic.w	r3, r3, #3
 8006eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f023 0302 	bic.w	r3, r3, #2
 8006eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a30      	ldr	r2, [pc, #192]	; (8006fbc <TIM_OC1_SetConfig+0x11c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d013      	beq.n	8006f28 <TIM_OC1_SetConfig+0x88>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a2f      	ldr	r2, [pc, #188]	; (8006fc0 <TIM_OC1_SetConfig+0x120>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00f      	beq.n	8006f28 <TIM_OC1_SetConfig+0x88>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a2e      	ldr	r2, [pc, #184]	; (8006fc4 <TIM_OC1_SetConfig+0x124>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00b      	beq.n	8006f28 <TIM_OC1_SetConfig+0x88>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a2d      	ldr	r2, [pc, #180]	; (8006fc8 <TIM_OC1_SetConfig+0x128>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d007      	beq.n	8006f28 <TIM_OC1_SetConfig+0x88>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a2c      	ldr	r2, [pc, #176]	; (8006fcc <TIM_OC1_SetConfig+0x12c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d003      	beq.n	8006f28 <TIM_OC1_SetConfig+0x88>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a2b      	ldr	r2, [pc, #172]	; (8006fd0 <TIM_OC1_SetConfig+0x130>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d10c      	bne.n	8006f42 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f023 0308 	bic.w	r3, r3, #8
 8006f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f023 0304 	bic.w	r3, r3, #4
 8006f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a1d      	ldr	r2, [pc, #116]	; (8006fbc <TIM_OC1_SetConfig+0x11c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <TIM_OC1_SetConfig+0xd2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a1c      	ldr	r2, [pc, #112]	; (8006fc0 <TIM_OC1_SetConfig+0x120>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00f      	beq.n	8006f72 <TIM_OC1_SetConfig+0xd2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a1b      	ldr	r2, [pc, #108]	; (8006fc4 <TIM_OC1_SetConfig+0x124>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00b      	beq.n	8006f72 <TIM_OC1_SetConfig+0xd2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a1a      	ldr	r2, [pc, #104]	; (8006fc8 <TIM_OC1_SetConfig+0x128>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d007      	beq.n	8006f72 <TIM_OC1_SetConfig+0xd2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a19      	ldr	r2, [pc, #100]	; (8006fcc <TIM_OC1_SetConfig+0x12c>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d003      	beq.n	8006f72 <TIM_OC1_SetConfig+0xd2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a18      	ldr	r2, [pc, #96]	; (8006fd0 <TIM_OC1_SetConfig+0x130>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d111      	bne.n	8006f96 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	621a      	str	r2, [r3, #32]
}
 8006fb0:	bf00      	nop
 8006fb2:	371c      	adds	r7, #28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	40012c00 	.word	0x40012c00
 8006fc0:	40013400 	.word	0x40013400
 8006fc4:	40014000 	.word	0x40014000
 8006fc8:	40014400 	.word	0x40014400
 8006fcc:	40014800 	.word	0x40014800
 8006fd0:	40015000 	.word	0x40015000

08006fd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	f023 0210 	bic.w	r2, r3, #16
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800700e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	021b      	lsls	r3, r3, #8
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4313      	orrs	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f023 0320 	bic.w	r3, r3, #32
 8007022:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	4313      	orrs	r3, r2
 800702e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a2c      	ldr	r2, [pc, #176]	; (80070e4 <TIM_OC2_SetConfig+0x110>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d007      	beq.n	8007048 <TIM_OC2_SetConfig+0x74>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a2b      	ldr	r2, [pc, #172]	; (80070e8 <TIM_OC2_SetConfig+0x114>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d003      	beq.n	8007048 <TIM_OC2_SetConfig+0x74>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a2a      	ldr	r2, [pc, #168]	; (80070ec <TIM_OC2_SetConfig+0x118>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d10d      	bne.n	8007064 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800704e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	011b      	lsls	r3, r3, #4
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	4313      	orrs	r3, r2
 800705a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007062:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a1f      	ldr	r2, [pc, #124]	; (80070e4 <TIM_OC2_SetConfig+0x110>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d013      	beq.n	8007094 <TIM_OC2_SetConfig+0xc0>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a1e      	ldr	r2, [pc, #120]	; (80070e8 <TIM_OC2_SetConfig+0x114>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00f      	beq.n	8007094 <TIM_OC2_SetConfig+0xc0>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a1e      	ldr	r2, [pc, #120]	; (80070f0 <TIM_OC2_SetConfig+0x11c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00b      	beq.n	8007094 <TIM_OC2_SetConfig+0xc0>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a1d      	ldr	r2, [pc, #116]	; (80070f4 <TIM_OC2_SetConfig+0x120>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d007      	beq.n	8007094 <TIM_OC2_SetConfig+0xc0>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a1c      	ldr	r2, [pc, #112]	; (80070f8 <TIM_OC2_SetConfig+0x124>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d003      	beq.n	8007094 <TIM_OC2_SetConfig+0xc0>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a17      	ldr	r2, [pc, #92]	; (80070ec <TIM_OC2_SetConfig+0x118>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d113      	bne.n	80070bc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800709a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	621a      	str	r2, [r3, #32]
}
 80070d6:	bf00      	nop
 80070d8:	371c      	adds	r7, #28
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	40012c00 	.word	0x40012c00
 80070e8:	40013400 	.word	0x40013400
 80070ec:	40015000 	.word	0x40015000
 80070f0:	40014000 	.word	0x40014000
 80070f4:	40014400 	.word	0x40014400
 80070f8:	40014800 	.word	0x40014800

080070fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800712a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0303 	bic.w	r3, r3, #3
 8007136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	021b      	lsls	r3, r3, #8
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a2b      	ldr	r2, [pc, #172]	; (8007208 <TIM_OC3_SetConfig+0x10c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d007      	beq.n	800716e <TIM_OC3_SetConfig+0x72>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a2a      	ldr	r2, [pc, #168]	; (800720c <TIM_OC3_SetConfig+0x110>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d003      	beq.n	800716e <TIM_OC3_SetConfig+0x72>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a29      	ldr	r2, [pc, #164]	; (8007210 <TIM_OC3_SetConfig+0x114>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d10d      	bne.n	800718a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007174:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	021b      	lsls	r3, r3, #8
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	4313      	orrs	r3, r2
 8007180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a1e      	ldr	r2, [pc, #120]	; (8007208 <TIM_OC3_SetConfig+0x10c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d013      	beq.n	80071ba <TIM_OC3_SetConfig+0xbe>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a1d      	ldr	r2, [pc, #116]	; (800720c <TIM_OC3_SetConfig+0x110>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d00f      	beq.n	80071ba <TIM_OC3_SetConfig+0xbe>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a1d      	ldr	r2, [pc, #116]	; (8007214 <TIM_OC3_SetConfig+0x118>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00b      	beq.n	80071ba <TIM_OC3_SetConfig+0xbe>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a1c      	ldr	r2, [pc, #112]	; (8007218 <TIM_OC3_SetConfig+0x11c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d007      	beq.n	80071ba <TIM_OC3_SetConfig+0xbe>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a1b      	ldr	r2, [pc, #108]	; (800721c <TIM_OC3_SetConfig+0x120>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d003      	beq.n	80071ba <TIM_OC3_SetConfig+0xbe>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a16      	ldr	r2, [pc, #88]	; (8007210 <TIM_OC3_SetConfig+0x114>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d113      	bne.n	80071e2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4313      	orrs	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	621a      	str	r2, [r3, #32]
}
 80071fc:	bf00      	nop
 80071fe:	371c      	adds	r7, #28
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	40012c00 	.word	0x40012c00
 800720c:	40013400 	.word	0x40013400
 8007210:	40015000 	.word	0x40015000
 8007214:	40014000 	.word	0x40014000
 8007218:	40014400 	.word	0x40014400
 800721c:	40014800 	.word	0x40014800

08007220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800724e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800725a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	021b      	lsls	r3, r3, #8
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	4313      	orrs	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800726e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	031b      	lsls	r3, r3, #12
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	4313      	orrs	r3, r2
 800727a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a2c      	ldr	r2, [pc, #176]	; (8007330 <TIM_OC4_SetConfig+0x110>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d007      	beq.n	8007294 <TIM_OC4_SetConfig+0x74>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a2b      	ldr	r2, [pc, #172]	; (8007334 <TIM_OC4_SetConfig+0x114>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d003      	beq.n	8007294 <TIM_OC4_SetConfig+0x74>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a2a      	ldr	r2, [pc, #168]	; (8007338 <TIM_OC4_SetConfig+0x118>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d10d      	bne.n	80072b0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800729a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	031b      	lsls	r3, r3, #12
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a1f      	ldr	r2, [pc, #124]	; (8007330 <TIM_OC4_SetConfig+0x110>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d013      	beq.n	80072e0 <TIM_OC4_SetConfig+0xc0>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a1e      	ldr	r2, [pc, #120]	; (8007334 <TIM_OC4_SetConfig+0x114>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00f      	beq.n	80072e0 <TIM_OC4_SetConfig+0xc0>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a1e      	ldr	r2, [pc, #120]	; (800733c <TIM_OC4_SetConfig+0x11c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d00b      	beq.n	80072e0 <TIM_OC4_SetConfig+0xc0>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a1d      	ldr	r2, [pc, #116]	; (8007340 <TIM_OC4_SetConfig+0x120>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d007      	beq.n	80072e0 <TIM_OC4_SetConfig+0xc0>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a1c      	ldr	r2, [pc, #112]	; (8007344 <TIM_OC4_SetConfig+0x124>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_OC4_SetConfig+0xc0>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a17      	ldr	r2, [pc, #92]	; (8007338 <TIM_OC4_SetConfig+0x118>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d113      	bne.n	8007308 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072e6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072ee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	019b      	lsls	r3, r3, #6
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	019b      	lsls	r3, r3, #6
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	4313      	orrs	r3, r2
 8007306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	40012c00 	.word	0x40012c00
 8007334:	40013400 	.word	0x40013400
 8007338:	40015000 	.word	0x40015000
 800733c:	40014000 	.word	0x40014000
 8007340:	40014400 	.word	0x40014400
 8007344:	40014800 	.word	0x40014800

08007348 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800736e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800737a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800738c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	041b      	lsls	r3, r3, #16
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	4313      	orrs	r3, r2
 8007398:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a19      	ldr	r2, [pc, #100]	; (8007404 <TIM_OC5_SetConfig+0xbc>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d013      	beq.n	80073ca <TIM_OC5_SetConfig+0x82>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a18      	ldr	r2, [pc, #96]	; (8007408 <TIM_OC5_SetConfig+0xc0>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d00f      	beq.n	80073ca <TIM_OC5_SetConfig+0x82>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a17      	ldr	r2, [pc, #92]	; (800740c <TIM_OC5_SetConfig+0xc4>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00b      	beq.n	80073ca <TIM_OC5_SetConfig+0x82>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a16      	ldr	r2, [pc, #88]	; (8007410 <TIM_OC5_SetConfig+0xc8>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d007      	beq.n	80073ca <TIM_OC5_SetConfig+0x82>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a15      	ldr	r2, [pc, #84]	; (8007414 <TIM_OC5_SetConfig+0xcc>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d003      	beq.n	80073ca <TIM_OC5_SetConfig+0x82>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a14      	ldr	r2, [pc, #80]	; (8007418 <TIM_OC5_SetConfig+0xd0>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d109      	bne.n	80073de <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	021b      	lsls	r3, r3, #8
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	4313      	orrs	r3, r2
 80073dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	621a      	str	r2, [r3, #32]
}
 80073f8:	bf00      	nop
 80073fa:	371c      	adds	r7, #28
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	40012c00 	.word	0x40012c00
 8007408:	40013400 	.word	0x40013400
 800740c:	40014000 	.word	0x40014000
 8007410:	40014400 	.word	0x40014400
 8007414:	40014800 	.word	0x40014800
 8007418:	40015000 	.word	0x40015000

0800741c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800744a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800744e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	021b      	lsls	r3, r3, #8
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	4313      	orrs	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	051b      	lsls	r3, r3, #20
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	4313      	orrs	r3, r2
 800746e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a1a      	ldr	r2, [pc, #104]	; (80074dc <TIM_OC6_SetConfig+0xc0>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d013      	beq.n	80074a0 <TIM_OC6_SetConfig+0x84>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a19      	ldr	r2, [pc, #100]	; (80074e0 <TIM_OC6_SetConfig+0xc4>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00f      	beq.n	80074a0 <TIM_OC6_SetConfig+0x84>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a18      	ldr	r2, [pc, #96]	; (80074e4 <TIM_OC6_SetConfig+0xc8>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d00b      	beq.n	80074a0 <TIM_OC6_SetConfig+0x84>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a17      	ldr	r2, [pc, #92]	; (80074e8 <TIM_OC6_SetConfig+0xcc>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d007      	beq.n	80074a0 <TIM_OC6_SetConfig+0x84>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a16      	ldr	r2, [pc, #88]	; (80074ec <TIM_OC6_SetConfig+0xd0>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d003      	beq.n	80074a0 <TIM_OC6_SetConfig+0x84>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a15      	ldr	r2, [pc, #84]	; (80074f0 <TIM_OC6_SetConfig+0xd4>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d109      	bne.n	80074b4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	029b      	lsls	r3, r3, #10
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	621a      	str	r2, [r3, #32]
}
 80074ce:	bf00      	nop
 80074d0:	371c      	adds	r7, #28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	40012c00 	.word	0x40012c00
 80074e0:	40013400 	.word	0x40013400
 80074e4:	40014000 	.word	0x40014000
 80074e8:	40014400 	.word	0x40014400
 80074ec:	40014800 	.word	0x40014800
 80074f0:	40015000 	.word	0x40015000

080074f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	f023 0201 	bic.w	r2, r3, #1
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800751e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	4313      	orrs	r3, r2
 8007528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f023 030a 	bic.w	r3, r3, #10
 8007530:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	4313      	orrs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	621a      	str	r2, [r3, #32]
}
 8007546:	bf00      	nop
 8007548:	371c      	adds	r7, #28
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007552:	b480      	push	{r7}
 8007554:	b087      	sub	sp, #28
 8007556:	af00      	add	r7, sp, #0
 8007558:	60f8      	str	r0, [r7, #12]
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	f023 0210 	bic.w	r2, r3, #16
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800757c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	031b      	lsls	r3, r3, #12
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	4313      	orrs	r3, r2
 8007586:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800758e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	011b      	lsls	r3, r3, #4
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	4313      	orrs	r3, r2
 8007598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	621a      	str	r2, [r3, #32]
}
 80075a6:	bf00      	nop
 80075a8:	371c      	adds	r7, #28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b085      	sub	sp, #20
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80075c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	f043 0307 	orr.w	r3, r3, #7
 80075d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	609a      	str	r2, [r3, #8]
}
 80075e0:	bf00      	nop
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
 80075f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007606:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	021a      	lsls	r2, r3, #8
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	431a      	orrs	r2, r3
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	4313      	orrs	r3, r2
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	4313      	orrs	r3, r2
 8007618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	609a      	str	r2, [r3, #8]
}
 8007620:	bf00      	nop
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f003 031f 	and.w	r3, r3, #31
 800763e:	2201      	movs	r2, #1
 8007640:	fa02 f303 	lsl.w	r3, r2, r3
 8007644:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6a1a      	ldr	r2, [r3, #32]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	43db      	mvns	r3, r3
 800764e:	401a      	ands	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6a1a      	ldr	r2, [r3, #32]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f003 031f 	and.w	r3, r3, #31
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	fa01 f303 	lsl.w	r3, r1, r3
 8007664:	431a      	orrs	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	621a      	str	r2, [r3, #32]
}
 800766a:	bf00      	nop
 800766c:	371c      	adds	r7, #28
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
	...

08007678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007688:	2b01      	cmp	r3, #1
 800768a:	d101      	bne.n	8007690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800768c:	2302      	movs	r3, #2
 800768e:	e074      	b.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a34      	ldr	r2, [pc, #208]	; (8007788 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d009      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a33      	ldr	r2, [pc, #204]	; (800778c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d004      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a31      	ldr	r2, [pc, #196]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d108      	bne.n	80076e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80076d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80076e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a21      	ldr	r2, [pc, #132]	; (8007788 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d022      	beq.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007710:	d01d      	beq.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a1f      	ldr	r2, [pc, #124]	; (8007794 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d018      	beq.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a1d      	ldr	r2, [pc, #116]	; (8007798 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d013      	beq.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a1c      	ldr	r2, [pc, #112]	; (800779c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00e      	beq.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a15      	ldr	r2, [pc, #84]	; (800778c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d009      	beq.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a18      	ldr	r2, [pc, #96]	; (80077a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d004      	beq.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a11      	ldr	r2, [pc, #68]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d10c      	bne.n	8007768 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	4313      	orrs	r3, r2
 800775e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	40012c00 	.word	0x40012c00
 800778c:	40013400 	.word	0x40013400
 8007790:	40015000 	.word	0x40015000
 8007794:	40000400 	.word	0x40000400
 8007798:	40000800 	.word	0x40000800
 800779c:	40000c00 	.word	0x40000c00
 80077a0:	40014000 	.word	0x40014000

080077a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e042      	b.n	80078c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007848:	2b00      	cmp	r3, #0
 800784a:	d106      	bne.n	800785a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7fa fa2b 	bl	8001cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2224      	movs	r2, #36	; 0x24
 800785e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0201 	bic.w	r2, r2, #1
 8007870:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fe68 	bl	8008550 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fb69 	bl	8007f58 <UART_SetConfig>
 8007886:	4603      	mov	r3, r0
 8007888:	2b01      	cmp	r3, #1
 800788a:	d101      	bne.n	8007890 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e01b      	b.n	80078c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800789e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689a      	ldr	r2, [r3, #8]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0201 	orr.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fee7 	bl	8008694 <UART_CheckIdleState>
 80078c6:	4603      	mov	r3, r0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b0ba      	sub	sp, #232	; 0xe8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80078fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80078fe:	4013      	ands	r3, r2
 8007900:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007904:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007908:	2b00      	cmp	r3, #0
 800790a:	d11b      	bne.n	8007944 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800790c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007910:	f003 0320 	and.w	r3, r3, #32
 8007914:	2b00      	cmp	r3, #0
 8007916:	d015      	beq.n	8007944 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800791c:	f003 0320 	and.w	r3, r3, #32
 8007920:	2b00      	cmp	r3, #0
 8007922:	d105      	bne.n	8007930 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d009      	beq.n	8007944 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 82e3 	beq.w	8007f00 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	4798      	blx	r3
      }
      return;
 8007942:	e2dd      	b.n	8007f00 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 8123 	beq.w	8007b94 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800794e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007952:	4b8d      	ldr	r3, [pc, #564]	; (8007b88 <HAL_UART_IRQHandler+0x2b8>)
 8007954:	4013      	ands	r3, r2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800795a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800795e:	4b8b      	ldr	r3, [pc, #556]	; (8007b8c <HAL_UART_IRQHandler+0x2bc>)
 8007960:	4013      	ands	r3, r2
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 8116 	beq.w	8007b94 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	d011      	beq.n	8007998 <HAL_UART_IRQHandler+0xc8>
 8007974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00b      	beq.n	8007998 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2201      	movs	r2, #1
 8007986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800798e:	f043 0201 	orr.w	r2, r3, #1
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d011      	beq.n	80079c8 <HAL_UART_IRQHandler+0xf8>
 80079a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2202      	movs	r2, #2
 80079b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079be:	f043 0204 	orr.w	r2, r3, #4
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d011      	beq.n	80079f8 <HAL_UART_IRQHandler+0x128>
 80079d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00b      	beq.n	80079f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2204      	movs	r2, #4
 80079e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ee:	f043 0202 	orr.w	r2, r3, #2
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079fc:	f003 0308 	and.w	r3, r3, #8
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d017      	beq.n	8007a34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a08:	f003 0320 	and.w	r3, r3, #32
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d105      	bne.n	8007a1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a14:	4b5c      	ldr	r3, [pc, #368]	; (8007b88 <HAL_UART_IRQHandler+0x2b8>)
 8007a16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00b      	beq.n	8007a34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2208      	movs	r2, #8
 8007a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a2a:	f043 0208 	orr.w	r2, r3, #8
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d012      	beq.n	8007a66 <HAL_UART_IRQHandler+0x196>
 8007a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00c      	beq.n	8007a66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a5c:	f043 0220 	orr.w	r2, r3, #32
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 8249 	beq.w	8007f04 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a76:	f003 0320 	and.w	r3, r3, #32
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d013      	beq.n	8007aa6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a82:	f003 0320 	and.w	r3, r3, #32
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d105      	bne.n	8007a96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d007      	beq.n	8007aa6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aba:	2b40      	cmp	r3, #64	; 0x40
 8007abc:	d005      	beq.n	8007aca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ac2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d054      	beq.n	8007b74 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fef9 	bl	80088c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ada:	2b40      	cmp	r3, #64	; 0x40
 8007adc:	d146      	bne.n	8007b6c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3308      	adds	r3, #8
 8007b06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1d9      	bne.n	8007ade <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d017      	beq.n	8007b64 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b3a:	4a15      	ldr	r2, [pc, #84]	; (8007b90 <HAL_UART_IRQHandler+0x2c0>)
 8007b3c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fc fefd 	bl	8004944 <HAL_DMA_Abort_IT>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d019      	beq.n	8007b84 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007b5e:	4610      	mov	r0, r2
 8007b60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b62:	e00f      	b.n	8007b84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f9e1 	bl	8007f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b6a:	e00b      	b.n	8007b84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f9dd 	bl	8007f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b72:	e007      	b.n	8007b84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f9d9 	bl	8007f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007b82:	e1bf      	b.n	8007f04 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b84:	bf00      	nop
    return;
 8007b86:	e1bd      	b.n	8007f04 <HAL_UART_IRQHandler+0x634>
 8007b88:	10000001 	.word	0x10000001
 8007b8c:	04000120 	.word	0x04000120
 8007b90:	0800898f 	.word	0x0800898f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	f040 8153 	bne.w	8007e44 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba2:	f003 0310 	and.w	r3, r3, #16
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 814c 	beq.w	8007e44 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb0:	f003 0310 	and.w	r3, r3, #16
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 8145 	beq.w	8007e44 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2210      	movs	r2, #16
 8007bc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bcc:	2b40      	cmp	r3, #64	; 0x40
 8007bce:	f040 80bb 	bne.w	8007d48 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007be0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 818f 	beq.w	8007f08 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bf0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	f080 8187 	bcs.w	8007f08 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0320 	and.w	r3, r3, #32
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f040 8087 	bne.w	8007d26 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c52:	e841 2300 	strex	r3, r2, [r1]
 8007c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1da      	bne.n	8007c18 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3308      	adds	r3, #8
 8007c68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c74:	f023 0301 	bic.w	r3, r3, #1
 8007c78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3308      	adds	r3, #8
 8007c82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c92:	e841 2300 	strex	r3, r2, [r1]
 8007c96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1e1      	bne.n	8007c62 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3308      	adds	r3, #8
 8007ca4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ca8:	e853 3f00 	ldrex	r3, [r3]
 8007cac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007cc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007cc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007cc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007cca:	e841 2300 	strex	r3, r2, [r1]
 8007cce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e3      	bne.n	8007c9e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cf4:	f023 0310 	bic.w	r3, r3, #16
 8007cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	461a      	mov	r2, r3
 8007d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d06:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e4      	bne.n	8007ce4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fc fdb6 	bl	8004892 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2202      	movs	r2, #2
 8007d2a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f8fd 	bl	8007f40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d46:	e0df      	b.n	8007f08 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 80d1 	beq.w	8007f0c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007d6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 80cc 	beq.w	8007f0c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	461a      	mov	r2, r3
 8007d92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d96:	647b      	str	r3, [r7, #68]	; 0x44
 8007d98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e4      	bne.n	8007d74 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3308      	adds	r3, #8
 8007db0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	e853 3f00 	ldrex	r3, [r3]
 8007db8:	623b      	str	r3, [r7, #32]
   return(result);
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dc0:	f023 0301 	bic.w	r3, r3, #1
 8007dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3308      	adds	r3, #8
 8007dce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007dd2:	633a      	str	r2, [r7, #48]	; 0x30
 8007dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dda:	e841 2300 	strex	r3, r2, [r1]
 8007dde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1e1      	bne.n	8007daa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	e853 3f00 	ldrex	r3, [r3]
 8007e06:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 0310 	bic.w	r3, r3, #16
 8007e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e1c:	61fb      	str	r3, [r7, #28]
 8007e1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e20:	69b9      	ldr	r1, [r7, #24]
 8007e22:	69fa      	ldr	r2, [r7, #28]
 8007e24:	e841 2300 	strex	r3, r2, [r1]
 8007e28:	617b      	str	r3, [r7, #20]
   return(result);
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e4      	bne.n	8007dfa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2202      	movs	r2, #2
 8007e34:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f87f 	bl	8007f40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e42:	e063      	b.n	8007f0c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00e      	beq.n	8007e6e <HAL_UART_IRQHandler+0x59e>
 8007e50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d008      	beq.n	8007e6e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fdd2 	bl	8008a10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e6c:	e051      	b.n	8007f12 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d014      	beq.n	8007ea4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d105      	bne.n	8007e92 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d008      	beq.n	8007ea4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d03a      	beq.n	8007f10 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	4798      	blx	r3
    }
    return;
 8007ea2:	e035      	b.n	8007f10 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d009      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x5f4>
 8007eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fd7c 	bl	80089ba <UART_EndTransmit_IT>
    return;
 8007ec2:	e026      	b.n	8007f12 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d009      	beq.n	8007ee4 <HAL_UART_IRQHandler+0x614>
 8007ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fdab 	bl	8008a38 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ee2:	e016      	b.n	8007f12 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d010      	beq.n	8007f12 <HAL_UART_IRQHandler+0x642>
 8007ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	da0c      	bge.n	8007f12 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fd93 	bl	8008a24 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007efe:	e008      	b.n	8007f12 <HAL_UART_IRQHandler+0x642>
      return;
 8007f00:	bf00      	nop
 8007f02:	e006      	b.n	8007f12 <HAL_UART_IRQHandler+0x642>
    return;
 8007f04:	bf00      	nop
 8007f06:	e004      	b.n	8007f12 <HAL_UART_IRQHandler+0x642>
      return;
 8007f08:	bf00      	nop
 8007f0a:	e002      	b.n	8007f12 <HAL_UART_IRQHandler+0x642>
      return;
 8007f0c:	bf00      	nop
 8007f0e:	e000      	b.n	8007f12 <HAL_UART_IRQHandler+0x642>
    return;
 8007f10:	bf00      	nop
  }
}
 8007f12:	37e8      	adds	r7, #232	; 0xe8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f5c:	b08c      	sub	sp, #48	; 0x30
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	689a      	ldr	r2, [r3, #8]
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	431a      	orrs	r2, r3
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	431a      	orrs	r2, r3
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	69db      	ldr	r3, [r3, #28]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	4baa      	ldr	r3, [pc, #680]	; (8008230 <UART_SetConfig+0x2d8>)
 8007f88:	4013      	ands	r3, r2
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	6812      	ldr	r2, [r2, #0]
 8007f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f90:	430b      	orrs	r3, r1
 8007f92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	68da      	ldr	r2, [r3, #12]
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a9f      	ldr	r2, [pc, #636]	; (8008234 <UART_SetConfig+0x2dc>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d004      	beq.n	8007fc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007fce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	6812      	ldr	r2, [r2, #0]
 8007fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fd8:	430b      	orrs	r3, r1
 8007fda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe2:	f023 010f 	bic.w	r1, r3, #15
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a90      	ldr	r2, [pc, #576]	; (8008238 <UART_SetConfig+0x2e0>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d125      	bne.n	8008048 <UART_SetConfig+0xf0>
 8007ffc:	4b8f      	ldr	r3, [pc, #572]	; (800823c <UART_SetConfig+0x2e4>)
 8007ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	2b03      	cmp	r3, #3
 8008008:	d81a      	bhi.n	8008040 <UART_SetConfig+0xe8>
 800800a:	a201      	add	r2, pc, #4	; (adr r2, 8008010 <UART_SetConfig+0xb8>)
 800800c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008010:	08008021 	.word	0x08008021
 8008014:	08008031 	.word	0x08008031
 8008018:	08008029 	.word	0x08008029
 800801c:	08008039 	.word	0x08008039
 8008020:	2301      	movs	r3, #1
 8008022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008026:	e116      	b.n	8008256 <UART_SetConfig+0x2fe>
 8008028:	2302      	movs	r3, #2
 800802a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800802e:	e112      	b.n	8008256 <UART_SetConfig+0x2fe>
 8008030:	2304      	movs	r3, #4
 8008032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008036:	e10e      	b.n	8008256 <UART_SetConfig+0x2fe>
 8008038:	2308      	movs	r3, #8
 800803a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800803e:	e10a      	b.n	8008256 <UART_SetConfig+0x2fe>
 8008040:	2310      	movs	r3, #16
 8008042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008046:	e106      	b.n	8008256 <UART_SetConfig+0x2fe>
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a7c      	ldr	r2, [pc, #496]	; (8008240 <UART_SetConfig+0x2e8>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d138      	bne.n	80080c4 <UART_SetConfig+0x16c>
 8008052:	4b7a      	ldr	r3, [pc, #488]	; (800823c <UART_SetConfig+0x2e4>)
 8008054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008058:	f003 030c 	and.w	r3, r3, #12
 800805c:	2b0c      	cmp	r3, #12
 800805e:	d82d      	bhi.n	80080bc <UART_SetConfig+0x164>
 8008060:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <UART_SetConfig+0x110>)
 8008062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008066:	bf00      	nop
 8008068:	0800809d 	.word	0x0800809d
 800806c:	080080bd 	.word	0x080080bd
 8008070:	080080bd 	.word	0x080080bd
 8008074:	080080bd 	.word	0x080080bd
 8008078:	080080ad 	.word	0x080080ad
 800807c:	080080bd 	.word	0x080080bd
 8008080:	080080bd 	.word	0x080080bd
 8008084:	080080bd 	.word	0x080080bd
 8008088:	080080a5 	.word	0x080080a5
 800808c:	080080bd 	.word	0x080080bd
 8008090:	080080bd 	.word	0x080080bd
 8008094:	080080bd 	.word	0x080080bd
 8008098:	080080b5 	.word	0x080080b5
 800809c:	2300      	movs	r3, #0
 800809e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080a2:	e0d8      	b.n	8008256 <UART_SetConfig+0x2fe>
 80080a4:	2302      	movs	r3, #2
 80080a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080aa:	e0d4      	b.n	8008256 <UART_SetConfig+0x2fe>
 80080ac:	2304      	movs	r3, #4
 80080ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080b2:	e0d0      	b.n	8008256 <UART_SetConfig+0x2fe>
 80080b4:	2308      	movs	r3, #8
 80080b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ba:	e0cc      	b.n	8008256 <UART_SetConfig+0x2fe>
 80080bc:	2310      	movs	r3, #16
 80080be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c2:	e0c8      	b.n	8008256 <UART_SetConfig+0x2fe>
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a5e      	ldr	r2, [pc, #376]	; (8008244 <UART_SetConfig+0x2ec>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d125      	bne.n	800811a <UART_SetConfig+0x1c2>
 80080ce:	4b5b      	ldr	r3, [pc, #364]	; (800823c <UART_SetConfig+0x2e4>)
 80080d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080d8:	2b30      	cmp	r3, #48	; 0x30
 80080da:	d016      	beq.n	800810a <UART_SetConfig+0x1b2>
 80080dc:	2b30      	cmp	r3, #48	; 0x30
 80080de:	d818      	bhi.n	8008112 <UART_SetConfig+0x1ba>
 80080e0:	2b20      	cmp	r3, #32
 80080e2:	d00a      	beq.n	80080fa <UART_SetConfig+0x1a2>
 80080e4:	2b20      	cmp	r3, #32
 80080e6:	d814      	bhi.n	8008112 <UART_SetConfig+0x1ba>
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <UART_SetConfig+0x19a>
 80080ec:	2b10      	cmp	r3, #16
 80080ee:	d008      	beq.n	8008102 <UART_SetConfig+0x1aa>
 80080f0:	e00f      	b.n	8008112 <UART_SetConfig+0x1ba>
 80080f2:	2300      	movs	r3, #0
 80080f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080f8:	e0ad      	b.n	8008256 <UART_SetConfig+0x2fe>
 80080fa:	2302      	movs	r3, #2
 80080fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008100:	e0a9      	b.n	8008256 <UART_SetConfig+0x2fe>
 8008102:	2304      	movs	r3, #4
 8008104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008108:	e0a5      	b.n	8008256 <UART_SetConfig+0x2fe>
 800810a:	2308      	movs	r3, #8
 800810c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008110:	e0a1      	b.n	8008256 <UART_SetConfig+0x2fe>
 8008112:	2310      	movs	r3, #16
 8008114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008118:	e09d      	b.n	8008256 <UART_SetConfig+0x2fe>
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a4a      	ldr	r2, [pc, #296]	; (8008248 <UART_SetConfig+0x2f0>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d125      	bne.n	8008170 <UART_SetConfig+0x218>
 8008124:	4b45      	ldr	r3, [pc, #276]	; (800823c <UART_SetConfig+0x2e4>)
 8008126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800812a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800812e:	2bc0      	cmp	r3, #192	; 0xc0
 8008130:	d016      	beq.n	8008160 <UART_SetConfig+0x208>
 8008132:	2bc0      	cmp	r3, #192	; 0xc0
 8008134:	d818      	bhi.n	8008168 <UART_SetConfig+0x210>
 8008136:	2b80      	cmp	r3, #128	; 0x80
 8008138:	d00a      	beq.n	8008150 <UART_SetConfig+0x1f8>
 800813a:	2b80      	cmp	r3, #128	; 0x80
 800813c:	d814      	bhi.n	8008168 <UART_SetConfig+0x210>
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <UART_SetConfig+0x1f0>
 8008142:	2b40      	cmp	r3, #64	; 0x40
 8008144:	d008      	beq.n	8008158 <UART_SetConfig+0x200>
 8008146:	e00f      	b.n	8008168 <UART_SetConfig+0x210>
 8008148:	2300      	movs	r3, #0
 800814a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800814e:	e082      	b.n	8008256 <UART_SetConfig+0x2fe>
 8008150:	2302      	movs	r3, #2
 8008152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008156:	e07e      	b.n	8008256 <UART_SetConfig+0x2fe>
 8008158:	2304      	movs	r3, #4
 800815a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800815e:	e07a      	b.n	8008256 <UART_SetConfig+0x2fe>
 8008160:	2308      	movs	r3, #8
 8008162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008166:	e076      	b.n	8008256 <UART_SetConfig+0x2fe>
 8008168:	2310      	movs	r3, #16
 800816a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800816e:	e072      	b.n	8008256 <UART_SetConfig+0x2fe>
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a35      	ldr	r2, [pc, #212]	; (800824c <UART_SetConfig+0x2f4>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d12a      	bne.n	80081d0 <UART_SetConfig+0x278>
 800817a:	4b30      	ldr	r3, [pc, #192]	; (800823c <UART_SetConfig+0x2e4>)
 800817c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008180:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008184:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008188:	d01a      	beq.n	80081c0 <UART_SetConfig+0x268>
 800818a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800818e:	d81b      	bhi.n	80081c8 <UART_SetConfig+0x270>
 8008190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008194:	d00c      	beq.n	80081b0 <UART_SetConfig+0x258>
 8008196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800819a:	d815      	bhi.n	80081c8 <UART_SetConfig+0x270>
 800819c:	2b00      	cmp	r3, #0
 800819e:	d003      	beq.n	80081a8 <UART_SetConfig+0x250>
 80081a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081a4:	d008      	beq.n	80081b8 <UART_SetConfig+0x260>
 80081a6:	e00f      	b.n	80081c8 <UART_SetConfig+0x270>
 80081a8:	2300      	movs	r3, #0
 80081aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ae:	e052      	b.n	8008256 <UART_SetConfig+0x2fe>
 80081b0:	2302      	movs	r3, #2
 80081b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081b6:	e04e      	b.n	8008256 <UART_SetConfig+0x2fe>
 80081b8:	2304      	movs	r3, #4
 80081ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081be:	e04a      	b.n	8008256 <UART_SetConfig+0x2fe>
 80081c0:	2308      	movs	r3, #8
 80081c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081c6:	e046      	b.n	8008256 <UART_SetConfig+0x2fe>
 80081c8:	2310      	movs	r3, #16
 80081ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ce:	e042      	b.n	8008256 <UART_SetConfig+0x2fe>
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a17      	ldr	r2, [pc, #92]	; (8008234 <UART_SetConfig+0x2dc>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d13a      	bne.n	8008250 <UART_SetConfig+0x2f8>
 80081da:	4b18      	ldr	r3, [pc, #96]	; (800823c <UART_SetConfig+0x2e4>)
 80081dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081e8:	d01a      	beq.n	8008220 <UART_SetConfig+0x2c8>
 80081ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081ee:	d81b      	bhi.n	8008228 <UART_SetConfig+0x2d0>
 80081f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081f4:	d00c      	beq.n	8008210 <UART_SetConfig+0x2b8>
 80081f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081fa:	d815      	bhi.n	8008228 <UART_SetConfig+0x2d0>
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <UART_SetConfig+0x2b0>
 8008200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008204:	d008      	beq.n	8008218 <UART_SetConfig+0x2c0>
 8008206:	e00f      	b.n	8008228 <UART_SetConfig+0x2d0>
 8008208:	2300      	movs	r3, #0
 800820a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800820e:	e022      	b.n	8008256 <UART_SetConfig+0x2fe>
 8008210:	2302      	movs	r3, #2
 8008212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008216:	e01e      	b.n	8008256 <UART_SetConfig+0x2fe>
 8008218:	2304      	movs	r3, #4
 800821a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800821e:	e01a      	b.n	8008256 <UART_SetConfig+0x2fe>
 8008220:	2308      	movs	r3, #8
 8008222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008226:	e016      	b.n	8008256 <UART_SetConfig+0x2fe>
 8008228:	2310      	movs	r3, #16
 800822a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800822e:	e012      	b.n	8008256 <UART_SetConfig+0x2fe>
 8008230:	cfff69f3 	.word	0xcfff69f3
 8008234:	40008000 	.word	0x40008000
 8008238:	40013800 	.word	0x40013800
 800823c:	40021000 	.word	0x40021000
 8008240:	40004400 	.word	0x40004400
 8008244:	40004800 	.word	0x40004800
 8008248:	40004c00 	.word	0x40004c00
 800824c:	40005000 	.word	0x40005000
 8008250:	2310      	movs	r3, #16
 8008252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4aae      	ldr	r2, [pc, #696]	; (8008514 <UART_SetConfig+0x5bc>)
 800825c:	4293      	cmp	r3, r2
 800825e:	f040 8097 	bne.w	8008390 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008262:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008266:	2b08      	cmp	r3, #8
 8008268:	d823      	bhi.n	80082b2 <UART_SetConfig+0x35a>
 800826a:	a201      	add	r2, pc, #4	; (adr r2, 8008270 <UART_SetConfig+0x318>)
 800826c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008270:	08008295 	.word	0x08008295
 8008274:	080082b3 	.word	0x080082b3
 8008278:	0800829d 	.word	0x0800829d
 800827c:	080082b3 	.word	0x080082b3
 8008280:	080082a3 	.word	0x080082a3
 8008284:	080082b3 	.word	0x080082b3
 8008288:	080082b3 	.word	0x080082b3
 800828c:	080082b3 	.word	0x080082b3
 8008290:	080082ab 	.word	0x080082ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008294:	f7fd fc3a 	bl	8005b0c <HAL_RCC_GetPCLK1Freq>
 8008298:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800829a:	e010      	b.n	80082be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800829c:	4b9e      	ldr	r3, [pc, #632]	; (8008518 <UART_SetConfig+0x5c0>)
 800829e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082a0:	e00d      	b.n	80082be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082a2:	f7fd fbc5 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 80082a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082a8:	e009      	b.n	80082be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082b0:	e005      	b.n	80082be <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 8130 	beq.w	8008526 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ca:	4a94      	ldr	r2, [pc, #592]	; (800851c <UART_SetConfig+0x5c4>)
 80082cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082d0:	461a      	mov	r2, r3
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80082d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	4613      	mov	r3, r2
 80082e0:	005b      	lsls	r3, r3, #1
 80082e2:	4413      	add	r3, r2
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d305      	bcc.n	80082f6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082f0:	69ba      	ldr	r2, [r7, #24]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d903      	bls.n	80082fe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80082fc:	e113      	b.n	8008526 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	2200      	movs	r2, #0
 8008302:	60bb      	str	r3, [r7, #8]
 8008304:	60fa      	str	r2, [r7, #12]
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830a:	4a84      	ldr	r2, [pc, #528]	; (800851c <UART_SetConfig+0x5c4>)
 800830c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008310:	b29b      	uxth	r3, r3
 8008312:	2200      	movs	r2, #0
 8008314:	603b      	str	r3, [r7, #0]
 8008316:	607a      	str	r2, [r7, #4]
 8008318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800831c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008320:	f7f8 fc36 	bl	8000b90 <__aeabi_uldivmod>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	4610      	mov	r0, r2
 800832a:	4619      	mov	r1, r3
 800832c:	f04f 0200 	mov.w	r2, #0
 8008330:	f04f 0300 	mov.w	r3, #0
 8008334:	020b      	lsls	r3, r1, #8
 8008336:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800833a:	0202      	lsls	r2, r0, #8
 800833c:	6979      	ldr	r1, [r7, #20]
 800833e:	6849      	ldr	r1, [r1, #4]
 8008340:	0849      	lsrs	r1, r1, #1
 8008342:	2000      	movs	r0, #0
 8008344:	460c      	mov	r4, r1
 8008346:	4605      	mov	r5, r0
 8008348:	eb12 0804 	adds.w	r8, r2, r4
 800834c:	eb43 0905 	adc.w	r9, r3, r5
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	469a      	mov	sl, r3
 8008358:	4693      	mov	fp, r2
 800835a:	4652      	mov	r2, sl
 800835c:	465b      	mov	r3, fp
 800835e:	4640      	mov	r0, r8
 8008360:	4649      	mov	r1, r9
 8008362:	f7f8 fc15 	bl	8000b90 <__aeabi_uldivmod>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	4613      	mov	r3, r2
 800836c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008374:	d308      	bcc.n	8008388 <UART_SetConfig+0x430>
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800837c:	d204      	bcs.n	8008388 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6a3a      	ldr	r2, [r7, #32]
 8008384:	60da      	str	r2, [r3, #12]
 8008386:	e0ce      	b.n	8008526 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800838e:	e0ca      	b.n	8008526 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	69db      	ldr	r3, [r3, #28]
 8008394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008398:	d166      	bne.n	8008468 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800839a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800839e:	2b08      	cmp	r3, #8
 80083a0:	d827      	bhi.n	80083f2 <UART_SetConfig+0x49a>
 80083a2:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <UART_SetConfig+0x450>)
 80083a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a8:	080083cd 	.word	0x080083cd
 80083ac:	080083d5 	.word	0x080083d5
 80083b0:	080083dd 	.word	0x080083dd
 80083b4:	080083f3 	.word	0x080083f3
 80083b8:	080083e3 	.word	0x080083e3
 80083bc:	080083f3 	.word	0x080083f3
 80083c0:	080083f3 	.word	0x080083f3
 80083c4:	080083f3 	.word	0x080083f3
 80083c8:	080083eb 	.word	0x080083eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083cc:	f7fd fb9e 	bl	8005b0c <HAL_RCC_GetPCLK1Freq>
 80083d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083d2:	e014      	b.n	80083fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083d4:	f7fd fbb0 	bl	8005b38 <HAL_RCC_GetPCLK2Freq>
 80083d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083da:	e010      	b.n	80083fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083dc:	4b4e      	ldr	r3, [pc, #312]	; (8008518 <UART_SetConfig+0x5c0>)
 80083de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083e0:	e00d      	b.n	80083fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083e2:	f7fd fb25 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 80083e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083e8:	e009      	b.n	80083fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083f0:	e005      	b.n	80083fe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80083f2:	2300      	movs	r3, #0
 80083f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80083fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 8090 	beq.w	8008526 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	4a44      	ldr	r2, [pc, #272]	; (800851c <UART_SetConfig+0x5c4>)
 800840c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008410:	461a      	mov	r2, r3
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	fbb3 f3f2 	udiv	r3, r3, r2
 8008418:	005a      	lsls	r2, r3, #1
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	085b      	lsrs	r3, r3, #1
 8008420:	441a      	add	r2, r3
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	fbb2 f3f3 	udiv	r3, r2, r3
 800842a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	2b0f      	cmp	r3, #15
 8008430:	d916      	bls.n	8008460 <UART_SetConfig+0x508>
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008438:	d212      	bcs.n	8008460 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800843a:	6a3b      	ldr	r3, [r7, #32]
 800843c:	b29b      	uxth	r3, r3
 800843e:	f023 030f 	bic.w	r3, r3, #15
 8008442:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	085b      	lsrs	r3, r3, #1
 8008448:	b29b      	uxth	r3, r3
 800844a:	f003 0307 	and.w	r3, r3, #7
 800844e:	b29a      	uxth	r2, r3
 8008450:	8bfb      	ldrh	r3, [r7, #30]
 8008452:	4313      	orrs	r3, r2
 8008454:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	8bfa      	ldrh	r2, [r7, #30]
 800845c:	60da      	str	r2, [r3, #12]
 800845e:	e062      	b.n	8008526 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008466:	e05e      	b.n	8008526 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008468:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800846c:	2b08      	cmp	r3, #8
 800846e:	d828      	bhi.n	80084c2 <UART_SetConfig+0x56a>
 8008470:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <UART_SetConfig+0x520>)
 8008472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008476:	bf00      	nop
 8008478:	0800849d 	.word	0x0800849d
 800847c:	080084a5 	.word	0x080084a5
 8008480:	080084ad 	.word	0x080084ad
 8008484:	080084c3 	.word	0x080084c3
 8008488:	080084b3 	.word	0x080084b3
 800848c:	080084c3 	.word	0x080084c3
 8008490:	080084c3 	.word	0x080084c3
 8008494:	080084c3 	.word	0x080084c3
 8008498:	080084bb 	.word	0x080084bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800849c:	f7fd fb36 	bl	8005b0c <HAL_RCC_GetPCLK1Freq>
 80084a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084a2:	e014      	b.n	80084ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084a4:	f7fd fb48 	bl	8005b38 <HAL_RCC_GetPCLK2Freq>
 80084a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084aa:	e010      	b.n	80084ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084ac:	4b1a      	ldr	r3, [pc, #104]	; (8008518 <UART_SetConfig+0x5c0>)
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084b0:	e00d      	b.n	80084ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084b2:	f7fd fabd 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 80084b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084b8:	e009      	b.n	80084ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084c0:	e005      	b.n	80084ce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80084cc:	bf00      	nop
    }

    if (pclk != 0U)
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d028      	beq.n	8008526 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	4a10      	ldr	r2, [pc, #64]	; (800851c <UART_SetConfig+0x5c4>)
 80084da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084de:	461a      	mov	r2, r3
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	085b      	lsrs	r3, r3, #1
 80084ec:	441a      	add	r2, r3
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084f8:	6a3b      	ldr	r3, [r7, #32]
 80084fa:	2b0f      	cmp	r3, #15
 80084fc:	d910      	bls.n	8008520 <UART_SetConfig+0x5c8>
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008504:	d20c      	bcs.n	8008520 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	b29a      	uxth	r2, r3
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	60da      	str	r2, [r3, #12]
 8008510:	e009      	b.n	8008526 <UART_SetConfig+0x5ce>
 8008512:	bf00      	nop
 8008514:	40008000 	.word	0x40008000
 8008518:	00f42400 	.word	0x00f42400
 800851c:	08009b58 	.word	0x08009b58
      }
      else
      {
        ret = HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	2201      	movs	r2, #1
 800852a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2201      	movs	r2, #1
 8008532:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2200      	movs	r2, #0
 800853a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	2200      	movs	r2, #0
 8008540:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008542:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008546:	4618      	mov	r0, r3
 8008548:	3730      	adds	r7, #48	; 0x30
 800854a:	46bd      	mov	sp, r7
 800854c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855c:	f003 0308 	and.w	r3, r3, #8
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00a      	beq.n	800857a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	430a      	orrs	r2, r1
 8008578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00a      	beq.n	800859c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	430a      	orrs	r2, r1
 800859a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a0:	f003 0302 	and.w	r3, r3, #2
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00a      	beq.n	80085be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	430a      	orrs	r2, r1
 80085bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c2:	f003 0304 	and.w	r3, r3, #4
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00a      	beq.n	80085e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	430a      	orrs	r2, r1
 80085de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e4:	f003 0310 	and.w	r3, r3, #16
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00a      	beq.n	8008602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	430a      	orrs	r2, r1
 8008600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008606:	f003 0320 	and.w	r3, r3, #32
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00a      	beq.n	8008624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	430a      	orrs	r2, r1
 8008622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862c:	2b00      	cmp	r3, #0
 800862e:	d01a      	beq.n	8008666 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	430a      	orrs	r2, r1
 8008644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800864a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800864e:	d10a      	bne.n	8008666 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	605a      	str	r2, [r3, #4]
  }
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b098      	sub	sp, #96	; 0x60
 8008698:	af02      	add	r7, sp, #8
 800869a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086a4:	f7f9 fd0c 	bl	80020c0 <HAL_GetTick>
 80086a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0308 	and.w	r3, r3, #8
 80086b4:	2b08      	cmp	r3, #8
 80086b6:	d12f      	bne.n	8008718 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086c0:	2200      	movs	r2, #0
 80086c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f88e 	bl	80087e8 <UART_WaitOnFlagUntilTimeout>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d022      	beq.n	8008718 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086da:	e853 3f00 	ldrex	r3, [r3]
 80086de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086e6:	653b      	str	r3, [r7, #80]	; 0x50
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	461a      	mov	r2, r3
 80086ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086f0:	647b      	str	r3, [r7, #68]	; 0x44
 80086f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e6      	bne.n	80086d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2220      	movs	r2, #32
 8008708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e063      	b.n	80087e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0304 	and.w	r3, r3, #4
 8008722:	2b04      	cmp	r3, #4
 8008724:	d149      	bne.n	80087ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008726:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800872e:	2200      	movs	r2, #0
 8008730:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f857 	bl	80087e8 <UART_WaitOnFlagUntilTimeout>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d03c      	beq.n	80087ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	e853 3f00 	ldrex	r3, [r3]
 800874c:	623b      	str	r3, [r7, #32]
   return(result);
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008754:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800875e:	633b      	str	r3, [r7, #48]	; 0x30
 8008760:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e6      	bne.n	8008740 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3308      	adds	r3, #8
 8008778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	60fb      	str	r3, [r7, #12]
   return(result);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f023 0301 	bic.w	r3, r3, #1
 8008788:	64bb      	str	r3, [r7, #72]	; 0x48
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3308      	adds	r3, #8
 8008790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008792:	61fa      	str	r2, [r7, #28]
 8008794:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	69b9      	ldr	r1, [r7, #24]
 8008798:	69fa      	ldr	r2, [r7, #28]
 800879a:	e841 2300 	strex	r3, r2, [r1]
 800879e:	617b      	str	r3, [r7, #20]
   return(result);
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1e5      	bne.n	8008772 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2220      	movs	r2, #32
 80087aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e012      	b.n	80087e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2220      	movs	r2, #32
 80087be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2220      	movs	r2, #32
 80087c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3758      	adds	r7, #88	; 0x58
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	603b      	str	r3, [r7, #0]
 80087f4:	4613      	mov	r3, r2
 80087f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087f8:	e04f      	b.n	800889a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008800:	d04b      	beq.n	800889a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008802:	f7f9 fc5d 	bl	80020c0 <HAL_GetTick>
 8008806:	4602      	mov	r2, r0
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	429a      	cmp	r2, r3
 8008810:	d302      	bcc.n	8008818 <UART_WaitOnFlagUntilTimeout+0x30>
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d101      	bne.n	800881c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e04e      	b.n	80088ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 0304 	and.w	r3, r3, #4
 8008826:	2b00      	cmp	r3, #0
 8008828:	d037      	beq.n	800889a <UART_WaitOnFlagUntilTimeout+0xb2>
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2b80      	cmp	r3, #128	; 0x80
 800882e:	d034      	beq.n	800889a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b40      	cmp	r3, #64	; 0x40
 8008834:	d031      	beq.n	800889a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	f003 0308 	and.w	r3, r3, #8
 8008840:	2b08      	cmp	r3, #8
 8008842:	d110      	bne.n	8008866 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2208      	movs	r2, #8
 800884a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f000 f838 	bl	80088c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2208      	movs	r2, #8
 8008856:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e029      	b.n	80088ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	69db      	ldr	r3, [r3, #28]
 800886c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008874:	d111      	bne.n	800889a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800887e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 f81e 	bl	80088c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2220      	movs	r2, #32
 800888a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e00f      	b.n	80088ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	69da      	ldr	r2, [r3, #28]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	4013      	ands	r3, r2
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	bf0c      	ite	eq
 80088aa:	2301      	moveq	r3, #1
 80088ac:	2300      	movne	r3, #0
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	461a      	mov	r2, r3
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d0a0      	beq.n	80087fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b095      	sub	sp, #84	; 0x54
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d2:	e853 3f00 	ldrex	r3, [r3]
 80088d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	461a      	mov	r2, r3
 80088e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e8:	643b      	str	r3, [r7, #64]	; 0x40
 80088ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088f0:	e841 2300 	strex	r3, r2, [r1]
 80088f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1e6      	bne.n	80088ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3308      	adds	r3, #8
 8008902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	e853 3f00 	ldrex	r3, [r3]
 800890a:	61fb      	str	r3, [r7, #28]
   return(result);
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008912:	f023 0301 	bic.w	r3, r3, #1
 8008916:	64bb      	str	r3, [r7, #72]	; 0x48
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3308      	adds	r3, #8
 800891e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008920:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008922:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008928:	e841 2300 	strex	r3, r2, [r1]
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e3      	bne.n	80088fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008938:	2b01      	cmp	r3, #1
 800893a:	d118      	bne.n	800896e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	e853 3f00 	ldrex	r3, [r3]
 8008948:	60bb      	str	r3, [r7, #8]
   return(result);
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	f023 0310 	bic.w	r3, r3, #16
 8008950:	647b      	str	r3, [r7, #68]	; 0x44
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800895a:	61bb      	str	r3, [r7, #24]
 800895c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895e:	6979      	ldr	r1, [r7, #20]
 8008960:	69ba      	ldr	r2, [r7, #24]
 8008962:	e841 2300 	strex	r3, r2, [r1]
 8008966:	613b      	str	r3, [r7, #16]
   return(result);
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e6      	bne.n	800893c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2220      	movs	r2, #32
 8008972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008982:	bf00      	nop
 8008984:	3754      	adds	r7, #84	; 0x54
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f7ff fabd 	bl	8007f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089b2:	bf00      	nop
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b088      	sub	sp, #32
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	e853 3f00 	ldrex	r3, [r3]
 80089ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089d6:	61fb      	str	r3, [r7, #28]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	461a      	mov	r2, r3
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	61bb      	str	r3, [r7, #24]
 80089e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e4:	6979      	ldr	r1, [r7, #20]
 80089e6:	69ba      	ldr	r2, [r7, #24]
 80089e8:	e841 2300 	strex	r3, r2, [r1]
 80089ec:	613b      	str	r3, [r7, #16]
   return(result);
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1e6      	bne.n	80089c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2220      	movs	r2, #32
 80089f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7ff fa88 	bl	8007f18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a08:	bf00      	nop
 8008a0a:	3720      	adds	r7, #32
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d101      	bne.n	8008a62 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a5e:	2302      	movs	r3, #2
 8008a60:	e027      	b.n	8008ab2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2224      	movs	r2, #36	; 0x24
 8008a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f022 0201 	bic.w	r2, r2, #1
 8008a88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d101      	bne.n	8008ad6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	e02d      	b.n	8008b32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2224      	movs	r2, #36	; 0x24
 8008ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f022 0201 	bic.w	r2, r2, #1
 8008afc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f850 	bl	8008bb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2220      	movs	r2, #32
 8008b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b084      	sub	sp, #16
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d101      	bne.n	8008b52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b4e:	2302      	movs	r3, #2
 8008b50:	e02d      	b.n	8008bae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2224      	movs	r2, #36	; 0x24
 8008b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f022 0201 	bic.w	r2, r2, #1
 8008b78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f812 	bl	8008bb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2220      	movs	r2, #32
 8008ba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d108      	bne.n	8008bda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008bd8:	e031      	b.n	8008c3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008bda:	2308      	movs	r3, #8
 8008bdc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008bde:	2308      	movs	r3, #8
 8008be0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	0e5b      	lsrs	r3, r3, #25
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	f003 0307 	and.w	r3, r3, #7
 8008bf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	0f5b      	lsrs	r3, r3, #29
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	f003 0307 	and.w	r3, r3, #7
 8008c00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
 8008c04:	7b3a      	ldrb	r2, [r7, #12]
 8008c06:	4911      	ldr	r1, [pc, #68]	; (8008c4c <UARTEx_SetNbDataToProcess+0x94>)
 8008c08:	5c8a      	ldrb	r2, [r1, r2]
 8008c0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c0e:	7b3a      	ldrb	r2, [r7, #12]
 8008c10:	490f      	ldr	r1, [pc, #60]	; (8008c50 <UARTEx_SetNbDataToProcess+0x98>)
 8008c12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c14:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
 8008c22:	7b7a      	ldrb	r2, [r7, #13]
 8008c24:	4909      	ldr	r1, [pc, #36]	; (8008c4c <UARTEx_SetNbDataToProcess+0x94>)
 8008c26:	5c8a      	ldrb	r2, [r1, r2]
 8008c28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c2c:	7b7a      	ldrb	r2, [r7, #13]
 8008c2e:	4908      	ldr	r1, [pc, #32]	; (8008c50 <UARTEx_SetNbDataToProcess+0x98>)
 8008c30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c32:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c3e:	bf00      	nop
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	08009b70 	.word	0x08009b70
 8008c50:	08009b78 	.word	0x08009b78

08008c54 <memset>:
 8008c54:	4402      	add	r2, r0
 8008c56:	4603      	mov	r3, r0
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d100      	bne.n	8008c5e <memset+0xa>
 8008c5c:	4770      	bx	lr
 8008c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c62:	e7f9      	b.n	8008c58 <memset+0x4>

08008c64 <__errno>:
 8008c64:	4b01      	ldr	r3, [pc, #4]	; (8008c6c <__errno+0x8>)
 8008c66:	6818      	ldr	r0, [r3, #0]
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	20000074 	.word	0x20000074

08008c70 <__libc_init_array>:
 8008c70:	b570      	push	{r4, r5, r6, lr}
 8008c72:	4d0d      	ldr	r5, [pc, #52]	; (8008ca8 <__libc_init_array+0x38>)
 8008c74:	4c0d      	ldr	r4, [pc, #52]	; (8008cac <__libc_init_array+0x3c>)
 8008c76:	1b64      	subs	r4, r4, r5
 8008c78:	10a4      	asrs	r4, r4, #2
 8008c7a:	2600      	movs	r6, #0
 8008c7c:	42a6      	cmp	r6, r4
 8008c7e:	d109      	bne.n	8008c94 <__libc_init_array+0x24>
 8008c80:	4d0b      	ldr	r5, [pc, #44]	; (8008cb0 <__libc_init_array+0x40>)
 8008c82:	4c0c      	ldr	r4, [pc, #48]	; (8008cb4 <__libc_init_array+0x44>)
 8008c84:	f000 ff50 	bl	8009b28 <_init>
 8008c88:	1b64      	subs	r4, r4, r5
 8008c8a:	10a4      	asrs	r4, r4, #2
 8008c8c:	2600      	movs	r6, #0
 8008c8e:	42a6      	cmp	r6, r4
 8008c90:	d105      	bne.n	8008c9e <__libc_init_array+0x2e>
 8008c92:	bd70      	pop	{r4, r5, r6, pc}
 8008c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c98:	4798      	blx	r3
 8008c9a:	3601      	adds	r6, #1
 8008c9c:	e7ee      	b.n	8008c7c <__libc_init_array+0xc>
 8008c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ca2:	4798      	blx	r3
 8008ca4:	3601      	adds	r6, #1
 8008ca6:	e7f2      	b.n	8008c8e <__libc_init_array+0x1e>
 8008ca8:	08009bb8 	.word	0x08009bb8
 8008cac:	08009bb8 	.word	0x08009bb8
 8008cb0:	08009bb8 	.word	0x08009bb8
 8008cb4:	08009bbc 	.word	0x08009bbc

08008cb8 <pow>:
 8008cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cba:	ed2d 8b02 	vpush	{d8}
 8008cbe:	eeb0 8a40 	vmov.f32	s16, s0
 8008cc2:	eef0 8a60 	vmov.f32	s17, s1
 8008cc6:	ec55 4b11 	vmov	r4, r5, d1
 8008cca:	f000 f871 	bl	8008db0 <__ieee754_pow>
 8008cce:	4622      	mov	r2, r4
 8008cd0:	462b      	mov	r3, r5
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	ec57 6b10 	vmov	r6, r7, d0
 8008cda:	f7f7 fef3 	bl	8000ac4 <__aeabi_dcmpun>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d13b      	bne.n	8008d5a <pow+0xa2>
 8008ce2:	ec51 0b18 	vmov	r0, r1, d8
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f7f7 feb9 	bl	8000a60 <__aeabi_dcmpeq>
 8008cee:	b1b8      	cbz	r0, 8008d20 <pow+0x68>
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	f7f7 feb2 	bl	8000a60 <__aeabi_dcmpeq>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d146      	bne.n	8008d8e <pow+0xd6>
 8008d00:	ec45 4b10 	vmov	d0, r4, r5
 8008d04:	f000 f848 	bl	8008d98 <finite>
 8008d08:	b338      	cbz	r0, 8008d5a <pow+0xa2>
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	4620      	mov	r0, r4
 8008d10:	4629      	mov	r1, r5
 8008d12:	f7f7 feaf 	bl	8000a74 <__aeabi_dcmplt>
 8008d16:	b300      	cbz	r0, 8008d5a <pow+0xa2>
 8008d18:	f7ff ffa4 	bl	8008c64 <__errno>
 8008d1c:	2322      	movs	r3, #34	; 0x22
 8008d1e:	e01b      	b.n	8008d58 <pow+0xa0>
 8008d20:	ec47 6b10 	vmov	d0, r6, r7
 8008d24:	f000 f838 	bl	8008d98 <finite>
 8008d28:	b9e0      	cbnz	r0, 8008d64 <pow+0xac>
 8008d2a:	eeb0 0a48 	vmov.f32	s0, s16
 8008d2e:	eef0 0a68 	vmov.f32	s1, s17
 8008d32:	f000 f831 	bl	8008d98 <finite>
 8008d36:	b1a8      	cbz	r0, 8008d64 <pow+0xac>
 8008d38:	ec45 4b10 	vmov	d0, r4, r5
 8008d3c:	f000 f82c 	bl	8008d98 <finite>
 8008d40:	b180      	cbz	r0, 8008d64 <pow+0xac>
 8008d42:	4632      	mov	r2, r6
 8008d44:	463b      	mov	r3, r7
 8008d46:	4630      	mov	r0, r6
 8008d48:	4639      	mov	r1, r7
 8008d4a:	f7f7 febb 	bl	8000ac4 <__aeabi_dcmpun>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d0e2      	beq.n	8008d18 <pow+0x60>
 8008d52:	f7ff ff87 	bl	8008c64 <__errno>
 8008d56:	2321      	movs	r3, #33	; 0x21
 8008d58:	6003      	str	r3, [r0, #0]
 8008d5a:	ecbd 8b02 	vpop	{d8}
 8008d5e:	ec47 6b10 	vmov	d0, r6, r7
 8008d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d64:	2200      	movs	r2, #0
 8008d66:	2300      	movs	r3, #0
 8008d68:	4630      	mov	r0, r6
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	f7f7 fe78 	bl	8000a60 <__aeabi_dcmpeq>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d0f2      	beq.n	8008d5a <pow+0xa2>
 8008d74:	eeb0 0a48 	vmov.f32	s0, s16
 8008d78:	eef0 0a68 	vmov.f32	s1, s17
 8008d7c:	f000 f80c 	bl	8008d98 <finite>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d0ea      	beq.n	8008d5a <pow+0xa2>
 8008d84:	ec45 4b10 	vmov	d0, r4, r5
 8008d88:	f000 f806 	bl	8008d98 <finite>
 8008d8c:	e7c3      	b.n	8008d16 <pow+0x5e>
 8008d8e:	4f01      	ldr	r7, [pc, #4]	; (8008d94 <pow+0xdc>)
 8008d90:	2600      	movs	r6, #0
 8008d92:	e7e2      	b.n	8008d5a <pow+0xa2>
 8008d94:	3ff00000 	.word	0x3ff00000

08008d98 <finite>:
 8008d98:	b082      	sub	sp, #8
 8008d9a:	ed8d 0b00 	vstr	d0, [sp]
 8008d9e:	9801      	ldr	r0, [sp, #4]
 8008da0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008da4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008da8:	0fc0      	lsrs	r0, r0, #31
 8008daa:	b002      	add	sp, #8
 8008dac:	4770      	bx	lr
	...

08008db0 <__ieee754_pow>:
 8008db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db4:	ed2d 8b06 	vpush	{d8-d10}
 8008db8:	b089      	sub	sp, #36	; 0x24
 8008dba:	ed8d 1b00 	vstr	d1, [sp]
 8008dbe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008dc2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008dc6:	ea58 0102 	orrs.w	r1, r8, r2
 8008dca:	ec57 6b10 	vmov	r6, r7, d0
 8008dce:	d115      	bne.n	8008dfc <__ieee754_pow+0x4c>
 8008dd0:	19b3      	adds	r3, r6, r6
 8008dd2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008dd6:	4152      	adcs	r2, r2
 8008dd8:	4299      	cmp	r1, r3
 8008dda:	4b89      	ldr	r3, [pc, #548]	; (8009000 <__ieee754_pow+0x250>)
 8008ddc:	4193      	sbcs	r3, r2
 8008dde:	f080 84d1 	bcs.w	8009784 <__ieee754_pow+0x9d4>
 8008de2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008de6:	4630      	mov	r0, r6
 8008de8:	4639      	mov	r1, r7
 8008dea:	f7f7 fa1b 	bl	8000224 <__adddf3>
 8008dee:	ec41 0b10 	vmov	d0, r0, r1
 8008df2:	b009      	add	sp, #36	; 0x24
 8008df4:	ecbd 8b06 	vpop	{d8-d10}
 8008df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dfc:	4b81      	ldr	r3, [pc, #516]	; (8009004 <__ieee754_pow+0x254>)
 8008dfe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008e02:	429c      	cmp	r4, r3
 8008e04:	ee10 aa10 	vmov	sl, s0
 8008e08:	463d      	mov	r5, r7
 8008e0a:	dc06      	bgt.n	8008e1a <__ieee754_pow+0x6a>
 8008e0c:	d101      	bne.n	8008e12 <__ieee754_pow+0x62>
 8008e0e:	2e00      	cmp	r6, #0
 8008e10:	d1e7      	bne.n	8008de2 <__ieee754_pow+0x32>
 8008e12:	4598      	cmp	r8, r3
 8008e14:	dc01      	bgt.n	8008e1a <__ieee754_pow+0x6a>
 8008e16:	d10f      	bne.n	8008e38 <__ieee754_pow+0x88>
 8008e18:	b172      	cbz	r2, 8008e38 <__ieee754_pow+0x88>
 8008e1a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008e1e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008e22:	ea55 050a 	orrs.w	r5, r5, sl
 8008e26:	d1dc      	bne.n	8008de2 <__ieee754_pow+0x32>
 8008e28:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008e2c:	18db      	adds	r3, r3, r3
 8008e2e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008e32:	4152      	adcs	r2, r2
 8008e34:	429d      	cmp	r5, r3
 8008e36:	e7d0      	b.n	8008dda <__ieee754_pow+0x2a>
 8008e38:	2d00      	cmp	r5, #0
 8008e3a:	da3b      	bge.n	8008eb4 <__ieee754_pow+0x104>
 8008e3c:	4b72      	ldr	r3, [pc, #456]	; (8009008 <__ieee754_pow+0x258>)
 8008e3e:	4598      	cmp	r8, r3
 8008e40:	dc51      	bgt.n	8008ee6 <__ieee754_pow+0x136>
 8008e42:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008e46:	4598      	cmp	r8, r3
 8008e48:	f340 84ab 	ble.w	80097a2 <__ieee754_pow+0x9f2>
 8008e4c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008e50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008e54:	2b14      	cmp	r3, #20
 8008e56:	dd0f      	ble.n	8008e78 <__ieee754_pow+0xc8>
 8008e58:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008e5c:	fa22 f103 	lsr.w	r1, r2, r3
 8008e60:	fa01 f303 	lsl.w	r3, r1, r3
 8008e64:	4293      	cmp	r3, r2
 8008e66:	f040 849c 	bne.w	80097a2 <__ieee754_pow+0x9f2>
 8008e6a:	f001 0101 	and.w	r1, r1, #1
 8008e6e:	f1c1 0302 	rsb	r3, r1, #2
 8008e72:	9304      	str	r3, [sp, #16]
 8008e74:	b182      	cbz	r2, 8008e98 <__ieee754_pow+0xe8>
 8008e76:	e05f      	b.n	8008f38 <__ieee754_pow+0x188>
 8008e78:	2a00      	cmp	r2, #0
 8008e7a:	d15b      	bne.n	8008f34 <__ieee754_pow+0x184>
 8008e7c:	f1c3 0314 	rsb	r3, r3, #20
 8008e80:	fa48 f103 	asr.w	r1, r8, r3
 8008e84:	fa01 f303 	lsl.w	r3, r1, r3
 8008e88:	4543      	cmp	r3, r8
 8008e8a:	f040 8487 	bne.w	800979c <__ieee754_pow+0x9ec>
 8008e8e:	f001 0101 	and.w	r1, r1, #1
 8008e92:	f1c1 0302 	rsb	r3, r1, #2
 8008e96:	9304      	str	r3, [sp, #16]
 8008e98:	4b5c      	ldr	r3, [pc, #368]	; (800900c <__ieee754_pow+0x25c>)
 8008e9a:	4598      	cmp	r8, r3
 8008e9c:	d132      	bne.n	8008f04 <__ieee754_pow+0x154>
 8008e9e:	f1b9 0f00 	cmp.w	r9, #0
 8008ea2:	f280 8477 	bge.w	8009794 <__ieee754_pow+0x9e4>
 8008ea6:	4959      	ldr	r1, [pc, #356]	; (800900c <__ieee754_pow+0x25c>)
 8008ea8:	4632      	mov	r2, r6
 8008eaa:	463b      	mov	r3, r7
 8008eac:	2000      	movs	r0, #0
 8008eae:	f7f7 fc99 	bl	80007e4 <__aeabi_ddiv>
 8008eb2:	e79c      	b.n	8008dee <__ieee754_pow+0x3e>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	9304      	str	r3, [sp, #16]
 8008eb8:	2a00      	cmp	r2, #0
 8008eba:	d13d      	bne.n	8008f38 <__ieee754_pow+0x188>
 8008ebc:	4b51      	ldr	r3, [pc, #324]	; (8009004 <__ieee754_pow+0x254>)
 8008ebe:	4598      	cmp	r8, r3
 8008ec0:	d1ea      	bne.n	8008e98 <__ieee754_pow+0xe8>
 8008ec2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008ec6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008eca:	ea53 030a 	orrs.w	r3, r3, sl
 8008ece:	f000 8459 	beq.w	8009784 <__ieee754_pow+0x9d4>
 8008ed2:	4b4f      	ldr	r3, [pc, #316]	; (8009010 <__ieee754_pow+0x260>)
 8008ed4:	429c      	cmp	r4, r3
 8008ed6:	dd08      	ble.n	8008eea <__ieee754_pow+0x13a>
 8008ed8:	f1b9 0f00 	cmp.w	r9, #0
 8008edc:	f2c0 8456 	blt.w	800978c <__ieee754_pow+0x9dc>
 8008ee0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ee4:	e783      	b.n	8008dee <__ieee754_pow+0x3e>
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	e7e5      	b.n	8008eb6 <__ieee754_pow+0x106>
 8008eea:	f1b9 0f00 	cmp.w	r9, #0
 8008eee:	f04f 0000 	mov.w	r0, #0
 8008ef2:	f04f 0100 	mov.w	r1, #0
 8008ef6:	f6bf af7a 	bge.w	8008dee <__ieee754_pow+0x3e>
 8008efa:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008efe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008f02:	e774      	b.n	8008dee <__ieee754_pow+0x3e>
 8008f04:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008f08:	d106      	bne.n	8008f18 <__ieee754_pow+0x168>
 8008f0a:	4632      	mov	r2, r6
 8008f0c:	463b      	mov	r3, r7
 8008f0e:	4630      	mov	r0, r6
 8008f10:	4639      	mov	r1, r7
 8008f12:	f7f7 fb3d 	bl	8000590 <__aeabi_dmul>
 8008f16:	e76a      	b.n	8008dee <__ieee754_pow+0x3e>
 8008f18:	4b3e      	ldr	r3, [pc, #248]	; (8009014 <__ieee754_pow+0x264>)
 8008f1a:	4599      	cmp	r9, r3
 8008f1c:	d10c      	bne.n	8008f38 <__ieee754_pow+0x188>
 8008f1e:	2d00      	cmp	r5, #0
 8008f20:	db0a      	blt.n	8008f38 <__ieee754_pow+0x188>
 8008f22:	ec47 6b10 	vmov	d0, r6, r7
 8008f26:	b009      	add	sp, #36	; 0x24
 8008f28:	ecbd 8b06 	vpop	{d8-d10}
 8008f2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f30:	f000 bd20 	b.w	8009974 <__ieee754_sqrt>
 8008f34:	2300      	movs	r3, #0
 8008f36:	9304      	str	r3, [sp, #16]
 8008f38:	ec47 6b10 	vmov	d0, r6, r7
 8008f3c:	f000 fc62 	bl	8009804 <fabs>
 8008f40:	ec51 0b10 	vmov	r0, r1, d0
 8008f44:	f1ba 0f00 	cmp.w	sl, #0
 8008f48:	d129      	bne.n	8008f9e <__ieee754_pow+0x1ee>
 8008f4a:	b124      	cbz	r4, 8008f56 <__ieee754_pow+0x1a6>
 8008f4c:	4b2f      	ldr	r3, [pc, #188]	; (800900c <__ieee754_pow+0x25c>)
 8008f4e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d123      	bne.n	8008f9e <__ieee754_pow+0x1ee>
 8008f56:	f1b9 0f00 	cmp.w	r9, #0
 8008f5a:	da05      	bge.n	8008f68 <__ieee754_pow+0x1b8>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	2000      	movs	r0, #0
 8008f62:	492a      	ldr	r1, [pc, #168]	; (800900c <__ieee754_pow+0x25c>)
 8008f64:	f7f7 fc3e 	bl	80007e4 <__aeabi_ddiv>
 8008f68:	2d00      	cmp	r5, #0
 8008f6a:	f6bf af40 	bge.w	8008dee <__ieee754_pow+0x3e>
 8008f6e:	9b04      	ldr	r3, [sp, #16]
 8008f70:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008f74:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008f78:	431c      	orrs	r4, r3
 8008f7a:	d108      	bne.n	8008f8e <__ieee754_pow+0x1de>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4610      	mov	r0, r2
 8008f82:	4619      	mov	r1, r3
 8008f84:	f7f7 f94c 	bl	8000220 <__aeabi_dsub>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	e78f      	b.n	8008eae <__ieee754_pow+0xfe>
 8008f8e:	9b04      	ldr	r3, [sp, #16]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	f47f af2c 	bne.w	8008dee <__ieee754_pow+0x3e>
 8008f96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	e727      	b.n	8008dee <__ieee754_pow+0x3e>
 8008f9e:	0feb      	lsrs	r3, r5, #31
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	9306      	str	r3, [sp, #24]
 8008fa4:	9a06      	ldr	r2, [sp, #24]
 8008fa6:	9b04      	ldr	r3, [sp, #16]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	d102      	bne.n	8008fb2 <__ieee754_pow+0x202>
 8008fac:	4632      	mov	r2, r6
 8008fae:	463b      	mov	r3, r7
 8008fb0:	e7e6      	b.n	8008f80 <__ieee754_pow+0x1d0>
 8008fb2:	4b19      	ldr	r3, [pc, #100]	; (8009018 <__ieee754_pow+0x268>)
 8008fb4:	4598      	cmp	r8, r3
 8008fb6:	f340 80fb 	ble.w	80091b0 <__ieee754_pow+0x400>
 8008fba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008fbe:	4598      	cmp	r8, r3
 8008fc0:	4b13      	ldr	r3, [pc, #76]	; (8009010 <__ieee754_pow+0x260>)
 8008fc2:	dd0c      	ble.n	8008fde <__ieee754_pow+0x22e>
 8008fc4:	429c      	cmp	r4, r3
 8008fc6:	dc0f      	bgt.n	8008fe8 <__ieee754_pow+0x238>
 8008fc8:	f1b9 0f00 	cmp.w	r9, #0
 8008fcc:	da0f      	bge.n	8008fee <__ieee754_pow+0x23e>
 8008fce:	2000      	movs	r0, #0
 8008fd0:	b009      	add	sp, #36	; 0x24
 8008fd2:	ecbd 8b06 	vpop	{d8-d10}
 8008fd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fda:	f000 bcc2 	b.w	8009962 <__math_oflow>
 8008fde:	429c      	cmp	r4, r3
 8008fe0:	dbf2      	blt.n	8008fc8 <__ieee754_pow+0x218>
 8008fe2:	4b0a      	ldr	r3, [pc, #40]	; (800900c <__ieee754_pow+0x25c>)
 8008fe4:	429c      	cmp	r4, r3
 8008fe6:	dd19      	ble.n	800901c <__ieee754_pow+0x26c>
 8008fe8:	f1b9 0f00 	cmp.w	r9, #0
 8008fec:	dcef      	bgt.n	8008fce <__ieee754_pow+0x21e>
 8008fee:	2000      	movs	r0, #0
 8008ff0:	b009      	add	sp, #36	; 0x24
 8008ff2:	ecbd 8b06 	vpop	{d8-d10}
 8008ff6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffa:	f000 bca9 	b.w	8009950 <__math_uflow>
 8008ffe:	bf00      	nop
 8009000:	fff00000 	.word	0xfff00000
 8009004:	7ff00000 	.word	0x7ff00000
 8009008:	433fffff 	.word	0x433fffff
 800900c:	3ff00000 	.word	0x3ff00000
 8009010:	3fefffff 	.word	0x3fefffff
 8009014:	3fe00000 	.word	0x3fe00000
 8009018:	41e00000 	.word	0x41e00000
 800901c:	4b60      	ldr	r3, [pc, #384]	; (80091a0 <__ieee754_pow+0x3f0>)
 800901e:	2200      	movs	r2, #0
 8009020:	f7f7 f8fe 	bl	8000220 <__aeabi_dsub>
 8009024:	a354      	add	r3, pc, #336	; (adr r3, 8009178 <__ieee754_pow+0x3c8>)
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	4604      	mov	r4, r0
 800902c:	460d      	mov	r5, r1
 800902e:	f7f7 faaf 	bl	8000590 <__aeabi_dmul>
 8009032:	a353      	add	r3, pc, #332	; (adr r3, 8009180 <__ieee754_pow+0x3d0>)
 8009034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009038:	4606      	mov	r6, r0
 800903a:	460f      	mov	r7, r1
 800903c:	4620      	mov	r0, r4
 800903e:	4629      	mov	r1, r5
 8009040:	f7f7 faa6 	bl	8000590 <__aeabi_dmul>
 8009044:	4b57      	ldr	r3, [pc, #348]	; (80091a4 <__ieee754_pow+0x3f4>)
 8009046:	4682      	mov	sl, r0
 8009048:	468b      	mov	fp, r1
 800904a:	2200      	movs	r2, #0
 800904c:	4620      	mov	r0, r4
 800904e:	4629      	mov	r1, r5
 8009050:	f7f7 fa9e 	bl	8000590 <__aeabi_dmul>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	a14b      	add	r1, pc, #300	; (adr r1, 8009188 <__ieee754_pow+0x3d8>)
 800905a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800905e:	f7f7 f8df 	bl	8000220 <__aeabi_dsub>
 8009062:	4622      	mov	r2, r4
 8009064:	462b      	mov	r3, r5
 8009066:	f7f7 fa93 	bl	8000590 <__aeabi_dmul>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	2000      	movs	r0, #0
 8009070:	494d      	ldr	r1, [pc, #308]	; (80091a8 <__ieee754_pow+0x3f8>)
 8009072:	f7f7 f8d5 	bl	8000220 <__aeabi_dsub>
 8009076:	4622      	mov	r2, r4
 8009078:	4680      	mov	r8, r0
 800907a:	4689      	mov	r9, r1
 800907c:	462b      	mov	r3, r5
 800907e:	4620      	mov	r0, r4
 8009080:	4629      	mov	r1, r5
 8009082:	f7f7 fa85 	bl	8000590 <__aeabi_dmul>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	4640      	mov	r0, r8
 800908c:	4649      	mov	r1, r9
 800908e:	f7f7 fa7f 	bl	8000590 <__aeabi_dmul>
 8009092:	a33f      	add	r3, pc, #252	; (adr r3, 8009190 <__ieee754_pow+0x3e0>)
 8009094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009098:	f7f7 fa7a 	bl	8000590 <__aeabi_dmul>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	4650      	mov	r0, sl
 80090a2:	4659      	mov	r1, fp
 80090a4:	f7f7 f8bc 	bl	8000220 <__aeabi_dsub>
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4680      	mov	r8, r0
 80090ae:	4689      	mov	r9, r1
 80090b0:	4630      	mov	r0, r6
 80090b2:	4639      	mov	r1, r7
 80090b4:	f7f7 f8b6 	bl	8000224 <__adddf3>
 80090b8:	2000      	movs	r0, #0
 80090ba:	4632      	mov	r2, r6
 80090bc:	463b      	mov	r3, r7
 80090be:	4604      	mov	r4, r0
 80090c0:	460d      	mov	r5, r1
 80090c2:	f7f7 f8ad 	bl	8000220 <__aeabi_dsub>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4640      	mov	r0, r8
 80090cc:	4649      	mov	r1, r9
 80090ce:	f7f7 f8a7 	bl	8000220 <__aeabi_dsub>
 80090d2:	9b04      	ldr	r3, [sp, #16]
 80090d4:	9a06      	ldr	r2, [sp, #24]
 80090d6:	3b01      	subs	r3, #1
 80090d8:	4313      	orrs	r3, r2
 80090da:	4682      	mov	sl, r0
 80090dc:	468b      	mov	fp, r1
 80090de:	f040 81e7 	bne.w	80094b0 <__ieee754_pow+0x700>
 80090e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009198 <__ieee754_pow+0x3e8>
 80090e6:	eeb0 8a47 	vmov.f32	s16, s14
 80090ea:	eef0 8a67 	vmov.f32	s17, s15
 80090ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80090f2:	2600      	movs	r6, #0
 80090f4:	4632      	mov	r2, r6
 80090f6:	463b      	mov	r3, r7
 80090f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090fc:	f7f7 f890 	bl	8000220 <__aeabi_dsub>
 8009100:	4622      	mov	r2, r4
 8009102:	462b      	mov	r3, r5
 8009104:	f7f7 fa44 	bl	8000590 <__aeabi_dmul>
 8009108:	e9dd 2300 	ldrd	r2, r3, [sp]
 800910c:	4680      	mov	r8, r0
 800910e:	4689      	mov	r9, r1
 8009110:	4650      	mov	r0, sl
 8009112:	4659      	mov	r1, fp
 8009114:	f7f7 fa3c 	bl	8000590 <__aeabi_dmul>
 8009118:	4602      	mov	r2, r0
 800911a:	460b      	mov	r3, r1
 800911c:	4640      	mov	r0, r8
 800911e:	4649      	mov	r1, r9
 8009120:	f7f7 f880 	bl	8000224 <__adddf3>
 8009124:	4632      	mov	r2, r6
 8009126:	463b      	mov	r3, r7
 8009128:	4680      	mov	r8, r0
 800912a:	4689      	mov	r9, r1
 800912c:	4620      	mov	r0, r4
 800912e:	4629      	mov	r1, r5
 8009130:	f7f7 fa2e 	bl	8000590 <__aeabi_dmul>
 8009134:	460b      	mov	r3, r1
 8009136:	4604      	mov	r4, r0
 8009138:	460d      	mov	r5, r1
 800913a:	4602      	mov	r2, r0
 800913c:	4649      	mov	r1, r9
 800913e:	4640      	mov	r0, r8
 8009140:	f7f7 f870 	bl	8000224 <__adddf3>
 8009144:	4b19      	ldr	r3, [pc, #100]	; (80091ac <__ieee754_pow+0x3fc>)
 8009146:	4299      	cmp	r1, r3
 8009148:	ec45 4b19 	vmov	d9, r4, r5
 800914c:	4606      	mov	r6, r0
 800914e:	460f      	mov	r7, r1
 8009150:	468b      	mov	fp, r1
 8009152:	f340 82f0 	ble.w	8009736 <__ieee754_pow+0x986>
 8009156:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800915a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800915e:	4303      	orrs	r3, r0
 8009160:	f000 81e4 	beq.w	800952c <__ieee754_pow+0x77c>
 8009164:	ec51 0b18 	vmov	r0, r1, d8
 8009168:	2200      	movs	r2, #0
 800916a:	2300      	movs	r3, #0
 800916c:	f7f7 fc82 	bl	8000a74 <__aeabi_dcmplt>
 8009170:	3800      	subs	r0, #0
 8009172:	bf18      	it	ne
 8009174:	2001      	movne	r0, #1
 8009176:	e72b      	b.n	8008fd0 <__ieee754_pow+0x220>
 8009178:	60000000 	.word	0x60000000
 800917c:	3ff71547 	.word	0x3ff71547
 8009180:	f85ddf44 	.word	0xf85ddf44
 8009184:	3e54ae0b 	.word	0x3e54ae0b
 8009188:	55555555 	.word	0x55555555
 800918c:	3fd55555 	.word	0x3fd55555
 8009190:	652b82fe 	.word	0x652b82fe
 8009194:	3ff71547 	.word	0x3ff71547
 8009198:	00000000 	.word	0x00000000
 800919c:	bff00000 	.word	0xbff00000
 80091a0:	3ff00000 	.word	0x3ff00000
 80091a4:	3fd00000 	.word	0x3fd00000
 80091a8:	3fe00000 	.word	0x3fe00000
 80091ac:	408fffff 	.word	0x408fffff
 80091b0:	4bd5      	ldr	r3, [pc, #852]	; (8009508 <__ieee754_pow+0x758>)
 80091b2:	402b      	ands	r3, r5
 80091b4:	2200      	movs	r2, #0
 80091b6:	b92b      	cbnz	r3, 80091c4 <__ieee754_pow+0x414>
 80091b8:	4bd4      	ldr	r3, [pc, #848]	; (800950c <__ieee754_pow+0x75c>)
 80091ba:	f7f7 f9e9 	bl	8000590 <__aeabi_dmul>
 80091be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80091c2:	460c      	mov	r4, r1
 80091c4:	1523      	asrs	r3, r4, #20
 80091c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80091ca:	4413      	add	r3, r2
 80091cc:	9305      	str	r3, [sp, #20]
 80091ce:	4bd0      	ldr	r3, [pc, #832]	; (8009510 <__ieee754_pow+0x760>)
 80091d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80091d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80091d8:	429c      	cmp	r4, r3
 80091da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80091de:	dd08      	ble.n	80091f2 <__ieee754_pow+0x442>
 80091e0:	4bcc      	ldr	r3, [pc, #816]	; (8009514 <__ieee754_pow+0x764>)
 80091e2:	429c      	cmp	r4, r3
 80091e4:	f340 8162 	ble.w	80094ac <__ieee754_pow+0x6fc>
 80091e8:	9b05      	ldr	r3, [sp, #20]
 80091ea:	3301      	adds	r3, #1
 80091ec:	9305      	str	r3, [sp, #20]
 80091ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80091f2:	2400      	movs	r4, #0
 80091f4:	00e3      	lsls	r3, r4, #3
 80091f6:	9307      	str	r3, [sp, #28]
 80091f8:	4bc7      	ldr	r3, [pc, #796]	; (8009518 <__ieee754_pow+0x768>)
 80091fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80091fe:	ed93 7b00 	vldr	d7, [r3]
 8009202:	4629      	mov	r1, r5
 8009204:	ec53 2b17 	vmov	r2, r3, d7
 8009208:	eeb0 9a47 	vmov.f32	s18, s14
 800920c:	eef0 9a67 	vmov.f32	s19, s15
 8009210:	4682      	mov	sl, r0
 8009212:	f7f7 f805 	bl	8000220 <__aeabi_dsub>
 8009216:	4652      	mov	r2, sl
 8009218:	4606      	mov	r6, r0
 800921a:	460f      	mov	r7, r1
 800921c:	462b      	mov	r3, r5
 800921e:	ec51 0b19 	vmov	r0, r1, d9
 8009222:	f7f6 ffff 	bl	8000224 <__adddf3>
 8009226:	4602      	mov	r2, r0
 8009228:	460b      	mov	r3, r1
 800922a:	2000      	movs	r0, #0
 800922c:	49bb      	ldr	r1, [pc, #748]	; (800951c <__ieee754_pow+0x76c>)
 800922e:	f7f7 fad9 	bl	80007e4 <__aeabi_ddiv>
 8009232:	ec41 0b1a 	vmov	d10, r0, r1
 8009236:	4602      	mov	r2, r0
 8009238:	460b      	mov	r3, r1
 800923a:	4630      	mov	r0, r6
 800923c:	4639      	mov	r1, r7
 800923e:	f7f7 f9a7 	bl	8000590 <__aeabi_dmul>
 8009242:	2300      	movs	r3, #0
 8009244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009248:	9302      	str	r3, [sp, #8]
 800924a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800924e:	46ab      	mov	fp, r5
 8009250:	106d      	asrs	r5, r5, #1
 8009252:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009256:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800925a:	ec41 0b18 	vmov	d8, r0, r1
 800925e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009262:	2200      	movs	r2, #0
 8009264:	4640      	mov	r0, r8
 8009266:	4649      	mov	r1, r9
 8009268:	4614      	mov	r4, r2
 800926a:	461d      	mov	r5, r3
 800926c:	f7f7 f990 	bl	8000590 <__aeabi_dmul>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	4630      	mov	r0, r6
 8009276:	4639      	mov	r1, r7
 8009278:	f7f6 ffd2 	bl	8000220 <__aeabi_dsub>
 800927c:	ec53 2b19 	vmov	r2, r3, d9
 8009280:	4606      	mov	r6, r0
 8009282:	460f      	mov	r7, r1
 8009284:	4620      	mov	r0, r4
 8009286:	4629      	mov	r1, r5
 8009288:	f7f6 ffca 	bl	8000220 <__aeabi_dsub>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4650      	mov	r0, sl
 8009292:	4659      	mov	r1, fp
 8009294:	f7f6 ffc4 	bl	8000220 <__aeabi_dsub>
 8009298:	4642      	mov	r2, r8
 800929a:	464b      	mov	r3, r9
 800929c:	f7f7 f978 	bl	8000590 <__aeabi_dmul>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4630      	mov	r0, r6
 80092a6:	4639      	mov	r1, r7
 80092a8:	f7f6 ffba 	bl	8000220 <__aeabi_dsub>
 80092ac:	ec53 2b1a 	vmov	r2, r3, d10
 80092b0:	f7f7 f96e 	bl	8000590 <__aeabi_dmul>
 80092b4:	ec53 2b18 	vmov	r2, r3, d8
 80092b8:	ec41 0b19 	vmov	d9, r0, r1
 80092bc:	ec51 0b18 	vmov	r0, r1, d8
 80092c0:	f7f7 f966 	bl	8000590 <__aeabi_dmul>
 80092c4:	a37c      	add	r3, pc, #496	; (adr r3, 80094b8 <__ieee754_pow+0x708>)
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	4604      	mov	r4, r0
 80092cc:	460d      	mov	r5, r1
 80092ce:	f7f7 f95f 	bl	8000590 <__aeabi_dmul>
 80092d2:	a37b      	add	r3, pc, #492	; (adr r3, 80094c0 <__ieee754_pow+0x710>)
 80092d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d8:	f7f6 ffa4 	bl	8000224 <__adddf3>
 80092dc:	4622      	mov	r2, r4
 80092de:	462b      	mov	r3, r5
 80092e0:	f7f7 f956 	bl	8000590 <__aeabi_dmul>
 80092e4:	a378      	add	r3, pc, #480	; (adr r3, 80094c8 <__ieee754_pow+0x718>)
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	f7f6 ff9b 	bl	8000224 <__adddf3>
 80092ee:	4622      	mov	r2, r4
 80092f0:	462b      	mov	r3, r5
 80092f2:	f7f7 f94d 	bl	8000590 <__aeabi_dmul>
 80092f6:	a376      	add	r3, pc, #472	; (adr r3, 80094d0 <__ieee754_pow+0x720>)
 80092f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fc:	f7f6 ff92 	bl	8000224 <__adddf3>
 8009300:	4622      	mov	r2, r4
 8009302:	462b      	mov	r3, r5
 8009304:	f7f7 f944 	bl	8000590 <__aeabi_dmul>
 8009308:	a373      	add	r3, pc, #460	; (adr r3, 80094d8 <__ieee754_pow+0x728>)
 800930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930e:	f7f6 ff89 	bl	8000224 <__adddf3>
 8009312:	4622      	mov	r2, r4
 8009314:	462b      	mov	r3, r5
 8009316:	f7f7 f93b 	bl	8000590 <__aeabi_dmul>
 800931a:	a371      	add	r3, pc, #452	; (adr r3, 80094e0 <__ieee754_pow+0x730>)
 800931c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009320:	f7f6 ff80 	bl	8000224 <__adddf3>
 8009324:	4622      	mov	r2, r4
 8009326:	4606      	mov	r6, r0
 8009328:	460f      	mov	r7, r1
 800932a:	462b      	mov	r3, r5
 800932c:	4620      	mov	r0, r4
 800932e:	4629      	mov	r1, r5
 8009330:	f7f7 f92e 	bl	8000590 <__aeabi_dmul>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	4630      	mov	r0, r6
 800933a:	4639      	mov	r1, r7
 800933c:	f7f7 f928 	bl	8000590 <__aeabi_dmul>
 8009340:	4642      	mov	r2, r8
 8009342:	4604      	mov	r4, r0
 8009344:	460d      	mov	r5, r1
 8009346:	464b      	mov	r3, r9
 8009348:	ec51 0b18 	vmov	r0, r1, d8
 800934c:	f7f6 ff6a 	bl	8000224 <__adddf3>
 8009350:	ec53 2b19 	vmov	r2, r3, d9
 8009354:	f7f7 f91c 	bl	8000590 <__aeabi_dmul>
 8009358:	4622      	mov	r2, r4
 800935a:	462b      	mov	r3, r5
 800935c:	f7f6 ff62 	bl	8000224 <__adddf3>
 8009360:	4642      	mov	r2, r8
 8009362:	4682      	mov	sl, r0
 8009364:	468b      	mov	fp, r1
 8009366:	464b      	mov	r3, r9
 8009368:	4640      	mov	r0, r8
 800936a:	4649      	mov	r1, r9
 800936c:	f7f7 f910 	bl	8000590 <__aeabi_dmul>
 8009370:	4b6b      	ldr	r3, [pc, #428]	; (8009520 <__ieee754_pow+0x770>)
 8009372:	2200      	movs	r2, #0
 8009374:	4606      	mov	r6, r0
 8009376:	460f      	mov	r7, r1
 8009378:	f7f6 ff54 	bl	8000224 <__adddf3>
 800937c:	4652      	mov	r2, sl
 800937e:	465b      	mov	r3, fp
 8009380:	f7f6 ff50 	bl	8000224 <__adddf3>
 8009384:	2000      	movs	r0, #0
 8009386:	4604      	mov	r4, r0
 8009388:	460d      	mov	r5, r1
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	4640      	mov	r0, r8
 8009390:	4649      	mov	r1, r9
 8009392:	f7f7 f8fd 	bl	8000590 <__aeabi_dmul>
 8009396:	4b62      	ldr	r3, [pc, #392]	; (8009520 <__ieee754_pow+0x770>)
 8009398:	4680      	mov	r8, r0
 800939a:	4689      	mov	r9, r1
 800939c:	2200      	movs	r2, #0
 800939e:	4620      	mov	r0, r4
 80093a0:	4629      	mov	r1, r5
 80093a2:	f7f6 ff3d 	bl	8000220 <__aeabi_dsub>
 80093a6:	4632      	mov	r2, r6
 80093a8:	463b      	mov	r3, r7
 80093aa:	f7f6 ff39 	bl	8000220 <__aeabi_dsub>
 80093ae:	4602      	mov	r2, r0
 80093b0:	460b      	mov	r3, r1
 80093b2:	4650      	mov	r0, sl
 80093b4:	4659      	mov	r1, fp
 80093b6:	f7f6 ff33 	bl	8000220 <__aeabi_dsub>
 80093ba:	ec53 2b18 	vmov	r2, r3, d8
 80093be:	f7f7 f8e7 	bl	8000590 <__aeabi_dmul>
 80093c2:	4622      	mov	r2, r4
 80093c4:	4606      	mov	r6, r0
 80093c6:	460f      	mov	r7, r1
 80093c8:	462b      	mov	r3, r5
 80093ca:	ec51 0b19 	vmov	r0, r1, d9
 80093ce:	f7f7 f8df 	bl	8000590 <__aeabi_dmul>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4630      	mov	r0, r6
 80093d8:	4639      	mov	r1, r7
 80093da:	f7f6 ff23 	bl	8000224 <__adddf3>
 80093de:	4606      	mov	r6, r0
 80093e0:	460f      	mov	r7, r1
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4640      	mov	r0, r8
 80093e8:	4649      	mov	r1, r9
 80093ea:	f7f6 ff1b 	bl	8000224 <__adddf3>
 80093ee:	a33e      	add	r3, pc, #248	; (adr r3, 80094e8 <__ieee754_pow+0x738>)
 80093f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f4:	2000      	movs	r0, #0
 80093f6:	4604      	mov	r4, r0
 80093f8:	460d      	mov	r5, r1
 80093fa:	f7f7 f8c9 	bl	8000590 <__aeabi_dmul>
 80093fe:	4642      	mov	r2, r8
 8009400:	ec41 0b18 	vmov	d8, r0, r1
 8009404:	464b      	mov	r3, r9
 8009406:	4620      	mov	r0, r4
 8009408:	4629      	mov	r1, r5
 800940a:	f7f6 ff09 	bl	8000220 <__aeabi_dsub>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	4630      	mov	r0, r6
 8009414:	4639      	mov	r1, r7
 8009416:	f7f6 ff03 	bl	8000220 <__aeabi_dsub>
 800941a:	a335      	add	r3, pc, #212	; (adr r3, 80094f0 <__ieee754_pow+0x740>)
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	f7f7 f8b6 	bl	8000590 <__aeabi_dmul>
 8009424:	a334      	add	r3, pc, #208	; (adr r3, 80094f8 <__ieee754_pow+0x748>)
 8009426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942a:	4606      	mov	r6, r0
 800942c:	460f      	mov	r7, r1
 800942e:	4620      	mov	r0, r4
 8009430:	4629      	mov	r1, r5
 8009432:	f7f7 f8ad 	bl	8000590 <__aeabi_dmul>
 8009436:	4602      	mov	r2, r0
 8009438:	460b      	mov	r3, r1
 800943a:	4630      	mov	r0, r6
 800943c:	4639      	mov	r1, r7
 800943e:	f7f6 fef1 	bl	8000224 <__adddf3>
 8009442:	9a07      	ldr	r2, [sp, #28]
 8009444:	4b37      	ldr	r3, [pc, #220]	; (8009524 <__ieee754_pow+0x774>)
 8009446:	4413      	add	r3, r2
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	f7f6 feea 	bl	8000224 <__adddf3>
 8009450:	4682      	mov	sl, r0
 8009452:	9805      	ldr	r0, [sp, #20]
 8009454:	468b      	mov	fp, r1
 8009456:	f7f7 f831 	bl	80004bc <__aeabi_i2d>
 800945a:	9a07      	ldr	r2, [sp, #28]
 800945c:	4b32      	ldr	r3, [pc, #200]	; (8009528 <__ieee754_pow+0x778>)
 800945e:	4413      	add	r3, r2
 8009460:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009464:	4606      	mov	r6, r0
 8009466:	460f      	mov	r7, r1
 8009468:	4652      	mov	r2, sl
 800946a:	465b      	mov	r3, fp
 800946c:	ec51 0b18 	vmov	r0, r1, d8
 8009470:	f7f6 fed8 	bl	8000224 <__adddf3>
 8009474:	4642      	mov	r2, r8
 8009476:	464b      	mov	r3, r9
 8009478:	f7f6 fed4 	bl	8000224 <__adddf3>
 800947c:	4632      	mov	r2, r6
 800947e:	463b      	mov	r3, r7
 8009480:	f7f6 fed0 	bl	8000224 <__adddf3>
 8009484:	2000      	movs	r0, #0
 8009486:	4632      	mov	r2, r6
 8009488:	463b      	mov	r3, r7
 800948a:	4604      	mov	r4, r0
 800948c:	460d      	mov	r5, r1
 800948e:	f7f6 fec7 	bl	8000220 <__aeabi_dsub>
 8009492:	4642      	mov	r2, r8
 8009494:	464b      	mov	r3, r9
 8009496:	f7f6 fec3 	bl	8000220 <__aeabi_dsub>
 800949a:	ec53 2b18 	vmov	r2, r3, d8
 800949e:	f7f6 febf 	bl	8000220 <__aeabi_dsub>
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	4650      	mov	r0, sl
 80094a8:	4659      	mov	r1, fp
 80094aa:	e610      	b.n	80090ce <__ieee754_pow+0x31e>
 80094ac:	2401      	movs	r4, #1
 80094ae:	e6a1      	b.n	80091f4 <__ieee754_pow+0x444>
 80094b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009500 <__ieee754_pow+0x750>
 80094b4:	e617      	b.n	80090e6 <__ieee754_pow+0x336>
 80094b6:	bf00      	nop
 80094b8:	4a454eef 	.word	0x4a454eef
 80094bc:	3fca7e28 	.word	0x3fca7e28
 80094c0:	93c9db65 	.word	0x93c9db65
 80094c4:	3fcd864a 	.word	0x3fcd864a
 80094c8:	a91d4101 	.word	0xa91d4101
 80094cc:	3fd17460 	.word	0x3fd17460
 80094d0:	518f264d 	.word	0x518f264d
 80094d4:	3fd55555 	.word	0x3fd55555
 80094d8:	db6fabff 	.word	0xdb6fabff
 80094dc:	3fdb6db6 	.word	0x3fdb6db6
 80094e0:	33333303 	.word	0x33333303
 80094e4:	3fe33333 	.word	0x3fe33333
 80094e8:	e0000000 	.word	0xe0000000
 80094ec:	3feec709 	.word	0x3feec709
 80094f0:	dc3a03fd 	.word	0xdc3a03fd
 80094f4:	3feec709 	.word	0x3feec709
 80094f8:	145b01f5 	.word	0x145b01f5
 80094fc:	be3e2fe0 	.word	0xbe3e2fe0
 8009500:	00000000 	.word	0x00000000
 8009504:	3ff00000 	.word	0x3ff00000
 8009508:	7ff00000 	.word	0x7ff00000
 800950c:	43400000 	.word	0x43400000
 8009510:	0003988e 	.word	0x0003988e
 8009514:	000bb679 	.word	0x000bb679
 8009518:	08009b80 	.word	0x08009b80
 800951c:	3ff00000 	.word	0x3ff00000
 8009520:	40080000 	.word	0x40080000
 8009524:	08009ba0 	.word	0x08009ba0
 8009528:	08009b90 	.word	0x08009b90
 800952c:	a3b3      	add	r3, pc, #716	; (adr r3, 80097fc <__ieee754_pow+0xa4c>)
 800952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009532:	4640      	mov	r0, r8
 8009534:	4649      	mov	r1, r9
 8009536:	f7f6 fe75 	bl	8000224 <__adddf3>
 800953a:	4622      	mov	r2, r4
 800953c:	ec41 0b1a 	vmov	d10, r0, r1
 8009540:	462b      	mov	r3, r5
 8009542:	4630      	mov	r0, r6
 8009544:	4639      	mov	r1, r7
 8009546:	f7f6 fe6b 	bl	8000220 <__aeabi_dsub>
 800954a:	4602      	mov	r2, r0
 800954c:	460b      	mov	r3, r1
 800954e:	ec51 0b1a 	vmov	r0, r1, d10
 8009552:	f7f7 faad 	bl	8000ab0 <__aeabi_dcmpgt>
 8009556:	2800      	cmp	r0, #0
 8009558:	f47f ae04 	bne.w	8009164 <__ieee754_pow+0x3b4>
 800955c:	4aa2      	ldr	r2, [pc, #648]	; (80097e8 <__ieee754_pow+0xa38>)
 800955e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009562:	4293      	cmp	r3, r2
 8009564:	f340 8107 	ble.w	8009776 <__ieee754_pow+0x9c6>
 8009568:	151b      	asrs	r3, r3, #20
 800956a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800956e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009572:	fa4a fa03 	asr.w	sl, sl, r3
 8009576:	44da      	add	sl, fp
 8009578:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800957c:	489b      	ldr	r0, [pc, #620]	; (80097ec <__ieee754_pow+0xa3c>)
 800957e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009582:	4108      	asrs	r0, r1
 8009584:	ea00 030a 	and.w	r3, r0, sl
 8009588:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800958c:	f1c1 0114 	rsb	r1, r1, #20
 8009590:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009594:	fa4a fa01 	asr.w	sl, sl, r1
 8009598:	f1bb 0f00 	cmp.w	fp, #0
 800959c:	f04f 0200 	mov.w	r2, #0
 80095a0:	4620      	mov	r0, r4
 80095a2:	4629      	mov	r1, r5
 80095a4:	bfb8      	it	lt
 80095a6:	f1ca 0a00 	rsblt	sl, sl, #0
 80095aa:	f7f6 fe39 	bl	8000220 <__aeabi_dsub>
 80095ae:	ec41 0b19 	vmov	d9, r0, r1
 80095b2:	4642      	mov	r2, r8
 80095b4:	464b      	mov	r3, r9
 80095b6:	ec51 0b19 	vmov	r0, r1, d9
 80095ba:	f7f6 fe33 	bl	8000224 <__adddf3>
 80095be:	a37a      	add	r3, pc, #488	; (adr r3, 80097a8 <__ieee754_pow+0x9f8>)
 80095c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c4:	2000      	movs	r0, #0
 80095c6:	4604      	mov	r4, r0
 80095c8:	460d      	mov	r5, r1
 80095ca:	f7f6 ffe1 	bl	8000590 <__aeabi_dmul>
 80095ce:	ec53 2b19 	vmov	r2, r3, d9
 80095d2:	4606      	mov	r6, r0
 80095d4:	460f      	mov	r7, r1
 80095d6:	4620      	mov	r0, r4
 80095d8:	4629      	mov	r1, r5
 80095da:	f7f6 fe21 	bl	8000220 <__aeabi_dsub>
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	4640      	mov	r0, r8
 80095e4:	4649      	mov	r1, r9
 80095e6:	f7f6 fe1b 	bl	8000220 <__aeabi_dsub>
 80095ea:	a371      	add	r3, pc, #452	; (adr r3, 80097b0 <__ieee754_pow+0xa00>)
 80095ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f0:	f7f6 ffce 	bl	8000590 <__aeabi_dmul>
 80095f4:	a370      	add	r3, pc, #448	; (adr r3, 80097b8 <__ieee754_pow+0xa08>)
 80095f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fa:	4680      	mov	r8, r0
 80095fc:	4689      	mov	r9, r1
 80095fe:	4620      	mov	r0, r4
 8009600:	4629      	mov	r1, r5
 8009602:	f7f6 ffc5 	bl	8000590 <__aeabi_dmul>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	4640      	mov	r0, r8
 800960c:	4649      	mov	r1, r9
 800960e:	f7f6 fe09 	bl	8000224 <__adddf3>
 8009612:	4604      	mov	r4, r0
 8009614:	460d      	mov	r5, r1
 8009616:	4602      	mov	r2, r0
 8009618:	460b      	mov	r3, r1
 800961a:	4630      	mov	r0, r6
 800961c:	4639      	mov	r1, r7
 800961e:	f7f6 fe01 	bl	8000224 <__adddf3>
 8009622:	4632      	mov	r2, r6
 8009624:	463b      	mov	r3, r7
 8009626:	4680      	mov	r8, r0
 8009628:	4689      	mov	r9, r1
 800962a:	f7f6 fdf9 	bl	8000220 <__aeabi_dsub>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	4620      	mov	r0, r4
 8009634:	4629      	mov	r1, r5
 8009636:	f7f6 fdf3 	bl	8000220 <__aeabi_dsub>
 800963a:	4642      	mov	r2, r8
 800963c:	4606      	mov	r6, r0
 800963e:	460f      	mov	r7, r1
 8009640:	464b      	mov	r3, r9
 8009642:	4640      	mov	r0, r8
 8009644:	4649      	mov	r1, r9
 8009646:	f7f6 ffa3 	bl	8000590 <__aeabi_dmul>
 800964a:	a35d      	add	r3, pc, #372	; (adr r3, 80097c0 <__ieee754_pow+0xa10>)
 800964c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009650:	4604      	mov	r4, r0
 8009652:	460d      	mov	r5, r1
 8009654:	f7f6 ff9c 	bl	8000590 <__aeabi_dmul>
 8009658:	a35b      	add	r3, pc, #364	; (adr r3, 80097c8 <__ieee754_pow+0xa18>)
 800965a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965e:	f7f6 fddf 	bl	8000220 <__aeabi_dsub>
 8009662:	4622      	mov	r2, r4
 8009664:	462b      	mov	r3, r5
 8009666:	f7f6 ff93 	bl	8000590 <__aeabi_dmul>
 800966a:	a359      	add	r3, pc, #356	; (adr r3, 80097d0 <__ieee754_pow+0xa20>)
 800966c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009670:	f7f6 fdd8 	bl	8000224 <__adddf3>
 8009674:	4622      	mov	r2, r4
 8009676:	462b      	mov	r3, r5
 8009678:	f7f6 ff8a 	bl	8000590 <__aeabi_dmul>
 800967c:	a356      	add	r3, pc, #344	; (adr r3, 80097d8 <__ieee754_pow+0xa28>)
 800967e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009682:	f7f6 fdcd 	bl	8000220 <__aeabi_dsub>
 8009686:	4622      	mov	r2, r4
 8009688:	462b      	mov	r3, r5
 800968a:	f7f6 ff81 	bl	8000590 <__aeabi_dmul>
 800968e:	a354      	add	r3, pc, #336	; (adr r3, 80097e0 <__ieee754_pow+0xa30>)
 8009690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009694:	f7f6 fdc6 	bl	8000224 <__adddf3>
 8009698:	4622      	mov	r2, r4
 800969a:	462b      	mov	r3, r5
 800969c:	f7f6 ff78 	bl	8000590 <__aeabi_dmul>
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	4640      	mov	r0, r8
 80096a6:	4649      	mov	r1, r9
 80096a8:	f7f6 fdba 	bl	8000220 <__aeabi_dsub>
 80096ac:	4604      	mov	r4, r0
 80096ae:	460d      	mov	r5, r1
 80096b0:	4602      	mov	r2, r0
 80096b2:	460b      	mov	r3, r1
 80096b4:	4640      	mov	r0, r8
 80096b6:	4649      	mov	r1, r9
 80096b8:	f7f6 ff6a 	bl	8000590 <__aeabi_dmul>
 80096bc:	2200      	movs	r2, #0
 80096be:	ec41 0b19 	vmov	d9, r0, r1
 80096c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096c6:	4620      	mov	r0, r4
 80096c8:	4629      	mov	r1, r5
 80096ca:	f7f6 fda9 	bl	8000220 <__aeabi_dsub>
 80096ce:	4602      	mov	r2, r0
 80096d0:	460b      	mov	r3, r1
 80096d2:	ec51 0b19 	vmov	r0, r1, d9
 80096d6:	f7f7 f885 	bl	80007e4 <__aeabi_ddiv>
 80096da:	4632      	mov	r2, r6
 80096dc:	4604      	mov	r4, r0
 80096de:	460d      	mov	r5, r1
 80096e0:	463b      	mov	r3, r7
 80096e2:	4640      	mov	r0, r8
 80096e4:	4649      	mov	r1, r9
 80096e6:	f7f6 ff53 	bl	8000590 <__aeabi_dmul>
 80096ea:	4632      	mov	r2, r6
 80096ec:	463b      	mov	r3, r7
 80096ee:	f7f6 fd99 	bl	8000224 <__adddf3>
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	4620      	mov	r0, r4
 80096f8:	4629      	mov	r1, r5
 80096fa:	f7f6 fd91 	bl	8000220 <__aeabi_dsub>
 80096fe:	4642      	mov	r2, r8
 8009700:	464b      	mov	r3, r9
 8009702:	f7f6 fd8d 	bl	8000220 <__aeabi_dsub>
 8009706:	460b      	mov	r3, r1
 8009708:	4602      	mov	r2, r0
 800970a:	4939      	ldr	r1, [pc, #228]	; (80097f0 <__ieee754_pow+0xa40>)
 800970c:	2000      	movs	r0, #0
 800970e:	f7f6 fd87 	bl	8000220 <__aeabi_dsub>
 8009712:	ec41 0b10 	vmov	d0, r0, r1
 8009716:	ee10 3a90 	vmov	r3, s1
 800971a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800971e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009722:	da2b      	bge.n	800977c <__ieee754_pow+0x9cc>
 8009724:	4650      	mov	r0, sl
 8009726:	f000 f877 	bl	8009818 <scalbn>
 800972a:	ec51 0b10 	vmov	r0, r1, d0
 800972e:	ec53 2b18 	vmov	r2, r3, d8
 8009732:	f7ff bbee 	b.w	8008f12 <__ieee754_pow+0x162>
 8009736:	4b2f      	ldr	r3, [pc, #188]	; (80097f4 <__ieee754_pow+0xa44>)
 8009738:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800973c:	429e      	cmp	r6, r3
 800973e:	f77f af0d 	ble.w	800955c <__ieee754_pow+0x7ac>
 8009742:	4b2d      	ldr	r3, [pc, #180]	; (80097f8 <__ieee754_pow+0xa48>)
 8009744:	440b      	add	r3, r1
 8009746:	4303      	orrs	r3, r0
 8009748:	d009      	beq.n	800975e <__ieee754_pow+0x9ae>
 800974a:	ec51 0b18 	vmov	r0, r1, d8
 800974e:	2200      	movs	r2, #0
 8009750:	2300      	movs	r3, #0
 8009752:	f7f7 f98f 	bl	8000a74 <__aeabi_dcmplt>
 8009756:	3800      	subs	r0, #0
 8009758:	bf18      	it	ne
 800975a:	2001      	movne	r0, #1
 800975c:	e448      	b.n	8008ff0 <__ieee754_pow+0x240>
 800975e:	4622      	mov	r2, r4
 8009760:	462b      	mov	r3, r5
 8009762:	f7f6 fd5d 	bl	8000220 <__aeabi_dsub>
 8009766:	4642      	mov	r2, r8
 8009768:	464b      	mov	r3, r9
 800976a:	f7f7 f997 	bl	8000a9c <__aeabi_dcmpge>
 800976e:	2800      	cmp	r0, #0
 8009770:	f43f aef4 	beq.w	800955c <__ieee754_pow+0x7ac>
 8009774:	e7e9      	b.n	800974a <__ieee754_pow+0x99a>
 8009776:	f04f 0a00 	mov.w	sl, #0
 800977a:	e71a      	b.n	80095b2 <__ieee754_pow+0x802>
 800977c:	ec51 0b10 	vmov	r0, r1, d0
 8009780:	4619      	mov	r1, r3
 8009782:	e7d4      	b.n	800972e <__ieee754_pow+0x97e>
 8009784:	491a      	ldr	r1, [pc, #104]	; (80097f0 <__ieee754_pow+0xa40>)
 8009786:	2000      	movs	r0, #0
 8009788:	f7ff bb31 	b.w	8008dee <__ieee754_pow+0x3e>
 800978c:	2000      	movs	r0, #0
 800978e:	2100      	movs	r1, #0
 8009790:	f7ff bb2d 	b.w	8008dee <__ieee754_pow+0x3e>
 8009794:	4630      	mov	r0, r6
 8009796:	4639      	mov	r1, r7
 8009798:	f7ff bb29 	b.w	8008dee <__ieee754_pow+0x3e>
 800979c:	9204      	str	r2, [sp, #16]
 800979e:	f7ff bb7b 	b.w	8008e98 <__ieee754_pow+0xe8>
 80097a2:	2300      	movs	r3, #0
 80097a4:	f7ff bb65 	b.w	8008e72 <__ieee754_pow+0xc2>
 80097a8:	00000000 	.word	0x00000000
 80097ac:	3fe62e43 	.word	0x3fe62e43
 80097b0:	fefa39ef 	.word	0xfefa39ef
 80097b4:	3fe62e42 	.word	0x3fe62e42
 80097b8:	0ca86c39 	.word	0x0ca86c39
 80097bc:	be205c61 	.word	0xbe205c61
 80097c0:	72bea4d0 	.word	0x72bea4d0
 80097c4:	3e663769 	.word	0x3e663769
 80097c8:	c5d26bf1 	.word	0xc5d26bf1
 80097cc:	3ebbbd41 	.word	0x3ebbbd41
 80097d0:	af25de2c 	.word	0xaf25de2c
 80097d4:	3f11566a 	.word	0x3f11566a
 80097d8:	16bebd93 	.word	0x16bebd93
 80097dc:	3f66c16c 	.word	0x3f66c16c
 80097e0:	5555553e 	.word	0x5555553e
 80097e4:	3fc55555 	.word	0x3fc55555
 80097e8:	3fe00000 	.word	0x3fe00000
 80097ec:	fff00000 	.word	0xfff00000
 80097f0:	3ff00000 	.word	0x3ff00000
 80097f4:	4090cbff 	.word	0x4090cbff
 80097f8:	3f6f3400 	.word	0x3f6f3400
 80097fc:	652b82fe 	.word	0x652b82fe
 8009800:	3c971547 	.word	0x3c971547

08009804 <fabs>:
 8009804:	ec51 0b10 	vmov	r0, r1, d0
 8009808:	ee10 2a10 	vmov	r2, s0
 800980c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009810:	ec43 2b10 	vmov	d0, r2, r3
 8009814:	4770      	bx	lr
	...

08009818 <scalbn>:
 8009818:	b570      	push	{r4, r5, r6, lr}
 800981a:	ec55 4b10 	vmov	r4, r5, d0
 800981e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009822:	4606      	mov	r6, r0
 8009824:	462b      	mov	r3, r5
 8009826:	b999      	cbnz	r1, 8009850 <scalbn+0x38>
 8009828:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800982c:	4323      	orrs	r3, r4
 800982e:	d03f      	beq.n	80098b0 <scalbn+0x98>
 8009830:	4b35      	ldr	r3, [pc, #212]	; (8009908 <scalbn+0xf0>)
 8009832:	4629      	mov	r1, r5
 8009834:	ee10 0a10 	vmov	r0, s0
 8009838:	2200      	movs	r2, #0
 800983a:	f7f6 fea9 	bl	8000590 <__aeabi_dmul>
 800983e:	4b33      	ldr	r3, [pc, #204]	; (800990c <scalbn+0xf4>)
 8009840:	429e      	cmp	r6, r3
 8009842:	4604      	mov	r4, r0
 8009844:	460d      	mov	r5, r1
 8009846:	da10      	bge.n	800986a <scalbn+0x52>
 8009848:	a327      	add	r3, pc, #156	; (adr r3, 80098e8 <scalbn+0xd0>)
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	e01f      	b.n	8009890 <scalbn+0x78>
 8009850:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009854:	4291      	cmp	r1, r2
 8009856:	d10c      	bne.n	8009872 <scalbn+0x5a>
 8009858:	ee10 2a10 	vmov	r2, s0
 800985c:	4620      	mov	r0, r4
 800985e:	4629      	mov	r1, r5
 8009860:	f7f6 fce0 	bl	8000224 <__adddf3>
 8009864:	4604      	mov	r4, r0
 8009866:	460d      	mov	r5, r1
 8009868:	e022      	b.n	80098b0 <scalbn+0x98>
 800986a:	460b      	mov	r3, r1
 800986c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009870:	3936      	subs	r1, #54	; 0x36
 8009872:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009876:	4296      	cmp	r6, r2
 8009878:	dd0d      	ble.n	8009896 <scalbn+0x7e>
 800987a:	2d00      	cmp	r5, #0
 800987c:	a11c      	add	r1, pc, #112	; (adr r1, 80098f0 <scalbn+0xd8>)
 800987e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009882:	da02      	bge.n	800988a <scalbn+0x72>
 8009884:	a11c      	add	r1, pc, #112	; (adr r1, 80098f8 <scalbn+0xe0>)
 8009886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800988a:	a319      	add	r3, pc, #100	; (adr r3, 80098f0 <scalbn+0xd8>)
 800988c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009890:	f7f6 fe7e 	bl	8000590 <__aeabi_dmul>
 8009894:	e7e6      	b.n	8009864 <scalbn+0x4c>
 8009896:	1872      	adds	r2, r6, r1
 8009898:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800989c:	428a      	cmp	r2, r1
 800989e:	dcec      	bgt.n	800987a <scalbn+0x62>
 80098a0:	2a00      	cmp	r2, #0
 80098a2:	dd08      	ble.n	80098b6 <scalbn+0x9e>
 80098a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80098b0:	ec45 4b10 	vmov	d0, r4, r5
 80098b4:	bd70      	pop	{r4, r5, r6, pc}
 80098b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80098ba:	da08      	bge.n	80098ce <scalbn+0xb6>
 80098bc:	2d00      	cmp	r5, #0
 80098be:	a10a      	add	r1, pc, #40	; (adr r1, 80098e8 <scalbn+0xd0>)
 80098c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098c4:	dac0      	bge.n	8009848 <scalbn+0x30>
 80098c6:	a10e      	add	r1, pc, #56	; (adr r1, 8009900 <scalbn+0xe8>)
 80098c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098cc:	e7bc      	b.n	8009848 <scalbn+0x30>
 80098ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098d2:	3236      	adds	r2, #54	; 0x36
 80098d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80098dc:	4620      	mov	r0, r4
 80098de:	4b0c      	ldr	r3, [pc, #48]	; (8009910 <scalbn+0xf8>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	e7d5      	b.n	8009890 <scalbn+0x78>
 80098e4:	f3af 8000 	nop.w
 80098e8:	c2f8f359 	.word	0xc2f8f359
 80098ec:	01a56e1f 	.word	0x01a56e1f
 80098f0:	8800759c 	.word	0x8800759c
 80098f4:	7e37e43c 	.word	0x7e37e43c
 80098f8:	8800759c 	.word	0x8800759c
 80098fc:	fe37e43c 	.word	0xfe37e43c
 8009900:	c2f8f359 	.word	0xc2f8f359
 8009904:	81a56e1f 	.word	0x81a56e1f
 8009908:	43500000 	.word	0x43500000
 800990c:	ffff3cb0 	.word	0xffff3cb0
 8009910:	3c900000 	.word	0x3c900000

08009914 <with_errno>:
 8009914:	b570      	push	{r4, r5, r6, lr}
 8009916:	4604      	mov	r4, r0
 8009918:	460d      	mov	r5, r1
 800991a:	4616      	mov	r6, r2
 800991c:	f7ff f9a2 	bl	8008c64 <__errno>
 8009920:	4629      	mov	r1, r5
 8009922:	6006      	str	r6, [r0, #0]
 8009924:	4620      	mov	r0, r4
 8009926:	bd70      	pop	{r4, r5, r6, pc}

08009928 <xflow>:
 8009928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800992a:	4614      	mov	r4, r2
 800992c:	461d      	mov	r5, r3
 800992e:	b108      	cbz	r0, 8009934 <xflow+0xc>
 8009930:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009934:	e9cd 2300 	strd	r2, r3, [sp]
 8009938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800993c:	4620      	mov	r0, r4
 800993e:	4629      	mov	r1, r5
 8009940:	f7f6 fe26 	bl	8000590 <__aeabi_dmul>
 8009944:	2222      	movs	r2, #34	; 0x22
 8009946:	b003      	add	sp, #12
 8009948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800994c:	f7ff bfe2 	b.w	8009914 <with_errno>

08009950 <__math_uflow>:
 8009950:	b508      	push	{r3, lr}
 8009952:	2200      	movs	r2, #0
 8009954:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009958:	f7ff ffe6 	bl	8009928 <xflow>
 800995c:	ec41 0b10 	vmov	d0, r0, r1
 8009960:	bd08      	pop	{r3, pc}

08009962 <__math_oflow>:
 8009962:	b508      	push	{r3, lr}
 8009964:	2200      	movs	r2, #0
 8009966:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800996a:	f7ff ffdd 	bl	8009928 <xflow>
 800996e:	ec41 0b10 	vmov	d0, r0, r1
 8009972:	bd08      	pop	{r3, pc}

08009974 <__ieee754_sqrt>:
 8009974:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009978:	ec55 4b10 	vmov	r4, r5, d0
 800997c:	4e67      	ldr	r6, [pc, #412]	; (8009b1c <__ieee754_sqrt+0x1a8>)
 800997e:	43ae      	bics	r6, r5
 8009980:	ee10 0a10 	vmov	r0, s0
 8009984:	ee10 2a10 	vmov	r2, s0
 8009988:	4629      	mov	r1, r5
 800998a:	462b      	mov	r3, r5
 800998c:	d10d      	bne.n	80099aa <__ieee754_sqrt+0x36>
 800998e:	f7f6 fdff 	bl	8000590 <__aeabi_dmul>
 8009992:	4602      	mov	r2, r0
 8009994:	460b      	mov	r3, r1
 8009996:	4620      	mov	r0, r4
 8009998:	4629      	mov	r1, r5
 800999a:	f7f6 fc43 	bl	8000224 <__adddf3>
 800999e:	4604      	mov	r4, r0
 80099a0:	460d      	mov	r5, r1
 80099a2:	ec45 4b10 	vmov	d0, r4, r5
 80099a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099aa:	2d00      	cmp	r5, #0
 80099ac:	dc0b      	bgt.n	80099c6 <__ieee754_sqrt+0x52>
 80099ae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80099b2:	4326      	orrs	r6, r4
 80099b4:	d0f5      	beq.n	80099a2 <__ieee754_sqrt+0x2e>
 80099b6:	b135      	cbz	r5, 80099c6 <__ieee754_sqrt+0x52>
 80099b8:	f7f6 fc32 	bl	8000220 <__aeabi_dsub>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	f7f6 ff10 	bl	80007e4 <__aeabi_ddiv>
 80099c4:	e7eb      	b.n	800999e <__ieee754_sqrt+0x2a>
 80099c6:	1509      	asrs	r1, r1, #20
 80099c8:	f000 808d 	beq.w	8009ae6 <__ieee754_sqrt+0x172>
 80099cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099d0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80099d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099d8:	07c9      	lsls	r1, r1, #31
 80099da:	bf5c      	itt	pl
 80099dc:	005b      	lslpl	r3, r3, #1
 80099de:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80099e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80099e6:	bf58      	it	pl
 80099e8:	0052      	lslpl	r2, r2, #1
 80099ea:	2500      	movs	r5, #0
 80099ec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80099f0:	1076      	asrs	r6, r6, #1
 80099f2:	0052      	lsls	r2, r2, #1
 80099f4:	f04f 0e16 	mov.w	lr, #22
 80099f8:	46ac      	mov	ip, r5
 80099fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80099fe:	eb0c 0001 	add.w	r0, ip, r1
 8009a02:	4298      	cmp	r0, r3
 8009a04:	bfde      	ittt	le
 8009a06:	1a1b      	suble	r3, r3, r0
 8009a08:	eb00 0c01 	addle.w	ip, r0, r1
 8009a0c:	186d      	addle	r5, r5, r1
 8009a0e:	005b      	lsls	r3, r3, #1
 8009a10:	f1be 0e01 	subs.w	lr, lr, #1
 8009a14:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009a18:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009a1c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009a20:	d1ed      	bne.n	80099fe <__ieee754_sqrt+0x8a>
 8009a22:	4674      	mov	r4, lr
 8009a24:	2720      	movs	r7, #32
 8009a26:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009a2a:	4563      	cmp	r3, ip
 8009a2c:	eb01 000e 	add.w	r0, r1, lr
 8009a30:	dc02      	bgt.n	8009a38 <__ieee754_sqrt+0xc4>
 8009a32:	d113      	bne.n	8009a5c <__ieee754_sqrt+0xe8>
 8009a34:	4290      	cmp	r0, r2
 8009a36:	d811      	bhi.n	8009a5c <__ieee754_sqrt+0xe8>
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	eb00 0e01 	add.w	lr, r0, r1
 8009a3e:	da57      	bge.n	8009af0 <__ieee754_sqrt+0x17c>
 8009a40:	f1be 0f00 	cmp.w	lr, #0
 8009a44:	db54      	blt.n	8009af0 <__ieee754_sqrt+0x17c>
 8009a46:	f10c 0801 	add.w	r8, ip, #1
 8009a4a:	eba3 030c 	sub.w	r3, r3, ip
 8009a4e:	4290      	cmp	r0, r2
 8009a50:	bf88      	it	hi
 8009a52:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009a56:	1a12      	subs	r2, r2, r0
 8009a58:	440c      	add	r4, r1
 8009a5a:	46c4      	mov	ip, r8
 8009a5c:	005b      	lsls	r3, r3, #1
 8009a5e:	3f01      	subs	r7, #1
 8009a60:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009a64:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009a68:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009a6c:	d1dd      	bne.n	8009a2a <__ieee754_sqrt+0xb6>
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	d01b      	beq.n	8009aaa <__ieee754_sqrt+0x136>
 8009a72:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009b20 <__ieee754_sqrt+0x1ac>
 8009a76:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009b24 <__ieee754_sqrt+0x1b0>
 8009a7a:	e9da 0100 	ldrd	r0, r1, [sl]
 8009a7e:	e9db 2300 	ldrd	r2, r3, [fp]
 8009a82:	f7f6 fbcd 	bl	8000220 <__aeabi_dsub>
 8009a86:	e9da 8900 	ldrd	r8, r9, [sl]
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	4640      	mov	r0, r8
 8009a90:	4649      	mov	r1, r9
 8009a92:	f7f6 fff9 	bl	8000a88 <__aeabi_dcmple>
 8009a96:	b140      	cbz	r0, 8009aaa <__ieee754_sqrt+0x136>
 8009a98:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009a9c:	e9da 0100 	ldrd	r0, r1, [sl]
 8009aa0:	e9db 2300 	ldrd	r2, r3, [fp]
 8009aa4:	d126      	bne.n	8009af4 <__ieee754_sqrt+0x180>
 8009aa6:	3501      	adds	r5, #1
 8009aa8:	463c      	mov	r4, r7
 8009aaa:	106a      	asrs	r2, r5, #1
 8009aac:	0863      	lsrs	r3, r4, #1
 8009aae:	07e9      	lsls	r1, r5, #31
 8009ab0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009ab4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009ab8:	bf48      	it	mi
 8009aba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009abe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8009ac2:	461c      	mov	r4, r3
 8009ac4:	e76d      	b.n	80099a2 <__ieee754_sqrt+0x2e>
 8009ac6:	0ad3      	lsrs	r3, r2, #11
 8009ac8:	3815      	subs	r0, #21
 8009aca:	0552      	lsls	r2, r2, #21
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d0fa      	beq.n	8009ac6 <__ieee754_sqrt+0x152>
 8009ad0:	02dc      	lsls	r4, r3, #11
 8009ad2:	d50a      	bpl.n	8009aea <__ieee754_sqrt+0x176>
 8009ad4:	f1c1 0420 	rsb	r4, r1, #32
 8009ad8:	fa22 f404 	lsr.w	r4, r2, r4
 8009adc:	1e4d      	subs	r5, r1, #1
 8009ade:	408a      	lsls	r2, r1
 8009ae0:	4323      	orrs	r3, r4
 8009ae2:	1b41      	subs	r1, r0, r5
 8009ae4:	e772      	b.n	80099cc <__ieee754_sqrt+0x58>
 8009ae6:	4608      	mov	r0, r1
 8009ae8:	e7f0      	b.n	8009acc <__ieee754_sqrt+0x158>
 8009aea:	005b      	lsls	r3, r3, #1
 8009aec:	3101      	adds	r1, #1
 8009aee:	e7ef      	b.n	8009ad0 <__ieee754_sqrt+0x15c>
 8009af0:	46e0      	mov	r8, ip
 8009af2:	e7aa      	b.n	8009a4a <__ieee754_sqrt+0xd6>
 8009af4:	f7f6 fb96 	bl	8000224 <__adddf3>
 8009af8:	e9da 8900 	ldrd	r8, r9, [sl]
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4640      	mov	r0, r8
 8009b02:	4649      	mov	r1, r9
 8009b04:	f7f6 ffb6 	bl	8000a74 <__aeabi_dcmplt>
 8009b08:	b120      	cbz	r0, 8009b14 <__ieee754_sqrt+0x1a0>
 8009b0a:	1ca0      	adds	r0, r4, #2
 8009b0c:	bf08      	it	eq
 8009b0e:	3501      	addeq	r5, #1
 8009b10:	3402      	adds	r4, #2
 8009b12:	e7ca      	b.n	8009aaa <__ieee754_sqrt+0x136>
 8009b14:	3401      	adds	r4, #1
 8009b16:	f024 0401 	bic.w	r4, r4, #1
 8009b1a:	e7c6      	b.n	8009aaa <__ieee754_sqrt+0x136>
 8009b1c:	7ff00000 	.word	0x7ff00000
 8009b20:	20000078 	.word	0x20000078
 8009b24:	20000080 	.word	0x20000080

08009b28 <_init>:
 8009b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2a:	bf00      	nop
 8009b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b2e:	bc08      	pop	{r3}
 8009b30:	469e      	mov	lr, r3
 8009b32:	4770      	bx	lr

08009b34 <_fini>:
 8009b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b36:	bf00      	nop
 8009b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b3a:	bc08      	pop	{r3}
 8009b3c:	469e      	mov	lr, r3
 8009b3e:	4770      	bx	lr
