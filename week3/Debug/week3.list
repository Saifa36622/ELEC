
week3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048a8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac0  08004ac0  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ac8  08004ac8  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac8  08004ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004acc  08004acc  00014acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08004ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000054  08004b24  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08004b24  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000106e9  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a1  00000000  00000000  000307b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  00032858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a49  00000000  00000000  000335b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026043  00000000  00000000  00034001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010c13  00000000  00000000  0005a044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc43d  00000000  00000000  0006ac57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003860  00000000  00000000  00167094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0016a8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000054 	.word	0x20000054
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004a68 	.word	0x08004a68

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000058 	.word	0x20000058
 8000214:	08004a68 	.word	0x08004a68

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb1b 	bl	8000b52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f810 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f91c 	bl	800075c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f8d0 	bl	80006c8 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000528:	f000 f856 	bl	80005d8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800052c:	217f      	movs	r1, #127	; 0x7f
 800052e:	4803      	ldr	r0, [pc, #12]	; (800053c <main+0x28>)
 8000530:	f001 fffc 	bl	800252c <HAL_ADCEx_Calibration_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 ADC_Read_blocking();
 8000534:	f000 f980 	bl	8000838 <ADC_Read_blocking>
 8000538:	e7fc      	b.n	8000534 <main+0x20>
 800053a:	bf00      	nop
 800053c:	20000070 	.word	0x20000070

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	2238      	movs	r2, #56	; 0x38
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f004 fa5e 	bl	8004a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000562:	2000      	movs	r0, #0
 8000564:	f002 fc1a 	bl	8002d9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000572:	2340      	movs	r3, #64	; 0x40
 8000574:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800057e:	2304      	movs	r3, #4
 8000580:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000582:	2355      	movs	r3, #85	; 0x55
 8000584:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0318 	add.w	r3, r7, #24
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fcb4 	bl	8002f04 <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005a2:	f000 f993 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2303      	movs	r3, #3
 80005ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2104      	movs	r1, #4
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 ffb8 	bl	8003534 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ca:	f000 f97f 	bl	80008cc <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3750      	adds	r7, #80	; 0x50
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08c      	sub	sp, #48	; 0x30
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2220      	movs	r2, #32
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f004 fa0d 	bl	8004a10 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f6:	4b32      	ldr	r3, [pc, #200]	; (80006c0 <MX_ADC1_Init+0xe8>)
 80005f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005fe:	4b30      	ldr	r3, [pc, #192]	; (80006c0 <MX_ADC1_Init+0xe8>)
 8000600:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000604:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000606:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <MX_ADC1_Init+0xe8>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060c:	4b2c      	ldr	r3, [pc, #176]	; (80006c0 <MX_ADC1_Init+0xe8>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000612:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <MX_ADC1_Init+0xe8>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000618:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <MX_ADC1_Init+0xe8>)
 800061a:	2200      	movs	r2, #0
 800061c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <MX_ADC1_Init+0xe8>)
 8000620:	2204      	movs	r2, #4
 8000622:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <MX_ADC1_Init+0xe8>)
 8000626:	2200      	movs	r2, #0
 8000628:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800062a:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <MX_ADC1_Init+0xe8>)
 800062c:	2200      	movs	r2, #0
 800062e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <MX_ADC1_Init+0xe8>)
 8000632:	2201      	movs	r2, #1
 8000634:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000636:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <MX_ADC1_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063e:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <MX_ADC1_Init+0xe8>)
 8000646:	2200      	movs	r2, #0
 8000648:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000652:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_ADC1_Init+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000660:	4817      	ldr	r0, [pc, #92]	; (80006c0 <MX_ADC1_Init+0xe8>)
 8000662:	f000 fd65 	bl	8001130 <HAL_ADC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800066c:	f000 f92e 	bl	80008cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000670:	2300      	movs	r3, #0
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000678:	4619      	mov	r1, r3
 800067a:	4811      	ldr	r0, [pc, #68]	; (80006c0 <MX_ADC1_Init+0xe8>)
 800067c:	f001 ffb8 	bl	80025f0 <HAL_ADCEx_MultiModeConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000686:	f000 f921 	bl	80008cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_ADC1_Init+0xec>)
 800068c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068e:	2306      	movs	r3, #6
 8000690:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000696:	237f      	movs	r3, #127	; 0x7f
 8000698:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800069a:	2304      	movs	r3, #4
 800069c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <MX_ADC1_Init+0xe8>)
 80006a8:	f001 f930 	bl	800190c <HAL_ADC_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006b2:	f000 f90b 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	3730      	adds	r7, #48	; 0x30
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000070 	.word	0x20000070
 80006c4:	04300002 	.word	0x04300002

080006c8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006cc:	4b21      	ldr	r3, [pc, #132]	; (8000754 <MX_LPUART1_UART_Init+0x8c>)
 80006ce:	4a22      	ldr	r2, [pc, #136]	; (8000758 <MX_LPUART1_UART_Init+0x90>)
 80006d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <MX_LPUART1_UART_Init+0x8c>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <MX_LPUART1_UART_Init+0x8c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_LPUART1_UART_Init+0x8c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_LPUART1_UART_Init+0x8c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_LPUART1_UART_Init+0x8c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_LPUART1_UART_Init+0x8c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_LPUART1_UART_Init+0x8c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_LPUART1_UART_Init+0x8c>)
 8000700:	2200      	movs	r2, #0
 8000702:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_LPUART1_UART_Init+0x8c>)
 8000706:	2200      	movs	r2, #0
 8000708:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800070a:	4812      	ldr	r0, [pc, #72]	; (8000754 <MX_LPUART1_UART_Init+0x8c>)
 800070c:	f003 fb7c 	bl	8003e08 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000716:	f000 f8d9 	bl	80008cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800071a:	2100      	movs	r1, #0
 800071c:	480d      	ldr	r0, [pc, #52]	; (8000754 <MX_LPUART1_UART_Init+0x8c>)
 800071e:	f004 f8ad 	bl	800487c <HAL_UARTEx_SetTxFifoThreshold>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000728:	f000 f8d0 	bl	80008cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800072c:	2100      	movs	r1, #0
 800072e:	4809      	ldr	r0, [pc, #36]	; (8000754 <MX_LPUART1_UART_Init+0x8c>)
 8000730:	f004 f8e2 	bl	80048f8 <HAL_UARTEx_SetRxFifoThreshold>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800073a:	f000 f8c7 	bl	80008cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_LPUART1_UART_Init+0x8c>)
 8000740:	f004 f863 	bl	800480a <HAL_UARTEx_DisableFifoMode>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800074a:	f000 f8bf 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200000dc 	.word	0x200000dc
 8000758:	40008000 	.word	0x40008000

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <MX_GPIO_Init+0xd4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a2e      	ldr	r2, [pc, #184]	; (8000830 <MX_GPIO_Init+0xd4>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <MX_GPIO_Init+0xd4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078a:	4b29      	ldr	r3, [pc, #164]	; (8000830 <MX_GPIO_Init+0xd4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a28      	ldr	r2, [pc, #160]	; (8000830 <MX_GPIO_Init+0xd4>)
 8000790:	f043 0320 	orr.w	r3, r3, #32
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_GPIO_Init+0xd4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0320 	and.w	r3, r3, #32
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_GPIO_Init+0xd4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a22      	ldr	r2, [pc, #136]	; (8000830 <MX_GPIO_Init+0xd4>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <MX_GPIO_Init+0xd4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <MX_GPIO_Init+0xd4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <MX_GPIO_Init+0xd4>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_GPIO_Init+0xd4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2120      	movs	r1, #32
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007da:	f002 faa3 	bl	8002d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	480f      	ldr	r0, [pc, #60]	; (8000834 <MX_GPIO_Init+0xd8>)
 80007f6:	f002 f913 	bl	8002a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007fa:	2320      	movs	r3, #32
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f002 f904 	bl	8002a20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2028      	movs	r0, #40	; 0x28
 800081e:	f002 f8ca 	bl	80029b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000822:	2028      	movs	r0, #40	; 0x28
 8000824:	f002 f8e1 	bl	80029ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000
 8000834:	48000800 	.word	0x48000800

08000838 <ADC_Read_blocking>:

/* USER CODE BEGIN 4 */
void ADC_Read_blocking()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
static uint32_t TimeStamp = 0;
if( HAL_GetTick()<TimeStamp) return;
 800083e:	f000 f9ed 	bl	8000c1c <HAL_GetTick>
 8000842:	4602      	mov	r2, r0
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <ADC_Read_blocking+0x88>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	429a      	cmp	r2, r3
 800084a:	d334      	bcc.n	80008b6 <ADC_Read_blocking+0x7e>
TimeStamp = HAL_GetTick()+500;
 800084c:	f000 f9e6 	bl	8000c1c <HAL_GetTick>
 8000850:	4603      	mov	r3, r0
 8000852:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000856:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <ADC_Read_blocking+0x88>)
 8000858:	6013      	str	r3, [r2, #0]
for(int i=0;i<2;i++)
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	e026      	b.n	80008ae <ADC_Read_blocking+0x76>
{
HAL_ADC_ConfigChannel(&hadc1, &ADC1_Channel[i].Config);
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	4613      	mov	r3, r2
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	4413      	add	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <ADC_Read_blocking+0x8c>)
 800086c:	4413      	add	r3, r2
 800086e:	4619      	mov	r1, r3
 8000870:	4815      	ldr	r0, [pc, #84]	; (80008c8 <ADC_Read_blocking+0x90>)
 8000872:	f001 f84b 	bl	800190c <HAL_ADC_ConfigChannel>
HAL_ADC_Start(&hadc1);
 8000876:	4814      	ldr	r0, [pc, #80]	; (80008c8 <ADC_Read_blocking+0x90>)
 8000878:	f000 fe1c 	bl	80014b4 <HAL_ADC_Start>
HAL_ADC_PollForConversion(&hadc1, 100);
 800087c:	2164      	movs	r1, #100	; 0x64
 800087e:	4812      	ldr	r0, [pc, #72]	; (80008c8 <ADC_Read_blocking+0x90>)
 8000880:	f000 ff30 	bl	80016e4 <HAL_ADC_PollForConversion>
ADC1_Channel[i].data = HAL_ADC_GetValue(&hadc1);
 8000884:	4810      	ldr	r0, [pc, #64]	; (80008c8 <ADC_Read_blocking+0x90>)
 8000886:	f001 f833 	bl	80018f0 <HAL_ADC_GetValue>
 800088a:	4603      	mov	r3, r0
 800088c:	b298      	uxth	r0, r3
 800088e:	490d      	ldr	r1, [pc, #52]	; (80008c4 <ADC_Read_blocking+0x8c>)
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	4613      	mov	r3, r2
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	4413      	add	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	440b      	add	r3, r1
 800089c:	3320      	adds	r3, #32
 800089e:	4602      	mov	r2, r0
 80008a0:	801a      	strh	r2, [r3, #0]
HAL_ADC_Stop(&hadc1);
 80008a2:	4809      	ldr	r0, [pc, #36]	; (80008c8 <ADC_Read_blocking+0x90>)
 80008a4:	f000 feea 	bl	800167c <HAL_ADC_Stop>
for(int i=0;i<2;i++)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3301      	adds	r3, #1
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	ddd5      	ble.n	8000860 <ADC_Read_blocking+0x28>
 80008b4:	e000      	b.n	80008b8 <ADC_Read_blocking+0x80>
if( HAL_GetTick()<TimeStamp) return;
 80008b6:	bf00      	nop
}
}
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000016c 	.word	0x2000016c
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000070 	.word	0x20000070

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_MspInit+0x44>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <HAL_MspInit+0x44>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_MspInit+0x44>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_MspInit+0x44>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_MspInit+0x44>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6593      	str	r3, [r2, #88]	; 0x58
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_MspInit+0x44>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800090e:	f002 fae9 	bl	8002ee4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b09e      	sub	sp, #120	; 0x78
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	2254      	movs	r2, #84	; 0x54
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f004 f865 	bl	8004a10 <memset>
  if(hadc->Instance==ADC1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800094e:	d134      	bne.n	80009ba <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000950:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000954:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000956:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800095a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4618      	mov	r0, r3
 8000962:	f003 f803 	bl	800396c <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800096c:	f7ff ffae 	bl	80008cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <HAL_ADC_MspInit+0xa4>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000974:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <HAL_ADC_MspInit+0xa4>)
 8000976:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800097a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <HAL_ADC_MspInit+0xa4>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000980:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_ADC_MspInit+0xa4>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <HAL_ADC_MspInit+0xa4>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_ADC_MspInit+0xa4>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009a0:	2301      	movs	r3, #1
 80009a2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a4:	2303      	movs	r3, #3
 80009a6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009b0:	4619      	mov	r1, r3
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b6:	f002 f833 	bl	8002a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009ba:	bf00      	nop
 80009bc:	3778      	adds	r7, #120	; 0x78
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b09e      	sub	sp, #120	; 0x78
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e0:	f107 0310 	add.w	r3, r7, #16
 80009e4:	2254      	movs	r2, #84	; 0x54
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f004 f811 	bl	8004a10 <memset>
  if(huart->Instance==LPUART1)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a1f      	ldr	r2, [pc, #124]	; (8000a70 <HAL_UART_MspInit+0xa8>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d136      	bne.n	8000a66 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009f8:	2320      	movs	r3, #32
 80009fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4618      	mov	r0, r3
 8000a06:	f002 ffb1 	bl	800396c <HAL_RCCEx_PeriphCLKConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a10:	f7ff ff5c 	bl	80008cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_UART_MspInit+0xac>)
 8000a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a18:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <HAL_UART_MspInit+0xac>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_UART_MspInit+0xac>)
 8000a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <HAL_UART_MspInit+0xac>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a30:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <HAL_UART_MspInit+0xac>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_UART_MspInit+0xac>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a44:	230c      	movs	r3, #12
 8000a46:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a54:	230c      	movs	r3, #12
 8000a56:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a62:	f001 ffdd 	bl	8002a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a66:	bf00      	nop
 8000a68:	3778      	adds	r7, #120	; 0x78
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40008000 	.word	0x40008000
 8000a74:	40021000 	.word	0x40021000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f898 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ad0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ad4:	f002 f93e 	bl	8002d54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b00:	480d      	ldr	r0, [pc, #52]	; (8000b38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b06:	490e      	ldr	r1, [pc, #56]	; (8000b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <LoopForever+0xe>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b1c:	4c0b      	ldr	r4, [pc, #44]	; (8000b4c <LoopForever+0x16>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b2a:	f7ff ffd7 	bl	8000adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f003 ff77 	bl	8004a20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b32:	f7ff fcef 	bl	8000514 <main>

08000b36 <LoopForever>:

LoopForever:
    b LoopForever
 8000b36:	e7fe      	b.n	8000b36 <LoopForever>
  ldr   r0, =_estack
 8000b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000b44:	08004ad0 	.word	0x08004ad0
  ldr r2, =_sbss
 8000b48:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000b4c:	20000174 	.word	0x20000174

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>

08000b52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f001 ff1f 	bl	80029a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 f80e 	bl	8000b84 <HAL_InitTick>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	71fb      	strb	r3, [r7, #7]
 8000b72:	e001      	b.n	8000b78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b74:	f7ff feb0 	bl	80008d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b78:	79fb      	ldrb	r3, [r7, #7]

}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_InitTick+0x68>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d022      	beq.n	8000bde <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_InitTick+0x6c>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <HAL_InitTick+0x68>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 ff2a 	bl	8002a06 <HAL_SYSTICK_Config>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10f      	bne.n	8000bd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b0f      	cmp	r3, #15
 8000bbc:	d809      	bhi.n	8000bd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc6:	f001 fef6 	bl	80029b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_InitTick+0x70>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	e007      	b.n	8000be2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	73fb      	strb	r3, [r7, #15]
 8000bd6:	e004      	b.n	8000be2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	73fb      	strb	r3, [r7, #15]
 8000bdc:	e001      	b.n	8000be2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000050 	.word	0x20000050
 8000bf0:	20000048 	.word	0x20000048
 8000bf4:	2000004c 	.word	0x2000004c

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_IncTick+0x1c>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x20>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a03      	ldr	r2, [pc, #12]	; (8000c14 <HAL_IncTick+0x1c>)
 8000c08:	6013      	str	r3, [r2, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	20000170 	.word	0x20000170
 8000c18:	20000050 	.word	0x20000050

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <HAL_GetTick+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000170 	.word	0x20000170

08000c34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	609a      	str	r2, [r3, #8]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b087      	sub	sp, #28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3360      	adds	r3, #96	; 0x60
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <LL_ADC_SetOffset+0x44>)
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000cd4:	bf00      	nop
 8000cd6:	371c      	adds	r7, #28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	03fff000 	.word	0x03fff000

08000ce4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3360      	adds	r3, #96	; 0x60
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3360      	adds	r3, #96	; 0x60
 8000d20:	461a      	mov	r2, r3
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	431a      	orrs	r2, r3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d3a:	bf00      	nop
 8000d3c:	371c      	adds	r7, #28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b087      	sub	sp, #28
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	3360      	adds	r3, #96	; 0x60
 8000d56:	461a      	mov	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000d70:	bf00      	nop
 8000d72:	371c      	adds	r7, #28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3360      	adds	r3, #96	; 0x60
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	431a      	orrs	r2, r3
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000da6:	bf00      	nop
 8000da8:	371c      	adds	r7, #28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	615a      	str	r2, [r3, #20]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d101      	bne.n	8000df0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000dec:	2301      	movs	r3, #1
 8000dee:	e000      	b.n	8000df2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b087      	sub	sp, #28
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	60f8      	str	r0, [r7, #12]
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3330      	adds	r3, #48	; 0x30
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	f003 030c 	and.w	r3, r3, #12
 8000e1a:	4413      	add	r3, r2
 8000e1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	f003 031f 	and.w	r3, r3, #31
 8000e28:	211f      	movs	r1, #31
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	401a      	ands	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	0e9b      	lsrs	r3, r3, #26
 8000e36:	f003 011f 	and.w	r1, r3, #31
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	f003 031f 	and.w	r3, r3, #31
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	431a      	orrs	r2, r3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e4a:	bf00      	nop
 8000e4c:	371c      	adds	r7, #28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b087      	sub	sp, #28
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	3314      	adds	r3, #20
 8000e66:	461a      	mov	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	0e5b      	lsrs	r3, r3, #25
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	4413      	add	r3, r2
 8000e74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	0d1b      	lsrs	r3, r3, #20
 8000e7e:	f003 031f 	and.w	r3, r3, #31
 8000e82:	2107      	movs	r1, #7
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	0d1b      	lsrs	r3, r3, #20
 8000e90:	f003 031f 	and.w	r3, r3, #31
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ea0:	bf00      	nop
 8000ea2:	371c      	adds	r7, #28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d10a      	bne.n	8000ed6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8000ed4:	e00a      	b.n	8000eec <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	407f0000 	.word	0x407f0000

08000efc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f003 031f 	and.w	r3, r3, #31
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	6093      	str	r3, [r2, #8]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f6c:	d101      	bne.n	8000f72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000fbc:	d101      	bne.n	8000fc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fe0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fe4:	f043 0201 	orr.w	r2, r3, #1
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001008:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800100c:	f043 0202 	orr.w	r2, r3, #2
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b01      	cmp	r3, #1
 8001032:	d101      	bne.n	8001038 <LL_ADC_IsEnabled+0x18>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <LL_ADC_IsEnabled+0x1a>
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b02      	cmp	r3, #2
 8001058:	d101      	bne.n	800105e <LL_ADC_IsDisableOngoing+0x18>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <LL_ADC_IsDisableOngoing+0x1a>
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800107c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001080:	f043 0204 	orr.w	r2, r3, #4
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010a8:	f043 0210 	orr.w	r2, r3, #16
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d101      	bne.n	80010d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010d0:	2301      	movs	r3, #1
 80010d2:	e000      	b.n	80010d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010f6:	f043 0220 	orr.w	r2, r3, #32
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	2b08      	cmp	r3, #8
 800111c:	d101      	bne.n	8001122 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e1af      	b.n	80014aa <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001154:	2b00      	cmp	r3, #0
 8001156:	d109      	bne.n	800116c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff fbe1 	bl	8000920 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fef1 	bl	8000f58 <LL_ADC_IsDeepPowerDownEnabled>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d004      	beq.n	8001186 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fed7 	bl	8000f34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff0c 	bl	8000fa8 <LL_ADC_IsInternalRegulatorEnabled>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d115      	bne.n	80011c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fef0 	bl	8000f80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011a0:	4b9f      	ldr	r3, [pc, #636]	; (8001420 <HAL_ADC_Init+0x2f0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	099b      	lsrs	r3, r3, #6
 80011a6:	4a9f      	ldr	r2, [pc, #636]	; (8001424 <HAL_ADC_Init+0x2f4>)
 80011a8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ac:	099b      	lsrs	r3, r3, #6
 80011ae:	3301      	adds	r3, #1
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011b4:	e002      	b.n	80011bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f9      	bne.n	80011b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff feee 	bl	8000fa8 <LL_ADC_IsInternalRegulatorEnabled>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10d      	bne.n	80011ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d6:	f043 0210 	orr.w	r2, r3, #16
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e2:	f043 0201 	orr.w	r2, r3, #1
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff62 	bl	80010bc <LL_ADC_REG_IsConversionOngoing>
 80011f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fe:	f003 0310 	and.w	r3, r3, #16
 8001202:	2b00      	cmp	r3, #0
 8001204:	f040 8148 	bne.w	8001498 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f040 8144 	bne.w	8001498 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001214:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001218:	f043 0202 	orr.w	r2, r3, #2
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fefb 	bl	8001020 <LL_ADC_IsEnabled>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d141      	bne.n	80012b4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001238:	d004      	beq.n	8001244 <HAL_ADC_Init+0x114>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a7a      	ldr	r2, [pc, #488]	; (8001428 <HAL_ADC_Init+0x2f8>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d10f      	bne.n	8001264 <HAL_ADC_Init+0x134>
 8001244:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001248:	f7ff feea 	bl	8001020 <LL_ADC_IsEnabled>
 800124c:	4604      	mov	r4, r0
 800124e:	4876      	ldr	r0, [pc, #472]	; (8001428 <HAL_ADC_Init+0x2f8>)
 8001250:	f7ff fee6 	bl	8001020 <LL_ADC_IsEnabled>
 8001254:	4603      	mov	r3, r0
 8001256:	4323      	orrs	r3, r4
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf0c      	ite	eq
 800125c:	2301      	moveq	r3, #1
 800125e:	2300      	movne	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	e012      	b.n	800128a <HAL_ADC_Init+0x15a>
 8001264:	4871      	ldr	r0, [pc, #452]	; (800142c <HAL_ADC_Init+0x2fc>)
 8001266:	f7ff fedb 	bl	8001020 <LL_ADC_IsEnabled>
 800126a:	4604      	mov	r4, r0
 800126c:	4870      	ldr	r0, [pc, #448]	; (8001430 <HAL_ADC_Init+0x300>)
 800126e:	f7ff fed7 	bl	8001020 <LL_ADC_IsEnabled>
 8001272:	4603      	mov	r3, r0
 8001274:	431c      	orrs	r4, r3
 8001276:	486f      	ldr	r0, [pc, #444]	; (8001434 <HAL_ADC_Init+0x304>)
 8001278:	f7ff fed2 	bl	8001020 <LL_ADC_IsEnabled>
 800127c:	4603      	mov	r3, r0
 800127e:	4323      	orrs	r3, r4
 8001280:	2b00      	cmp	r3, #0
 8001282:	bf0c      	ite	eq
 8001284:	2301      	moveq	r3, #1
 8001286:	2300      	movne	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d012      	beq.n	80012b4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001296:	d004      	beq.n	80012a2 <HAL_ADC_Init+0x172>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a62      	ldr	r2, [pc, #392]	; (8001428 <HAL_ADC_Init+0x2f8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d101      	bne.n	80012a6 <HAL_ADC_Init+0x176>
 80012a2:	4a65      	ldr	r2, [pc, #404]	; (8001438 <HAL_ADC_Init+0x308>)
 80012a4:	e000      	b.n	80012a8 <HAL_ADC_Init+0x178>
 80012a6:	4a65      	ldr	r2, [pc, #404]	; (800143c <HAL_ADC_Init+0x30c>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4619      	mov	r1, r3
 80012ae:	4610      	mov	r0, r2
 80012b0:	f7ff fcc0 	bl	8000c34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	7f5b      	ldrb	r3, [r3, #29]
 80012b8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012be:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80012c4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80012ca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012d2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d106      	bne.n	80012f0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e6:	3b01      	subs	r3, #1
 80012e8:	045b      	lsls	r3, r3, #17
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d009      	beq.n	800130c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	4b4b      	ldr	r3, [pc, #300]	; (8001440 <HAL_ADC_Init+0x310>)
 8001314:	4013      	ands	r3, r2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	69b9      	ldr	r1, [r7, #24]
 800131c:	430b      	orrs	r3, r1
 800131e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	430a      	orrs	r2, r1
 8001334:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff febe 	bl	80010bc <LL_ADC_REG_IsConversionOngoing>
 8001340:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fedf 	bl	800110a <LL_ADC_INJ_IsConversionOngoing>
 800134c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d17f      	bne.n	8001454 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d17c      	bne.n	8001454 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800135e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001366:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001376:	f023 0302 	bic.w	r3, r3, #2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	69b9      	ldr	r1, [r7, #24]
 8001380:	430b      	orrs	r3, r1
 8001382:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d017      	beq.n	80013bc <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800139a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80013a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80013a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6911      	ldr	r1, [r2, #16]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	430b      	orrs	r3, r1
 80013b6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80013ba:	e013      	b.n	80013e4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	691a      	ldr	r2, [r3, #16]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80013dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013e0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d12a      	bne.n	8001444 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80013f8:	f023 0304 	bic.w	r3, r3, #4
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001404:	4311      	orrs	r1, r2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800140a:	4311      	orrs	r1, r2
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001410:	430a      	orrs	r2, r1
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f042 0201 	orr.w	r2, r2, #1
 800141c:	611a      	str	r2, [r3, #16]
 800141e:	e019      	b.n	8001454 <HAL_ADC_Init+0x324>
 8001420:	20000048 	.word	0x20000048
 8001424:	053e2d63 	.word	0x053e2d63
 8001428:	50000100 	.word	0x50000100
 800142c:	50000400 	.word	0x50000400
 8001430:	50000500 	.word	0x50000500
 8001434:	50000600 	.word	0x50000600
 8001438:	50000300 	.word	0x50000300
 800143c:	50000700 	.word	0x50000700
 8001440:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	691a      	ldr	r2, [r3, #16]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d10c      	bne.n	8001476 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f023 010f 	bic.w	r1, r3, #15
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	1e5a      	subs	r2, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	631a      	str	r2, [r3, #48]	; 0x30
 8001474:	e007      	b.n	8001486 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 020f 	bic.w	r2, r2, #15
 8001484:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	f023 0303 	bic.w	r3, r3, #3
 800148e:	f043 0201 	orr.w	r2, r3, #1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	65da      	str	r2, [r3, #92]	; 0x5c
 8001496:	e007      	b.n	80014a8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149c:	f043 0210 	orr.w	r2, r3, #16
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3724      	adds	r7, #36	; 0x24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd90      	pop	{r4, r7, pc}
 80014b2:	bf00      	nop

080014b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014c4:	d004      	beq.n	80014d0 <HAL_ADC_Start+0x1c>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a67      	ldr	r2, [pc, #412]	; (8001668 <HAL_ADC_Start+0x1b4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d101      	bne.n	80014d4 <HAL_ADC_Start+0x20>
 80014d0:	4b66      	ldr	r3, [pc, #408]	; (800166c <HAL_ADC_Start+0x1b8>)
 80014d2:	e000      	b.n	80014d6 <HAL_ADC_Start+0x22>
 80014d4:	4b66      	ldr	r3, [pc, #408]	; (8001670 <HAL_ADC_Start+0x1bc>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fd10 	bl	8000efc <LL_ADC_GetMultimode>
 80014dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fdea 	bl	80010bc <LL_ADC_REG_IsConversionOngoing>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f040 80b4 	bne.w	8001658 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d101      	bne.n	80014fe <HAL_ADC_Start+0x4a>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e0af      	b.n	800165e <HAL_ADC_Start+0x1aa>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fefc 	bl	8002304 <ADC_Enable>
 800150c:	4603      	mov	r3, r0
 800150e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f040 809b 	bne.w	800164e <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001520:	f023 0301 	bic.w	r3, r3, #1
 8001524:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a4d      	ldr	r2, [pc, #308]	; (8001668 <HAL_ADC_Start+0x1b4>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d009      	beq.n	800154a <HAL_ADC_Start+0x96>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a4e      	ldr	r2, [pc, #312]	; (8001674 <HAL_ADC_Start+0x1c0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d002      	beq.n	8001546 <HAL_ADC_Start+0x92>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	e003      	b.n	800154e <HAL_ADC_Start+0x9a>
 8001546:	4b4c      	ldr	r3, [pc, #304]	; (8001678 <HAL_ADC_Start+0x1c4>)
 8001548:	e001      	b.n	800154e <HAL_ADC_Start+0x9a>
 800154a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	4293      	cmp	r3, r2
 8001554:	d002      	beq.n	800155c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d105      	bne.n	8001568 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001560:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001574:	d106      	bne.n	8001584 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157a:	f023 0206 	bic.w	r2, r3, #6
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	661a      	str	r2, [r3, #96]	; 0x60
 8001582:	e002      	b.n	800158a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	221c      	movs	r2, #28
 8001590:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a32      	ldr	r2, [pc, #200]	; (8001668 <HAL_ADC_Start+0x1b4>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d009      	beq.n	80015b8 <HAL_ADC_Start+0x104>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a32      	ldr	r2, [pc, #200]	; (8001674 <HAL_ADC_Start+0x1c0>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d002      	beq.n	80015b4 <HAL_ADC_Start+0x100>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	e003      	b.n	80015bc <HAL_ADC_Start+0x108>
 80015b4:	4b30      	ldr	r3, [pc, #192]	; (8001678 <HAL_ADC_Start+0x1c4>)
 80015b6:	e001      	b.n	80015bc <HAL_ADC_Start+0x108>
 80015b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d008      	beq.n	80015d6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	2b05      	cmp	r3, #5
 80015ce:	d002      	beq.n	80015d6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	2b09      	cmp	r3, #9
 80015d4:	d114      	bne.n	8001600 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fd37 	bl	800106c <LL_ADC_REG_StartConversion>
 80015fe:	e02d      	b.n	800165c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001604:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a15      	ldr	r2, [pc, #84]	; (8001668 <HAL_ADC_Start+0x1b4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d009      	beq.n	800162a <HAL_ADC_Start+0x176>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a16      	ldr	r2, [pc, #88]	; (8001674 <HAL_ADC_Start+0x1c0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d002      	beq.n	8001626 <HAL_ADC_Start+0x172>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	e003      	b.n	800162e <HAL_ADC_Start+0x17a>
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <HAL_ADC_Start+0x1c4>)
 8001628:	e001      	b.n	800162e <HAL_ADC_Start+0x17a>
 800162a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800162e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00f      	beq.n	800165c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001640:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001644:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	65da      	str	r2, [r3, #92]	; 0x5c
 800164c:	e006      	b.n	800165c <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001656:	e001      	b.n	800165c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001658:	2302      	movs	r3, #2
 800165a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800165c:	7dfb      	ldrb	r3, [r7, #23]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	50000100 	.word	0x50000100
 800166c:	50000300 	.word	0x50000300
 8001670:	50000700 	.word	0x50000700
 8001674:	50000500 	.word	0x50000500
 8001678:	50000400 	.word	0x50000400

0800167c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_ADC_Stop+0x16>
 800168e:	2302      	movs	r3, #2
 8001690:	e023      	b.n	80016da <HAL_ADC_Stop+0x5e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800169a:	2103      	movs	r1, #3
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 fd75 	bl	800218c <ADC_ConversionStop>
 80016a2:	4603      	mov	r3, r0
 80016a4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d111      	bne.n	80016d0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 fe8b 	bl	80023c8 <ADC_Disable>
 80016b2:	4603      	mov	r3, r0
 80016b4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d109      	bne.n	80016d0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	f043 0201 	orr.w	r2, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016f6:	d004      	beq.n	8001702 <HAL_ADC_PollForConversion+0x1e>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a77      	ldr	r2, [pc, #476]	; (80018dc <HAL_ADC_PollForConversion+0x1f8>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_ADC_PollForConversion+0x22>
 8001702:	4b77      	ldr	r3, [pc, #476]	; (80018e0 <HAL_ADC_PollForConversion+0x1fc>)
 8001704:	e000      	b.n	8001708 <HAL_ADC_PollForConversion+0x24>
 8001706:	4b77      	ldr	r3, [pc, #476]	; (80018e4 <HAL_ADC_PollForConversion+0x200>)
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fbf7 	bl	8000efc <LL_ADC_GetMultimode>
 800170e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2b08      	cmp	r3, #8
 8001716:	d102      	bne.n	800171e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001718:	2308      	movs	r3, #8
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	e037      	b.n	800178e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	2b05      	cmp	r3, #5
 8001728:	d002      	beq.n	8001730 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b09      	cmp	r3, #9
 800172e:	d111      	bne.n	8001754 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d007      	beq.n	800174e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001742:	f043 0220 	orr.w	r2, r3, #32
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0c1      	b.n	80018d2 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800174e:	2304      	movs	r3, #4
 8001750:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001752:	e01c      	b.n	800178e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800175c:	d004      	beq.n	8001768 <HAL_ADC_PollForConversion+0x84>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a5e      	ldr	r2, [pc, #376]	; (80018dc <HAL_ADC_PollForConversion+0x1f8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d101      	bne.n	800176c <HAL_ADC_PollForConversion+0x88>
 8001768:	4b5d      	ldr	r3, [pc, #372]	; (80018e0 <HAL_ADC_PollForConversion+0x1fc>)
 800176a:	e000      	b.n	800176e <HAL_ADC_PollForConversion+0x8a>
 800176c:	4b5d      	ldr	r3, [pc, #372]	; (80018e4 <HAL_ADC_PollForConversion+0x200>)
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fbd2 	bl	8000f18 <LL_ADC_GetMultiDMATransfer>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177e:	f043 0220 	orr.w	r2, r3, #32
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e0a3      	b.n	80018d2 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800178a:	2304      	movs	r3, #4
 800178c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800178e:	f7ff fa45 	bl	8000c1c <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001794:	e021      	b.n	80017da <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d01d      	beq.n	80017da <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800179e:	f7ff fa3d 	bl	8000c1c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d302      	bcc.n	80017b4 <HAL_ADC_PollForConversion+0xd0>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d112      	bne.n	80017da <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	4013      	ands	r3, r2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10b      	bne.n	80017da <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c6:	f043 0204 	orr.w	r2, r3, #4
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e07b      	b.n	80018d2 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0d6      	beq.n	8001796 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff faed 	bl	8000dd8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01c      	beq.n	800183e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7f5b      	ldrb	r3, [r3, #29]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d118      	bne.n	800183e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b08      	cmp	r3, #8
 8001818:	d111      	bne.n	800183e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d105      	bne.n	800183e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	f043 0201 	orr.w	r2, r3, #1
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a26      	ldr	r2, [pc, #152]	; (80018dc <HAL_ADC_PollForConversion+0x1f8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d009      	beq.n	800185c <HAL_ADC_PollForConversion+0x178>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a26      	ldr	r2, [pc, #152]	; (80018e8 <HAL_ADC_PollForConversion+0x204>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d002      	beq.n	8001858 <HAL_ADC_PollForConversion+0x174>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	e003      	b.n	8001860 <HAL_ADC_PollForConversion+0x17c>
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_ADC_PollForConversion+0x208>)
 800185a:	e001      	b.n	8001860 <HAL_ADC_PollForConversion+0x17c>
 800185c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	4293      	cmp	r3, r2
 8001866:	d008      	beq.n	800187a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2b05      	cmp	r3, #5
 8001872:	d002      	beq.n	800187a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2b09      	cmp	r3, #9
 8001878:	d104      	bne.n	8001884 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	e014      	b.n	80018ae <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a14      	ldr	r2, [pc, #80]	; (80018dc <HAL_ADC_PollForConversion+0x1f8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d009      	beq.n	80018a2 <HAL_ADC_PollForConversion+0x1be>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a15      	ldr	r2, [pc, #84]	; (80018e8 <HAL_ADC_PollForConversion+0x204>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d002      	beq.n	800189e <HAL_ADC_PollForConversion+0x1ba>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	e003      	b.n	80018a6 <HAL_ADC_PollForConversion+0x1c2>
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <HAL_ADC_PollForConversion+0x208>)
 80018a0:	e001      	b.n	80018a6 <HAL_ADC_PollForConversion+0x1c2>
 80018a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018a6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d104      	bne.n	80018be <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2208      	movs	r2, #8
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e008      	b.n	80018d0 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d103      	bne.n	80018d0 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	220c      	movs	r2, #12
 80018ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	50000100 	.word	0x50000100
 80018e0:	50000300 	.word	0x50000300
 80018e4:	50000700 	.word	0x50000700
 80018e8:	50000500 	.word	0x50000500
 80018ec:	50000400 	.word	0x50000400

080018f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b0b6      	sub	sp, #216	; 0xd8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001926:	2b01      	cmp	r3, #1
 8001928:	d102      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x24>
 800192a:	2302      	movs	r3, #2
 800192c:	f000 bc13 	b.w	8002156 <HAL_ADC_ConfigChannel+0x84a>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fbbd 	bl	80010bc <LL_ADC_REG_IsConversionOngoing>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	f040 83f3 	bne.w	8002130 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6859      	ldr	r1, [r3, #4]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	f7ff fa51 	bl	8000dfe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fbab 	bl	80010bc <LL_ADC_REG_IsConversionOngoing>
 8001966:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fbcb 	bl	800110a <LL_ADC_INJ_IsConversionOngoing>
 8001974:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001978:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800197c:	2b00      	cmp	r3, #0
 800197e:	f040 81d9 	bne.w	8001d34 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001982:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001986:	2b00      	cmp	r3, #0
 8001988:	f040 81d4 	bne.w	8001d34 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001994:	d10f      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2200      	movs	r2, #0
 80019a0:	4619      	mov	r1, r3
 80019a2:	f7ff fa58 	bl	8000e56 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f9ff 	bl	8000db2 <LL_ADC_SetSamplingTimeCommonConfig>
 80019b4:	e00e      	b.n	80019d4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6819      	ldr	r1, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	461a      	mov	r2, r3
 80019c4:	f7ff fa47 	bl	8000e56 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f9ef 	bl	8000db2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	08db      	lsrs	r3, r3, #3
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d022      	beq.n	8001a3c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	6919      	ldr	r1, [r3, #16]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a06:	f7ff f949 	bl	8000c9c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	6919      	ldr	r1, [r3, #16]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	461a      	mov	r2, r3
 8001a18:	f7ff f995 	bl	8000d46 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6919      	ldr	r1, [r3, #16]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	7f1b      	ldrb	r3, [r3, #28]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d102      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x126>
 8001a2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a30:	e000      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x128>
 8001a32:	2300      	movs	r3, #0
 8001a34:	461a      	mov	r2, r3
 8001a36:	f7ff f9a1 	bl	8000d7c <LL_ADC_SetOffsetSaturation>
 8001a3a:	e17b      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f94e 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10a      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x15c>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f943 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	0e9b      	lsrs	r3, r3, #26
 8001a62:	f003 021f 	and.w	r2, r3, #31
 8001a66:	e01e      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x19a>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff f938 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a7e:	fa93 f3a3 	rbit	r3, r3
 8001a82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001a96:	2320      	movs	r3, #32
 8001a98:	e004      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001a9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d105      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x1b2>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	0e9b      	lsrs	r3, r3, #26
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	e018      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x1e4>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001aca:	fa93 f3a3 	rbit	r3, r3
 8001ace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001ada:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	e004      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001ae6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d106      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2200      	movs	r2, #0
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff f907 	bl	8000d10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2101      	movs	r1, #1
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f8eb 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10a      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x222>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff f8e0 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	0e9b      	lsrs	r3, r3, #26
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	e01e      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x260>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2101      	movs	r1, #1
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff f8d5 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001b5c:	2320      	movs	r3, #32
 8001b5e:	e004      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001b60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x278>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0e9b      	lsrs	r3, r3, #26
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	e018      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x2aa>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b90:	fa93 f3a3 	rbit	r3, r3
 8001b94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ba0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001ba8:	2320      	movs	r3, #32
 8001baa:	e004      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d106      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff f8a4 	bl	8000d10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2102      	movs	r1, #2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f888 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10a      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x2e8>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2102      	movs	r1, #2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff f87d 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001bea:	4603      	mov	r3, r0
 8001bec:	0e9b      	lsrs	r3, r3, #26
 8001bee:	f003 021f 	and.w	r2, r3, #31
 8001bf2:	e01e      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x326>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff f872 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001c12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001c22:	2320      	movs	r3, #32
 8001c24:	e004      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001c26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d105      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x33e>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	0e9b      	lsrs	r3, r3, #26
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	e016      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x36c>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001c6a:	2320      	movs	r3, #32
 8001c6c:	e004      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001c6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d106      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2200      	movs	r2, #0
 8001c82:	2102      	movs	r1, #2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff f843 	bl	8000d10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2103      	movs	r1, #3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f827 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10a      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x3aa>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2103      	movs	r1, #3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff f81c 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001cac:	4603      	mov	r3, r0
 8001cae:	0e9b      	lsrs	r3, r3, #26
 8001cb0:	f003 021f 	and.w	r2, r3, #31
 8001cb4:	e017      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x3da>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2103      	movs	r1, #3
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff f811 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cd0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001cd8:	2320      	movs	r3, #32
 8001cda:	e003      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001cdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d105      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x3f2>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	0e9b      	lsrs	r3, r3, #26
 8001cf8:	f003 031f 	and.w	r3, r3, #31
 8001cfc:	e011      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x416>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001d16:	2320      	movs	r3, #32
 8001d18:	e003      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d1c:	fab3 f383 	clz	r3, r3
 8001d20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d106      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2103      	movs	r1, #3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe ffee 	bl	8000d10 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f971 	bl	8001020 <LL_ADC_IsEnabled>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f040 813d 	bne.w	8001fc0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	6819      	ldr	r1, [r3, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	461a      	mov	r2, r3
 8001d54:	f7ff f8aa 	bl	8000eac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4aa2      	ldr	r2, [pc, #648]	; (8001fe8 <HAL_ADC_ConfigChannel+0x6dc>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	f040 812e 	bne.w	8001fc0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10b      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x480>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0e9b      	lsrs	r3, r3, #26
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	2b09      	cmp	r3, #9
 8001d82:	bf94      	ite	ls
 8001d84:	2301      	movls	r3, #1
 8001d86:	2300      	movhi	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	e019      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x4b4>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d9c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001da4:	2320      	movs	r3, #32
 8001da6:	e003      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001da8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	3301      	adds	r3, #1
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	2b09      	cmp	r3, #9
 8001db8:	bf94      	ite	ls
 8001dba:	2301      	movls	r3, #1
 8001dbc:	2300      	movhi	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d079      	beq.n	8001eb8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d107      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x4d4>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	0e9b      	lsrs	r3, r3, #26
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	069b      	lsls	r3, r3, #26
 8001dda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dde:	e015      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x500>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001df0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001df8:	2320      	movs	r3, #32
 8001dfa:	e003      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	069b      	lsls	r3, r3, #26
 8001e08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d109      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x520>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0e9b      	lsrs	r3, r3, #26
 8001e1e:	3301      	adds	r3, #1
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	2101      	movs	r1, #1
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	e017      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x550>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e3c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001e44:	2320      	movs	r3, #32
 8001e46:	e003      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	3301      	adds	r3, #1
 8001e52:	f003 031f 	and.w	r3, r3, #31
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	ea42 0103 	orr.w	r1, r2, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10a      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x576>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0e9b      	lsrs	r3, r3, #26
 8001e72:	3301      	adds	r3, #1
 8001e74:	f003 021f 	and.w	r2, r3, #31
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	051b      	lsls	r3, r3, #20
 8001e80:	e018      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x5a8>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001e9a:	2320      	movs	r3, #32
 8001e9c:	e003      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	e07e      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d107      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x5c8>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	0e9b      	lsrs	r3, r3, #26
 8001eca:	3301      	adds	r3, #1
 8001ecc:	069b      	lsls	r3, r3, #26
 8001ece:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ed2:	e015      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x5f4>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001eec:	2320      	movs	r3, #32
 8001eee:	e003      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	3301      	adds	r3, #1
 8001efa:	069b      	lsls	r3, r3, #26
 8001efc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d109      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x614>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	0e9b      	lsrs	r3, r3, #26
 8001f12:	3301      	adds	r3, #1
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	2101      	movs	r1, #1
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	e017      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x644>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	61fb      	str	r3, [r7, #28]
  return result;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001f38:	2320      	movs	r3, #32
 8001f3a:	e003      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	fab3 f383 	clz	r3, r3
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	3301      	adds	r3, #1
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	ea42 0103 	orr.w	r1, r2, r3
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10d      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x670>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0e9b      	lsrs	r3, r3, #26
 8001f66:	3301      	adds	r3, #1
 8001f68:	f003 021f 	and.w	r2, r3, #31
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	3b1e      	subs	r3, #30
 8001f74:	051b      	lsls	r3, r3, #20
 8001f76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	e01b      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x6a8>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	613b      	str	r3, [r7, #16]
  return result;
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001f94:	2320      	movs	r3, #32
 8001f96:	e003      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f003 021f 	and.w	r2, r3, #31
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	3b1e      	subs	r3, #30
 8001fae:	051b      	lsls	r3, r3, #20
 8001fb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	6892      	ldr	r2, [r2, #8]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7fe ff4b 	bl	8000e56 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_ADC_ConfigChannel+0x6e0>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80be 	beq.w	800214a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fd6:	d004      	beq.n	8001fe2 <HAL_ADC_ConfigChannel+0x6d6>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <HAL_ADC_ConfigChannel+0x6e4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10a      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x6ec>
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <HAL_ADC_ConfigChannel+0x6e8>)
 8001fe4:	e009      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x6ee>
 8001fe6:	bf00      	nop
 8001fe8:	407f0000 	.word	0x407f0000
 8001fec:	80080000 	.word	0x80080000
 8001ff0:	50000100 	.word	0x50000100
 8001ff4:	50000300 	.word	0x50000300
 8001ff8:	4b59      	ldr	r3, [pc, #356]	; (8002160 <HAL_ADC_ConfigChannel+0x854>)
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fe40 	bl	8000c80 <LL_ADC_GetCommonPathInternalCh>
 8002000:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a56      	ldr	r2, [pc, #344]	; (8002164 <HAL_ADC_ConfigChannel+0x858>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d004      	beq.n	8002018 <HAL_ADC_ConfigChannel+0x70c>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a55      	ldr	r2, [pc, #340]	; (8002168 <HAL_ADC_ConfigChannel+0x85c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d13a      	bne.n	800208e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002018:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800201c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d134      	bne.n	800208e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800202c:	d005      	beq.n	800203a <HAL_ADC_ConfigChannel+0x72e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a4e      	ldr	r2, [pc, #312]	; (800216c <HAL_ADC_ConfigChannel+0x860>)
 8002034:	4293      	cmp	r3, r2
 8002036:	f040 8085 	bne.w	8002144 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002042:	d004      	beq.n	800204e <HAL_ADC_ConfigChannel+0x742>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a49      	ldr	r2, [pc, #292]	; (8002170 <HAL_ADC_ConfigChannel+0x864>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x746>
 800204e:	4a49      	ldr	r2, [pc, #292]	; (8002174 <HAL_ADC_ConfigChannel+0x868>)
 8002050:	e000      	b.n	8002054 <HAL_ADC_ConfigChannel+0x748>
 8002052:	4a43      	ldr	r2, [pc, #268]	; (8002160 <HAL_ADC_ConfigChannel+0x854>)
 8002054:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002058:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800205c:	4619      	mov	r1, r3
 800205e:	4610      	mov	r0, r2
 8002060:	f7fe fdfb 	bl	8000c5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002064:	4b44      	ldr	r3, [pc, #272]	; (8002178 <HAL_ADC_ConfigChannel+0x86c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	099b      	lsrs	r3, r3, #6
 800206a:	4a44      	ldr	r2, [pc, #272]	; (800217c <HAL_ADC_ConfigChannel+0x870>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	099b      	lsrs	r3, r3, #6
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800207e:	e002      	b.n	8002086 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3b01      	subs	r3, #1
 8002084:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f9      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800208c:	e05a      	b.n	8002144 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a3b      	ldr	r2, [pc, #236]	; (8002180 <HAL_ADC_ConfigChannel+0x874>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d125      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x7d8>
 8002098:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800209c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d11f      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a31      	ldr	r2, [pc, #196]	; (8002170 <HAL_ADC_ConfigChannel+0x864>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d104      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x7ac>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a34      	ldr	r2, [pc, #208]	; (8002184 <HAL_ADC_ConfigChannel+0x878>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d047      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020c0:	d004      	beq.n	80020cc <HAL_ADC_ConfigChannel+0x7c0>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a2a      	ldr	r2, [pc, #168]	; (8002170 <HAL_ADC_ConfigChannel+0x864>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x7c4>
 80020cc:	4a29      	ldr	r2, [pc, #164]	; (8002174 <HAL_ADC_ConfigChannel+0x868>)
 80020ce:	e000      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x7c6>
 80020d0:	4a23      	ldr	r2, [pc, #140]	; (8002160 <HAL_ADC_ConfigChannel+0x854>)
 80020d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020da:	4619      	mov	r1, r3
 80020dc:	4610      	mov	r0, r2
 80020de:	f7fe fdbc 	bl	8000c5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020e2:	e031      	b.n	8002148 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a27      	ldr	r2, [pc, #156]	; (8002188 <HAL_ADC_ConfigChannel+0x87c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d12d      	bne.n	800214a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d127      	bne.n	800214a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1c      	ldr	r2, [pc, #112]	; (8002170 <HAL_ADC_ConfigChannel+0x864>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d022      	beq.n	800214a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800210c:	d004      	beq.n	8002118 <HAL_ADC_ConfigChannel+0x80c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a17      	ldr	r2, [pc, #92]	; (8002170 <HAL_ADC_ConfigChannel+0x864>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d101      	bne.n	800211c <HAL_ADC_ConfigChannel+0x810>
 8002118:	4a16      	ldr	r2, [pc, #88]	; (8002174 <HAL_ADC_ConfigChannel+0x868>)
 800211a:	e000      	b.n	800211e <HAL_ADC_ConfigChannel+0x812>
 800211c:	4a10      	ldr	r2, [pc, #64]	; (8002160 <HAL_ADC_ConfigChannel+0x854>)
 800211e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002122:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002126:	4619      	mov	r1, r3
 8002128:	4610      	mov	r0, r2
 800212a:	f7fe fd96 	bl	8000c5a <LL_ADC_SetCommonPathInternalCh>
 800212e:	e00c      	b.n	800214a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	f043 0220 	orr.w	r2, r3, #32
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002142:	e002      	b.n	800214a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002144:	bf00      	nop
 8002146:	e000      	b.n	800214a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002148:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002152:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002156:	4618      	mov	r0, r3
 8002158:	37d8      	adds	r7, #216	; 0xd8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	50000700 	.word	0x50000700
 8002164:	c3210000 	.word	0xc3210000
 8002168:	90c00010 	.word	0x90c00010
 800216c:	50000600 	.word	0x50000600
 8002170:	50000100 	.word	0x50000100
 8002174:	50000300 	.word	0x50000300
 8002178:	20000048 	.word	0x20000048
 800217c:	053e2d63 	.word	0x053e2d63
 8002180:	c7520000 	.word	0xc7520000
 8002184:	50000500 	.word	0x50000500
 8002188:	cb840000 	.word	0xcb840000

0800218c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe ff8a 	bl	80010bc <LL_ADC_REG_IsConversionOngoing>
 80021a8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe ffab 	bl	800110a <LL_ADC_INJ_IsConversionOngoing>
 80021b4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d103      	bne.n	80021c4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8098 	beq.w	80022f4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d02a      	beq.n	8002228 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7f5b      	ldrb	r3, [r3, #29]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d126      	bne.n	8002228 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7f1b      	ldrb	r3, [r3, #28]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d122      	bne.n	8002228 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80021e6:	e014      	b.n	8002212 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	4a45      	ldr	r2, [pc, #276]	; (8002300 <ADC_ConversionStop+0x174>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d90d      	bls.n	800220c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	f043 0210 	orr.w	r2, r3, #16
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002200:	f043 0201 	orr.w	r2, r3, #1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e074      	b.n	80022f6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	3301      	adds	r3, #1
 8002210:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221c:	2b40      	cmp	r3, #64	; 0x40
 800221e:	d1e3      	bne.n	80021e8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2240      	movs	r2, #64	; 0x40
 8002226:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d014      	beq.n	8002258 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe ff42 	bl	80010bc <LL_ADC_REG_IsConversionOngoing>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00c      	beq.n	8002258 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe feff 	bl	8001046 <LL_ADC_IsDisableOngoing>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d104      	bne.n	8002258 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe ff1e 	bl	8001094 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d014      	beq.n	8002288 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe ff51 	bl	800110a <LL_ADC_INJ_IsConversionOngoing>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00c      	beq.n	8002288 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe fee7 	bl	8001046 <LL_ADC_IsDisableOngoing>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d104      	bne.n	8002288 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe ff2d 	bl	80010e2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d005      	beq.n	800229a <ADC_ConversionStop+0x10e>
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d105      	bne.n	80022a0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002294:	230c      	movs	r3, #12
 8002296:	617b      	str	r3, [r7, #20]
        break;
 8002298:	e005      	b.n	80022a6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800229a:	2308      	movs	r3, #8
 800229c:	617b      	str	r3, [r7, #20]
        break;
 800229e:	e002      	b.n	80022a6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80022a0:	2304      	movs	r3, #4
 80022a2:	617b      	str	r3, [r7, #20]
        break;
 80022a4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80022a6:	f7fe fcb9 	bl	8000c1c <HAL_GetTick>
 80022aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80022ac:	e01b      	b.n	80022e6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80022ae:	f7fe fcb5 	bl	8000c1c <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b05      	cmp	r3, #5
 80022ba:	d914      	bls.n	80022e6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00d      	beq.n	80022e6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ce:	f043 0210 	orr.w	r2, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e007      	b.n	80022f6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1dc      	bne.n	80022ae <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	a33fffff 	.word	0xa33fffff

08002304 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fe85 	bl	8001020 <LL_ADC_IsEnabled>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d14d      	bne.n	80023b8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <ADC_Enable+0xc0>)
 8002324:	4013      	ands	r3, r2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00d      	beq.n	8002346 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232e:	f043 0210 	orr.w	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e039      	b.n	80023ba <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe fe40 	bl	8000fd0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002350:	f7fe fc64 	bl	8000c1c <HAL_GetTick>
 8002354:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002356:	e028      	b.n	80023aa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe fe5f 	bl	8001020 <LL_ADC_IsEnabled>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d104      	bne.n	8002372 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe fe2f 	bl	8000fd0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002372:	f7fe fc53 	bl	8000c1c <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d914      	bls.n	80023aa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b01      	cmp	r3, #1
 800238c:	d00d      	beq.n	80023aa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002392:	f043 0210 	orr.w	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239e:	f043 0201 	orr.w	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e007      	b.n	80023ba <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d1cf      	bne.n	8002358 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	8000003f 	.word	0x8000003f

080023c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe fe36 	bl	8001046 <LL_ADC_IsDisableOngoing>
 80023da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe fe1d 	bl	8001020 <LL_ADC_IsEnabled>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d047      	beq.n	800247c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d144      	bne.n	800247c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030d 	and.w	r3, r3, #13
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d10c      	bne.n	800241a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fdf7 	bl	8000ff8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2203      	movs	r2, #3
 8002410:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002412:	f7fe fc03 	bl	8000c1c <HAL_GetTick>
 8002416:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002418:	e029      	b.n	800246e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	f043 0210 	orr.w	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e023      	b.n	800247e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002436:	f7fe fbf1 	bl	8000c1c <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d914      	bls.n	800246e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00d      	beq.n	800246e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002456:	f043 0210 	orr.w	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002462:	f043 0201 	orr.w	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e007      	b.n	800247e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1dc      	bne.n	8002436 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <LL_ADC_IsEnabled>:
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <LL_ADC_IsEnabled+0x18>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <LL_ADC_IsEnabled+0x1a>
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_StartCalibration>:
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80024be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	609a      	str	r2, [r3, #8]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_ADC_IsCalibrationOnGoing>:
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024f2:	d101      	bne.n	80024f8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <LL_ADC_IsCalibrationOnGoing+0x1c>
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <LL_ADC_REG_IsConversionOngoing>:
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b04      	cmp	r3, #4
 8002518:	d101      	bne.n	800251e <LL_ADC_REG_IsConversionOngoing+0x18>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_ADCEx_Calibration_Start+0x1c>
 8002544:	2302      	movs	r3, #2
 8002546:	e04d      	b.n	80025e4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff39 	bl	80023c8 <ADC_Disable>
 8002556:	4603      	mov	r3, r0
 8002558:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d136      	bne.n	80025ce <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002564:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002568:	f023 0302 	bic.w	r3, r3, #2
 800256c:	f043 0202 	orr.w	r2, r3, #2
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6839      	ldr	r1, [r7, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff ff96 	bl	80024ac <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002580:	e014      	b.n	80025ac <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	3301      	adds	r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4a18      	ldr	r2, [pc, #96]	; (80025ec <HAL_ADCEx_Calibration_Start+0xc0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d90d      	bls.n	80025ac <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002594:	f023 0312 	bic.w	r3, r3, #18
 8002598:	f043 0210 	orr.w	r2, r3, #16
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e01b      	b.n	80025e4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff94 	bl	80024de <LL_ADC_IsCalibrationOnGoing>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1e2      	bne.n	8002582 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	f023 0303 	bic.w	r3, r3, #3
 80025c4:	f043 0201 	orr.w	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80025cc:	e005      	b.n	80025da <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d2:	f043 0210 	orr.w	r2, r3, #16
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	0004de01 	.word	0x0004de01

080025f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80025f0:	b590      	push	{r4, r7, lr}
 80025f2:	b0a1      	sub	sp, #132	; 0x84
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800260a:	2302      	movs	r3, #2
 800260c:	e0e7      	b.n	80027de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002616:	2300      	movs	r3, #0
 8002618:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800261a:	2300      	movs	r3, #0
 800261c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002626:	d102      	bne.n	800262e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002628:	4b6f      	ldr	r3, [pc, #444]	; (80027e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	e009      	b.n	8002642 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6e      	ldr	r2, [pc, #440]	; (80027ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d102      	bne.n	800263e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002638:	4b6d      	ldr	r3, [pc, #436]	; (80027f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	e001      	b.n	8002642 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10b      	bne.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264c:	f043 0220 	orr.w	r2, r3, #32
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0be      	b.n	80027de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff4f 	bl	8002506 <LL_ADC_REG_IsConversionOngoing>
 8002668:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff ff49 	bl	8002506 <LL_ADC_REG_IsConversionOngoing>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 80a0 	bne.w	80027bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800267c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 809c 	bne.w	80027bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800268c:	d004      	beq.n	8002698 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a55      	ldr	r2, [pc, #340]	; (80027e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002698:	4b56      	ldr	r3, [pc, #344]	; (80027f4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800269a:	e000      	b.n	800269e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800269c:	4b56      	ldr	r3, [pc, #344]	; (80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800269e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d04b      	beq.n	8002740 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80026a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026ba:	035b      	lsls	r3, r3, #13
 80026bc:	430b      	orrs	r3, r1
 80026be:	431a      	orrs	r2, r3
 80026c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026cc:	d004      	beq.n	80026d8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a45      	ldr	r2, [pc, #276]	; (80027e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d10f      	bne.n	80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80026d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80026dc:	f7ff fed3 	bl	8002486 <LL_ADC_IsEnabled>
 80026e0:	4604      	mov	r4, r0
 80026e2:	4841      	ldr	r0, [pc, #260]	; (80027e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026e4:	f7ff fecf 	bl	8002486 <LL_ADC_IsEnabled>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4323      	orrs	r3, r4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf0c      	ite	eq
 80026f0:	2301      	moveq	r3, #1
 80026f2:	2300      	movne	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	e012      	b.n	800271e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80026f8:	483c      	ldr	r0, [pc, #240]	; (80027ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80026fa:	f7ff fec4 	bl	8002486 <LL_ADC_IsEnabled>
 80026fe:	4604      	mov	r4, r0
 8002700:	483b      	ldr	r0, [pc, #236]	; (80027f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002702:	f7ff fec0 	bl	8002486 <LL_ADC_IsEnabled>
 8002706:	4603      	mov	r3, r0
 8002708:	431c      	orrs	r4, r3
 800270a:	483c      	ldr	r0, [pc, #240]	; (80027fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800270c:	f7ff febb 	bl	8002486 <LL_ADC_IsEnabled>
 8002710:	4603      	mov	r3, r0
 8002712:	4323      	orrs	r3, r4
 8002714:	2b00      	cmp	r3, #0
 8002716:	bf0c      	ite	eq
 8002718:	2301      	moveq	r3, #1
 800271a:	2300      	movne	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d056      	beq.n	80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800272a:	f023 030f 	bic.w	r3, r3, #15
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	6811      	ldr	r1, [r2, #0]
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	6892      	ldr	r2, [r2, #8]
 8002736:	430a      	orrs	r2, r1
 8002738:	431a      	orrs	r2, r3
 800273a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800273c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800273e:	e047      	b.n	80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002740:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800274a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002754:	d004      	beq.n	8002760 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a23      	ldr	r2, [pc, #140]	; (80027e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d10f      	bne.n	8002780 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002760:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002764:	f7ff fe8f 	bl	8002486 <LL_ADC_IsEnabled>
 8002768:	4604      	mov	r4, r0
 800276a:	481f      	ldr	r0, [pc, #124]	; (80027e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800276c:	f7ff fe8b 	bl	8002486 <LL_ADC_IsEnabled>
 8002770:	4603      	mov	r3, r0
 8002772:	4323      	orrs	r3, r4
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	e012      	b.n	80027a6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002780:	481a      	ldr	r0, [pc, #104]	; (80027ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002782:	f7ff fe80 	bl	8002486 <LL_ADC_IsEnabled>
 8002786:	4604      	mov	r4, r0
 8002788:	4819      	ldr	r0, [pc, #100]	; (80027f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800278a:	f7ff fe7c 	bl	8002486 <LL_ADC_IsEnabled>
 800278e:	4603      	mov	r3, r0
 8002790:	431c      	orrs	r4, r3
 8002792:	481a      	ldr	r0, [pc, #104]	; (80027fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002794:	f7ff fe77 	bl	8002486 <LL_ADC_IsEnabled>
 8002798:	4603      	mov	r3, r0
 800279a:	4323      	orrs	r3, r4
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d012      	beq.n	80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80027aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80027b2:	f023 030f 	bic.w	r3, r3, #15
 80027b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80027b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027ba:	e009      	b.n	80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c0:	f043 0220 	orr.w	r2, r3, #32
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80027ce:	e000      	b.n	80027d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80027da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3784      	adds	r7, #132	; 0x84
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd90      	pop	{r4, r7, pc}
 80027e6:	bf00      	nop
 80027e8:	50000100 	.word	0x50000100
 80027ec:	50000400 	.word	0x50000400
 80027f0:	50000500 	.word	0x50000500
 80027f4:	50000300 	.word	0x50000300
 80027f8:	50000700 	.word	0x50000700
 80027fc:	50000600 	.word	0x50000600

08002800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <__NVIC_SetPriorityGrouping+0x44>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800281c:	4013      	ands	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800282c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002832:	4a04      	ldr	r2, [pc, #16]	; (8002844 <__NVIC_SetPriorityGrouping+0x44>)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	60d3      	str	r3, [r2, #12]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <__NVIC_GetPriorityGrouping+0x18>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	0a1b      	lsrs	r3, r3, #8
 8002852:	f003 0307 	and.w	r3, r3, #7
}
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	2b00      	cmp	r3, #0
 8002874:	db0b      	blt.n	800288e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	f003 021f 	and.w	r2, r3, #31
 800287c:	4907      	ldr	r1, [pc, #28]	; (800289c <__NVIC_EnableIRQ+0x38>)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	2001      	movs	r0, #1
 8002886:	fa00 f202 	lsl.w	r2, r0, r2
 800288a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	e000e100 	.word	0xe000e100

080028a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	6039      	str	r1, [r7, #0]
 80028aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	db0a      	blt.n	80028ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	490c      	ldr	r1, [pc, #48]	; (80028ec <__NVIC_SetPriority+0x4c>)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	0112      	lsls	r2, r2, #4
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	440b      	add	r3, r1
 80028c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c8:	e00a      	b.n	80028e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	4908      	ldr	r1, [pc, #32]	; (80028f0 <__NVIC_SetPriority+0x50>)
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	3b04      	subs	r3, #4
 80028d8:	0112      	lsls	r2, r2, #4
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	440b      	add	r3, r1
 80028de:	761a      	strb	r2, [r3, #24]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000e100 	.word	0xe000e100
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	; 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f1c3 0307 	rsb	r3, r3, #7
 800290e:	2b04      	cmp	r3, #4
 8002910:	bf28      	it	cs
 8002912:	2304      	movcs	r3, #4
 8002914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3304      	adds	r3, #4
 800291a:	2b06      	cmp	r3, #6
 800291c:	d902      	bls.n	8002924 <NVIC_EncodePriority+0x30>
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3b03      	subs	r3, #3
 8002922:	e000      	b.n	8002926 <NVIC_EncodePriority+0x32>
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	f04f 32ff 	mov.w	r2, #4294967295
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43da      	mvns	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	401a      	ands	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800293c:	f04f 31ff 	mov.w	r1, #4294967295
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	43d9      	mvns	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	4313      	orrs	r3, r2
         );
}
 800294e:	4618      	mov	r0, r3
 8002950:	3724      	adds	r7, #36	; 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800296c:	d301      	bcc.n	8002972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800296e:	2301      	movs	r3, #1
 8002970:	e00f      	b.n	8002992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002972:	4a0a      	ldr	r2, [pc, #40]	; (800299c <SysTick_Config+0x40>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297a:	210f      	movs	r1, #15
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	f7ff ff8e 	bl	80028a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <SysTick_Config+0x40>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298a:	4b04      	ldr	r3, [pc, #16]	; (800299c <SysTick_Config+0x40>)
 800298c:	2207      	movs	r2, #7
 800298e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	e000e010 	.word	0xe000e010

080029a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff29 	bl	8002800 <__NVIC_SetPriorityGrouping>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029c4:	f7ff ff40 	bl	8002848 <__NVIC_GetPriorityGrouping>
 80029c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	6978      	ldr	r0, [r7, #20]
 80029d0:	f7ff ff90 	bl	80028f4 <NVIC_EncodePriority>
 80029d4:	4602      	mov	r2, r0
 80029d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff5f 	bl	80028a0 <__NVIC_SetPriority>
}
 80029e2:	bf00      	nop
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff33 	bl	8002864 <__NVIC_EnableIRQ>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff ffa4 	bl	800295c <SysTick_Config>
 8002a14:	4603      	mov	r3, r0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a2e:	e15a      	b.n	8002ce6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	2101      	movs	r1, #1
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 814c 	beq.w	8002ce0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d005      	beq.n	8002a60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d130      	bne.n	8002ac2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a96:	2201      	movs	r2, #1
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 0201 	and.w	r2, r3, #1
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d017      	beq.n	8002afe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	2203      	movs	r2, #3
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d123      	bne.n	8002b52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	08da      	lsrs	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3208      	adds	r2, #8
 8002b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	220f      	movs	r2, #15
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	08da      	lsrs	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3208      	adds	r2, #8
 8002b4c:	6939      	ldr	r1, [r7, #16]
 8002b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0203 	and.w	r2, r3, #3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 80a6 	beq.w	8002ce0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b94:	4b5b      	ldr	r3, [pc, #364]	; (8002d04 <HAL_GPIO_Init+0x2e4>)
 8002b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b98:	4a5a      	ldr	r2, [pc, #360]	; (8002d04 <HAL_GPIO_Init+0x2e4>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6613      	str	r3, [r2, #96]	; 0x60
 8002ba0:	4b58      	ldr	r3, [pc, #352]	; (8002d04 <HAL_GPIO_Init+0x2e4>)
 8002ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bac:	4a56      	ldr	r2, [pc, #344]	; (8002d08 <HAL_GPIO_Init+0x2e8>)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	089b      	lsrs	r3, r3, #2
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	220f      	movs	r2, #15
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bd6:	d01f      	beq.n	8002c18 <HAL_GPIO_Init+0x1f8>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a4c      	ldr	r2, [pc, #304]	; (8002d0c <HAL_GPIO_Init+0x2ec>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d019      	beq.n	8002c14 <HAL_GPIO_Init+0x1f4>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a4b      	ldr	r2, [pc, #300]	; (8002d10 <HAL_GPIO_Init+0x2f0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d013      	beq.n	8002c10 <HAL_GPIO_Init+0x1f0>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a4a      	ldr	r2, [pc, #296]	; (8002d14 <HAL_GPIO_Init+0x2f4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00d      	beq.n	8002c0c <HAL_GPIO_Init+0x1ec>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a49      	ldr	r2, [pc, #292]	; (8002d18 <HAL_GPIO_Init+0x2f8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d007      	beq.n	8002c08 <HAL_GPIO_Init+0x1e8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a48      	ldr	r2, [pc, #288]	; (8002d1c <HAL_GPIO_Init+0x2fc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d101      	bne.n	8002c04 <HAL_GPIO_Init+0x1e4>
 8002c00:	2305      	movs	r3, #5
 8002c02:	e00a      	b.n	8002c1a <HAL_GPIO_Init+0x1fa>
 8002c04:	2306      	movs	r3, #6
 8002c06:	e008      	b.n	8002c1a <HAL_GPIO_Init+0x1fa>
 8002c08:	2304      	movs	r3, #4
 8002c0a:	e006      	b.n	8002c1a <HAL_GPIO_Init+0x1fa>
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e004      	b.n	8002c1a <HAL_GPIO_Init+0x1fa>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e002      	b.n	8002c1a <HAL_GPIO_Init+0x1fa>
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <HAL_GPIO_Init+0x1fa>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	f002 0203 	and.w	r2, r2, #3
 8002c20:	0092      	lsls	r2, r2, #2
 8002c22:	4093      	lsls	r3, r2
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c2a:	4937      	ldr	r1, [pc, #220]	; (8002d08 <HAL_GPIO_Init+0x2e8>)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	3302      	adds	r3, #2
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c38:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c5c:	4a30      	ldr	r2, [pc, #192]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c62:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c86:	4a26      	ldr	r2, [pc, #152]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002c8c:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cb0:	4a1b      	ldr	r2, [pc, #108]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002cb6:	4b1a      	ldr	r3, [pc, #104]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cda:	4a11      	ldr	r2, [pc, #68]	; (8002d20 <HAL_GPIO_Init+0x300>)
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f47f ae9d 	bne.w	8002a30 <HAL_GPIO_Init+0x10>
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	bf00      	nop
 8002cfa:	371c      	adds	r7, #28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40010000 	.word	0x40010000
 8002d0c:	48000400 	.word	0x48000400
 8002d10:	48000800 	.word	0x48000800
 8002d14:	48000c00 	.word	0x48000c00
 8002d18:	48001000 	.word	0x48001000
 8002d1c:	48001400 	.word	0x48001400
 8002d20:	40010400 	.word	0x40010400

08002d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]
 8002d30:	4613      	mov	r3, r2
 8002d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d34:	787b      	ldrb	r3, [r7, #1]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d3a:	887a      	ldrh	r2, [r7, #2]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d40:	e002      	b.n	8002d48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d42:	887a      	ldrh	r2, [r7, #2]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d006      	beq.n	8002d78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d6a:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 f806 	bl	8002d84 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d78:	bf00      	nop
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40010400 	.word	0x40010400

08002d84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d141      	bne.n	8002e2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002daa:	4b4b      	ldr	r3, [pc, #300]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db6:	d131      	bne.n	8002e1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002db8:	4b47      	ldr	r3, [pc, #284]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dbe:	4a46      	ldr	r2, [pc, #280]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dc8:	4b43      	ldr	r3, [pc, #268]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dd0:	4a41      	ldr	r2, [pc, #260]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dd8:	4b40      	ldr	r3, [pc, #256]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2232      	movs	r2, #50	; 0x32
 8002dde:	fb02 f303 	mul.w	r3, r2, r3
 8002de2:	4a3f      	ldr	r2, [pc, #252]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	0c9b      	lsrs	r3, r3, #18
 8002dea:	3301      	adds	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dee:	e002      	b.n	8002df6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002df6:	4b38      	ldr	r3, [pc, #224]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e02:	d102      	bne.n	8002e0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f2      	bne.n	8002df0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e0a:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e16:	d158      	bne.n	8002eca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e057      	b.n	8002ecc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e1c:	4b2e      	ldr	r3, [pc, #184]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e22:	4a2d      	ldr	r2, [pc, #180]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e2c:	e04d      	b.n	8002eca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e34:	d141      	bne.n	8002eba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e36:	4b28      	ldr	r3, [pc, #160]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e42:	d131      	bne.n	8002ea8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e44:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4a:	4a23      	ldr	r2, [pc, #140]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e54:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e5c:	4a1e      	ldr	r2, [pc, #120]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2232      	movs	r2, #50	; 0x32
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	0c9b      	lsrs	r3, r3, #18
 8002e76:	3301      	adds	r3, #1
 8002e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e7a:	e002      	b.n	8002e82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e82:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8e:	d102      	bne.n	8002e96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f2      	bne.n	8002e7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea2:	d112      	bne.n	8002eca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e011      	b.n	8002ecc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eae:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002eb8:	e007      	b.n	8002eca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002eba:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ec2:	4a05      	ldr	r2, [pc, #20]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40007000 	.word	0x40007000
 8002edc:	20000048 	.word	0x20000048
 8002ee0:	431bde83 	.word	0x431bde83

08002ee4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002eee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef2:	6093      	str	r3, [r2, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40007000 	.word	0x40007000

08002f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e306      	b.n	8003524 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d075      	beq.n	800300e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f22:	4b97      	ldr	r3, [pc, #604]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f2c:	4b94      	ldr	r3, [pc, #592]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	2b0c      	cmp	r3, #12
 8002f3a:	d102      	bne.n	8002f42 <HAL_RCC_OscConfig+0x3e>
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d002      	beq.n	8002f48 <HAL_RCC_OscConfig+0x44>
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d10b      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	4b8d      	ldr	r3, [pc, #564]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d05b      	beq.n	800300c <HAL_RCC_OscConfig+0x108>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d157      	bne.n	800300c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e2e1      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d106      	bne.n	8002f78 <HAL_RCC_OscConfig+0x74>
 8002f6a:	4b85      	ldr	r3, [pc, #532]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a84      	ldr	r2, [pc, #528]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e01d      	b.n	8002fb4 <HAL_RCC_OscConfig+0xb0>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x98>
 8002f82:	4b7f      	ldr	r3, [pc, #508]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a7e      	ldr	r2, [pc, #504]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b7c      	ldr	r3, [pc, #496]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a7b      	ldr	r2, [pc, #492]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCC_OscConfig+0xb0>
 8002f9c:	4b78      	ldr	r3, [pc, #480]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a77      	ldr	r2, [pc, #476]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	4b75      	ldr	r3, [pc, #468]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a74      	ldr	r2, [pc, #464]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d013      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fd fe2e 	bl	8000c1c <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7fd fe2a 	bl	8000c1c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e2a6      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fd6:	4b6a      	ldr	r3, [pc, #424]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0xc0>
 8002fe2:	e014      	b.n	800300e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe4:	f7fd fe1a 	bl	8000c1c <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fec:	f7fd fe16 	bl	8000c1c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e292      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ffe:	4b60      	ldr	r3, [pc, #384]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0xe8>
 800300a:	e000      	b.n	800300e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d075      	beq.n	8003106 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800301a:	4b59      	ldr	r3, [pc, #356]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003024:	4b56      	ldr	r3, [pc, #344]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b0c      	cmp	r3, #12
 8003032:	d102      	bne.n	800303a <HAL_RCC_OscConfig+0x136>
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d002      	beq.n	8003040 <HAL_RCC_OscConfig+0x13c>
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d11f      	bne.n	8003080 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003040:	4b4f      	ldr	r3, [pc, #316]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_RCC_OscConfig+0x154>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e265      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003058:	4b49      	ldr	r3, [pc, #292]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	4946      	ldr	r1, [pc, #280]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800306c:	4b45      	ldr	r3, [pc, #276]	; (8003184 <HAL_RCC_OscConfig+0x280>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7fd fd87 	bl	8000b84 <HAL_InitTick>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d043      	beq.n	8003104 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e251      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d023      	beq.n	80030d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003088:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a3c      	ldr	r2, [pc, #240]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 800308e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fd fdc2 	bl	8000c1c <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309c:	f7fd fdbe 	bl	8000c1c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e23a      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ae:	4b34      	ldr	r3, [pc, #208]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ba:	4b31      	ldr	r3, [pc, #196]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	061b      	lsls	r3, r3, #24
 80030c8:	492d      	ldr	r1, [pc, #180]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
 80030ce:	e01a      	b.n	8003106 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d0:	4b2b      	ldr	r3, [pc, #172]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a2a      	ldr	r2, [pc, #168]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 80030d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fd fd9e 	bl	8000c1c <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e4:	f7fd fd9a 	bl	8000c1c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e216      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f6:	4b22      	ldr	r3, [pc, #136]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x1e0>
 8003102:	e000      	b.n	8003106 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003104:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d041      	beq.n	8003196 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d01c      	beq.n	8003154 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311a:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 800311c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003120:	4a17      	ldr	r2, [pc, #92]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312a:	f7fd fd77 	bl	8000c1c <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003132:	f7fd fd73 	bl	8000c1c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e1ef      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003144:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8003146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0ef      	beq.n	8003132 <HAL_RCC_OscConfig+0x22e>
 8003152:	e020      	b.n	8003196 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003154:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8003156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800315a:	4a09      	ldr	r2, [pc, #36]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003164:	f7fd fd5a 	bl	8000c1c <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800316a:	e00d      	b.n	8003188 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316c:	f7fd fd56 	bl	8000c1c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d906      	bls.n	8003188 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e1d2      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	2000004c 	.word	0x2000004c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003188:	4b8c      	ldr	r3, [pc, #560]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 800318a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1ea      	bne.n	800316c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 80a6 	beq.w	80032f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a4:	2300      	movs	r3, #0
 80031a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031a8:	4b84      	ldr	r3, [pc, #528]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_OscConfig+0x2b4>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x2b6>
 80031b8:	2300      	movs	r3, #0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00d      	beq.n	80031da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031be:	4b7f      	ldr	r3, [pc, #508]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 80031c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c2:	4a7e      	ldr	r2, [pc, #504]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 80031c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c8:	6593      	str	r3, [r2, #88]	; 0x58
 80031ca:	4b7c      	ldr	r3, [pc, #496]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031d6:	2301      	movs	r3, #1
 80031d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031da:	4b79      	ldr	r3, [pc, #484]	; (80033c0 <HAL_RCC_OscConfig+0x4bc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d118      	bne.n	8003218 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e6:	4b76      	ldr	r3, [pc, #472]	; (80033c0 <HAL_RCC_OscConfig+0x4bc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a75      	ldr	r2, [pc, #468]	; (80033c0 <HAL_RCC_OscConfig+0x4bc>)
 80031ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f2:	f7fd fd13 	bl	8000c1c <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fa:	f7fd fd0f 	bl	8000c1c <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e18b      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320c:	4b6c      	ldr	r3, [pc, #432]	; (80033c0 <HAL_RCC_OscConfig+0x4bc>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d108      	bne.n	8003232 <HAL_RCC_OscConfig+0x32e>
 8003220:	4b66      	ldr	r3, [pc, #408]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	4a65      	ldr	r2, [pc, #404]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003230:	e024      	b.n	800327c <HAL_RCC_OscConfig+0x378>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b05      	cmp	r3, #5
 8003238:	d110      	bne.n	800325c <HAL_RCC_OscConfig+0x358>
 800323a:	4b60      	ldr	r3, [pc, #384]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 800323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003240:	4a5e      	ldr	r2, [pc, #376]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800324a:	4b5c      	ldr	r3, [pc, #368]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	4a5a      	ldr	r2, [pc, #360]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800325a:	e00f      	b.n	800327c <HAL_RCC_OscConfig+0x378>
 800325c:	4b57      	ldr	r3, [pc, #348]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	4a56      	ldr	r2, [pc, #344]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800326c:	4b53      	ldr	r3, [pc, #332]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	4a52      	ldr	r2, [pc, #328]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003274:	f023 0304 	bic.w	r3, r3, #4
 8003278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d016      	beq.n	80032b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fd fcca 	bl	8000c1c <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328c:	f7fd fcc6 	bl	8000c1c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e140      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a2:	4b46      	ldr	r3, [pc, #280]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0ed      	beq.n	800328c <HAL_RCC_OscConfig+0x388>
 80032b0:	e015      	b.n	80032de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b2:	f7fd fcb3 	bl	8000c1c <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7fd fcaf 	bl	8000c1c <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e129      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d0:	4b3a      	ldr	r3, [pc, #232]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1ed      	bne.n	80032ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032de:	7ffb      	ldrb	r3, [r7, #31]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d105      	bne.n	80032f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e4:	4b35      	ldr	r3, [pc, #212]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 80032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e8:	4a34      	ldr	r2, [pc, #208]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 80032ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d03c      	beq.n	8003376 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01c      	beq.n	800333e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003304:	4b2d      	ldr	r3, [pc, #180]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800330a:	4a2c      	ldr	r2, [pc, #176]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7fd fc82 	bl	8000c1c <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800331c:	f7fd fc7e 	bl	8000c1c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e0fa      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800332e:	4b23      	ldr	r3, [pc, #140]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ef      	beq.n	800331c <HAL_RCC_OscConfig+0x418>
 800333c:	e01b      	b.n	8003376 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800333e:	4b1f      	ldr	r3, [pc, #124]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003340:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003344:	4a1d      	ldr	r2, [pc, #116]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334e:	f7fd fc65 	bl	8000c1c <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003356:	f7fd fc61 	bl	8000c1c <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e0dd      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003368:	4b14      	ldr	r3, [pc, #80]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 800336a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1ef      	bne.n	8003356 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80d1 	beq.w	8003522 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003380:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b0c      	cmp	r3, #12
 800338a:	f000 808b 	beq.w	80034a4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d15e      	bne.n	8003454 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a08      	ldr	r2, [pc, #32]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 800339c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a2:	f7fd fc3b 	bl	8000c1c <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a8:	e00c      	b.n	80033c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033aa:	f7fd fc37 	bl	8000c1c <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d905      	bls.n	80033c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e0b3      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c4:	4b59      	ldr	r3, [pc, #356]	; (800352c <HAL_RCC_OscConfig+0x628>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ec      	bne.n	80033aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033d0:	4b56      	ldr	r3, [pc, #344]	; (800352c <HAL_RCC_OscConfig+0x628>)
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	4b56      	ldr	r3, [pc, #344]	; (8003530 <HAL_RCC_OscConfig+0x62c>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6a11      	ldr	r1, [r2, #32]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033e0:	3a01      	subs	r2, #1
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	4311      	orrs	r1, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033ea:	0212      	lsls	r2, r2, #8
 80033ec:	4311      	orrs	r1, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	3a01      	subs	r2, #1
 80033f6:	0552      	lsls	r2, r2, #21
 80033f8:	4311      	orrs	r1, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033fe:	0852      	lsrs	r2, r2, #1
 8003400:	3a01      	subs	r2, #1
 8003402:	0652      	lsls	r2, r2, #25
 8003404:	4311      	orrs	r1, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800340a:	06d2      	lsls	r2, r2, #27
 800340c:	430a      	orrs	r2, r1
 800340e:	4947      	ldr	r1, [pc, #284]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003410:	4313      	orrs	r3, r2
 8003412:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003414:	4b45      	ldr	r3, [pc, #276]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a44      	ldr	r2, [pc, #272]	; (800352c <HAL_RCC_OscConfig+0x628>)
 800341a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800341e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003420:	4b42      	ldr	r3, [pc, #264]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4a41      	ldr	r2, [pc, #260]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800342a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fd fbf6 	bl	8000c1c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003434:	f7fd fbf2 	bl	8000c1c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e06e      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003446:	4b39      	ldr	r3, [pc, #228]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x530>
 8003452:	e066      	b.n	8003522 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003454:	4b35      	ldr	r3, [pc, #212]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a34      	ldr	r2, [pc, #208]	; (800352c <HAL_RCC_OscConfig+0x628>)
 800345a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800345e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003460:	4b32      	ldr	r3, [pc, #200]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4a31      	ldr	r2, [pc, #196]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003466:	f023 0303 	bic.w	r3, r3, #3
 800346a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800346c:	4b2f      	ldr	r3, [pc, #188]	; (800352c <HAL_RCC_OscConfig+0x628>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4a2e      	ldr	r2, [pc, #184]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003472:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fd fbce 	bl	8000c1c <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003484:	f7fd fbca 	bl	8000c1c <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e046      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003496:	4b25      	ldr	r3, [pc, #148]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x580>
 80034a2:	e03e      	b.n	8003522 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e039      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80034b0:	4b1e      	ldr	r3, [pc, #120]	; (800352c <HAL_RCC_OscConfig+0x628>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f003 0203 	and.w	r2, r3, #3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d12c      	bne.n	800351e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	3b01      	subs	r3, #1
 80034d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d123      	bne.n	800351e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d11b      	bne.n	800351e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d113      	bne.n	800351e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	085b      	lsrs	r3, r3, #1
 8003502:	3b01      	subs	r3, #1
 8003504:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d109      	bne.n	800351e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	3b01      	subs	r3, #1
 8003518:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800351a:	429a      	cmp	r2, r3
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3720      	adds	r7, #32
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	019f800c 	.word	0x019f800c

08003534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e11e      	b.n	800378a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b91      	ldr	r3, [pc, #580]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d910      	bls.n	800357c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b8e      	ldr	r3, [pc, #568]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 020f 	bic.w	r2, r3, #15
 8003562:	498c      	ldr	r1, [pc, #560]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b8a      	ldr	r3, [pc, #552]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e106      	b.n	800378a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d073      	beq.n	8003670 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d129      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003590:	4b81      	ldr	r3, [pc, #516]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0f4      	b.n	800378a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80035a0:	f000 f99e 	bl	80038e0 <RCC_GetSysClockFreqFromPLLSource>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4a7c      	ldr	r2, [pc, #496]	; (800379c <HAL_RCC_ClockConfig+0x268>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d93f      	bls.n	800362e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035ae:	4b7a      	ldr	r3, [pc, #488]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d033      	beq.n	800362e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d12f      	bne.n	800362e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035ce:	4b72      	ldr	r3, [pc, #456]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035d6:	4a70      	ldr	r2, [pc, #448]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80035d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	e024      	b.n	800362e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d107      	bne.n	80035fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ec:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d109      	bne.n	800360c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0c6      	b.n	800378a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035fc:	4b66      	ldr	r3, [pc, #408]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0be      	b.n	800378a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800360c:	f000 f8ce 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 8003610:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4a61      	ldr	r2, [pc, #388]	; (800379c <HAL_RCC_ClockConfig+0x268>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d909      	bls.n	800362e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800361a:	4b5f      	ldr	r3, [pc, #380]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003622:	4a5d      	ldr	r2, [pc, #372]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 8003624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003628:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800362a:	2380      	movs	r3, #128	; 0x80
 800362c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800362e:	4b5a      	ldr	r3, [pc, #360]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f023 0203 	bic.w	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	4957      	ldr	r1, [pc, #348]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800363c:	4313      	orrs	r3, r2
 800363e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003640:	f7fd faec 	bl	8000c1c <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003646:	e00a      	b.n	800365e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003648:	f7fd fae8 	bl	8000c1c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	; 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e095      	b.n	800378a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365e:	4b4e      	ldr	r3, [pc, #312]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 020c 	and.w	r2, r3, #12
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	429a      	cmp	r2, r3
 800366e:	d1eb      	bne.n	8003648 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d023      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003688:	4b43      	ldr	r3, [pc, #268]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4a42      	ldr	r2, [pc, #264]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800368e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003692:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80036a0:	4b3d      	ldr	r3, [pc, #244]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036a8:	4a3b      	ldr	r2, [pc, #236]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80036aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b39      	ldr	r3, [pc, #228]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4936      	ldr	r1, [pc, #216]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2b80      	cmp	r3, #128	; 0x80
 80036c8:	d105      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036ca:	4b33      	ldr	r3, [pc, #204]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	4a32      	ldr	r2, [pc, #200]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80036d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d6:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d21d      	bcs.n	8003720 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e4:	4b2b      	ldr	r3, [pc, #172]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f023 020f 	bic.w	r2, r3, #15
 80036ec:	4929      	ldr	r1, [pc, #164]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036f4:	f7fd fa92 	bl	8000c1c <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fc:	f7fd fa8e 	bl	8000c1c <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f241 3288 	movw	r2, #5000	; 0x1388
 800370a:	4293      	cmp	r3, r2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e03b      	b.n	800378a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d1ed      	bne.n	80036fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800372c:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4917      	ldr	r1, [pc, #92]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800374a:	4b13      	ldr	r3, [pc, #76]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	490f      	ldr	r1, [pc, #60]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800375a:	4313      	orrs	r3, r2
 800375c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800375e:	f000 f825 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 8003762:	4602      	mov	r2, r0
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	091b      	lsrs	r3, r3, #4
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	490c      	ldr	r1, [pc, #48]	; (80037a0 <HAL_RCC_ClockConfig+0x26c>)
 8003770:	5ccb      	ldrb	r3, [r1, r3]
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	fa22 f303 	lsr.w	r3, r2, r3
 800377a:	4a0a      	ldr	r2, [pc, #40]	; (80037a4 <HAL_RCC_ClockConfig+0x270>)
 800377c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_RCC_ClockConfig+0x274>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7fd f9fe 	bl	8000b84 <HAL_InitTick>
 8003788:	4603      	mov	r3, r0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40022000 	.word	0x40022000
 8003798:	40021000 	.word	0x40021000
 800379c:	04c4b400 	.word	0x04c4b400
 80037a0:	08004a80 	.word	0x08004a80
 80037a4:	20000048 	.word	0x20000048
 80037a8:	2000004c 	.word	0x2000004c

080037ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80037b2:	4b2c      	ldr	r3, [pc, #176]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d102      	bne.n	80037c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037be:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	e047      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037c4:	4b27      	ldr	r3, [pc, #156]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d102      	bne.n	80037d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037d0:	4b26      	ldr	r3, [pc, #152]	; (800386c <HAL_RCC_GetSysClockFreq+0xc0>)
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	e03e      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80037d6:	4b23      	ldr	r3, [pc, #140]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	d136      	bne.n	8003850 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037ec:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	3301      	adds	r3, #1
 80037f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d10c      	bne.n	800381a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003800:	4a1a      	ldr	r2, [pc, #104]	; (800386c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	fbb2 f3f3 	udiv	r3, r2, r3
 8003808:	4a16      	ldr	r2, [pc, #88]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 800380a:	68d2      	ldr	r2, [r2, #12]
 800380c:	0a12      	lsrs	r2, r2, #8
 800380e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	617b      	str	r3, [r7, #20]
      break;
 8003818:	e00c      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800381a:	4a13      	ldr	r2, [pc, #76]	; (8003868 <HAL_RCC_GetSysClockFreq+0xbc>)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003822:	4a10      	ldr	r2, [pc, #64]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003824:	68d2      	ldr	r2, [r2, #12]
 8003826:	0a12      	lsrs	r2, r2, #8
 8003828:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800382c:	fb02 f303 	mul.w	r3, r2, r3
 8003830:	617b      	str	r3, [r7, #20]
      break;
 8003832:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003834:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	0e5b      	lsrs	r3, r3, #25
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	3301      	adds	r3, #1
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	e001      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003854:	693b      	ldr	r3, [r7, #16]
}
 8003856:	4618      	mov	r0, r3
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	00f42400 	.word	0x00f42400
 800386c:	016e3600 	.word	0x016e3600

08003870 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_RCC_GetHCLKFreq+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000048 	.word	0x20000048

08003888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800388c:	f7ff fff0 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 8003890:	4602      	mov	r2, r0
 8003892:	4b06      	ldr	r3, [pc, #24]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	0a1b      	lsrs	r3, r3, #8
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	4904      	ldr	r1, [pc, #16]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800389e:	5ccb      	ldrb	r3, [r1, r3]
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000
 80038b0:	08004a90 	.word	0x08004a90

080038b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038b8:	f7ff ffda 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0adb      	lsrs	r3, r3, #11
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4904      	ldr	r1, [pc, #16]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	08004a90 	.word	0x08004a90

080038e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038e6:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	3301      	adds	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b03      	cmp	r3, #3
 8003902:	d10c      	bne.n	800391e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003904:	4a17      	ldr	r2, [pc, #92]	; (8003964 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	4a14      	ldr	r2, [pc, #80]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800390e:	68d2      	ldr	r2, [r2, #12]
 8003910:	0a12      	lsrs	r2, r2, #8
 8003912:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	617b      	str	r3, [r7, #20]
    break;
 800391c:	e00c      	b.n	8003938 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800391e:	4a12      	ldr	r2, [pc, #72]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	fbb2 f3f3 	udiv	r3, r2, r3
 8003926:	4a0e      	ldr	r2, [pc, #56]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003928:	68d2      	ldr	r2, [r2, #12]
 800392a:	0a12      	lsrs	r2, r2, #8
 800392c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003930:	fb02 f303 	mul.w	r3, r2, r3
 8003934:	617b      	str	r3, [r7, #20]
    break;
 8003936:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003938:	4b09      	ldr	r3, [pc, #36]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	0e5b      	lsrs	r3, r3, #25
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	3301      	adds	r3, #1
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003950:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003952:	687b      	ldr	r3, [r7, #4]
}
 8003954:	4618      	mov	r0, r3
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	40021000 	.word	0x40021000
 8003964:	016e3600 	.word	0x016e3600
 8003968:	00f42400 	.word	0x00f42400

0800396c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003974:	2300      	movs	r3, #0
 8003976:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003978:	2300      	movs	r3, #0
 800397a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8098 	beq.w	8003aba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398a:	2300      	movs	r3, #0
 800398c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800398e:	4b43      	ldr	r3, [pc, #268]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10d      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399a:	4b40      	ldr	r3, [pc, #256]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800399c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399e:	4a3f      	ldr	r2, [pc, #252]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a4:	6593      	str	r3, [r2, #88]	; 0x58
 80039a6:	4b3d      	ldr	r3, [pc, #244]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b2:	2301      	movs	r3, #1
 80039b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b6:	4b3a      	ldr	r3, [pc, #232]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a39      	ldr	r2, [pc, #228]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039c2:	f7fd f92b 	bl	8000c1c <HAL_GetTick>
 80039c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039c8:	e009      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ca:	f7fd f927 	bl	8000c1c <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d902      	bls.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	74fb      	strb	r3, [r7, #19]
        break;
 80039dc:	e005      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039de:	4b30      	ldr	r3, [pc, #192]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0ef      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80039ea:	7cfb      	ldrb	r3, [r7, #19]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d159      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039f0:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d01e      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d019      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a0c:	4b23      	ldr	r3, [pc, #140]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a18:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1e:	4a1f      	ldr	r2, [pc, #124]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a28:	4b1c      	ldr	r3, [pc, #112]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2e:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a38:	4a18      	ldr	r2, [pc, #96]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d016      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4a:	f7fd f8e7 	bl	8000c1c <HAL_GetTick>
 8003a4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a50:	e00b      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fd f8e3 	bl	8000c1c <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d902      	bls.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	74fb      	strb	r3, [r7, #19]
            break;
 8003a68:	e006      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ec      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003a78:	7cfb      	ldrb	r3, [r7, #19]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10b      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a7e:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8c:	4903      	ldr	r1, [pc, #12]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a94:	e008      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a96:	7cfb      	ldrb	r3, [r7, #19]
 8003a98:	74bb      	strb	r3, [r7, #18]
 8003a9a:	e005      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa8:	7c7b      	ldrb	r3, [r7, #17]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d105      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aae:	4ba7      	ldr	r3, [pc, #668]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	4aa6      	ldr	r2, [pc, #664]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ac6:	4ba1      	ldr	r3, [pc, #644]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	f023 0203 	bic.w	r2, r3, #3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	499d      	ldr	r1, [pc, #628]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ae8:	4b98      	ldr	r3, [pc, #608]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f023 020c 	bic.w	r2, r3, #12
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	4995      	ldr	r1, [pc, #596]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b0a:	4b90      	ldr	r3, [pc, #576]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	498c      	ldr	r1, [pc, #560]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b2c:	4b87      	ldr	r3, [pc, #540]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	4984      	ldr	r1, [pc, #528]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b4e:	4b7f      	ldr	r3, [pc, #508]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	497b      	ldr	r1, [pc, #492]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b70:	4b76      	ldr	r3, [pc, #472]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	4973      	ldr	r1, [pc, #460]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b92:	4b6e      	ldr	r3, [pc, #440]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	496a      	ldr	r1, [pc, #424]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bb4:	4b65      	ldr	r3, [pc, #404]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	4962      	ldr	r1, [pc, #392]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bd6:	4b5d      	ldr	r3, [pc, #372]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	4959      	ldr	r1, [pc, #356]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bf8:	4b54      	ldr	r3, [pc, #336]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bfe:	f023 0203 	bic.w	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	4951      	ldr	r1, [pc, #324]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c1a:	4b4c      	ldr	r3, [pc, #304]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	4948      	ldr	r1, [pc, #288]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d015      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c3c:	4b43      	ldr	r3, [pc, #268]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	4940      	ldr	r1, [pc, #256]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c5a:	d105      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c5c:	4b3b      	ldr	r3, [pc, #236]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	4a3a      	ldr	r2, [pc, #232]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d015      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c74:	4b35      	ldr	r3, [pc, #212]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c82:	4932      	ldr	r1, [pc, #200]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c92:	d105      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c94:	4b2d      	ldr	r3, [pc, #180]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4a2c      	ldr	r2, [pc, #176]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c9e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d015      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	4924      	ldr	r1, [pc, #144]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cca:	d105      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ccc:	4b1f      	ldr	r3, [pc, #124]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4a1e      	ldr	r2, [pc, #120]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cd6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d015      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ce4:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf2:	4916      	ldr	r1, [pc, #88]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d02:	d105      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d04:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	4a10      	ldr	r2, [pc, #64]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d0e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d019      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	4908      	ldr	r1, [pc, #32]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d3a:	d109      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d3c:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4a02      	ldr	r2, [pc, #8]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d46:	60d3      	str	r3, [r2, #12]
 8003d48:	e002      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d015      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d5c:	4b29      	ldr	r3, [pc, #164]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	4926      	ldr	r1, [pc, #152]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d7c:	4b21      	ldr	r3, [pc, #132]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4a20      	ldr	r2, [pc, #128]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d86:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d015      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003d94:	4b1b      	ldr	r3, [pc, #108]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da2:	4918      	ldr	r1, [pc, #96]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003db4:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a12      	ldr	r2, [pc, #72]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d015      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003dcc:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dda:	490a      	ldr	r1, [pc, #40]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dea:	d105      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4a04      	ldr	r2, [pc, #16]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003df6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003df8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000

08003e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e042      	b.n	8003ea0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d106      	bne.n	8003e32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7fc fdcb 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2224      	movs	r2, #36	; 0x24
 8003e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f82c 	bl	8003ea8 <UART_SetConfig>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e022      	b.n	8003ea0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fb1c 	bl	80044a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 fba3 	bl	80045e4 <UART_CheckIdleState>
 8003e9e:	4603      	mov	r3, r0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eac:	b08c      	sub	sp, #48	; 0x30
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4baa      	ldr	r3, [pc, #680]	; (8004180 <UART_SetConfig+0x2d8>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a9f      	ldr	r2, [pc, #636]	; (8004184 <UART_SetConfig+0x2dc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d004      	beq.n	8003f14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f10:	4313      	orrs	r3, r2
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003f1e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	f023 010f 	bic.w	r1, r3, #15
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a90      	ldr	r2, [pc, #576]	; (8004188 <UART_SetConfig+0x2e0>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d125      	bne.n	8003f98 <UART_SetConfig+0xf0>
 8003f4c:	4b8f      	ldr	r3, [pc, #572]	; (800418c <UART_SetConfig+0x2e4>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d81a      	bhi.n	8003f90 <UART_SetConfig+0xe8>
 8003f5a:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <UART_SetConfig+0xb8>)
 8003f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f60:	08003f71 	.word	0x08003f71
 8003f64:	08003f81 	.word	0x08003f81
 8003f68:	08003f79 	.word	0x08003f79
 8003f6c:	08003f89 	.word	0x08003f89
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f76:	e116      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f7e:	e112      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8003f80:	2304      	movs	r3, #4
 8003f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f86:	e10e      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8003f88:	2308      	movs	r3, #8
 8003f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f8e:	e10a      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8003f90:	2310      	movs	r3, #16
 8003f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f96:	e106      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a7c      	ldr	r2, [pc, #496]	; (8004190 <UART_SetConfig+0x2e8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d138      	bne.n	8004014 <UART_SetConfig+0x16c>
 8003fa2:	4b7a      	ldr	r3, [pc, #488]	; (800418c <UART_SetConfig+0x2e4>)
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa8:	f003 030c 	and.w	r3, r3, #12
 8003fac:	2b0c      	cmp	r3, #12
 8003fae:	d82d      	bhi.n	800400c <UART_SetConfig+0x164>
 8003fb0:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <UART_SetConfig+0x110>)
 8003fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb6:	bf00      	nop
 8003fb8:	08003fed 	.word	0x08003fed
 8003fbc:	0800400d 	.word	0x0800400d
 8003fc0:	0800400d 	.word	0x0800400d
 8003fc4:	0800400d 	.word	0x0800400d
 8003fc8:	08003ffd 	.word	0x08003ffd
 8003fcc:	0800400d 	.word	0x0800400d
 8003fd0:	0800400d 	.word	0x0800400d
 8003fd4:	0800400d 	.word	0x0800400d
 8003fd8:	08003ff5 	.word	0x08003ff5
 8003fdc:	0800400d 	.word	0x0800400d
 8003fe0:	0800400d 	.word	0x0800400d
 8003fe4:	0800400d 	.word	0x0800400d
 8003fe8:	08004005 	.word	0x08004005
 8003fec:	2300      	movs	r3, #0
 8003fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ff2:	e0d8      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ffa:	e0d4      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004002:	e0d0      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8004004:	2308      	movs	r3, #8
 8004006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800400a:	e0cc      	b.n	80041a6 <UART_SetConfig+0x2fe>
 800400c:	2310      	movs	r3, #16
 800400e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004012:	e0c8      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a5e      	ldr	r2, [pc, #376]	; (8004194 <UART_SetConfig+0x2ec>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d125      	bne.n	800406a <UART_SetConfig+0x1c2>
 800401e:	4b5b      	ldr	r3, [pc, #364]	; (800418c <UART_SetConfig+0x2e4>)
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004024:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004028:	2b30      	cmp	r3, #48	; 0x30
 800402a:	d016      	beq.n	800405a <UART_SetConfig+0x1b2>
 800402c:	2b30      	cmp	r3, #48	; 0x30
 800402e:	d818      	bhi.n	8004062 <UART_SetConfig+0x1ba>
 8004030:	2b20      	cmp	r3, #32
 8004032:	d00a      	beq.n	800404a <UART_SetConfig+0x1a2>
 8004034:	2b20      	cmp	r3, #32
 8004036:	d814      	bhi.n	8004062 <UART_SetConfig+0x1ba>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <UART_SetConfig+0x19a>
 800403c:	2b10      	cmp	r3, #16
 800403e:	d008      	beq.n	8004052 <UART_SetConfig+0x1aa>
 8004040:	e00f      	b.n	8004062 <UART_SetConfig+0x1ba>
 8004042:	2300      	movs	r3, #0
 8004044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004048:	e0ad      	b.n	80041a6 <UART_SetConfig+0x2fe>
 800404a:	2302      	movs	r3, #2
 800404c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004050:	e0a9      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8004052:	2304      	movs	r3, #4
 8004054:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004058:	e0a5      	b.n	80041a6 <UART_SetConfig+0x2fe>
 800405a:	2308      	movs	r3, #8
 800405c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004060:	e0a1      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8004062:	2310      	movs	r3, #16
 8004064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004068:	e09d      	b.n	80041a6 <UART_SetConfig+0x2fe>
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a4a      	ldr	r2, [pc, #296]	; (8004198 <UART_SetConfig+0x2f0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d125      	bne.n	80040c0 <UART_SetConfig+0x218>
 8004074:	4b45      	ldr	r3, [pc, #276]	; (800418c <UART_SetConfig+0x2e4>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800407e:	2bc0      	cmp	r3, #192	; 0xc0
 8004080:	d016      	beq.n	80040b0 <UART_SetConfig+0x208>
 8004082:	2bc0      	cmp	r3, #192	; 0xc0
 8004084:	d818      	bhi.n	80040b8 <UART_SetConfig+0x210>
 8004086:	2b80      	cmp	r3, #128	; 0x80
 8004088:	d00a      	beq.n	80040a0 <UART_SetConfig+0x1f8>
 800408a:	2b80      	cmp	r3, #128	; 0x80
 800408c:	d814      	bhi.n	80040b8 <UART_SetConfig+0x210>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <UART_SetConfig+0x1f0>
 8004092:	2b40      	cmp	r3, #64	; 0x40
 8004094:	d008      	beq.n	80040a8 <UART_SetConfig+0x200>
 8004096:	e00f      	b.n	80040b8 <UART_SetConfig+0x210>
 8004098:	2300      	movs	r3, #0
 800409a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800409e:	e082      	b.n	80041a6 <UART_SetConfig+0x2fe>
 80040a0:	2302      	movs	r3, #2
 80040a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040a6:	e07e      	b.n	80041a6 <UART_SetConfig+0x2fe>
 80040a8:	2304      	movs	r3, #4
 80040aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ae:	e07a      	b.n	80041a6 <UART_SetConfig+0x2fe>
 80040b0:	2308      	movs	r3, #8
 80040b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040b6:	e076      	b.n	80041a6 <UART_SetConfig+0x2fe>
 80040b8:	2310      	movs	r3, #16
 80040ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040be:	e072      	b.n	80041a6 <UART_SetConfig+0x2fe>
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a35      	ldr	r2, [pc, #212]	; (800419c <UART_SetConfig+0x2f4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d12a      	bne.n	8004120 <UART_SetConfig+0x278>
 80040ca:	4b30      	ldr	r3, [pc, #192]	; (800418c <UART_SetConfig+0x2e4>)
 80040cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040d8:	d01a      	beq.n	8004110 <UART_SetConfig+0x268>
 80040da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040de:	d81b      	bhi.n	8004118 <UART_SetConfig+0x270>
 80040e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e4:	d00c      	beq.n	8004100 <UART_SetConfig+0x258>
 80040e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ea:	d815      	bhi.n	8004118 <UART_SetConfig+0x270>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <UART_SetConfig+0x250>
 80040f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f4:	d008      	beq.n	8004108 <UART_SetConfig+0x260>
 80040f6:	e00f      	b.n	8004118 <UART_SetConfig+0x270>
 80040f8:	2300      	movs	r3, #0
 80040fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040fe:	e052      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8004100:	2302      	movs	r3, #2
 8004102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004106:	e04e      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8004108:	2304      	movs	r3, #4
 800410a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800410e:	e04a      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8004110:	2308      	movs	r3, #8
 8004112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004116:	e046      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8004118:	2310      	movs	r3, #16
 800411a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800411e:	e042      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a17      	ldr	r2, [pc, #92]	; (8004184 <UART_SetConfig+0x2dc>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d13a      	bne.n	80041a0 <UART_SetConfig+0x2f8>
 800412a:	4b18      	ldr	r3, [pc, #96]	; (800418c <UART_SetConfig+0x2e4>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004130:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004134:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004138:	d01a      	beq.n	8004170 <UART_SetConfig+0x2c8>
 800413a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800413e:	d81b      	bhi.n	8004178 <UART_SetConfig+0x2d0>
 8004140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004144:	d00c      	beq.n	8004160 <UART_SetConfig+0x2b8>
 8004146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414a:	d815      	bhi.n	8004178 <UART_SetConfig+0x2d0>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <UART_SetConfig+0x2b0>
 8004150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004154:	d008      	beq.n	8004168 <UART_SetConfig+0x2c0>
 8004156:	e00f      	b.n	8004178 <UART_SetConfig+0x2d0>
 8004158:	2300      	movs	r3, #0
 800415a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800415e:	e022      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8004160:	2302      	movs	r3, #2
 8004162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004166:	e01e      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8004168:	2304      	movs	r3, #4
 800416a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800416e:	e01a      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8004170:	2308      	movs	r3, #8
 8004172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004176:	e016      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8004178:	2310      	movs	r3, #16
 800417a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800417e:	e012      	b.n	80041a6 <UART_SetConfig+0x2fe>
 8004180:	cfff69f3 	.word	0xcfff69f3
 8004184:	40008000 	.word	0x40008000
 8004188:	40013800 	.word	0x40013800
 800418c:	40021000 	.word	0x40021000
 8004190:	40004400 	.word	0x40004400
 8004194:	40004800 	.word	0x40004800
 8004198:	40004c00 	.word	0x40004c00
 800419c:	40005000 	.word	0x40005000
 80041a0:	2310      	movs	r3, #16
 80041a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4aae      	ldr	r2, [pc, #696]	; (8004464 <UART_SetConfig+0x5bc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	f040 8097 	bne.w	80042e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d823      	bhi.n	8004202 <UART_SetConfig+0x35a>
 80041ba:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <UART_SetConfig+0x318>)
 80041bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c0:	080041e5 	.word	0x080041e5
 80041c4:	08004203 	.word	0x08004203
 80041c8:	080041ed 	.word	0x080041ed
 80041cc:	08004203 	.word	0x08004203
 80041d0:	080041f3 	.word	0x080041f3
 80041d4:	08004203 	.word	0x08004203
 80041d8:	08004203 	.word	0x08004203
 80041dc:	08004203 	.word	0x08004203
 80041e0:	080041fb 	.word	0x080041fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e4:	f7ff fb50 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 80041e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041ea:	e010      	b.n	800420e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041ec:	4b9e      	ldr	r3, [pc, #632]	; (8004468 <UART_SetConfig+0x5c0>)
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80041f0:	e00d      	b.n	800420e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041f2:	f7ff fadb 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 80041f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041f8:	e009      	b.n	800420e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004200:	e005      	b.n	800420e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800420c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8130 	beq.w	8004476 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	4a94      	ldr	r2, [pc, #592]	; (800446c <UART_SetConfig+0x5c4>)
 800421c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004220:	461a      	mov	r2, r3
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	fbb3 f3f2 	udiv	r3, r3, r2
 8004228:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	4413      	add	r3, r2
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	429a      	cmp	r2, r3
 8004238:	d305      	bcc.n	8004246 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	429a      	cmp	r2, r3
 8004244:	d903      	bls.n	800424e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800424c:	e113      	b.n	8004476 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	2200      	movs	r2, #0
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	60fa      	str	r2, [r7, #12]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	4a84      	ldr	r2, [pc, #528]	; (800446c <UART_SetConfig+0x5c4>)
 800425c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004260:	b29b      	uxth	r3, r3
 8004262:	2200      	movs	r2, #0
 8004264:	603b      	str	r3, [r7, #0]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800426c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004270:	f7fb ffd2 	bl	8000218 <__aeabi_uldivmod>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4610      	mov	r0, r2
 800427a:	4619      	mov	r1, r3
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	020b      	lsls	r3, r1, #8
 8004286:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800428a:	0202      	lsls	r2, r0, #8
 800428c:	6979      	ldr	r1, [r7, #20]
 800428e:	6849      	ldr	r1, [r1, #4]
 8004290:	0849      	lsrs	r1, r1, #1
 8004292:	2000      	movs	r0, #0
 8004294:	460c      	mov	r4, r1
 8004296:	4605      	mov	r5, r0
 8004298:	eb12 0804 	adds.w	r8, r2, r4
 800429c:	eb43 0905 	adc.w	r9, r3, r5
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	469a      	mov	sl, r3
 80042a8:	4693      	mov	fp, r2
 80042aa:	4652      	mov	r2, sl
 80042ac:	465b      	mov	r3, fp
 80042ae:	4640      	mov	r0, r8
 80042b0:	4649      	mov	r1, r9
 80042b2:	f7fb ffb1 	bl	8000218 <__aeabi_uldivmod>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4613      	mov	r3, r2
 80042bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042c4:	d308      	bcc.n	80042d8 <UART_SetConfig+0x430>
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042cc:	d204      	bcs.n	80042d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6a3a      	ldr	r2, [r7, #32]
 80042d4:	60da      	str	r2, [r3, #12]
 80042d6:	e0ce      	b.n	8004476 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80042de:	e0ca      	b.n	8004476 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e8:	d166      	bne.n	80043b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80042ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d827      	bhi.n	8004342 <UART_SetConfig+0x49a>
 80042f2:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <UART_SetConfig+0x450>)
 80042f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f8:	0800431d 	.word	0x0800431d
 80042fc:	08004325 	.word	0x08004325
 8004300:	0800432d 	.word	0x0800432d
 8004304:	08004343 	.word	0x08004343
 8004308:	08004333 	.word	0x08004333
 800430c:	08004343 	.word	0x08004343
 8004310:	08004343 	.word	0x08004343
 8004314:	08004343 	.word	0x08004343
 8004318:	0800433b 	.word	0x0800433b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800431c:	f7ff fab4 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8004320:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004322:	e014      	b.n	800434e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004324:	f7ff fac6 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 8004328:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800432a:	e010      	b.n	800434e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800432c:	4b4e      	ldr	r3, [pc, #312]	; (8004468 <UART_SetConfig+0x5c0>)
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004330:	e00d      	b.n	800434e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004332:	f7ff fa3b 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 8004336:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004338:	e009      	b.n	800434e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800433a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004340:	e005      	b.n	800434e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800434c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8090 	beq.w	8004476 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	4a44      	ldr	r2, [pc, #272]	; (800446c <UART_SetConfig+0x5c4>)
 800435c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004360:	461a      	mov	r2, r3
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	fbb3 f3f2 	udiv	r3, r3, r2
 8004368:	005a      	lsls	r2, r3, #1
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	085b      	lsrs	r3, r3, #1
 8004370:	441a      	add	r2, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	fbb2 f3f3 	udiv	r3, r2, r3
 800437a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	2b0f      	cmp	r3, #15
 8004380:	d916      	bls.n	80043b0 <UART_SetConfig+0x508>
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004388:	d212      	bcs.n	80043b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	b29b      	uxth	r3, r3
 800438e:	f023 030f 	bic.w	r3, r3, #15
 8004392:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	085b      	lsrs	r3, r3, #1
 8004398:	b29b      	uxth	r3, r3
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	b29a      	uxth	r2, r3
 80043a0:	8bfb      	ldrh	r3, [r7, #30]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	8bfa      	ldrh	r2, [r7, #30]
 80043ac:	60da      	str	r2, [r3, #12]
 80043ae:	e062      	b.n	8004476 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80043b6:	e05e      	b.n	8004476 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d828      	bhi.n	8004412 <UART_SetConfig+0x56a>
 80043c0:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <UART_SetConfig+0x520>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	080043ed 	.word	0x080043ed
 80043cc:	080043f5 	.word	0x080043f5
 80043d0:	080043fd 	.word	0x080043fd
 80043d4:	08004413 	.word	0x08004413
 80043d8:	08004403 	.word	0x08004403
 80043dc:	08004413 	.word	0x08004413
 80043e0:	08004413 	.word	0x08004413
 80043e4:	08004413 	.word	0x08004413
 80043e8:	0800440b 	.word	0x0800440b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ec:	f7ff fa4c 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 80043f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043f2:	e014      	b.n	800441e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f4:	f7ff fa5e 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 80043f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043fa:	e010      	b.n	800441e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043fc:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <UART_SetConfig+0x5c0>)
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004400:	e00d      	b.n	800441e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004402:	f7ff f9d3 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 8004406:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004408:	e009      	b.n	800441e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004410:	e005      	b.n	800441e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800441c:	bf00      	nop
    }

    if (pclk != 0U)
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	2b00      	cmp	r3, #0
 8004422:	d028      	beq.n	8004476 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	4a10      	ldr	r2, [pc, #64]	; (800446c <UART_SetConfig+0x5c4>)
 800442a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800442e:	461a      	mov	r2, r3
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	fbb3 f2f2 	udiv	r2, r3, r2
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	085b      	lsrs	r3, r3, #1
 800443c:	441a      	add	r2, r3
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	fbb2 f3f3 	udiv	r3, r2, r3
 8004446:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	2b0f      	cmp	r3, #15
 800444c:	d910      	bls.n	8004470 <UART_SetConfig+0x5c8>
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004454:	d20c      	bcs.n	8004470 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	b29a      	uxth	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60da      	str	r2, [r3, #12]
 8004460:	e009      	b.n	8004476 <UART_SetConfig+0x5ce>
 8004462:	bf00      	nop
 8004464:	40008000 	.word	0x40008000
 8004468:	00f42400 	.word	0x00f42400
 800446c:	08004a98 	.word	0x08004a98
      }
      else
      {
        ret = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2201      	movs	r2, #1
 800447a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2201      	movs	r2, #1
 8004482:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2200      	movs	r2, #0
 800448a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2200      	movs	r2, #0
 8004490:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004492:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004496:	4618      	mov	r0, r3
 8004498:	3730      	adds	r7, #48	; 0x30
 800449a:	46bd      	mov	sp, r7
 800449c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080044a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01a      	beq.n	80045b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800459e:	d10a      	bne.n	80045b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	605a      	str	r2, [r3, #4]
  }
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045f4:	f7fc fb12 	bl	8000c1c <HAL_GetTick>
 80045f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b08      	cmp	r3, #8
 8004606:	d10e      	bne.n	8004626 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f82f 	bl	800467a <UART_WaitOnFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e025      	b.n	8004672 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b04      	cmp	r3, #4
 8004632:	d10e      	bne.n	8004652 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004634:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f819 	bl	800467a <UART_WaitOnFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e00f      	b.n	8004672 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b09c      	sub	sp, #112	; 0x70
 800467e:	af00      	add	r7, sp, #0
 8004680:	60f8      	str	r0, [r7, #12]
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	603b      	str	r3, [r7, #0]
 8004686:	4613      	mov	r3, r2
 8004688:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800468a:	e0a9      	b.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800468c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004692:	f000 80a5 	beq.w	80047e0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004696:	f7fc fac1 	bl	8000c1c <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d302      	bcc.n	80046ac <UART_WaitOnFlagUntilTimeout+0x32>
 80046a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d140      	bne.n	800472e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046c0:	667b      	str	r3, [r7, #100]	; 0x64
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e6      	bne.n	80046ac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3308      	adds	r3, #8
 80046e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f0:	f023 0301 	bic.w	r3, r3, #1
 80046f4:	663b      	str	r3, [r7, #96]	; 0x60
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3308      	adds	r3, #8
 80046fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004700:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004704:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800470c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e5      	bne.n	80046de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e069      	b.n	8004802 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	d051      	beq.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800474a:	d149      	bne.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004754:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	e853 3f00 	ldrex	r3, [r3]
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800476a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004774:	637b      	str	r3, [r7, #52]	; 0x34
 8004776:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004778:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800477a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800477c:	e841 2300 	strex	r3, r2, [r1]
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e6      	bne.n	8004756 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3308      	adds	r3, #8
 800478e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	613b      	str	r3, [r7, #16]
   return(result);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f023 0301 	bic.w	r3, r3, #1
 800479e:	66bb      	str	r3, [r7, #104]	; 0x68
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3308      	adds	r3, #8
 80047a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047a8:	623a      	str	r2, [r7, #32]
 80047aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	69f9      	ldr	r1, [r7, #28]
 80047ae:	6a3a      	ldr	r2, [r7, #32]
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e5      	bne.n	8004788 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e010      	b.n	8004802 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69da      	ldr	r2, [r3, #28]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	4013      	ands	r3, r2
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	bf0c      	ite	eq
 80047f0:	2301      	moveq	r3, #1
 80047f2:	2300      	movne	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	461a      	mov	r2, r3
 80047f8:	79fb      	ldrb	r3, [r7, #7]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	f43f af46 	beq.w	800468c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3770      	adds	r7, #112	; 0x70
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800480a:	b480      	push	{r7}
 800480c:	b085      	sub	sp, #20
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_UARTEx_DisableFifoMode+0x16>
 800481c:	2302      	movs	r3, #2
 800481e:	e027      	b.n	8004870 <HAL_UARTEx_DisableFifoMode+0x66>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2224      	movs	r2, #36	; 0x24
 800482c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800484e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004890:	2302      	movs	r3, #2
 8004892:	e02d      	b.n	80048f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2224      	movs	r2, #36	; 0x24
 80048a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0201 	bic.w	r2, r2, #1
 80048ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f84f 	bl	8004974 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800490c:	2302      	movs	r3, #2
 800490e:	e02d      	b.n	800496c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2224      	movs	r2, #36	; 0x24
 800491c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0201 	bic.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f811 	bl	8004974 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004980:	2b00      	cmp	r3, #0
 8004982:	d108      	bne.n	8004996 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004994:	e031      	b.n	80049fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004996:	2308      	movs	r3, #8
 8004998:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800499a:	2308      	movs	r3, #8
 800499c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	0e5b      	lsrs	r3, r3, #25
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	0f5b      	lsrs	r3, r3, #29
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049be:	7bbb      	ldrb	r3, [r7, #14]
 80049c0:	7b3a      	ldrb	r2, [r7, #12]
 80049c2:	4911      	ldr	r1, [pc, #68]	; (8004a08 <UARTEx_SetNbDataToProcess+0x94>)
 80049c4:	5c8a      	ldrb	r2, [r1, r2]
 80049c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80049ca:	7b3a      	ldrb	r2, [r7, #12]
 80049cc:	490f      	ldr	r1, [pc, #60]	; (8004a0c <UARTEx_SetNbDataToProcess+0x98>)
 80049ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	7b7a      	ldrb	r2, [r7, #13]
 80049e0:	4909      	ldr	r1, [pc, #36]	; (8004a08 <UARTEx_SetNbDataToProcess+0x94>)
 80049e2:	5c8a      	ldrb	r2, [r1, r2]
 80049e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80049e8:	7b7a      	ldrb	r2, [r7, #13]
 80049ea:	4908      	ldr	r1, [pc, #32]	; (8004a0c <UARTEx_SetNbDataToProcess+0x98>)
 80049ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	08004ab0 	.word	0x08004ab0
 8004a0c:	08004ab8 	.word	0x08004ab8

08004a10 <memset>:
 8004a10:	4402      	add	r2, r0
 8004a12:	4603      	mov	r3, r0
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d100      	bne.n	8004a1a <memset+0xa>
 8004a18:	4770      	bx	lr
 8004a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a1e:	e7f9      	b.n	8004a14 <memset+0x4>

08004a20 <__libc_init_array>:
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	4d0d      	ldr	r5, [pc, #52]	; (8004a58 <__libc_init_array+0x38>)
 8004a24:	4c0d      	ldr	r4, [pc, #52]	; (8004a5c <__libc_init_array+0x3c>)
 8004a26:	1b64      	subs	r4, r4, r5
 8004a28:	10a4      	asrs	r4, r4, #2
 8004a2a:	2600      	movs	r6, #0
 8004a2c:	42a6      	cmp	r6, r4
 8004a2e:	d109      	bne.n	8004a44 <__libc_init_array+0x24>
 8004a30:	4d0b      	ldr	r5, [pc, #44]	; (8004a60 <__libc_init_array+0x40>)
 8004a32:	4c0c      	ldr	r4, [pc, #48]	; (8004a64 <__libc_init_array+0x44>)
 8004a34:	f000 f818 	bl	8004a68 <_init>
 8004a38:	1b64      	subs	r4, r4, r5
 8004a3a:	10a4      	asrs	r4, r4, #2
 8004a3c:	2600      	movs	r6, #0
 8004a3e:	42a6      	cmp	r6, r4
 8004a40:	d105      	bne.n	8004a4e <__libc_init_array+0x2e>
 8004a42:	bd70      	pop	{r4, r5, r6, pc}
 8004a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a48:	4798      	blx	r3
 8004a4a:	3601      	adds	r6, #1
 8004a4c:	e7ee      	b.n	8004a2c <__libc_init_array+0xc>
 8004a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a52:	4798      	blx	r3
 8004a54:	3601      	adds	r6, #1
 8004a56:	e7f2      	b.n	8004a3e <__libc_init_array+0x1e>
 8004a58:	08004ac8 	.word	0x08004ac8
 8004a5c:	08004ac8 	.word	0x08004ac8
 8004a60:	08004ac8 	.word	0x08004ac8
 8004a64:	08004acc 	.word	0x08004acc

08004a68 <_init>:
 8004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6a:	bf00      	nop
 8004a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6e:	bc08      	pop	{r3}
 8004a70:	469e      	mov	lr, r3
 8004a72:	4770      	bx	lr

08004a74 <_fini>:
 8004a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a76:	bf00      	nop
 8004a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7a:	bc08      	pop	{r3}
 8004a7c:	469e      	mov	lr, r3
 8004a7e:	4770      	bx	lr
