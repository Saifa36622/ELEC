
week2_interupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031b8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d4  080033d4  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  080033d4  080033d4  000133d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033dc  080033dc  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033dc  080033dc  000133dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033e0  080033e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  080033e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  200000cc  080034b0  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  080034b0  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c19b  00000000  00000000  0002013f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bed  00000000  00000000  0002c2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  0002dec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000735  00000000  00000000  0002e830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b60  00000000  00000000  0002ef65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d097  00000000  00000000  00053ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e91cc  00000000  00000000  00060b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002988  00000000  00000000  00149d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0014c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000cc 	.word	0x200000cc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003378 	.word	0x08003378

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000d0 	.word	0x200000d0
 8000214:	08003378 	.word	0x08003378

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <strlen>:
 800022c:	4603      	mov	r3, r0
 800022e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000232:	2a00      	cmp	r2, #0
 8000234:	d1fb      	bne.n	800022e <strlen+0x2>
 8000236:	1a18      	subs	r0, r3, r0
 8000238:	3801      	subs	r0, #1
 800023a:	4770      	bx	lr

0800023c <__aeabi_uldivmod>:
 800023c:	b953      	cbnz	r3, 8000254 <__aeabi_uldivmod+0x18>
 800023e:	b94a      	cbnz	r2, 8000254 <__aeabi_uldivmod+0x18>
 8000240:	2900      	cmp	r1, #0
 8000242:	bf08      	it	eq
 8000244:	2800      	cmpeq	r0, #0
 8000246:	bf1c      	itt	ne
 8000248:	f04f 31ff 	movne.w	r1, #4294967295
 800024c:	f04f 30ff 	movne.w	r0, #4294967295
 8000250:	f000 b970 	b.w	8000534 <__aeabi_idiv0>
 8000254:	f1ad 0c08 	sub.w	ip, sp, #8
 8000258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800025c:	f000 f806 	bl	800026c <__udivmoddi4>
 8000260:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000268:	b004      	add	sp, #16
 800026a:	4770      	bx	lr

0800026c <__udivmoddi4>:
 800026c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000270:	9e08      	ldr	r6, [sp, #32]
 8000272:	460d      	mov	r5, r1
 8000274:	4604      	mov	r4, r0
 8000276:	460f      	mov	r7, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14a      	bne.n	8000312 <__udivmoddi4+0xa6>
 800027c:	428a      	cmp	r2, r1
 800027e:	4694      	mov	ip, r2
 8000280:	d965      	bls.n	800034e <__udivmoddi4+0xe2>
 8000282:	fab2 f382 	clz	r3, r2
 8000286:	b143      	cbz	r3, 800029a <__udivmoddi4+0x2e>
 8000288:	fa02 fc03 	lsl.w	ip, r2, r3
 800028c:	f1c3 0220 	rsb	r2, r3, #32
 8000290:	409f      	lsls	r7, r3
 8000292:	fa20 f202 	lsr.w	r2, r0, r2
 8000296:	4317      	orrs	r7, r2
 8000298:	409c      	lsls	r4, r3
 800029a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029e:	fa1f f58c 	uxth.w	r5, ip
 80002a2:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a6:	0c22      	lsrs	r2, r4, #16
 80002a8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002ac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b0:	fb01 f005 	mul.w	r0, r1, r5
 80002b4:	4290      	cmp	r0, r2
 80002b6:	d90a      	bls.n	80002ce <__udivmoddi4+0x62>
 80002b8:	eb1c 0202 	adds.w	r2, ip, r2
 80002bc:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c0:	f080 811c 	bcs.w	80004fc <__udivmoddi4+0x290>
 80002c4:	4290      	cmp	r0, r2
 80002c6:	f240 8119 	bls.w	80004fc <__udivmoddi4+0x290>
 80002ca:	3902      	subs	r1, #2
 80002cc:	4462      	add	r2, ip
 80002ce:	1a12      	subs	r2, r2, r0
 80002d0:	b2a4      	uxth	r4, r4
 80002d2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002de:	fb00 f505 	mul.w	r5, r0, r5
 80002e2:	42a5      	cmp	r5, r4
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x90>
 80002e6:	eb1c 0404 	adds.w	r4, ip, r4
 80002ea:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x294>
 80002f2:	42a5      	cmp	r5, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x294>
 80002f8:	4464      	add	r4, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000300:	1b64      	subs	r4, r4, r5
 8000302:	2100      	movs	r1, #0
 8000304:	b11e      	cbz	r6, 800030e <__udivmoddi4+0xa2>
 8000306:	40dc      	lsrs	r4, r3
 8000308:	2300      	movs	r3, #0
 800030a:	e9c6 4300 	strd	r4, r3, [r6]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0xbc>
 8000316:	2e00      	cmp	r6, #0
 8000318:	f000 80ed 	beq.w	80004f6 <__udivmoddi4+0x28a>
 800031c:	2100      	movs	r1, #0
 800031e:	e9c6 0500 	strd	r0, r5, [r6]
 8000322:	4608      	mov	r0, r1
 8000324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000328:	fab3 f183 	clz	r1, r3
 800032c:	2900      	cmp	r1, #0
 800032e:	d149      	bne.n	80003c4 <__udivmoddi4+0x158>
 8000330:	42ab      	cmp	r3, r5
 8000332:	d302      	bcc.n	800033a <__udivmoddi4+0xce>
 8000334:	4282      	cmp	r2, r0
 8000336:	f200 80f8 	bhi.w	800052a <__udivmoddi4+0x2be>
 800033a:	1a84      	subs	r4, r0, r2
 800033c:	eb65 0203 	sbc.w	r2, r5, r3
 8000340:	2001      	movs	r0, #1
 8000342:	4617      	mov	r7, r2
 8000344:	2e00      	cmp	r6, #0
 8000346:	d0e2      	beq.n	800030e <__udivmoddi4+0xa2>
 8000348:	e9c6 4700 	strd	r4, r7, [r6]
 800034c:	e7df      	b.n	800030e <__udivmoddi4+0xa2>
 800034e:	b902      	cbnz	r2, 8000352 <__udivmoddi4+0xe6>
 8000350:	deff      	udf	#255	; 0xff
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	2b00      	cmp	r3, #0
 8000358:	f040 8090 	bne.w	800047c <__udivmoddi4+0x210>
 800035c:	1a8a      	subs	r2, r1, r2
 800035e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000362:	fa1f fe8c 	uxth.w	lr, ip
 8000366:	2101      	movs	r1, #1
 8000368:	fbb2 f5f7 	udiv	r5, r2, r7
 800036c:	fb07 2015 	mls	r0, r7, r5, r2
 8000370:	0c22      	lsrs	r2, r4, #16
 8000372:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000376:	fb0e f005 	mul.w	r0, lr, r5
 800037a:	4290      	cmp	r0, r2
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x124>
 800037e:	eb1c 0202 	adds.w	r2, ip, r2
 8000382:	f105 38ff 	add.w	r8, r5, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x122>
 8000388:	4290      	cmp	r0, r2
 800038a:	f200 80cb 	bhi.w	8000524 <__udivmoddi4+0x2b8>
 800038e:	4645      	mov	r5, r8
 8000390:	1a12      	subs	r2, r2, r0
 8000392:	b2a4      	uxth	r4, r4
 8000394:	fbb2 f0f7 	udiv	r0, r2, r7
 8000398:	fb07 2210 	mls	r2, r7, r0, r2
 800039c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a0:	fb0e fe00 	mul.w	lr, lr, r0
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	d908      	bls.n	80003ba <__udivmoddi4+0x14e>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b0:	d202      	bcs.n	80003b8 <__udivmoddi4+0x14c>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f200 80bb 	bhi.w	800052e <__udivmoddi4+0x2c2>
 80003b8:	4610      	mov	r0, r2
 80003ba:	eba4 040e 	sub.w	r4, r4, lr
 80003be:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c2:	e79f      	b.n	8000304 <__udivmoddi4+0x98>
 80003c4:	f1c1 0720 	rsb	r7, r1, #32
 80003c8:	408b      	lsls	r3, r1
 80003ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa05 f401 	lsl.w	r4, r5, r1
 80003d6:	fa20 f307 	lsr.w	r3, r0, r7
 80003da:	40fd      	lsrs	r5, r7
 80003dc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	fb09 5518 	mls	r5, r9, r8, r5
 80003ee:	0c1c      	lsrs	r4, r3, #16
 80003f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f4:	fb08 f50e 	mul.w	r5, r8, lr
 80003f8:	42a5      	cmp	r5, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	fa00 f001 	lsl.w	r0, r0, r1
 8000402:	d90b      	bls.n	800041c <__udivmoddi4+0x1b0>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f108 3aff 	add.w	sl, r8, #4294967295
 800040c:	f080 8088 	bcs.w	8000520 <__udivmoddi4+0x2b4>
 8000410:	42a5      	cmp	r5, r4
 8000412:	f240 8085 	bls.w	8000520 <__udivmoddi4+0x2b4>
 8000416:	f1a8 0802 	sub.w	r8, r8, #2
 800041a:	4464      	add	r4, ip
 800041c:	1b64      	subs	r4, r4, r5
 800041e:	b29d      	uxth	r5, r3
 8000420:	fbb4 f3f9 	udiv	r3, r4, r9
 8000424:	fb09 4413 	mls	r4, r9, r3, r4
 8000428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800042c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x1da>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f103 35ff 	add.w	r5, r3, #4294967295
 800043c:	d26c      	bcs.n	8000518 <__udivmoddi4+0x2ac>
 800043e:	45a6      	cmp	lr, r4
 8000440:	d96a      	bls.n	8000518 <__udivmoddi4+0x2ac>
 8000442:	3b02      	subs	r3, #2
 8000444:	4464      	add	r4, ip
 8000446:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044a:	fba3 9502 	umull	r9, r5, r3, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	42ac      	cmp	r4, r5
 8000454:	46c8      	mov	r8, r9
 8000456:	46ae      	mov	lr, r5
 8000458:	d356      	bcc.n	8000508 <__udivmoddi4+0x29c>
 800045a:	d053      	beq.n	8000504 <__udivmoddi4+0x298>
 800045c:	b156      	cbz	r6, 8000474 <__udivmoddi4+0x208>
 800045e:	ebb0 0208 	subs.w	r2, r0, r8
 8000462:	eb64 040e 	sbc.w	r4, r4, lr
 8000466:	fa04 f707 	lsl.w	r7, r4, r7
 800046a:	40ca      	lsrs	r2, r1
 800046c:	40cc      	lsrs	r4, r1
 800046e:	4317      	orrs	r7, r2
 8000470:	e9c6 7400 	strd	r7, r4, [r6]
 8000474:	4618      	mov	r0, r3
 8000476:	2100      	movs	r1, #0
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	f1c3 0120 	rsb	r1, r3, #32
 8000480:	fa02 fc03 	lsl.w	ip, r2, r3
 8000484:	fa20 f201 	lsr.w	r2, r0, r1
 8000488:	fa25 f101 	lsr.w	r1, r5, r1
 800048c:	409d      	lsls	r5, r3
 800048e:	432a      	orrs	r2, r5
 8000490:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000494:	fa1f fe8c 	uxth.w	lr, ip
 8000498:	fbb1 f0f7 	udiv	r0, r1, r7
 800049c:	fb07 1510 	mls	r5, r7, r0, r1
 80004a0:	0c11      	lsrs	r1, r2, #16
 80004a2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a6:	fb00 f50e 	mul.w	r5, r0, lr
 80004aa:	428d      	cmp	r5, r1
 80004ac:	fa04 f403 	lsl.w	r4, r4, r3
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x258>
 80004b2:	eb1c 0101 	adds.w	r1, ip, r1
 80004b6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ba:	d22f      	bcs.n	800051c <__udivmoddi4+0x2b0>
 80004bc:	428d      	cmp	r5, r1
 80004be:	d92d      	bls.n	800051c <__udivmoddi4+0x2b0>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	1b49      	subs	r1, r1, r5
 80004c6:	b292      	uxth	r2, r2
 80004c8:	fbb1 f5f7 	udiv	r5, r1, r7
 80004cc:	fb07 1115 	mls	r1, r7, r5, r1
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	fb05 f10e 	mul.w	r1, r5, lr
 80004d8:	4291      	cmp	r1, r2
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x282>
 80004dc:	eb1c 0202 	adds.w	r2, ip, r2
 80004e0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e4:	d216      	bcs.n	8000514 <__udivmoddi4+0x2a8>
 80004e6:	4291      	cmp	r1, r2
 80004e8:	d914      	bls.n	8000514 <__udivmoddi4+0x2a8>
 80004ea:	3d02      	subs	r5, #2
 80004ec:	4462      	add	r2, ip
 80004ee:	1a52      	subs	r2, r2, r1
 80004f0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f4:	e738      	b.n	8000368 <__udivmoddi4+0xfc>
 80004f6:	4631      	mov	r1, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xa2>
 80004fc:	4639      	mov	r1, r7
 80004fe:	e6e6      	b.n	80002ce <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x90>
 8000504:	4548      	cmp	r0, r9
 8000506:	d2a9      	bcs.n	800045c <__udivmoddi4+0x1f0>
 8000508:	ebb9 0802 	subs.w	r8, r9, r2
 800050c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000510:	3b01      	subs	r3, #1
 8000512:	e7a3      	b.n	800045c <__udivmoddi4+0x1f0>
 8000514:	4645      	mov	r5, r8
 8000516:	e7ea      	b.n	80004ee <__udivmoddi4+0x282>
 8000518:	462b      	mov	r3, r5
 800051a:	e794      	b.n	8000446 <__udivmoddi4+0x1da>
 800051c:	4640      	mov	r0, r8
 800051e:	e7d1      	b.n	80004c4 <__udivmoddi4+0x258>
 8000520:	46d0      	mov	r8, sl
 8000522:	e77b      	b.n	800041c <__udivmoddi4+0x1b0>
 8000524:	3d02      	subs	r5, #2
 8000526:	4462      	add	r2, ip
 8000528:	e732      	b.n	8000390 <__udivmoddi4+0x124>
 800052a:	4608      	mov	r0, r1
 800052c:	e70a      	b.n	8000344 <__udivmoddi4+0xd8>
 800052e:	4464      	add	r4, ip
 8000530:	3802      	subs	r0, #2
 8000532:	e742      	b.n	80003ba <__udivmoddi4+0x14e>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fbe2 	bl	8000d06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f8d1 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f965 	bl	8000814 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800054a:	f000 f919 	bl	8000780 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  before = ButtonState;
 800054e:	4b5d      	ldr	r3, [pc, #372]	; (80006c4 <main+0x18c>)
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	b21a      	sxth	r2, r3
 8000554:	4b5c      	ldr	r3, [pc, #368]	; (80006c8 <main+0x190>)
 8000556:	801a      	strh	r2, [r3, #0]
	  static uint32_t BTMX_TimeStamp = 0;
	  if(HAL_GetTick() > BTMX_TimeStamp)
 8000558:	f000 fc3a 	bl	8000dd0 <HAL_GetTick>
 800055c:	4602      	mov	r2, r0
 800055e:	4b5b      	ldr	r3, [pc, #364]	; (80006cc <main+0x194>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	429a      	cmp	r2, r3
 8000564:	d907      	bls.n	8000576 <main+0x3e>
	  {
	  BTMX_TimeStamp = HAL_GetTick() + 25; //next scan in 25 ms
 8000566:	f000 fc33 	bl	8000dd0 <HAL_GetTick>
 800056a:	4603      	mov	r3, r0
 800056c:	3319      	adds	r3, #25
 800056e:	4a57      	ldr	r2, [pc, #348]	; (80006cc <main+0x194>)
 8000570:	6013      	str	r3, [r2, #0]
	  ButtonMatrixRead();
 8000572:	f000 fa2b 	bl	80009cc <ButtonMatrixRead>
	  }
	  if (ButtonState == 2048)
 8000576:	4b53      	ldr	r3, [pc, #332]	; (80006c4 <main+0x18c>)
 8000578:	881b      	ldrh	r3, [r3, #0]
 800057a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800057e:	d131      	bne.n	80005e4 <main+0xac>
	  {
		  	if(ans != NULL && strcmp(ans, "65") == 0)
 8000580:	4b53      	ldr	r3, [pc, #332]	; (80006d0 <main+0x198>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00d      	beq.n	80005a4 <main+0x6c>
 8000588:	4b51      	ldr	r3, [pc, #324]	; (80006d0 <main+0x198>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4951      	ldr	r1, [pc, #324]	; (80006d4 <main+0x19c>)
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff fe42 	bl	8000218 <strcmp>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d104      	bne.n	80005a4 <main+0x6c>
		  	{
		  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800059a:	2120      	movs	r1, #32
 800059c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a0:	f000 fee4 	bl	800136c <HAL_GPIO_TogglePin>

		  }
		  free(ans);
 80005a4:	4b4a      	ldr	r3, [pc, #296]	; (80006d0 <main+0x198>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 fd53 	bl	8003054 <free>
		  *ans = '\0';
 80005ae:	4b48      	ldr	r3, [pc, #288]	; (80006d0 <main+0x198>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
		  x = 0;
 80005b6:	4b48      	ldr	r3, [pc, #288]	; (80006d8 <main+0x1a0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	801a      	strh	r2, [r3, #0]
		  while (ButtonState == 0 || ButtonState == 2048)
 80005bc:	e008      	b.n	80005d0 <main+0x98>
		  {
			  BTMX_TimeStamp = HAL_GetTick() + 25; //next scan in 25 ms
 80005be:	f000 fc07 	bl	8000dd0 <HAL_GetTick>
 80005c2:	4603      	mov	r3, r0
 80005c4:	3319      	adds	r3, #25
 80005c6:	4a41      	ldr	r2, [pc, #260]	; (80006cc <main+0x194>)
 80005c8:	6013      	str	r3, [r2, #0]
			  ButtonMatrixRead();
 80005ca:	f000 f9ff 	bl	80009cc <ButtonMatrixRead>
			  continue;
 80005ce:	bf00      	nop
		  while (ButtonState == 0 || ButtonState == 2048)
 80005d0:	4b3c      	ldr	r3, [pc, #240]	; (80006c4 <main+0x18c>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d0f2      	beq.n	80005be <main+0x86>
 80005d8:	4b3a      	ldr	r3, [pc, #232]	; (80006c4 <main+0x18c>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005e0:	d0ed      	beq.n	80005be <main+0x86>
 80005e2:	e7b4      	b.n	800054e <main+0x16>
		  }

	  }
	  else {
		  for (int i = 0;i <= 10;i++)
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	e017      	b.n	800061a <main+0xe2>
		  	  {
		  		  if (ButtonState == 0)
 80005ea:	4b36      	ldr	r3, [pc, #216]	; (80006c4 <main+0x18c>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d00f      	beq.n	8000612 <main+0xda>
		  		  {
		  			  continue;
		  		  }
		  		  if (ButtonState == array_map[i])
 80005f2:	4b34      	ldr	r3, [pc, #208]	; (80006c4 <main+0x18c>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	4619      	mov	r1, r3
 80005f8:	4a38      	ldr	r2, [pc, #224]	; (80006dc <main+0x1a4>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000600:	4299      	cmp	r1, r3
 8000602:	d107      	bne.n	8000614 <main+0xdc>
		  		  {

		  			  x = real_in[i];
 8000604:	4a36      	ldr	r2, [pc, #216]	; (80006e0 <main+0x1a8>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800060c:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <main+0x1a0>)
 800060e:	801a      	strh	r2, [r3, #0]
 8000610:	e000      	b.n	8000614 <main+0xdc>
		  			  continue;
 8000612:	bf00      	nop
		  for (int i = 0;i <= 10;i++)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3301      	adds	r3, #1
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b0a      	cmp	r3, #10
 800061e:	dde4      	ble.n	80005ea <main+0xb2>

		  		  }

		  	  }
		  	  if (before != 0 && ButtonState == 0 )
 8000620:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <main+0x190>)
 8000622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d091      	beq.n	800054e <main+0x16>
 800062a:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <main+0x18c>)
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d18d      	bne.n	800054e <main+0x16>
		  	  {
		  		  if (ans == NULL)
 8000632:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <main+0x198>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d115      	bne.n	8000666 <main+0x12e>
		  		    {
		  		        ans = (char*)malloc(2);
 800063a:	2002      	movs	r0, #2
 800063c:	f002 fd02 	bl	8003044 <malloc>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <main+0x198>)
 8000646:	601a      	str	r2, [r3, #0]
		  		        ans[0] = x + '0';
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <main+0x1a0>)
 800064a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <main+0x198>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3230      	adds	r2, #48	; 0x30
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	701a      	strb	r2, [r3, #0]
		  		        ans[1] = '\0';
 800065a:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <main+0x198>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
 8000664:	e023      	b.n	80006ae <main+0x176>
		  		    }
		  		    else
		  		    {
		  		        int currentSize = strlen(ans);
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <main+0x198>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fdde 	bl	800022c <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	603b      	str	r3, [r7, #0]
		  		        ans = (char*)realloc(ans, currentSize + 2);
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <main+0x198>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	3302      	adds	r3, #2
 800067c:	4619      	mov	r1, r3
 800067e:	4610      	mov	r0, r2
 8000680:	f002 fd9c 	bl	80031bc <realloc>
 8000684:	4603      	mov	r3, r0
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <main+0x198>)
 8000688:	6013      	str	r3, [r2, #0]
		  		        ans[currentSize] = x + '0';
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <main+0x1a0>)
 800068c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <main+0x198>)
 8000694:	6819      	ldr	r1, [r3, #0]
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	440b      	add	r3, r1
 800069a:	3230      	adds	r2, #48	; 0x30
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	701a      	strb	r2, [r3, #0]
		  		        ans[currentSize + 1] = '\0';
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <main+0x198>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	3301      	adds	r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
		  		    }
		  		    count++;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <main+0x1ac>)
 80006b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	3301      	adds	r3, #1
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	b21a      	sxth	r2, r3
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <main+0x1ac>)
 80006be:	801a      	strh	r2, [r3, #0]
  {
 80006c0:	e745      	b.n	800054e <main+0x16>
 80006c2:	bf00      	nop
 80006c4:	20000178 	.word	0x20000178
 80006c8:	2000017e 	.word	0x2000017e
 80006cc:	20000184 	.word	0x20000184
 80006d0:	20000180 	.word	0x20000180
 80006d4:	08003390 	.word	0x08003390
 80006d8:	2000017a 	.word	0x2000017a
 80006dc:	20000040 	.word	0x20000040
 80006e0:	20000058 	.word	0x20000058
 80006e4:	2000017c 	.word	0x2000017c

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0318 	add.w	r3, r7, #24
 80006f2:	2238      	movs	r2, #56	; 0x38
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 fd97 	bl	800322a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800070a:	2000      	movs	r0, #0
 800070c:	f000 fe60 	bl	80013d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071a:	2340      	movs	r3, #64	; 0x40
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000722:	2302      	movs	r3, #2
 8000724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000726:	2304      	movs	r3, #4
 8000728:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800072a:	2355      	movs	r3, #85	; 0x55
 800072c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000736:	2302      	movs	r3, #2
 8000738:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 0318 	add.w	r3, r7, #24
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fefa 	bl	8001538 <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800074a:	f000 f9b7 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074e:	230f      	movs	r3, #15
 8000750:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	2303      	movs	r3, #3
 8000754:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2104      	movs	r1, #4
 8000766:	4618      	mov	r0, r3
 8000768:	f001 f9fe 	bl	8001b68 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000772:	f000 f9a3 	bl	8000abc <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_LPUART1_UART_Init+0x8c>)
 8000786:	4a22      	ldr	r2, [pc, #136]	; (8000810 <MX_LPUART1_UART_Init+0x90>)
 8000788:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_LPUART1_UART_Init+0x8c>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_LPUART1_UART_Init+0x8c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_LPUART1_UART_Init+0x8c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_LPUART1_UART_Init+0x8c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_LPUART1_UART_Init+0x8c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_LPUART1_UART_Init+0x8c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_LPUART1_UART_Init+0x8c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_LPUART1_UART_Init+0x8c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_LPUART1_UART_Init+0x8c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007c2:	4812      	ldr	r0, [pc, #72]	; (800080c <MX_LPUART1_UART_Init+0x8c>)
 80007c4:	f001 fe3a 	bl	800243c <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007ce:	f000 f975 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d2:	2100      	movs	r1, #0
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <MX_LPUART1_UART_Init+0x8c>)
 80007d6:	f002 fb6b 	bl	8002eb0 <HAL_UARTEx_SetTxFifoThreshold>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007e0:	f000 f96c 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e4:	2100      	movs	r1, #0
 80007e6:	4809      	ldr	r0, [pc, #36]	; (800080c <MX_LPUART1_UART_Init+0x8c>)
 80007e8:	f002 fba0 	bl	8002f2c <HAL_UARTEx_SetRxFifoThreshold>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007f2:	f000 f963 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_LPUART1_UART_Init+0x8c>)
 80007f8:	f002 fb21 	bl	8002e3e <HAL_UARTEx_DisableFifoMode>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000802:	f000 f95b 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000e8 	.word	0x200000e8
 8000810:	40008000 	.word	0x40008000

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b58      	ldr	r3, [pc, #352]	; (800098c <MX_GPIO_Init+0x178>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a57      	ldr	r2, [pc, #348]	; (800098c <MX_GPIO_Init+0x178>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b55      	ldr	r3, [pc, #340]	; (800098c <MX_GPIO_Init+0x178>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000842:	4b52      	ldr	r3, [pc, #328]	; (800098c <MX_GPIO_Init+0x178>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a51      	ldr	r2, [pc, #324]	; (800098c <MX_GPIO_Init+0x178>)
 8000848:	f043 0320 	orr.w	r3, r3, #32
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b4f      	ldr	r3, [pc, #316]	; (800098c <MX_GPIO_Init+0x178>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0320 	and.w	r3, r3, #32
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b4c      	ldr	r3, [pc, #304]	; (800098c <MX_GPIO_Init+0x178>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a4b      	ldr	r2, [pc, #300]	; (800098c <MX_GPIO_Init+0x178>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b49      	ldr	r3, [pc, #292]	; (800098c <MX_GPIO_Init+0x178>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b46      	ldr	r3, [pc, #280]	; (800098c <MX_GPIO_Init+0x178>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a45      	ldr	r2, [pc, #276]	; (800098c <MX_GPIO_Init+0x178>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b43      	ldr	r3, [pc, #268]	; (800098c <MX_GPIO_Init+0x178>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2120      	movs	r1, #32
 800088e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000892:	f000 fd53 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800089c:	483c      	ldr	r0, [pc, #240]	; (8000990 <MX_GPIO_Init+0x17c>)
 800089e:	f000 fd4d 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80008a2:	2201      	movs	r2, #1
 80008a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ac:	f000 fd46 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4833      	ldr	r0, [pc, #204]	; (8000994 <MX_GPIO_Init+0x180>)
 80008c8:	f000 fb9e 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008cc:	2320      	movs	r3, #32
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f000 fb8f 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80008ea:	f44f 7320 	mov.w	r3, #640	; 0x280
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000902:	f000 fb81 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000906:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800090c:	2311      	movs	r3, #17
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	481c      	ldr	r0, [pc, #112]	; (8000990 <MX_GPIO_Init+0x17c>)
 8000920:	f000 fb72 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092c:	2301      	movs	r3, #1
 800092e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4817      	ldr	r0, [pc, #92]	; (8000994 <MX_GPIO_Init+0x180>)
 8000938:	f000 fb66 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800093c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000942:	2311      	movs	r3, #17
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000958:	f000 fb56 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800095c:	2340      	movs	r3, #64	; 0x40
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000964:	2301      	movs	r3, #1
 8000966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	4808      	ldr	r0, [pc, #32]	; (8000990 <MX_GPIO_Init+0x17c>)
 8000970:	f000 fb4a 	bl	8001008 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2028      	movs	r0, #40	; 0x28
 800097a:	f000 fb10 	bl	8000f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800097e:	2028      	movs	r0, #40	; 0x28
 8000980:	f000 fb27 	bl	8000fd2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	; 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40021000 	.word	0x40021000
 8000990:	48000400 	.word	0x48000400
 8000994:	48000800 	.word	0x48000800

08000998 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	80fb      	strh	r3, [r7, #6]
//	if(GPIO_Pin == GPIO_PIN_13 && ans != NULL && strcmp(ans, "65") == 0)
//	{
//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//
//}
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2120      	movs	r1, #32
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009aa:	f000 fcc7 	bl	800133c <HAL_GPIO_WritePin>
free(ans);
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_GPIO_EXTI_Callback+0x30>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fb4e 	bl	8003054 <free>
*ans = '\0';
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <HAL_GPIO_EXTI_Callback+0x30>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
//while (ButtonState == 0)
//		  {
//			  continue;
//		  }
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000180 	.word	0x20000180

080009cc <ButtonMatrixRead>:
void ButtonMatrixRead(){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
static uint8_t X=0;
for(int i=0; i<4; i++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	e037      	b.n	8000a48 <ButtonMatrixRead+0x7c>
{
if(HAL_GPIO_ReadPin(BMX_L[i].Port, BMX_L[i].Pin) == GPIO_PIN_RESET)
 80009d8:	4a34      	ldr	r2, [pc, #208]	; (8000aac <ButtonMatrixRead+0xe0>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80009e0:	4932      	ldr	r1, [pc, #200]	; (8000aac <ButtonMatrixRead+0xe0>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	440b      	add	r3, r1
 80009e8:	889b      	ldrh	r3, [r3, #4]
 80009ea:	4619      	mov	r1, r3
 80009ec:	4610      	mov	r0, r2
 80009ee:	f000 fc8d 	bl	800130c <HAL_GPIO_ReadPin>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d111      	bne.n	8000a1c <ButtonMatrixRead+0x50>
{ //ปุ่มถู�?�?ด
ButtonState |= 1 << (i + (X * 4));
 80009f8:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <ButtonMatrixRead+0xe4>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	009a      	lsls	r2, r3, #2
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	2201      	movs	r2, #1
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	b21a      	sxth	r2, r3
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <ButtonMatrixRead+0xe8>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	4313      	orrs	r3, r2
 8000a12:	b21b      	sxth	r3, r3
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <ButtonMatrixRead+0xe8>)
 8000a18:	801a      	strh	r2, [r3, #0]
 8000a1a:	e012      	b.n	8000a42 <ButtonMatrixRead+0x76>
}
else
{
ButtonState &= ~(1 << (i + (X * 4)));
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <ButtonMatrixRead+0xe4>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	009a      	lsls	r2, r3, #2
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	2201      	movs	r2, #1
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	b21a      	sxth	r2, r3
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <ButtonMatrixRead+0xe8>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	4013      	ands	r3, r2
 8000a3a:	b21b      	sxth	r3, r3
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <ButtonMatrixRead+0xe8>)
 8000a40:	801a      	strh	r2, [r3, #0]
for(int i=0; i<4; i++)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3301      	adds	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b03      	cmp	r3, #3
 8000a4c:	ddc4      	ble.n	80009d8 <ButtonMatrixRead+0xc>
}
}
//set currentL to Hi-z (open drain)
HAL_GPIO_WritePin(BMX_R[X].Port, BMX_R[X].Pin, GPIO_PIN_SET);
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <ButtonMatrixRead+0xe4>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <ButtonMatrixRead+0xec>)
 8000a56:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <ButtonMatrixRead+0xe4>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	4a16      	ldr	r2, [pc, #88]	; (8000ab8 <ButtonMatrixRead+0xec>)
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	4413      	add	r3, r2
 8000a64:	889b      	ldrh	r3, [r3, #4]
 8000a66:	2201      	movs	r2, #1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f000 fc67 	bl	800133c <HAL_GPIO_WritePin>
//set nextL to low
uint8_t nextX = (X + 1) % 4;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <ButtonMatrixRead+0xe4>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	425a      	negs	r2, r3
 8000a76:	f003 0303 	and.w	r3, r3, #3
 8000a7a:	f002 0203 	and.w	r2, r2, #3
 8000a7e:	bf58      	it	pl
 8000a80:	4253      	negpl	r3, r2
 8000a82:	70fb      	strb	r3, [r7, #3]
HAL_GPIO_WritePin(BMX_R[nextX].Port, BMX_R[nextX].Pin, GPIO_PIN_RESET);
 8000a84:	78fb      	ldrb	r3, [r7, #3]
 8000a86:	4a0c      	ldr	r2, [pc, #48]	; (8000ab8 <ButtonMatrixRead+0xec>)
 8000a88:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <ButtonMatrixRead+0xec>)
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	4413      	add	r3, r2
 8000a94:	889b      	ldrh	r3, [r3, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f000 fc4f 	bl	800133c <HAL_GPIO_WritePin>
X = nextX;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <ButtonMatrixRead+0xe4>)
 8000aa0:	78fb      	ldrb	r3, [r7, #3]
 8000aa2:	7013      	strb	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000188 	.word	0x20000188
 8000ab4:	20000178 	.word	0x20000178
 8000ab8:	20000020 	.word	0x20000020

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x44>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x44>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x44>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6593      	str	r3, [r2, #88]	; 0x58
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x44>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000afe:	f000 fd0b 	bl	8001518 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b09e      	sub	sp, #120	; 0x78
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	2254      	movs	r2, #84	; 0x54
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f002 fb7a 	bl	800322a <memset>
  if(huart->Instance==LPUART1)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a1f      	ldr	r2, [pc, #124]	; (8000bb8 <HAL_UART_MspInit+0xa8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d136      	bne.n	8000bae <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b40:	2320      	movs	r3, #32
 8000b42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 fa27 	bl	8001fa0 <HAL_RCCEx_PeriphCLKConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b58:	f7ff ffb0 	bl	8000abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_UART_MspInit+0xac>)
 8000b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b60:	4a16      	ldr	r2, [pc, #88]	; (8000bbc <HAL_UART_MspInit+0xac>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_UART_MspInit+0xac>)
 8000b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_UART_MspInit+0xac>)
 8000b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b78:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <HAL_UART_MspInit+0xac>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_UART_MspInit+0xac>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b8c:	230c      	movs	r3, #12
 8000b8e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000baa:	f000 fa2d 	bl	8001008 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	3778      	adds	r7, #120	; 0x78
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40008000 	.word	0x40008000
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <UsageFault_Handler+0x4>

08000bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0c:	f000 f8ce 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c1c:	f000 fbc0 	bl	80013a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c2c:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <_sbrk+0x5c>)
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <_sbrk+0x60>)
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <_sbrk+0x64>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <_sbrk+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d207      	bcs.n	8000c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c54:	f002 fb02 	bl	800325c <__errno>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	e009      	b.n	8000c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <_sbrk+0x64>)
 8000c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20020000 	.word	0x20020000
 8000c84:	00000400 	.word	0x00000400
 8000c88:	2000018c 	.word	0x2000018c
 8000c8c:	200002e0 	.word	0x200002e0

08000c90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cba:	490e      	ldr	r1, [pc, #56]	; (8000cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <LoopForever+0xe>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd0:	4c0b      	ldr	r4, [pc, #44]	; (8000d00 <LoopForever+0x16>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cde:	f7ff ffd7 	bl	8000c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f002 fac1 	bl	8003268 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce6:	f7ff fc27 	bl	8000538 <main>

08000cea <LoopForever>:

LoopForever:
    b LoopForever
 8000cea:	e7fe      	b.n	8000cea <LoopForever>
  ldr   r0, =_estack
 8000cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8000cf8:	080033e4 	.word	0x080033e4
  ldr r2, =_sbss
 8000cfc:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8000d00:	200002dc 	.word	0x200002dc

08000d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC1_2_IRQHandler>

08000d06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f939 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 f80e 	bl	8000d38 <HAL_InitTick>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d002      	beq.n	8000d28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	71fb      	strb	r3, [r7, #7]
 8000d26:	e001      	b.n	8000d2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d28:	f7ff fece 	bl	8000ac8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d2c:	79fb      	ldrb	r3, [r7, #7]

}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_InitTick+0x68>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d022      	beq.n	8000d92 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_InitTick+0x6c>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <HAL_InitTick+0x68>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d58:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 f944 	bl	8000fee <HAL_SYSTICK_Config>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10f      	bne.n	8000d8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b0f      	cmp	r3, #15
 8000d70:	d809      	bhi.n	8000d86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d72:	2200      	movs	r2, #0
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7a:	f000 f910 	bl	8000f9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_InitTick+0x70>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	e007      	b.n	8000d96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	73fb      	strb	r3, [r7, #15]
 8000d8a:	e004      	b.n	8000d96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
 8000d90:	e001      	b.n	8000d96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000078 	.word	0x20000078
 8000da4:	20000070 	.word	0x20000070
 8000da8:	20000074 	.word	0x20000074

08000dac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_IncTick+0x1c>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <HAL_IncTick+0x20>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a03      	ldr	r2, [pc, #12]	; (8000dc8 <HAL_IncTick+0x1c>)
 8000dbc:	6013      	str	r3, [r2, #0]
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	20000190 	.word	0x20000190
 8000dcc:	20000078 	.word	0x20000078

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000190 	.word	0x20000190

08000de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1a:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	60d3      	str	r3, [r2, #12]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <__NVIC_GetPriorityGrouping+0x18>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 0307 	and.w	r3, r3, #7
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	db0b      	blt.n	8000e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f003 021f 	and.w	r2, r3, #31
 8000e64:	4907      	ldr	r1, [pc, #28]	; (8000e84 <__NVIC_EnableIRQ+0x38>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	095b      	lsrs	r3, r3, #5
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000e100 	.word	0xe000e100

08000e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db0a      	blt.n	8000eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	490c      	ldr	r1, [pc, #48]	; (8000ed4 <__NVIC_SetPriority+0x4c>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	0112      	lsls	r2, r2, #4
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb0:	e00a      	b.n	8000ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4908      	ldr	r1, [pc, #32]	; (8000ed8 <__NVIC_SetPriority+0x50>)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	3b04      	subs	r3, #4
 8000ec0:	0112      	lsls	r2, r2, #4
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	761a      	strb	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f1c3 0307 	rsb	r3, r3, #7
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf28      	it	cs
 8000efa:	2304      	movcs	r3, #4
 8000efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3304      	adds	r3, #4
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d902      	bls.n	8000f0c <NVIC_EncodePriority+0x30>
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3b03      	subs	r3, #3
 8000f0a:	e000      	b.n	8000f0e <NVIC_EncodePriority+0x32>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	401a      	ands	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	f04f 31ff 	mov.w	r1, #4294967295
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43d9      	mvns	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	4313      	orrs	r3, r2
         );
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3724      	adds	r7, #36	; 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f54:	d301      	bcc.n	8000f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00f      	b.n	8000f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <SysTick_Config+0x40>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f62:	210f      	movs	r1, #15
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f7ff ff8e 	bl	8000e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <SysTick_Config+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SysTick_Config+0x40>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff29 	bl	8000de8 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fac:	f7ff ff40 	bl	8000e30 <__NVIC_GetPriorityGrouping>
 8000fb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	f7ff ff90 	bl	8000edc <NVIC_EncodePriority>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff5f 	bl	8000e88 <__NVIC_SetPriority>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff33 	bl	8000e4c <__NVIC_EnableIRQ>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ffa4 	bl	8000f44 <SysTick_Config>
 8000ffc:	4603      	mov	r3, r0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001016:	e15a      	b.n	80012ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
 8001024:	4013      	ands	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 814c 	beq.w	80012c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b01      	cmp	r3, #1
 800103a:	d005      	beq.n	8001048 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001044:	2b02      	cmp	r3, #2
 8001046:	d130      	bne.n	80010aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800107e:	2201      	movs	r2, #1
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	091b      	lsrs	r3, r3, #4
 8001094:	f003 0201 	and.w	r2, r3, #1
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d017      	beq.n	80010e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d123      	bne.n	800113a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	691a      	ldr	r2, [r3, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	6939      	ldr	r1, [r7, #16]
 8001136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0203 	and.w	r2, r3, #3
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 80a6 	beq.w	80012c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117c:	4b5b      	ldr	r3, [pc, #364]	; (80012ec <HAL_GPIO_Init+0x2e4>)
 800117e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001180:	4a5a      	ldr	r2, [pc, #360]	; (80012ec <HAL_GPIO_Init+0x2e4>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6613      	str	r3, [r2, #96]	; 0x60
 8001188:	4b58      	ldr	r3, [pc, #352]	; (80012ec <HAL_GPIO_Init+0x2e4>)
 800118a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001194:	4a56      	ldr	r2, [pc, #344]	; (80012f0 <HAL_GPIO_Init+0x2e8>)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	220f      	movs	r2, #15
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011be:	d01f      	beq.n	8001200 <HAL_GPIO_Init+0x1f8>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a4c      	ldr	r2, [pc, #304]	; (80012f4 <HAL_GPIO_Init+0x2ec>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d019      	beq.n	80011fc <HAL_GPIO_Init+0x1f4>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a4b      	ldr	r2, [pc, #300]	; (80012f8 <HAL_GPIO_Init+0x2f0>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d013      	beq.n	80011f8 <HAL_GPIO_Init+0x1f0>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a4a      	ldr	r2, [pc, #296]	; (80012fc <HAL_GPIO_Init+0x2f4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d00d      	beq.n	80011f4 <HAL_GPIO_Init+0x1ec>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a49      	ldr	r2, [pc, #292]	; (8001300 <HAL_GPIO_Init+0x2f8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d007      	beq.n	80011f0 <HAL_GPIO_Init+0x1e8>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a48      	ldr	r2, [pc, #288]	; (8001304 <HAL_GPIO_Init+0x2fc>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d101      	bne.n	80011ec <HAL_GPIO_Init+0x1e4>
 80011e8:	2305      	movs	r3, #5
 80011ea:	e00a      	b.n	8001202 <HAL_GPIO_Init+0x1fa>
 80011ec:	2306      	movs	r3, #6
 80011ee:	e008      	b.n	8001202 <HAL_GPIO_Init+0x1fa>
 80011f0:	2304      	movs	r3, #4
 80011f2:	e006      	b.n	8001202 <HAL_GPIO_Init+0x1fa>
 80011f4:	2303      	movs	r3, #3
 80011f6:	e004      	b.n	8001202 <HAL_GPIO_Init+0x1fa>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e002      	b.n	8001202 <HAL_GPIO_Init+0x1fa>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <HAL_GPIO_Init+0x1fa>
 8001200:	2300      	movs	r3, #0
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	f002 0203 	and.w	r2, r2, #3
 8001208:	0092      	lsls	r2, r2, #2
 800120a:	4093      	lsls	r3, r2
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001212:	4937      	ldr	r1, [pc, #220]	; (80012f0 <HAL_GPIO_Init+0x2e8>)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3302      	adds	r3, #2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001220:	4b39      	ldr	r3, [pc, #228]	; (8001308 <HAL_GPIO_Init+0x300>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001244:	4a30      	ldr	r2, [pc, #192]	; (8001308 <HAL_GPIO_Init+0x300>)
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800124a:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <HAL_GPIO_Init+0x300>)
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800126e:	4a26      	ldr	r2, [pc, #152]	; (8001308 <HAL_GPIO_Init+0x300>)
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_GPIO_Init+0x300>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	43db      	mvns	r3, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001298:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <HAL_GPIO_Init+0x300>)
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HAL_GPIO_Init+0x300>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012c2:	4a11      	ldr	r2, [pc, #68]	; (8001308 <HAL_GPIO_Init+0x300>)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	3301      	adds	r3, #1
 80012cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	fa22 f303 	lsr.w	r3, r2, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f47f ae9d 	bne.w	8001018 <HAL_GPIO_Init+0x10>
  }
}
 80012de:	bf00      	nop
 80012e0:	bf00      	nop
 80012e2:	371c      	adds	r7, #28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000
 80012f4:	48000400 	.word	0x48000400
 80012f8:	48000800 	.word	0x48000800
 80012fc:	48000c00 	.word	0x48000c00
 8001300:	48001000 	.word	0x48001000
 8001304:	48001400 	.word	0x48001400
 8001308:	40010400 	.word	0x40010400

0800130c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	4013      	ands	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e001      	b.n	800132e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001358:	e002      	b.n	8001360 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4013      	ands	r3, r2
 8001384:	041a      	lsls	r2, r3, #16
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43d9      	mvns	r1, r3
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	400b      	ands	r3, r1
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	619a      	str	r2, [r3, #24]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d006      	beq.n	80013c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff faea 	bl	8000998 <HAL_GPIO_EXTI_Callback>
  }
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40010400 	.word	0x40010400

080013d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d141      	bne.n	8001462 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013de:	4b4b      	ldr	r3, [pc, #300]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ea:	d131      	bne.n	8001450 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013ec:	4b47      	ldr	r3, [pc, #284]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013f2:	4a46      	ldr	r2, [pc, #280]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013fc:	4b43      	ldr	r3, [pc, #268]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001404:	4a41      	ldr	r2, [pc, #260]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800140c:	4b40      	ldr	r3, [pc, #256]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2232      	movs	r2, #50	; 0x32
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	4a3f      	ldr	r2, [pc, #252]	; (8001514 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001418:	fba2 2303 	umull	r2, r3, r2, r3
 800141c:	0c9b      	lsrs	r3, r3, #18
 800141e:	3301      	adds	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001422:	e002      	b.n	800142a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3b01      	subs	r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800142a:	4b38      	ldr	r3, [pc, #224]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001436:	d102      	bne.n	800143e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f2      	bne.n	8001424 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800143e:	4b33      	ldr	r3, [pc, #204]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144a:	d158      	bne.n	80014fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e057      	b.n	8001500 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001450:	4b2e      	ldr	r3, [pc, #184]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001456:	4a2d      	ldr	r2, [pc, #180]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800145c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001460:	e04d      	b.n	80014fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001468:	d141      	bne.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800146a:	4b28      	ldr	r3, [pc, #160]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001476:	d131      	bne.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800147e:	4a23      	ldr	r2, [pc, #140]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001484:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001488:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001490:	4a1e      	ldr	r2, [pc, #120]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001496:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2232      	movs	r2, #50	; 0x32
 800149e:	fb02 f303 	mul.w	r3, r2, r3
 80014a2:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	0c9b      	lsrs	r3, r3, #18
 80014aa:	3301      	adds	r3, #1
 80014ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ae:	e002      	b.n	80014b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c2:	d102      	bne.n	80014ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f2      	bne.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d6:	d112      	bne.n	80014fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e011      	b.n	8001500 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014ec:	e007      	b.n	80014fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40007000 	.word	0x40007000
 8001510:	20000070 	.word	0x20000070
 8001514:	431bde83 	.word	0x431bde83

08001518 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001526:	6093      	str	r3, [r2, #8]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40007000 	.word	0x40007000

08001538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e306      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d075      	beq.n	8001642 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001556:	4b97      	ldr	r3, [pc, #604]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001560:	4b94      	ldr	r3, [pc, #592]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	2b0c      	cmp	r3, #12
 800156e:	d102      	bne.n	8001576 <HAL_RCC_OscConfig+0x3e>
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d002      	beq.n	800157c <HAL_RCC_OscConfig+0x44>
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2b08      	cmp	r3, #8
 800157a:	d10b      	bne.n	8001594 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	4b8d      	ldr	r3, [pc, #564]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d05b      	beq.n	8001640 <HAL_RCC_OscConfig+0x108>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d157      	bne.n	8001640 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e2e1      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159c:	d106      	bne.n	80015ac <HAL_RCC_OscConfig+0x74>
 800159e:	4b85      	ldr	r3, [pc, #532]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a84      	ldr	r2, [pc, #528]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e01d      	b.n	80015e8 <HAL_RCC_OscConfig+0xb0>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x98>
 80015b6:	4b7f      	ldr	r3, [pc, #508]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a7e      	ldr	r2, [pc, #504]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b7c      	ldr	r3, [pc, #496]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a7b      	ldr	r2, [pc, #492]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0xb0>
 80015d0:	4b78      	ldr	r3, [pc, #480]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a77      	ldr	r2, [pc, #476]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b75      	ldr	r3, [pc, #468]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a74      	ldr	r2, [pc, #464]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d013      	beq.n	8001618 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fbee 	bl	8000dd0 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fbea 	bl	8000dd0 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e2a6      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800160a:	4b6a      	ldr	r3, [pc, #424]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0xc0>
 8001616:	e014      	b.n	8001642 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fbda 	bl	8000dd0 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fbd6 	bl	8000dd0 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	; 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e292      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001632:	4b60      	ldr	r3, [pc, #384]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0xe8>
 800163e:	e000      	b.n	8001642 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d075      	beq.n	800173a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800164e:	4b59      	ldr	r3, [pc, #356]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001658:	4b56      	ldr	r3, [pc, #344]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	2b0c      	cmp	r3, #12
 8001666:	d102      	bne.n	800166e <HAL_RCC_OscConfig+0x136>
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d002      	beq.n	8001674 <HAL_RCC_OscConfig+0x13c>
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	2b04      	cmp	r3, #4
 8001672:	d11f      	bne.n	80016b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001674:	4b4f      	ldr	r3, [pc, #316]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_OscConfig+0x154>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e265      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168c:	4b49      	ldr	r3, [pc, #292]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	061b      	lsls	r3, r3, #24
 800169a:	4946      	ldr	r1, [pc, #280]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016a0:	4b45      	ldr	r3, [pc, #276]	; (80017b8 <HAL_RCC_OscConfig+0x280>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fb47 	bl	8000d38 <HAL_InitTick>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d043      	beq.n	8001738 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e251      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d023      	beq.n	8001704 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016bc:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a3c      	ldr	r2, [pc, #240]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80016c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff fb82 	bl	8000dd0 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d0:	f7ff fb7e 	bl	8000dd0 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e23a      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e2:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	061b      	lsls	r3, r3, #24
 80016fc:	492d      	ldr	r1, [pc, #180]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	604b      	str	r3, [r1, #4]
 8001702:	e01a      	b.n	800173a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001704:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a2a      	ldr	r2, [pc, #168]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800170a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800170e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff fb5e 	bl	8000dd0 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001718:	f7ff fb5a 	bl	8000dd0 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e216      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x1e0>
 8001736:	e000      	b.n	800173a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001738:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d041      	beq.n	80017ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d01c      	beq.n	8001788 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001754:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175e:	f7ff fb37 	bl	8000dd0 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001766:	f7ff fb33 	bl	8000dd0 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e1ef      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800177a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0ef      	beq.n	8001766 <HAL_RCC_OscConfig+0x22e>
 8001786:	e020      	b.n	80017ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800178a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001798:	f7ff fb1a 	bl	8000dd0 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800179e:	e00d      	b.n	80017bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a0:	f7ff fb16 	bl	8000dd0 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d906      	bls.n	80017bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e1d2      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	20000074 	.word	0x20000074
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017bc:	4b8c      	ldr	r3, [pc, #560]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80017be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1ea      	bne.n	80017a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 80a6 	beq.w	8001924 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017dc:	4b84      	ldr	r3, [pc, #528]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_OscConfig+0x2b4>
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <HAL_RCC_OscConfig+0x2b6>
 80017ec:	2300      	movs	r3, #0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00d      	beq.n	800180e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	4b7f      	ldr	r3, [pc, #508]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	4a7e      	ldr	r2, [pc, #504]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fc:	6593      	str	r3, [r2, #88]	; 0x58
 80017fe:	4b7c      	ldr	r3, [pc, #496]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800180a:	2301      	movs	r3, #1
 800180c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800180e:	4b79      	ldr	r3, [pc, #484]	; (80019f4 <HAL_RCC_OscConfig+0x4bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d118      	bne.n	800184c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800181a:	4b76      	ldr	r3, [pc, #472]	; (80019f4 <HAL_RCC_OscConfig+0x4bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a75      	ldr	r2, [pc, #468]	; (80019f4 <HAL_RCC_OscConfig+0x4bc>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001826:	f7ff fad3 	bl	8000dd0 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182e:	f7ff facf 	bl	8000dd0 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e18b      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001840:	4b6c      	ldr	r3, [pc, #432]	; (80019f4 <HAL_RCC_OscConfig+0x4bc>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d108      	bne.n	8001866 <HAL_RCC_OscConfig+0x32e>
 8001854:	4b66      	ldr	r3, [pc, #408]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185a:	4a65      	ldr	r2, [pc, #404]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001864:	e024      	b.n	80018b0 <HAL_RCC_OscConfig+0x378>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b05      	cmp	r3, #5
 800186c:	d110      	bne.n	8001890 <HAL_RCC_OscConfig+0x358>
 800186e:	4b60      	ldr	r3, [pc, #384]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001874:	4a5e      	ldr	r2, [pc, #376]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800187e:	4b5c      	ldr	r3, [pc, #368]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001884:	4a5a      	ldr	r2, [pc, #360]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800188e:	e00f      	b.n	80018b0 <HAL_RCC_OscConfig+0x378>
 8001890:	4b57      	ldr	r3, [pc, #348]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001896:	4a56      	ldr	r2, [pc, #344]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a0:	4b53      	ldr	r3, [pc, #332]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80018a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a6:	4a52      	ldr	r2, [pc, #328]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80018a8:	f023 0304 	bic.w	r3, r3, #4
 80018ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d016      	beq.n	80018e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff fa8a 	bl	8000dd0 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018be:	e00a      	b.n	80018d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c0:	f7ff fa86 	bl	8000dd0 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e140      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018d6:	4b46      	ldr	r3, [pc, #280]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80018d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0ed      	beq.n	80018c0 <HAL_RCC_OscConfig+0x388>
 80018e4:	e015      	b.n	8001912 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e6:	f7ff fa73 	bl	8000dd0 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ec:	e00a      	b.n	8001904 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f7ff fa6f 	bl	8000dd0 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e129      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001904:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ed      	bne.n	80018ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001912:	7ffb      	ldrb	r3, [r7, #31]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d105      	bne.n	8001924 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001918:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	4a34      	ldr	r2, [pc, #208]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 800191e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001922:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b00      	cmp	r3, #0
 800192e:	d03c      	beq.n	80019aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01c      	beq.n	8001972 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001938:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 800193a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800193e:	4a2c      	ldr	r2, [pc, #176]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001948:	f7ff fa42 	bl	8000dd0 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001950:	f7ff fa3e 	bl	8000dd0 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e0fa      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001962:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001964:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0ef      	beq.n	8001950 <HAL_RCC_OscConfig+0x418>
 8001970:	e01b      	b.n	80019aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001972:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001974:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001978:	4a1d      	ldr	r2, [pc, #116]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 800197a:	f023 0301 	bic.w	r3, r3, #1
 800197e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001982:	f7ff fa25 	bl	8000dd0 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800198a:	f7ff fa21 	bl	8000dd0 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e0dd      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 800199e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1ef      	bne.n	800198a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80d1 	beq.w	8001b56 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b0c      	cmp	r3, #12
 80019be:	f000 808b 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d15e      	bne.n	8001a88 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80019d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d6:	f7ff f9fb 	bl	8000dd0 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019dc:	e00c      	b.n	80019f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019de:	f7ff f9f7 	bl	8000dd0 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d905      	bls.n	80019f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e0b3      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f8:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <HAL_RCC_OscConfig+0x628>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1ec      	bne.n	80019de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a04:	4b56      	ldr	r3, [pc, #344]	; (8001b60 <HAL_RCC_OscConfig+0x628>)
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	4b56      	ldr	r3, [pc, #344]	; (8001b64 <HAL_RCC_OscConfig+0x62c>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6a11      	ldr	r1, [r2, #32]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a14:	3a01      	subs	r2, #1
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	4311      	orrs	r1, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a1e:	0212      	lsls	r2, r2, #8
 8001a20:	4311      	orrs	r1, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a26:	0852      	lsrs	r2, r2, #1
 8001a28:	3a01      	subs	r2, #1
 8001a2a:	0552      	lsls	r2, r2, #21
 8001a2c:	4311      	orrs	r1, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a32:	0852      	lsrs	r2, r2, #1
 8001a34:	3a01      	subs	r2, #1
 8001a36:	0652      	lsls	r2, r2, #25
 8001a38:	4311      	orrs	r1, r2
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a3e:	06d2      	lsls	r2, r2, #27
 8001a40:	430a      	orrs	r2, r1
 8001a42:	4947      	ldr	r1, [pc, #284]	; (8001b60 <HAL_RCC_OscConfig+0x628>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a48:	4b45      	ldr	r3, [pc, #276]	; (8001b60 <HAL_RCC_OscConfig+0x628>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a44      	ldr	r2, [pc, #272]	; (8001b60 <HAL_RCC_OscConfig+0x628>)
 8001a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a52:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a54:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <HAL_RCC_OscConfig+0x628>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4a41      	ldr	r2, [pc, #260]	; (8001b60 <HAL_RCC_OscConfig+0x628>)
 8001a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff f9b6 	bl	8000dd0 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a68:	f7ff f9b2 	bl	8000dd0 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e06e      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7a:	4b39      	ldr	r3, [pc, #228]	; (8001b60 <HAL_RCC_OscConfig+0x628>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x530>
 8001a86:	e066      	b.n	8001b56 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a88:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <HAL_RCC_OscConfig+0x628>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a34      	ldr	r2, [pc, #208]	; (8001b60 <HAL_RCC_OscConfig+0x628>)
 8001a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a92:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a94:	4b32      	ldr	r3, [pc, #200]	; (8001b60 <HAL_RCC_OscConfig+0x628>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4a31      	ldr	r2, [pc, #196]	; (8001b60 <HAL_RCC_OscConfig+0x628>)
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001aa0:	4b2f      	ldr	r3, [pc, #188]	; (8001b60 <HAL_RCC_OscConfig+0x628>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4a2e      	ldr	r2, [pc, #184]	; (8001b60 <HAL_RCC_OscConfig+0x628>)
 8001aa6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f98e 	bl	8000dd0 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab8:	f7ff f98a 	bl	8000dd0 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e046      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aca:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_RCC_OscConfig+0x628>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x580>
 8001ad6:	e03e      	b.n	8001b56 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e039      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <HAL_RCC_OscConfig+0x628>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 0203 	and.w	r2, r3, #3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d12c      	bne.n	8001b52 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	3b01      	subs	r3, #1
 8001b04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d123      	bne.n	8001b52 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d11b      	bne.n	8001b52 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d113      	bne.n	8001b52 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	085b      	lsrs	r3, r3, #1
 8001b36:	3b01      	subs	r3, #1
 8001b38:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d109      	bne.n	8001b52 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b48:	085b      	lsrs	r3, r3, #1
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3720      	adds	r7, #32
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000
 8001b64:	019f800c 	.word	0x019f800c

08001b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e11e      	b.n	8001dbe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b80:	4b91      	ldr	r3, [pc, #580]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d910      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b8e      	ldr	r3, [pc, #568]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 020f 	bic.w	r2, r3, #15
 8001b96:	498c      	ldr	r1, [pc, #560]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b8a      	ldr	r3, [pc, #552]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e106      	b.n	8001dbe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d073      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d129      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc4:	4b81      	ldr	r3, [pc, #516]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0f4      	b.n	8001dbe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001bd4:	f000 f99e 	bl	8001f14 <RCC_GetSysClockFreqFromPLLSource>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4a7c      	ldr	r2, [pc, #496]	; (8001dd0 <HAL_RCC_ClockConfig+0x268>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d93f      	bls.n	8001c62 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001be2:	4b7a      	ldr	r3, [pc, #488]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d009      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d033      	beq.n	8001c62 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d12f      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c02:	4b72      	ldr	r3, [pc, #456]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c0a:	4a70      	ldr	r2, [pc, #448]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c10:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e024      	b.n	8001c62 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c20:	4b6a      	ldr	r3, [pc, #424]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d109      	bne.n	8001c40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0c6      	b.n	8001dbe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c30:	4b66      	ldr	r3, [pc, #408]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0be      	b.n	8001dbe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c40:	f000 f8ce 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001c44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4a61      	ldr	r2, [pc, #388]	; (8001dd0 <HAL_RCC_ClockConfig+0x268>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d909      	bls.n	8001c62 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c4e:	4b5f      	ldr	r3, [pc, #380]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c56:	4a5d      	ldr	r2, [pc, #372]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c5c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c62:	4b5a      	ldr	r3, [pc, #360]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f023 0203 	bic.w	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4957      	ldr	r1, [pc, #348]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c74:	f7ff f8ac 	bl	8000dd0 <HAL_GetTick>
 8001c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7c:	f7ff f8a8 	bl	8000dd0 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e095      	b.n	8001dbe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	4b4e      	ldr	r3, [pc, #312]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 020c 	and.w	r2, r3, #12
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d1eb      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d023      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cbc:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	4a42      	ldr	r2, [pc, #264]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001cc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cc6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001cd4:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001cdc:	4a3b      	ldr	r2, [pc, #236]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001cde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ce2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce4:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	4936      	ldr	r1, [pc, #216]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2b80      	cmp	r3, #128	; 0x80
 8001cfc:	d105      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001cfe:	4b33      	ldr	r3, [pc, #204]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	4a32      	ldr	r2, [pc, #200]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001d04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d08:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d0a:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d21d      	bcs.n	8001d54 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d18:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 020f 	bic.w	r2, r3, #15
 8001d20:	4929      	ldr	r1, [pc, #164]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d28:	f7ff f852 	bl	8000dd0 <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d30:	f7ff f84e 	bl	8000dd0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e03b      	b.n	8001dbe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_RCC_ClockConfig+0x260>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d1ed      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4917      	ldr	r1, [pc, #92]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	490f      	ldr	r1, [pc, #60]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d92:	f000 f825 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001d96:	4602      	mov	r2, r0
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <HAL_RCC_ClockConfig+0x264>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	490c      	ldr	r1, [pc, #48]	; (8001dd4 <HAL_RCC_ClockConfig+0x26c>)
 8001da4:	5ccb      	ldrb	r3, [r1, r3]
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <HAL_RCC_ClockConfig+0x270>)
 8001db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_RCC_ClockConfig+0x274>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe ffbe 	bl	8000d38 <HAL_InitTick>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	04c4b400 	.word	0x04c4b400
 8001dd4:	08003394 	.word	0x08003394
 8001dd8:	20000070 	.word	0x20000070
 8001ddc:	20000074 	.word	0x20000074

08001de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001de6:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d102      	bne.n	8001df8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001df2:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	e047      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001df8:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d102      	bne.n	8001e0a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e04:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	e03e      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e0a:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b0c      	cmp	r3, #12
 8001e14:	d136      	bne.n	8001e84 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e20:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d10c      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e34:	4a1a      	ldr	r2, [pc, #104]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3c:	4a16      	ldr	r2, [pc, #88]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e3e:	68d2      	ldr	r2, [r2, #12]
 8001e40:	0a12      	lsrs	r2, r2, #8
 8001e42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e46:	fb02 f303 	mul.w	r3, r2, r3
 8001e4a:	617b      	str	r3, [r7, #20]
      break;
 8001e4c:	e00c      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e4e:	4a13      	ldr	r2, [pc, #76]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e56:	4a10      	ldr	r2, [pc, #64]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e58:	68d2      	ldr	r2, [r2, #12]
 8001e5a:	0a12      	lsrs	r2, r2, #8
 8001e5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	617b      	str	r3, [r7, #20]
      break;
 8001e66:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0e5b      	lsrs	r3, r3, #25
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	3301      	adds	r3, #1
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	e001      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e88:	693b      	ldr	r3, [r7, #16]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	00f42400 	.word	0x00f42400
 8001ea0:	016e3600 	.word	0x016e3600

08001ea4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000070 	.word	0x20000070

08001ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ec0:	f7ff fff0 	bl	8001ea4 <HAL_RCC_GetHCLKFreq>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	0a1b      	lsrs	r3, r3, #8
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	4904      	ldr	r1, [pc, #16]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ed2:	5ccb      	ldrb	r3, [r1, r3]
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	080033a4 	.word	0x080033a4

08001ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001eec:	f7ff ffda 	bl	8001ea4 <HAL_RCC_GetHCLKFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	0adb      	lsrs	r3, r3, #11
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	4904      	ldr	r1, [pc, #16]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	080033a4 	.word	0x080033a4

08001f14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f24:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	3301      	adds	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d10c      	bne.n	8001f52 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f38:	4a17      	ldr	r2, [pc, #92]	; (8001f98 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f42:	68d2      	ldr	r2, [r2, #12]
 8001f44:	0a12      	lsrs	r2, r2, #8
 8001f46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	617b      	str	r3, [r7, #20]
    break;
 8001f50:	e00c      	b.n	8001f6c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f52:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f5c:	68d2      	ldr	r2, [r2, #12]
 8001f5e:	0a12      	lsrs	r2, r2, #8
 8001f60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f64:	fb02 f303 	mul.w	r3, r2, r3
 8001f68:	617b      	str	r3, [r7, #20]
    break;
 8001f6a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0e5b      	lsrs	r3, r3, #25
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	3301      	adds	r3, #1
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f84:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f86:	687b      	ldr	r3, [r7, #4]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40021000 	.word	0x40021000
 8001f98:	016e3600 	.word	0x016e3600
 8001f9c:	00f42400 	.word	0x00f42400

08001fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fa8:	2300      	movs	r3, #0
 8001faa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fac:	2300      	movs	r3, #0
 8001fae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8098 	beq.w	80020ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc2:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10d      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b40      	ldr	r3, [pc, #256]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	4a3f      	ldr	r2, [pc, #252]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fda:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fea:	4b3a      	ldr	r3, [pc, #232]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a39      	ldr	r2, [pc, #228]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ff6:	f7fe feeb 	bl	8000dd0 <HAL_GetTick>
 8001ffa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ffc:	e009      	b.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffe:	f7fe fee7 	bl	8000dd0 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d902      	bls.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	74fb      	strb	r3, [r7, #19]
        break;
 8002010:	e005      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002012:	4b30      	ldr	r3, [pc, #192]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0ef      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800201e:	7cfb      	ldrb	r3, [r7, #19]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d159      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002024:	4b2a      	ldr	r3, [pc, #168]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01e      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	429a      	cmp	r2, r3
 800203e:	d019      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800204a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800204c:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	4a1f      	ldr	r2, [pc, #124]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800205c:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800206c:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7fe fea7 	bl	8000dd0 <HAL_GetTick>
 8002082:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002084:	e00b      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002086:	f7fe fea3 	bl	8000dd0 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f241 3288 	movw	r2, #5000	; 0x1388
 8002094:	4293      	cmp	r3, r2
 8002096:	d902      	bls.n	800209e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	74fb      	strb	r3, [r7, #19]
            break;
 800209c:	e006      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0ec      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80020ac:	7cfb      	ldrb	r3, [r7, #19]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10b      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c0:	4903      	ldr	r1, [pc, #12]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020c8:	e008      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020ca:	7cfb      	ldrb	r3, [r7, #19]
 80020cc:	74bb      	strb	r3, [r7, #18]
 80020ce:	e005      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
 80020da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020dc:	7c7b      	ldrb	r3, [r7, #17]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d105      	bne.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e2:	4ba7      	ldr	r3, [pc, #668]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	4aa6      	ldr	r2, [pc, #664]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020fa:	4ba1      	ldr	r3, [pc, #644]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002100:	f023 0203 	bic.w	r2, r3, #3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	499d      	ldr	r1, [pc, #628]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800211c:	4b98      	ldr	r3, [pc, #608]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002122:	f023 020c 	bic.w	r2, r3, #12
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	4995      	ldr	r1, [pc, #596]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800213e:	4b90      	ldr	r3, [pc, #576]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002144:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	498c      	ldr	r1, [pc, #560]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00a      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002160:	4b87      	ldr	r3, [pc, #540]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	4984      	ldr	r1, [pc, #528]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002182:	4b7f      	ldr	r3, [pc, #508]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002188:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	497b      	ldr	r1, [pc, #492]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021a4:	4b76      	ldr	r3, [pc, #472]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	4973      	ldr	r1, [pc, #460]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021c6:	4b6e      	ldr	r3, [pc, #440]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	496a      	ldr	r1, [pc, #424]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021e8:	4b65      	ldr	r3, [pc, #404]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4962      	ldr	r1, [pc, #392]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800220a:	4b5d      	ldr	r3, [pc, #372]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002210:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	4959      	ldr	r1, [pc, #356]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800222c:	4b54      	ldr	r3, [pc, #336]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800222e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002232:	f023 0203 	bic.w	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	4951      	ldr	r1, [pc, #324]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800224e:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002254:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	4948      	ldr	r1, [pc, #288]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226c:	2b00      	cmp	r3, #0
 800226e:	d015      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002270:	4b43      	ldr	r3, [pc, #268]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4940      	ldr	r1, [pc, #256]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800228e:	d105      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002290:	4b3b      	ldr	r3, [pc, #236]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a3a      	ldr	r2, [pc, #232]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800229a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d015      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022a8:	4b35      	ldr	r3, [pc, #212]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b6:	4932      	ldr	r1, [pc, #200]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c6:	d105      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c8:	4b2d      	ldr	r3, [pc, #180]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a2c      	ldr	r2, [pc, #176]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d015      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	4924      	ldr	r1, [pc, #144]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022fe:	d105      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002300:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800230a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d015      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002318:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002326:	4916      	ldr	r1, [pc, #88]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002336:	d105      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a10      	ldr	r2, [pc, #64]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800233e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002342:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d019      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4908      	ldr	r1, [pc, #32]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800236e:	d109      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4a02      	ldr	r2, [pc, #8]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800237a:	60d3      	str	r3, [r2, #12]
 800237c:	e002      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d015      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002390:	4b29      	ldr	r3, [pc, #164]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	4926      	ldr	r1, [pc, #152]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ae:	d105      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a20      	ldr	r2, [pc, #128]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d015      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d6:	4918      	ldr	r1, [pc, #96]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e6:	d105      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4a12      	ldr	r2, [pc, #72]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d015      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002400:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240e:	490a      	ldr	r1, [pc, #40]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800241e:	d105      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4a04      	ldr	r2, [pc, #16]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800242a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800242c:	7cbb      	ldrb	r3, [r7, #18]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000

0800243c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e042      	b.n	80024d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002454:	2b00      	cmp	r3, #0
 8002456:	d106      	bne.n	8002466 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7fe fb55 	bl	8000b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2224      	movs	r2, #36	; 0x24
 800246a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f82c 	bl	80024dc <UART_SetConfig>
 8002484:	4603      	mov	r3, r0
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e022      	b.n	80024d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fb1c 	bl	8002ad4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fba3 	bl	8002c18 <UART_CheckIdleState>
 80024d2:	4603      	mov	r3, r0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e0:	b08c      	sub	sp, #48	; 0x30
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	4313      	orrs	r3, r2
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	4baa      	ldr	r3, [pc, #680]	; (80027b4 <UART_SetConfig+0x2d8>)
 800250c:	4013      	ands	r3, r2
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002514:	430b      	orrs	r3, r1
 8002516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a9f      	ldr	r2, [pc, #636]	; (80027b8 <UART_SetConfig+0x2dc>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002544:	4313      	orrs	r3, r2
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002552:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800255c:	430b      	orrs	r3, r1
 800255e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	f023 010f 	bic.w	r1, r3, #15
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a90      	ldr	r2, [pc, #576]	; (80027bc <UART_SetConfig+0x2e0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d125      	bne.n	80025cc <UART_SetConfig+0xf0>
 8002580:	4b8f      	ldr	r3, [pc, #572]	; (80027c0 <UART_SetConfig+0x2e4>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b03      	cmp	r3, #3
 800258c:	d81a      	bhi.n	80025c4 <UART_SetConfig+0xe8>
 800258e:	a201      	add	r2, pc, #4	; (adr r2, 8002594 <UART_SetConfig+0xb8>)
 8002590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002594:	080025a5 	.word	0x080025a5
 8002598:	080025b5 	.word	0x080025b5
 800259c:	080025ad 	.word	0x080025ad
 80025a0:	080025bd 	.word	0x080025bd
 80025a4:	2301      	movs	r3, #1
 80025a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025aa:	e116      	b.n	80027da <UART_SetConfig+0x2fe>
 80025ac:	2302      	movs	r3, #2
 80025ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025b2:	e112      	b.n	80027da <UART_SetConfig+0x2fe>
 80025b4:	2304      	movs	r3, #4
 80025b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025ba:	e10e      	b.n	80027da <UART_SetConfig+0x2fe>
 80025bc:	2308      	movs	r3, #8
 80025be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025c2:	e10a      	b.n	80027da <UART_SetConfig+0x2fe>
 80025c4:	2310      	movs	r3, #16
 80025c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025ca:	e106      	b.n	80027da <UART_SetConfig+0x2fe>
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a7c      	ldr	r2, [pc, #496]	; (80027c4 <UART_SetConfig+0x2e8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d138      	bne.n	8002648 <UART_SetConfig+0x16c>
 80025d6:	4b7a      	ldr	r3, [pc, #488]	; (80027c0 <UART_SetConfig+0x2e4>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025dc:	f003 030c 	and.w	r3, r3, #12
 80025e0:	2b0c      	cmp	r3, #12
 80025e2:	d82d      	bhi.n	8002640 <UART_SetConfig+0x164>
 80025e4:	a201      	add	r2, pc, #4	; (adr r2, 80025ec <UART_SetConfig+0x110>)
 80025e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ea:	bf00      	nop
 80025ec:	08002621 	.word	0x08002621
 80025f0:	08002641 	.word	0x08002641
 80025f4:	08002641 	.word	0x08002641
 80025f8:	08002641 	.word	0x08002641
 80025fc:	08002631 	.word	0x08002631
 8002600:	08002641 	.word	0x08002641
 8002604:	08002641 	.word	0x08002641
 8002608:	08002641 	.word	0x08002641
 800260c:	08002629 	.word	0x08002629
 8002610:	08002641 	.word	0x08002641
 8002614:	08002641 	.word	0x08002641
 8002618:	08002641 	.word	0x08002641
 800261c:	08002639 	.word	0x08002639
 8002620:	2300      	movs	r3, #0
 8002622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002626:	e0d8      	b.n	80027da <UART_SetConfig+0x2fe>
 8002628:	2302      	movs	r3, #2
 800262a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800262e:	e0d4      	b.n	80027da <UART_SetConfig+0x2fe>
 8002630:	2304      	movs	r3, #4
 8002632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002636:	e0d0      	b.n	80027da <UART_SetConfig+0x2fe>
 8002638:	2308      	movs	r3, #8
 800263a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800263e:	e0cc      	b.n	80027da <UART_SetConfig+0x2fe>
 8002640:	2310      	movs	r3, #16
 8002642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002646:	e0c8      	b.n	80027da <UART_SetConfig+0x2fe>
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a5e      	ldr	r2, [pc, #376]	; (80027c8 <UART_SetConfig+0x2ec>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d125      	bne.n	800269e <UART_SetConfig+0x1c2>
 8002652:	4b5b      	ldr	r3, [pc, #364]	; (80027c0 <UART_SetConfig+0x2e4>)
 8002654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002658:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800265c:	2b30      	cmp	r3, #48	; 0x30
 800265e:	d016      	beq.n	800268e <UART_SetConfig+0x1b2>
 8002660:	2b30      	cmp	r3, #48	; 0x30
 8002662:	d818      	bhi.n	8002696 <UART_SetConfig+0x1ba>
 8002664:	2b20      	cmp	r3, #32
 8002666:	d00a      	beq.n	800267e <UART_SetConfig+0x1a2>
 8002668:	2b20      	cmp	r3, #32
 800266a:	d814      	bhi.n	8002696 <UART_SetConfig+0x1ba>
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <UART_SetConfig+0x19a>
 8002670:	2b10      	cmp	r3, #16
 8002672:	d008      	beq.n	8002686 <UART_SetConfig+0x1aa>
 8002674:	e00f      	b.n	8002696 <UART_SetConfig+0x1ba>
 8002676:	2300      	movs	r3, #0
 8002678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800267c:	e0ad      	b.n	80027da <UART_SetConfig+0x2fe>
 800267e:	2302      	movs	r3, #2
 8002680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002684:	e0a9      	b.n	80027da <UART_SetConfig+0x2fe>
 8002686:	2304      	movs	r3, #4
 8002688:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800268c:	e0a5      	b.n	80027da <UART_SetConfig+0x2fe>
 800268e:	2308      	movs	r3, #8
 8002690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002694:	e0a1      	b.n	80027da <UART_SetConfig+0x2fe>
 8002696:	2310      	movs	r3, #16
 8002698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800269c:	e09d      	b.n	80027da <UART_SetConfig+0x2fe>
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a4a      	ldr	r2, [pc, #296]	; (80027cc <UART_SetConfig+0x2f0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d125      	bne.n	80026f4 <UART_SetConfig+0x218>
 80026a8:	4b45      	ldr	r3, [pc, #276]	; (80027c0 <UART_SetConfig+0x2e4>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80026b2:	2bc0      	cmp	r3, #192	; 0xc0
 80026b4:	d016      	beq.n	80026e4 <UART_SetConfig+0x208>
 80026b6:	2bc0      	cmp	r3, #192	; 0xc0
 80026b8:	d818      	bhi.n	80026ec <UART_SetConfig+0x210>
 80026ba:	2b80      	cmp	r3, #128	; 0x80
 80026bc:	d00a      	beq.n	80026d4 <UART_SetConfig+0x1f8>
 80026be:	2b80      	cmp	r3, #128	; 0x80
 80026c0:	d814      	bhi.n	80026ec <UART_SetConfig+0x210>
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <UART_SetConfig+0x1f0>
 80026c6:	2b40      	cmp	r3, #64	; 0x40
 80026c8:	d008      	beq.n	80026dc <UART_SetConfig+0x200>
 80026ca:	e00f      	b.n	80026ec <UART_SetConfig+0x210>
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026d2:	e082      	b.n	80027da <UART_SetConfig+0x2fe>
 80026d4:	2302      	movs	r3, #2
 80026d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026da:	e07e      	b.n	80027da <UART_SetConfig+0x2fe>
 80026dc:	2304      	movs	r3, #4
 80026de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026e2:	e07a      	b.n	80027da <UART_SetConfig+0x2fe>
 80026e4:	2308      	movs	r3, #8
 80026e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026ea:	e076      	b.n	80027da <UART_SetConfig+0x2fe>
 80026ec:	2310      	movs	r3, #16
 80026ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026f2:	e072      	b.n	80027da <UART_SetConfig+0x2fe>
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a35      	ldr	r2, [pc, #212]	; (80027d0 <UART_SetConfig+0x2f4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d12a      	bne.n	8002754 <UART_SetConfig+0x278>
 80026fe:	4b30      	ldr	r3, [pc, #192]	; (80027c0 <UART_SetConfig+0x2e4>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002708:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800270c:	d01a      	beq.n	8002744 <UART_SetConfig+0x268>
 800270e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002712:	d81b      	bhi.n	800274c <UART_SetConfig+0x270>
 8002714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002718:	d00c      	beq.n	8002734 <UART_SetConfig+0x258>
 800271a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800271e:	d815      	bhi.n	800274c <UART_SetConfig+0x270>
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <UART_SetConfig+0x250>
 8002724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002728:	d008      	beq.n	800273c <UART_SetConfig+0x260>
 800272a:	e00f      	b.n	800274c <UART_SetConfig+0x270>
 800272c:	2300      	movs	r3, #0
 800272e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002732:	e052      	b.n	80027da <UART_SetConfig+0x2fe>
 8002734:	2302      	movs	r3, #2
 8002736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800273a:	e04e      	b.n	80027da <UART_SetConfig+0x2fe>
 800273c:	2304      	movs	r3, #4
 800273e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002742:	e04a      	b.n	80027da <UART_SetConfig+0x2fe>
 8002744:	2308      	movs	r3, #8
 8002746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800274a:	e046      	b.n	80027da <UART_SetConfig+0x2fe>
 800274c:	2310      	movs	r3, #16
 800274e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002752:	e042      	b.n	80027da <UART_SetConfig+0x2fe>
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <UART_SetConfig+0x2dc>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d13a      	bne.n	80027d4 <UART_SetConfig+0x2f8>
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <UART_SetConfig+0x2e4>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002768:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800276c:	d01a      	beq.n	80027a4 <UART_SetConfig+0x2c8>
 800276e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002772:	d81b      	bhi.n	80027ac <UART_SetConfig+0x2d0>
 8002774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002778:	d00c      	beq.n	8002794 <UART_SetConfig+0x2b8>
 800277a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800277e:	d815      	bhi.n	80027ac <UART_SetConfig+0x2d0>
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <UART_SetConfig+0x2b0>
 8002784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002788:	d008      	beq.n	800279c <UART_SetConfig+0x2c0>
 800278a:	e00f      	b.n	80027ac <UART_SetConfig+0x2d0>
 800278c:	2300      	movs	r3, #0
 800278e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002792:	e022      	b.n	80027da <UART_SetConfig+0x2fe>
 8002794:	2302      	movs	r3, #2
 8002796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800279a:	e01e      	b.n	80027da <UART_SetConfig+0x2fe>
 800279c:	2304      	movs	r3, #4
 800279e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027a2:	e01a      	b.n	80027da <UART_SetConfig+0x2fe>
 80027a4:	2308      	movs	r3, #8
 80027a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027aa:	e016      	b.n	80027da <UART_SetConfig+0x2fe>
 80027ac:	2310      	movs	r3, #16
 80027ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027b2:	e012      	b.n	80027da <UART_SetConfig+0x2fe>
 80027b4:	cfff69f3 	.word	0xcfff69f3
 80027b8:	40008000 	.word	0x40008000
 80027bc:	40013800 	.word	0x40013800
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40004400 	.word	0x40004400
 80027c8:	40004800 	.word	0x40004800
 80027cc:	40004c00 	.word	0x40004c00
 80027d0:	40005000 	.word	0x40005000
 80027d4:	2310      	movs	r3, #16
 80027d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4aae      	ldr	r2, [pc, #696]	; (8002a98 <UART_SetConfig+0x5bc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	f040 8097 	bne.w	8002914 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80027e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d823      	bhi.n	8002836 <UART_SetConfig+0x35a>
 80027ee:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <UART_SetConfig+0x318>)
 80027f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f4:	08002819 	.word	0x08002819
 80027f8:	08002837 	.word	0x08002837
 80027fc:	08002821 	.word	0x08002821
 8002800:	08002837 	.word	0x08002837
 8002804:	08002827 	.word	0x08002827
 8002808:	08002837 	.word	0x08002837
 800280c:	08002837 	.word	0x08002837
 8002810:	08002837 	.word	0x08002837
 8002814:	0800282f 	.word	0x0800282f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002818:	f7ff fb50 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 800281c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800281e:	e010      	b.n	8002842 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002820:	4b9e      	ldr	r3, [pc, #632]	; (8002a9c <UART_SetConfig+0x5c0>)
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002824:	e00d      	b.n	8002842 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002826:	f7ff fadb 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 800282a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800282c:	e009      	b.n	8002842 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800282e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002834:	e005      	b.n	8002842 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002840:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8130 	beq.w	8002aaa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	4a94      	ldr	r2, [pc, #592]	; (8002aa0 <UART_SetConfig+0x5c4>)
 8002850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002854:	461a      	mov	r2, r3
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	fbb3 f3f2 	udiv	r3, r3, r2
 800285c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4413      	add	r3, r2
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	429a      	cmp	r2, r3
 800286c:	d305      	bcc.n	800287a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	429a      	cmp	r2, r3
 8002878:	d903      	bls.n	8002882 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002880:	e113      	b.n	8002aaa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	2200      	movs	r2, #0
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	60fa      	str	r2, [r7, #12]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	4a84      	ldr	r2, [pc, #528]	; (8002aa0 <UART_SetConfig+0x5c4>)
 8002890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002894:	b29b      	uxth	r3, r3
 8002896:	2200      	movs	r2, #0
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	607a      	str	r2, [r7, #4]
 800289c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028a4:	f7fd fcca 	bl	800023c <__aeabi_uldivmod>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	020b      	lsls	r3, r1, #8
 80028ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80028be:	0202      	lsls	r2, r0, #8
 80028c0:	6979      	ldr	r1, [r7, #20]
 80028c2:	6849      	ldr	r1, [r1, #4]
 80028c4:	0849      	lsrs	r1, r1, #1
 80028c6:	2000      	movs	r0, #0
 80028c8:	460c      	mov	r4, r1
 80028ca:	4605      	mov	r5, r0
 80028cc:	eb12 0804 	adds.w	r8, r2, r4
 80028d0:	eb43 0905 	adc.w	r9, r3, r5
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	469a      	mov	sl, r3
 80028dc:	4693      	mov	fp, r2
 80028de:	4652      	mov	r2, sl
 80028e0:	465b      	mov	r3, fp
 80028e2:	4640      	mov	r0, r8
 80028e4:	4649      	mov	r1, r9
 80028e6:	f7fd fca9 	bl	800023c <__aeabi_uldivmod>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4613      	mov	r3, r2
 80028f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028f8:	d308      	bcc.n	800290c <UART_SetConfig+0x430>
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002900:	d204      	bcs.n	800290c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6a3a      	ldr	r2, [r7, #32]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	e0ce      	b.n	8002aaa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002912:	e0ca      	b.n	8002aaa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800291c:	d166      	bne.n	80029ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800291e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002922:	2b08      	cmp	r3, #8
 8002924:	d827      	bhi.n	8002976 <UART_SetConfig+0x49a>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <UART_SetConfig+0x450>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	08002951 	.word	0x08002951
 8002930:	08002959 	.word	0x08002959
 8002934:	08002961 	.word	0x08002961
 8002938:	08002977 	.word	0x08002977
 800293c:	08002967 	.word	0x08002967
 8002940:	08002977 	.word	0x08002977
 8002944:	08002977 	.word	0x08002977
 8002948:	08002977 	.word	0x08002977
 800294c:	0800296f 	.word	0x0800296f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002950:	f7ff fab4 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 8002954:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002956:	e014      	b.n	8002982 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002958:	f7ff fac6 	bl	8001ee8 <HAL_RCC_GetPCLK2Freq>
 800295c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800295e:	e010      	b.n	8002982 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002960:	4b4e      	ldr	r3, [pc, #312]	; (8002a9c <UART_SetConfig+0x5c0>)
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002964:	e00d      	b.n	8002982 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002966:	f7ff fa3b 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 800296a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800296c:	e009      	b.n	8002982 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800296e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002974:	e005      	b.n	8002982 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002980:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 8090 	beq.w	8002aaa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	4a44      	ldr	r2, [pc, #272]	; (8002aa0 <UART_SetConfig+0x5c4>)
 8002990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002994:	461a      	mov	r2, r3
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	fbb3 f3f2 	udiv	r3, r3, r2
 800299c:	005a      	lsls	r2, r3, #1
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	085b      	lsrs	r3, r3, #1
 80029a4:	441a      	add	r2, r3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	2b0f      	cmp	r3, #15
 80029b4:	d916      	bls.n	80029e4 <UART_SetConfig+0x508>
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029bc:	d212      	bcs.n	80029e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	f023 030f 	bic.w	r3, r3, #15
 80029c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	085b      	lsrs	r3, r3, #1
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	8bfb      	ldrh	r3, [r7, #30]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	8bfa      	ldrh	r2, [r7, #30]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	e062      	b.n	8002aaa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80029ea:	e05e      	b.n	8002aaa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d828      	bhi.n	8002a46 <UART_SetConfig+0x56a>
 80029f4:	a201      	add	r2, pc, #4	; (adr r2, 80029fc <UART_SetConfig+0x520>)
 80029f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fa:	bf00      	nop
 80029fc:	08002a21 	.word	0x08002a21
 8002a00:	08002a29 	.word	0x08002a29
 8002a04:	08002a31 	.word	0x08002a31
 8002a08:	08002a47 	.word	0x08002a47
 8002a0c:	08002a37 	.word	0x08002a37
 8002a10:	08002a47 	.word	0x08002a47
 8002a14:	08002a47 	.word	0x08002a47
 8002a18:	08002a47 	.word	0x08002a47
 8002a1c:	08002a3f 	.word	0x08002a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a20:	f7ff fa4c 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 8002a24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a26:	e014      	b.n	8002a52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a28:	f7ff fa5e 	bl	8001ee8 <HAL_RCC_GetPCLK2Freq>
 8002a2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a2e:	e010      	b.n	8002a52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a30:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <UART_SetConfig+0x5c0>)
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a34:	e00d      	b.n	8002a52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a36:	f7ff f9d3 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8002a3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a3c:	e009      	b.n	8002a52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a44:	e005      	b.n	8002a52 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002a50:	bf00      	nop
    }

    if (pclk != 0U)
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d028      	beq.n	8002aaa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	4a10      	ldr	r2, [pc, #64]	; (8002aa0 <UART_SetConfig+0x5c4>)
 8002a5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a62:	461a      	mov	r2, r3
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	441a      	add	r2, r3
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	2b0f      	cmp	r3, #15
 8002a80:	d910      	bls.n	8002aa4 <UART_SetConfig+0x5c8>
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a88:	d20c      	bcs.n	8002aa4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60da      	str	r2, [r3, #12]
 8002a94:	e009      	b.n	8002aaa <UART_SetConfig+0x5ce>
 8002a96:	bf00      	nop
 8002a98:	40008000 	.word	0x40008000
 8002a9c:	00f42400 	.word	0x00f42400
 8002aa0:	080033ac 	.word	0x080033ac
      }
      else
      {
        ret = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2200      	movs	r2, #0
 8002abe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002ac6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3730      	adds	r7, #48	; 0x30
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002ad4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01a      	beq.n	8002bea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bd2:	d10a      	bne.n	8002bea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	605a      	str	r2, [r3, #4]
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c28:	f7fe f8d2 	bl	8000dd0 <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d10e      	bne.n	8002c5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f82f 	bl	8002cae <UART_WaitOnFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e025      	b.n	8002ca6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d10e      	bne.n	8002c86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f819 	bl	8002cae <UART_WaitOnFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e00f      	b.n	8002ca6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b09c      	sub	sp, #112	; 0x70
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cbe:	e0a9      	b.n	8002e14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc6:	f000 80a5 	beq.w	8002e14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cca:	f7fe f881 	bl	8000dd0 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d302      	bcc.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x32>
 8002cda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d140      	bne.n	8002d62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce8:	e853 3f00 	ldrex	r3, [r3]
 8002cec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cf4:	667b      	str	r3, [r7, #100]	; 0x64
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d06:	e841 2300 	strex	r3, r2, [r1]
 8002d0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1e6      	bne.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3308      	adds	r3, #8
 8002d18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d1c:	e853 3f00 	ldrex	r3, [r3]
 8002d20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d24:	f023 0301 	bic.w	r3, r3, #1
 8002d28:	663b      	str	r3, [r7, #96]	; 0x60
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3308      	adds	r3, #8
 8002d30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d32:	64ba      	str	r2, [r7, #72]	; 0x48
 8002d34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d3a:	e841 2300 	strex	r3, r2, [r1]
 8002d3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1e5      	bne.n	8002d12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e069      	b.n	8002e36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d051      	beq.n	8002e14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d7e:	d149      	bne.n	8002e14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34
 8002daa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e6      	bne.n	8002d8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	e853 3f00 	ldrex	r3, [r3]
 8002dca:	613b      	str	r3, [r7, #16]
   return(result);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3308      	adds	r3, #8
 8002dda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ddc:	623a      	str	r2, [r7, #32]
 8002dde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de0:	69f9      	ldr	r1, [r7, #28]
 8002de2:	6a3a      	ldr	r2, [r7, #32]
 8002de4:	e841 2300 	strex	r3, r2, [r1]
 8002de8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e5      	bne.n	8002dbc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e010      	b.n	8002e36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	f43f af46 	beq.w	8002cc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3770      	adds	r7, #112	; 0x70
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_UARTEx_DisableFifoMode+0x16>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e027      	b.n	8002ea4 <HAL_UARTEx_DisableFifoMode+0x66>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2224      	movs	r2, #36	; 0x24
 8002e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002e82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e02d      	b.n	8002f24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2224      	movs	r2, #36	; 0x24
 8002ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f84f 	bl	8002fa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e02d      	b.n	8002fa0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2224      	movs	r2, #36	; 0x24
 8002f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f811 	bl	8002fa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d108      	bne.n	8002fca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002fc8:	e031      	b.n	800302e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002fca:	2308      	movs	r3, #8
 8002fcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002fce:	2308      	movs	r3, #8
 8002fd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	0e5b      	lsrs	r3, r3, #25
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	0f5b      	lsrs	r3, r3, #29
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002ff2:	7bbb      	ldrb	r3, [r7, #14]
 8002ff4:	7b3a      	ldrb	r2, [r7, #12]
 8002ff6:	4911      	ldr	r1, [pc, #68]	; (800303c <UARTEx_SetNbDataToProcess+0x94>)
 8002ff8:	5c8a      	ldrb	r2, [r1, r2]
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002ffe:	7b3a      	ldrb	r2, [r7, #12]
 8003000:	490f      	ldr	r1, [pc, #60]	; (8003040 <UARTEx_SetNbDataToProcess+0x98>)
 8003002:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003004:	fb93 f3f2 	sdiv	r3, r3, r2
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	7b7a      	ldrb	r2, [r7, #13]
 8003014:	4909      	ldr	r1, [pc, #36]	; (800303c <UARTEx_SetNbDataToProcess+0x94>)
 8003016:	5c8a      	ldrb	r2, [r1, r2]
 8003018:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800301c:	7b7a      	ldrb	r2, [r7, #13]
 800301e:	4908      	ldr	r1, [pc, #32]	; (8003040 <UARTEx_SetNbDataToProcess+0x98>)
 8003020:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003022:	fb93 f3f2 	sdiv	r3, r3, r2
 8003026:	b29a      	uxth	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	080033c4 	.word	0x080033c4
 8003040:	080033cc 	.word	0x080033cc

08003044 <malloc>:
 8003044:	4b02      	ldr	r3, [pc, #8]	; (8003050 <malloc+0xc>)
 8003046:	4601      	mov	r1, r0
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	f000 b82b 	b.w	80030a4 <_malloc_r>
 800304e:	bf00      	nop
 8003050:	200000c8 	.word	0x200000c8

08003054 <free>:
 8003054:	4b02      	ldr	r3, [pc, #8]	; (8003060 <free+0xc>)
 8003056:	4601      	mov	r1, r0
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	f000 b939 	b.w	80032d0 <_free_r>
 800305e:	bf00      	nop
 8003060:	200000c8 	.word	0x200000c8

08003064 <sbrk_aligned>:
 8003064:	b570      	push	{r4, r5, r6, lr}
 8003066:	4e0e      	ldr	r6, [pc, #56]	; (80030a0 <sbrk_aligned+0x3c>)
 8003068:	460c      	mov	r4, r1
 800306a:	6831      	ldr	r1, [r6, #0]
 800306c:	4605      	mov	r5, r0
 800306e:	b911      	cbnz	r1, 8003076 <sbrk_aligned+0x12>
 8003070:	f000 f8e4 	bl	800323c <_sbrk_r>
 8003074:	6030      	str	r0, [r6, #0]
 8003076:	4621      	mov	r1, r4
 8003078:	4628      	mov	r0, r5
 800307a:	f000 f8df 	bl	800323c <_sbrk_r>
 800307e:	1c43      	adds	r3, r0, #1
 8003080:	d00a      	beq.n	8003098 <sbrk_aligned+0x34>
 8003082:	1cc4      	adds	r4, r0, #3
 8003084:	f024 0403 	bic.w	r4, r4, #3
 8003088:	42a0      	cmp	r0, r4
 800308a:	d007      	beq.n	800309c <sbrk_aligned+0x38>
 800308c:	1a21      	subs	r1, r4, r0
 800308e:	4628      	mov	r0, r5
 8003090:	f000 f8d4 	bl	800323c <_sbrk_r>
 8003094:	3001      	adds	r0, #1
 8003096:	d101      	bne.n	800309c <sbrk_aligned+0x38>
 8003098:	f04f 34ff 	mov.w	r4, #4294967295
 800309c:	4620      	mov	r0, r4
 800309e:	bd70      	pop	{r4, r5, r6, pc}
 80030a0:	20000198 	.word	0x20000198

080030a4 <_malloc_r>:
 80030a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030a8:	1ccd      	adds	r5, r1, #3
 80030aa:	f025 0503 	bic.w	r5, r5, #3
 80030ae:	3508      	adds	r5, #8
 80030b0:	2d0c      	cmp	r5, #12
 80030b2:	bf38      	it	cc
 80030b4:	250c      	movcc	r5, #12
 80030b6:	2d00      	cmp	r5, #0
 80030b8:	4607      	mov	r7, r0
 80030ba:	db01      	blt.n	80030c0 <_malloc_r+0x1c>
 80030bc:	42a9      	cmp	r1, r5
 80030be:	d905      	bls.n	80030cc <_malloc_r+0x28>
 80030c0:	230c      	movs	r3, #12
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	2600      	movs	r6, #0
 80030c6:	4630      	mov	r0, r6
 80030c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80031a0 <_malloc_r+0xfc>
 80030d0:	f000 f868 	bl	80031a4 <__malloc_lock>
 80030d4:	f8d8 3000 	ldr.w	r3, [r8]
 80030d8:	461c      	mov	r4, r3
 80030da:	bb5c      	cbnz	r4, 8003134 <_malloc_r+0x90>
 80030dc:	4629      	mov	r1, r5
 80030de:	4638      	mov	r0, r7
 80030e0:	f7ff ffc0 	bl	8003064 <sbrk_aligned>
 80030e4:	1c43      	adds	r3, r0, #1
 80030e6:	4604      	mov	r4, r0
 80030e8:	d155      	bne.n	8003196 <_malloc_r+0xf2>
 80030ea:	f8d8 4000 	ldr.w	r4, [r8]
 80030ee:	4626      	mov	r6, r4
 80030f0:	2e00      	cmp	r6, #0
 80030f2:	d145      	bne.n	8003180 <_malloc_r+0xdc>
 80030f4:	2c00      	cmp	r4, #0
 80030f6:	d048      	beq.n	800318a <_malloc_r+0xe6>
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	4631      	mov	r1, r6
 80030fc:	4638      	mov	r0, r7
 80030fe:	eb04 0903 	add.w	r9, r4, r3
 8003102:	f000 f89b 	bl	800323c <_sbrk_r>
 8003106:	4581      	cmp	r9, r0
 8003108:	d13f      	bne.n	800318a <_malloc_r+0xe6>
 800310a:	6821      	ldr	r1, [r4, #0]
 800310c:	1a6d      	subs	r5, r5, r1
 800310e:	4629      	mov	r1, r5
 8003110:	4638      	mov	r0, r7
 8003112:	f7ff ffa7 	bl	8003064 <sbrk_aligned>
 8003116:	3001      	adds	r0, #1
 8003118:	d037      	beq.n	800318a <_malloc_r+0xe6>
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	442b      	add	r3, r5
 800311e:	6023      	str	r3, [r4, #0]
 8003120:	f8d8 3000 	ldr.w	r3, [r8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d038      	beq.n	800319a <_malloc_r+0xf6>
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	42a2      	cmp	r2, r4
 800312c:	d12b      	bne.n	8003186 <_malloc_r+0xe2>
 800312e:	2200      	movs	r2, #0
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	e00f      	b.n	8003154 <_malloc_r+0xb0>
 8003134:	6822      	ldr	r2, [r4, #0]
 8003136:	1b52      	subs	r2, r2, r5
 8003138:	d41f      	bmi.n	800317a <_malloc_r+0xd6>
 800313a:	2a0b      	cmp	r2, #11
 800313c:	d917      	bls.n	800316e <_malloc_r+0xca>
 800313e:	1961      	adds	r1, r4, r5
 8003140:	42a3      	cmp	r3, r4
 8003142:	6025      	str	r5, [r4, #0]
 8003144:	bf18      	it	ne
 8003146:	6059      	strne	r1, [r3, #4]
 8003148:	6863      	ldr	r3, [r4, #4]
 800314a:	bf08      	it	eq
 800314c:	f8c8 1000 	streq.w	r1, [r8]
 8003150:	5162      	str	r2, [r4, r5]
 8003152:	604b      	str	r3, [r1, #4]
 8003154:	4638      	mov	r0, r7
 8003156:	f104 060b 	add.w	r6, r4, #11
 800315a:	f000 f829 	bl	80031b0 <__malloc_unlock>
 800315e:	f026 0607 	bic.w	r6, r6, #7
 8003162:	1d23      	adds	r3, r4, #4
 8003164:	1af2      	subs	r2, r6, r3
 8003166:	d0ae      	beq.n	80030c6 <_malloc_r+0x22>
 8003168:	1b9b      	subs	r3, r3, r6
 800316a:	50a3      	str	r3, [r4, r2]
 800316c:	e7ab      	b.n	80030c6 <_malloc_r+0x22>
 800316e:	42a3      	cmp	r3, r4
 8003170:	6862      	ldr	r2, [r4, #4]
 8003172:	d1dd      	bne.n	8003130 <_malloc_r+0x8c>
 8003174:	f8c8 2000 	str.w	r2, [r8]
 8003178:	e7ec      	b.n	8003154 <_malloc_r+0xb0>
 800317a:	4623      	mov	r3, r4
 800317c:	6864      	ldr	r4, [r4, #4]
 800317e:	e7ac      	b.n	80030da <_malloc_r+0x36>
 8003180:	4634      	mov	r4, r6
 8003182:	6876      	ldr	r6, [r6, #4]
 8003184:	e7b4      	b.n	80030f0 <_malloc_r+0x4c>
 8003186:	4613      	mov	r3, r2
 8003188:	e7cc      	b.n	8003124 <_malloc_r+0x80>
 800318a:	230c      	movs	r3, #12
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	4638      	mov	r0, r7
 8003190:	f000 f80e 	bl	80031b0 <__malloc_unlock>
 8003194:	e797      	b.n	80030c6 <_malloc_r+0x22>
 8003196:	6025      	str	r5, [r4, #0]
 8003198:	e7dc      	b.n	8003154 <_malloc_r+0xb0>
 800319a:	605b      	str	r3, [r3, #4]
 800319c:	deff      	udf	#255	; 0xff
 800319e:	bf00      	nop
 80031a0:	20000194 	.word	0x20000194

080031a4 <__malloc_lock>:
 80031a4:	4801      	ldr	r0, [pc, #4]	; (80031ac <__malloc_lock+0x8>)
 80031a6:	f000 b883 	b.w	80032b0 <__retarget_lock_acquire_recursive>
 80031aa:	bf00      	nop
 80031ac:	200002d8 	.word	0x200002d8

080031b0 <__malloc_unlock>:
 80031b0:	4801      	ldr	r0, [pc, #4]	; (80031b8 <__malloc_unlock+0x8>)
 80031b2:	f000 b87e 	b.w	80032b2 <__retarget_lock_release_recursive>
 80031b6:	bf00      	nop
 80031b8:	200002d8 	.word	0x200002d8

080031bc <realloc>:
 80031bc:	4b02      	ldr	r3, [pc, #8]	; (80031c8 <realloc+0xc>)
 80031be:	460a      	mov	r2, r1
 80031c0:	4601      	mov	r1, r0
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	f000 b802 	b.w	80031cc <_realloc_r>
 80031c8:	200000c8 	.word	0x200000c8

080031cc <_realloc_r>:
 80031cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031d0:	4680      	mov	r8, r0
 80031d2:	4614      	mov	r4, r2
 80031d4:	460e      	mov	r6, r1
 80031d6:	b921      	cbnz	r1, 80031e2 <_realloc_r+0x16>
 80031d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031dc:	4611      	mov	r1, r2
 80031de:	f7ff bf61 	b.w	80030a4 <_malloc_r>
 80031e2:	b92a      	cbnz	r2, 80031f0 <_realloc_r+0x24>
 80031e4:	f000 f874 	bl	80032d0 <_free_r>
 80031e8:	4625      	mov	r5, r4
 80031ea:	4628      	mov	r0, r5
 80031ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031f0:	f000 f8ba 	bl	8003368 <_malloc_usable_size_r>
 80031f4:	4284      	cmp	r4, r0
 80031f6:	4607      	mov	r7, r0
 80031f8:	d802      	bhi.n	8003200 <_realloc_r+0x34>
 80031fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80031fe:	d812      	bhi.n	8003226 <_realloc_r+0x5a>
 8003200:	4621      	mov	r1, r4
 8003202:	4640      	mov	r0, r8
 8003204:	f7ff ff4e 	bl	80030a4 <_malloc_r>
 8003208:	4605      	mov	r5, r0
 800320a:	2800      	cmp	r0, #0
 800320c:	d0ed      	beq.n	80031ea <_realloc_r+0x1e>
 800320e:	42bc      	cmp	r4, r7
 8003210:	4622      	mov	r2, r4
 8003212:	4631      	mov	r1, r6
 8003214:	bf28      	it	cs
 8003216:	463a      	movcs	r2, r7
 8003218:	f000 f84c 	bl	80032b4 <memcpy>
 800321c:	4631      	mov	r1, r6
 800321e:	4640      	mov	r0, r8
 8003220:	f000 f856 	bl	80032d0 <_free_r>
 8003224:	e7e1      	b.n	80031ea <_realloc_r+0x1e>
 8003226:	4635      	mov	r5, r6
 8003228:	e7df      	b.n	80031ea <_realloc_r+0x1e>

0800322a <memset>:
 800322a:	4402      	add	r2, r0
 800322c:	4603      	mov	r3, r0
 800322e:	4293      	cmp	r3, r2
 8003230:	d100      	bne.n	8003234 <memset+0xa>
 8003232:	4770      	bx	lr
 8003234:	f803 1b01 	strb.w	r1, [r3], #1
 8003238:	e7f9      	b.n	800322e <memset+0x4>
	...

0800323c <_sbrk_r>:
 800323c:	b538      	push	{r3, r4, r5, lr}
 800323e:	4d06      	ldr	r5, [pc, #24]	; (8003258 <_sbrk_r+0x1c>)
 8003240:	2300      	movs	r3, #0
 8003242:	4604      	mov	r4, r0
 8003244:	4608      	mov	r0, r1
 8003246:	602b      	str	r3, [r5, #0]
 8003248:	f7fd fcec 	bl	8000c24 <_sbrk>
 800324c:	1c43      	adds	r3, r0, #1
 800324e:	d102      	bne.n	8003256 <_sbrk_r+0x1a>
 8003250:	682b      	ldr	r3, [r5, #0]
 8003252:	b103      	cbz	r3, 8003256 <_sbrk_r+0x1a>
 8003254:	6023      	str	r3, [r4, #0]
 8003256:	bd38      	pop	{r3, r4, r5, pc}
 8003258:	200002d4 	.word	0x200002d4

0800325c <__errno>:
 800325c:	4b01      	ldr	r3, [pc, #4]	; (8003264 <__errno+0x8>)
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	200000c8 	.word	0x200000c8

08003268 <__libc_init_array>:
 8003268:	b570      	push	{r4, r5, r6, lr}
 800326a:	4d0d      	ldr	r5, [pc, #52]	; (80032a0 <__libc_init_array+0x38>)
 800326c:	4c0d      	ldr	r4, [pc, #52]	; (80032a4 <__libc_init_array+0x3c>)
 800326e:	1b64      	subs	r4, r4, r5
 8003270:	10a4      	asrs	r4, r4, #2
 8003272:	2600      	movs	r6, #0
 8003274:	42a6      	cmp	r6, r4
 8003276:	d109      	bne.n	800328c <__libc_init_array+0x24>
 8003278:	4d0b      	ldr	r5, [pc, #44]	; (80032a8 <__libc_init_array+0x40>)
 800327a:	4c0c      	ldr	r4, [pc, #48]	; (80032ac <__libc_init_array+0x44>)
 800327c:	f000 f87c 	bl	8003378 <_init>
 8003280:	1b64      	subs	r4, r4, r5
 8003282:	10a4      	asrs	r4, r4, #2
 8003284:	2600      	movs	r6, #0
 8003286:	42a6      	cmp	r6, r4
 8003288:	d105      	bne.n	8003296 <__libc_init_array+0x2e>
 800328a:	bd70      	pop	{r4, r5, r6, pc}
 800328c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003290:	4798      	blx	r3
 8003292:	3601      	adds	r6, #1
 8003294:	e7ee      	b.n	8003274 <__libc_init_array+0xc>
 8003296:	f855 3b04 	ldr.w	r3, [r5], #4
 800329a:	4798      	blx	r3
 800329c:	3601      	adds	r6, #1
 800329e:	e7f2      	b.n	8003286 <__libc_init_array+0x1e>
 80032a0:	080033dc 	.word	0x080033dc
 80032a4:	080033dc 	.word	0x080033dc
 80032a8:	080033dc 	.word	0x080033dc
 80032ac:	080033e0 	.word	0x080033e0

080032b0 <__retarget_lock_acquire_recursive>:
 80032b0:	4770      	bx	lr

080032b2 <__retarget_lock_release_recursive>:
 80032b2:	4770      	bx	lr

080032b4 <memcpy>:
 80032b4:	440a      	add	r2, r1
 80032b6:	4291      	cmp	r1, r2
 80032b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80032bc:	d100      	bne.n	80032c0 <memcpy+0xc>
 80032be:	4770      	bx	lr
 80032c0:	b510      	push	{r4, lr}
 80032c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032ca:	4291      	cmp	r1, r2
 80032cc:	d1f9      	bne.n	80032c2 <memcpy+0xe>
 80032ce:	bd10      	pop	{r4, pc}

080032d0 <_free_r>:
 80032d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032d2:	2900      	cmp	r1, #0
 80032d4:	d044      	beq.n	8003360 <_free_r+0x90>
 80032d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032da:	9001      	str	r0, [sp, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f1a1 0404 	sub.w	r4, r1, #4
 80032e2:	bfb8      	it	lt
 80032e4:	18e4      	addlt	r4, r4, r3
 80032e6:	f7ff ff5d 	bl	80031a4 <__malloc_lock>
 80032ea:	4a1e      	ldr	r2, [pc, #120]	; (8003364 <_free_r+0x94>)
 80032ec:	9801      	ldr	r0, [sp, #4]
 80032ee:	6813      	ldr	r3, [r2, #0]
 80032f0:	b933      	cbnz	r3, 8003300 <_free_r+0x30>
 80032f2:	6063      	str	r3, [r4, #4]
 80032f4:	6014      	str	r4, [r2, #0]
 80032f6:	b003      	add	sp, #12
 80032f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032fc:	f7ff bf58 	b.w	80031b0 <__malloc_unlock>
 8003300:	42a3      	cmp	r3, r4
 8003302:	d908      	bls.n	8003316 <_free_r+0x46>
 8003304:	6825      	ldr	r5, [r4, #0]
 8003306:	1961      	adds	r1, r4, r5
 8003308:	428b      	cmp	r3, r1
 800330a:	bf01      	itttt	eq
 800330c:	6819      	ldreq	r1, [r3, #0]
 800330e:	685b      	ldreq	r3, [r3, #4]
 8003310:	1949      	addeq	r1, r1, r5
 8003312:	6021      	streq	r1, [r4, #0]
 8003314:	e7ed      	b.n	80032f2 <_free_r+0x22>
 8003316:	461a      	mov	r2, r3
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	b10b      	cbz	r3, 8003320 <_free_r+0x50>
 800331c:	42a3      	cmp	r3, r4
 800331e:	d9fa      	bls.n	8003316 <_free_r+0x46>
 8003320:	6811      	ldr	r1, [r2, #0]
 8003322:	1855      	adds	r5, r2, r1
 8003324:	42a5      	cmp	r5, r4
 8003326:	d10b      	bne.n	8003340 <_free_r+0x70>
 8003328:	6824      	ldr	r4, [r4, #0]
 800332a:	4421      	add	r1, r4
 800332c:	1854      	adds	r4, r2, r1
 800332e:	42a3      	cmp	r3, r4
 8003330:	6011      	str	r1, [r2, #0]
 8003332:	d1e0      	bne.n	80032f6 <_free_r+0x26>
 8003334:	681c      	ldr	r4, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	6053      	str	r3, [r2, #4]
 800333a:	440c      	add	r4, r1
 800333c:	6014      	str	r4, [r2, #0]
 800333e:	e7da      	b.n	80032f6 <_free_r+0x26>
 8003340:	d902      	bls.n	8003348 <_free_r+0x78>
 8003342:	230c      	movs	r3, #12
 8003344:	6003      	str	r3, [r0, #0]
 8003346:	e7d6      	b.n	80032f6 <_free_r+0x26>
 8003348:	6825      	ldr	r5, [r4, #0]
 800334a:	1961      	adds	r1, r4, r5
 800334c:	428b      	cmp	r3, r1
 800334e:	bf04      	itt	eq
 8003350:	6819      	ldreq	r1, [r3, #0]
 8003352:	685b      	ldreq	r3, [r3, #4]
 8003354:	6063      	str	r3, [r4, #4]
 8003356:	bf04      	itt	eq
 8003358:	1949      	addeq	r1, r1, r5
 800335a:	6021      	streq	r1, [r4, #0]
 800335c:	6054      	str	r4, [r2, #4]
 800335e:	e7ca      	b.n	80032f6 <_free_r+0x26>
 8003360:	b003      	add	sp, #12
 8003362:	bd30      	pop	{r4, r5, pc}
 8003364:	20000194 	.word	0x20000194

08003368 <_malloc_usable_size_r>:
 8003368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800336c:	1f18      	subs	r0, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	bfbc      	itt	lt
 8003372:	580b      	ldrlt	r3, [r1, r0]
 8003374:	18c0      	addlt	r0, r0, r3
 8003376:	4770      	bx	lr

08003378 <_init>:
 8003378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337a:	bf00      	nop
 800337c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337e:	bc08      	pop	{r3}
 8003380:	469e      	mov	lr, r3
 8003382:	4770      	bx	lr

08003384 <_fini>:
 8003384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003386:	bf00      	nop
 8003388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338a:	bc08      	pop	{r3}
 800338c:	469e      	mov	lr, r3
 800338e:	4770      	bx	lr
