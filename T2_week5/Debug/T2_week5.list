
T2_week5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043a8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004580  08004580  00014580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c0  080045c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080045c0  080045c0  000145c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045c8  080045c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045c8  080045c8  000145c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080045d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000010  080045dc  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  080045dc  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000120e1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002258  00000000  00000000  00032160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  000343b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c62  00000000  00000000  00035380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002567d  00000000  00000000  00035fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121c2  00000000  00000000  0005b65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7c22  00000000  00000000  0006d821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004470  00000000  00000000  00165444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001698b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004568 	.word	0x08004568

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004568 	.word	0x08004568

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295
 8000894:	f04f 30ff 	movne.w	r0, #4294967295
 8000898:	f000 b970 	b.w	8000b7c <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9e08      	ldr	r6, [sp, #32]
 80008ba:	460d      	mov	r5, r1
 80008bc:	4604      	mov	r4, r0
 80008be:	460f      	mov	r7, r1
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d14a      	bne.n	800095a <__udivmoddi4+0xa6>
 80008c4:	428a      	cmp	r2, r1
 80008c6:	4694      	mov	ip, r2
 80008c8:	d965      	bls.n	8000996 <__udivmoddi4+0xe2>
 80008ca:	fab2 f382 	clz	r3, r2
 80008ce:	b143      	cbz	r3, 80008e2 <__udivmoddi4+0x2e>
 80008d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80008d4:	f1c3 0220 	rsb	r2, r3, #32
 80008d8:	409f      	lsls	r7, r3
 80008da:	fa20 f202 	lsr.w	r2, r0, r2
 80008de:	4317      	orrs	r7, r2
 80008e0:	409c      	lsls	r4, r3
 80008e2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008e6:	fa1f f58c 	uxth.w	r5, ip
 80008ea:	fbb7 f1fe 	udiv	r1, r7, lr
 80008ee:	0c22      	lsrs	r2, r4, #16
 80008f0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008f8:	fb01 f005 	mul.w	r0, r1, r5
 80008fc:	4290      	cmp	r0, r2
 80008fe:	d90a      	bls.n	8000916 <__udivmoddi4+0x62>
 8000900:	eb1c 0202 	adds.w	r2, ip, r2
 8000904:	f101 37ff 	add.w	r7, r1, #4294967295
 8000908:	f080 811c 	bcs.w	8000b44 <__udivmoddi4+0x290>
 800090c:	4290      	cmp	r0, r2
 800090e:	f240 8119 	bls.w	8000b44 <__udivmoddi4+0x290>
 8000912:	3902      	subs	r1, #2
 8000914:	4462      	add	r2, ip
 8000916:	1a12      	subs	r2, r2, r0
 8000918:	b2a4      	uxth	r4, r4
 800091a:	fbb2 f0fe 	udiv	r0, r2, lr
 800091e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000922:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000926:	fb00 f505 	mul.w	r5, r0, r5
 800092a:	42a5      	cmp	r5, r4
 800092c:	d90a      	bls.n	8000944 <__udivmoddi4+0x90>
 800092e:	eb1c 0404 	adds.w	r4, ip, r4
 8000932:	f100 32ff 	add.w	r2, r0, #4294967295
 8000936:	f080 8107 	bcs.w	8000b48 <__udivmoddi4+0x294>
 800093a:	42a5      	cmp	r5, r4
 800093c:	f240 8104 	bls.w	8000b48 <__udivmoddi4+0x294>
 8000940:	4464      	add	r4, ip
 8000942:	3802      	subs	r0, #2
 8000944:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000948:	1b64      	subs	r4, r4, r5
 800094a:	2100      	movs	r1, #0
 800094c:	b11e      	cbz	r6, 8000956 <__udivmoddi4+0xa2>
 800094e:	40dc      	lsrs	r4, r3
 8000950:	2300      	movs	r3, #0
 8000952:	e9c6 4300 	strd	r4, r3, [r6]
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	428b      	cmp	r3, r1
 800095c:	d908      	bls.n	8000970 <__udivmoddi4+0xbc>
 800095e:	2e00      	cmp	r6, #0
 8000960:	f000 80ed 	beq.w	8000b3e <__udivmoddi4+0x28a>
 8000964:	2100      	movs	r1, #0
 8000966:	e9c6 0500 	strd	r0, r5, [r6]
 800096a:	4608      	mov	r0, r1
 800096c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000970:	fab3 f183 	clz	r1, r3
 8000974:	2900      	cmp	r1, #0
 8000976:	d149      	bne.n	8000a0c <__udivmoddi4+0x158>
 8000978:	42ab      	cmp	r3, r5
 800097a:	d302      	bcc.n	8000982 <__udivmoddi4+0xce>
 800097c:	4282      	cmp	r2, r0
 800097e:	f200 80f8 	bhi.w	8000b72 <__udivmoddi4+0x2be>
 8000982:	1a84      	subs	r4, r0, r2
 8000984:	eb65 0203 	sbc.w	r2, r5, r3
 8000988:	2001      	movs	r0, #1
 800098a:	4617      	mov	r7, r2
 800098c:	2e00      	cmp	r6, #0
 800098e:	d0e2      	beq.n	8000956 <__udivmoddi4+0xa2>
 8000990:	e9c6 4700 	strd	r4, r7, [r6]
 8000994:	e7df      	b.n	8000956 <__udivmoddi4+0xa2>
 8000996:	b902      	cbnz	r2, 800099a <__udivmoddi4+0xe6>
 8000998:	deff      	udf	#255	; 0xff
 800099a:	fab2 f382 	clz	r3, r2
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f040 8090 	bne.w	8000ac4 <__udivmoddi4+0x210>
 80009a4:	1a8a      	subs	r2, r1, r2
 80009a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009aa:	fa1f fe8c 	uxth.w	lr, ip
 80009ae:	2101      	movs	r1, #1
 80009b0:	fbb2 f5f7 	udiv	r5, r2, r7
 80009b4:	fb07 2015 	mls	r0, r7, r5, r2
 80009b8:	0c22      	lsrs	r2, r4, #16
 80009ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009be:	fb0e f005 	mul.w	r0, lr, r5
 80009c2:	4290      	cmp	r0, r2
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x124>
 80009c6:	eb1c 0202 	adds.w	r2, ip, r2
 80009ca:	f105 38ff 	add.w	r8, r5, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x122>
 80009d0:	4290      	cmp	r0, r2
 80009d2:	f200 80cb 	bhi.w	8000b6c <__udivmoddi4+0x2b8>
 80009d6:	4645      	mov	r5, r8
 80009d8:	1a12      	subs	r2, r2, r0
 80009da:	b2a4      	uxth	r4, r4
 80009dc:	fbb2 f0f7 	udiv	r0, r2, r7
 80009e0:	fb07 2210 	mls	r2, r7, r0, r2
 80009e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009e8:	fb0e fe00 	mul.w	lr, lr, r0
 80009ec:	45a6      	cmp	lr, r4
 80009ee:	d908      	bls.n	8000a02 <__udivmoddi4+0x14e>
 80009f0:	eb1c 0404 	adds.w	r4, ip, r4
 80009f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009f8:	d202      	bcs.n	8000a00 <__udivmoddi4+0x14c>
 80009fa:	45a6      	cmp	lr, r4
 80009fc:	f200 80bb 	bhi.w	8000b76 <__udivmoddi4+0x2c2>
 8000a00:	4610      	mov	r0, r2
 8000a02:	eba4 040e 	sub.w	r4, r4, lr
 8000a06:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a0a:	e79f      	b.n	800094c <__udivmoddi4+0x98>
 8000a0c:	f1c1 0720 	rsb	r7, r1, #32
 8000a10:	408b      	lsls	r3, r1
 8000a12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a1a:	fa05 f401 	lsl.w	r4, r5, r1
 8000a1e:	fa20 f307 	lsr.w	r3, r0, r7
 8000a22:	40fd      	lsrs	r5, r7
 8000a24:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a28:	4323      	orrs	r3, r4
 8000a2a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a2e:	fa1f fe8c 	uxth.w	lr, ip
 8000a32:	fb09 5518 	mls	r5, r9, r8, r5
 8000a36:	0c1c      	lsrs	r4, r3, #16
 8000a38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a3c:	fb08 f50e 	mul.w	r5, r8, lr
 8000a40:	42a5      	cmp	r5, r4
 8000a42:	fa02 f201 	lsl.w	r2, r2, r1
 8000a46:	fa00 f001 	lsl.w	r0, r0, r1
 8000a4a:	d90b      	bls.n	8000a64 <__udivmoddi4+0x1b0>
 8000a4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a54:	f080 8088 	bcs.w	8000b68 <__udivmoddi4+0x2b4>
 8000a58:	42a5      	cmp	r5, r4
 8000a5a:	f240 8085 	bls.w	8000b68 <__udivmoddi4+0x2b4>
 8000a5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a62:	4464      	add	r4, ip
 8000a64:	1b64      	subs	r4, r4, r5
 8000a66:	b29d      	uxth	r5, r3
 8000a68:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a6c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a70:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a74:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a78:	45a6      	cmp	lr, r4
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x1da>
 8000a7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a80:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a84:	d26c      	bcs.n	8000b60 <__udivmoddi4+0x2ac>
 8000a86:	45a6      	cmp	lr, r4
 8000a88:	d96a      	bls.n	8000b60 <__udivmoddi4+0x2ac>
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	4464      	add	r4, ip
 8000a8e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a92:	fba3 9502 	umull	r9, r5, r3, r2
 8000a96:	eba4 040e 	sub.w	r4, r4, lr
 8000a9a:	42ac      	cmp	r4, r5
 8000a9c:	46c8      	mov	r8, r9
 8000a9e:	46ae      	mov	lr, r5
 8000aa0:	d356      	bcc.n	8000b50 <__udivmoddi4+0x29c>
 8000aa2:	d053      	beq.n	8000b4c <__udivmoddi4+0x298>
 8000aa4:	b156      	cbz	r6, 8000abc <__udivmoddi4+0x208>
 8000aa6:	ebb0 0208 	subs.w	r2, r0, r8
 8000aaa:	eb64 040e 	sbc.w	r4, r4, lr
 8000aae:	fa04 f707 	lsl.w	r7, r4, r7
 8000ab2:	40ca      	lsrs	r2, r1
 8000ab4:	40cc      	lsrs	r4, r1
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	e9c6 7400 	strd	r7, r4, [r6]
 8000abc:	4618      	mov	r0, r3
 8000abe:	2100      	movs	r1, #0
 8000ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac4:	f1c3 0120 	rsb	r1, r3, #32
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ad0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ad4:	409d      	lsls	r5, r3
 8000ad6:	432a      	orrs	r2, r5
 8000ad8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000adc:	fa1f fe8c 	uxth.w	lr, ip
 8000ae0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ae4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ae8:	0c11      	lsrs	r1, r2, #16
 8000aea:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000aee:	fb00 f50e 	mul.w	r5, r0, lr
 8000af2:	428d      	cmp	r5, r1
 8000af4:	fa04 f403 	lsl.w	r4, r4, r3
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x258>
 8000afa:	eb1c 0101 	adds.w	r1, ip, r1
 8000afe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b02:	d22f      	bcs.n	8000b64 <__udivmoddi4+0x2b0>
 8000b04:	428d      	cmp	r5, r1
 8000b06:	d92d      	bls.n	8000b64 <__udivmoddi4+0x2b0>
 8000b08:	3802      	subs	r0, #2
 8000b0a:	4461      	add	r1, ip
 8000b0c:	1b49      	subs	r1, r1, r5
 8000b0e:	b292      	uxth	r2, r2
 8000b10:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b14:	fb07 1115 	mls	r1, r7, r5, r1
 8000b18:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b1c:	fb05 f10e 	mul.w	r1, r5, lr
 8000b20:	4291      	cmp	r1, r2
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x282>
 8000b24:	eb1c 0202 	adds.w	r2, ip, r2
 8000b28:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b2c:	d216      	bcs.n	8000b5c <__udivmoddi4+0x2a8>
 8000b2e:	4291      	cmp	r1, r2
 8000b30:	d914      	bls.n	8000b5c <__udivmoddi4+0x2a8>
 8000b32:	3d02      	subs	r5, #2
 8000b34:	4462      	add	r2, ip
 8000b36:	1a52      	subs	r2, r2, r1
 8000b38:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b3c:	e738      	b.n	80009b0 <__udivmoddi4+0xfc>
 8000b3e:	4631      	mov	r1, r6
 8000b40:	4630      	mov	r0, r6
 8000b42:	e708      	b.n	8000956 <__udivmoddi4+0xa2>
 8000b44:	4639      	mov	r1, r7
 8000b46:	e6e6      	b.n	8000916 <__udivmoddi4+0x62>
 8000b48:	4610      	mov	r0, r2
 8000b4a:	e6fb      	b.n	8000944 <__udivmoddi4+0x90>
 8000b4c:	4548      	cmp	r0, r9
 8000b4e:	d2a9      	bcs.n	8000aa4 <__udivmoddi4+0x1f0>
 8000b50:	ebb9 0802 	subs.w	r8, r9, r2
 8000b54:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	e7a3      	b.n	8000aa4 <__udivmoddi4+0x1f0>
 8000b5c:	4645      	mov	r5, r8
 8000b5e:	e7ea      	b.n	8000b36 <__udivmoddi4+0x282>
 8000b60:	462b      	mov	r3, r5
 8000b62:	e794      	b.n	8000a8e <__udivmoddi4+0x1da>
 8000b64:	4640      	mov	r0, r8
 8000b66:	e7d1      	b.n	8000b0c <__udivmoddi4+0x258>
 8000b68:	46d0      	mov	r8, sl
 8000b6a:	e77b      	b.n	8000a64 <__udivmoddi4+0x1b0>
 8000b6c:	3d02      	subs	r5, #2
 8000b6e:	4462      	add	r2, ip
 8000b70:	e732      	b.n	80009d8 <__udivmoddi4+0x124>
 8000b72:	4608      	mov	r0, r1
 8000b74:	e70a      	b.n	800098c <__udivmoddi4+0xd8>
 8000b76:	4464      	add	r4, ip
 8000b78:	3802      	subs	r0, #2
 8000b7a:	e742      	b.n	8000a02 <__udivmoddi4+0x14e>

08000b7c <__aeabi_idiv0>:
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b5b0      	push	{r4, r5, r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b86:	f000 fc02 	bl	800138e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8a:	f000 f84b 	bl	8000c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8e:	f000 f983 	bl	8000e98 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000b92:	f000 f893 	bl	8000cbc <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000b96:	f000 f8db 	bl	8000d50 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000b9a:	f000 f92f 	bl	8000dfc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000b9e:	213c      	movs	r1, #60	; 0x3c
 8000ba0:	4819      	ldr	r0, [pc, #100]	; (8000c08 <main+0x88>)
 8000ba2:	f002 f8d9 	bl	8002d58 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000ba6:	4819      	ldr	r0, [pc, #100]	; (8000c0c <main+0x8c>)
 8000ba8:	f001 ffb8 	bl	8002b1c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <main+0x88>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb2:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <main+0x90>)
 8000bb4:	6013      	str	r3, [r2, #0]
	  radian = (QEIReadRaw*360)/3072;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <main+0x90>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000bbe:	fb02 f303 	mul.w	r3, r2, r3
 8000bc2:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <main+0x94>)
 8000bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc8:	0adb      	lsrs	r3, r3, #11
 8000bca:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <main+0x98>)
 8000bcc:	6013      	str	r3, [r2, #0]
	  static uint64_t timestamp =0;
	  int64_t currentTime = micros();
 8000bce:	f000 fa63 	bl	8001098 <micros>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	e9c7 2300 	strd	r2, r3, [r7]
	  if(currentTime > timestamp)
 8000bda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bde:	490f      	ldr	r1, [pc, #60]	; (8000c1c <main+0x9c>)
 8000be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000be4:	4290      	cmp	r0, r2
 8000be6:	eb71 0303 	sbcs.w	r3, r1, r3
 8000bea:	d2df      	bcs.n	8000bac <main+0x2c>
	  {
	  timestamp =currentTime + 100000;//us
 8000bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bf0:	490b      	ldr	r1, [pc, #44]	; (8000c20 <main+0xa0>)
 8000bf2:	1854      	adds	r4, r2, r1
 8000bf4:	f143 0500 	adc.w	r5, r3, #0
 8000bf8:	4622      	mov	r2, r4
 8000bfa:	462b      	mov	r3, r5
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <main+0x9c>)
 8000bfe:	e9c1 2300 	strd	r2, r3, [r1]
	  QEIEncoderPosVel_Update();
 8000c02:	f000 f9b9 	bl	8000f78 <QEIEncoderPosVel_Update>
  {
 8000c06:	e7d1      	b.n	8000bac <main+0x2c>
 8000c08:	200000c0 	.word	0x200000c0
 8000c0c:	2000010c 	.word	0x2000010c
 8000c10:	20000158 	.word	0x20000158
 8000c14:	aaaaaaab 	.word	0xaaaaaaab
 8000c18:	2000015c 	.word	0x2000015c
 8000c1c:	20000188 	.word	0x20000188
 8000c20:	000186a0 	.word	0x000186a0

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b094      	sub	sp, #80	; 0x50
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	2238      	movs	r2, #56	; 0x38
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 fc6c 	bl	8004510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 fee0 	bl	8001a0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c56:	2340      	movs	r3, #64	; 0x40
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c62:	2304      	movs	r3, #4
 8000c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c66:	2355      	movs	r3, #85	; 0x55
 8000c68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c72:	2302      	movs	r3, #2
 8000c74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c76:	f107 0318 	add.w	r3, r7, #24
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 ff7a 	bl	8001b74 <HAL_RCC_OscConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c86:	f000 fa21 	bl	80010cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 fa78 	bl	8002198 <HAL_RCC_ClockConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000cae:	f000 fa0d 	bl	80010cc <Error_Handler>
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	3750      	adds	r7, #80	; 0x50
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000cc0:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <MX_LPUART1_UART_Init+0x8c>)
 8000cc2:	4a22      	ldr	r2, [pc, #136]	; (8000d4c <MX_LPUART1_UART_Init+0x90>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000cc6:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <MX_LPUART1_UART_Init+0x8c>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <MX_LPUART1_UART_Init+0x8c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <MX_LPUART1_UART_Init+0x8c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <MX_LPUART1_UART_Init+0x8c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_LPUART1_UART_Init+0x8c>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <MX_LPUART1_UART_Init+0x8c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_LPUART1_UART_Init+0x8c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <MX_LPUART1_UART_Init+0x8c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <MX_LPUART1_UART_Init+0x8c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000cfe:	4812      	ldr	r0, [pc, #72]	; (8000d48 <MX_LPUART1_UART_Init+0x8c>)
 8000d00:	f002 fd98 	bl	8003834 <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d0a:	f000 f9df 	bl	80010cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d0e:	2100      	movs	r1, #0
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <MX_LPUART1_UART_Init+0x8c>)
 8000d12:	f003 fb33 	bl	800437c <HAL_UARTEx_SetTxFifoThreshold>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000d1c:	f000 f9d6 	bl	80010cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d20:	2100      	movs	r1, #0
 8000d22:	4809      	ldr	r0, [pc, #36]	; (8000d48 <MX_LPUART1_UART_Init+0x8c>)
 8000d24:	f003 fb68 	bl	80043f8 <HAL_UARTEx_SetRxFifoThreshold>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000d2e:	f000 f9cd 	bl	80010cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_LPUART1_UART_Init+0x8c>)
 8000d34:	f003 fae9 	bl	800430a <HAL_UARTEx_DisableFifoMode>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000d3e:	f000 f9c5 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	2000002c 	.word	0x2000002c
 8000d4c:	40008000 	.word	0x40008000

08000d50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	; 0x30
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	2224      	movs	r2, #36	; 0x24
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f003 fbd6 	bl	8004510 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	463b      	mov	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <MX_TIM3_Init+0xa4>)
 8000d70:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <MX_TIM3_Init+0xa8>)
 8000d72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <MX_TIM3_Init+0xa4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7a:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <MX_TIM3_Init+0xa4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 8000d80:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <MX_TIM3_Init+0xa4>)
 8000d82:	f640 32ff 	movw	r2, #3071	; 0xbff
 8000d86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <MX_TIM3_Init+0xa4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <MX_TIM3_Init+0xa4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d94:	2303      	movs	r3, #3
 8000d96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dac:	2301      	movs	r3, #1
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480d      	ldr	r0, [pc, #52]	; (8000df4 <MX_TIM3_Init+0xa4>)
 8000dc0:	f001 ff24 	bl	8002c0c <HAL_TIM_Encoder_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000dca:	f000 f97f 	bl	80010cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <MX_TIM3_Init+0xa4>)
 8000ddc:	f002 fc4e 	bl	800367c <HAL_TIMEx_MasterConfigSynchronization>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000de6:	f000 f971 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	3730      	adds	r7, #48	; 0x30
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200000c0 	.word	0x200000c0
 8000df8:	40000400 	.word	0x40000400

08000dfc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <MX_TIM5_Init+0x94>)
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <MX_TIM5_Init+0x98>)
 8000e1e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <MX_TIM5_Init+0x94>)
 8000e22:	22a9      	movs	r2, #169	; 0xa9
 8000e24:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_TIM5_Init+0x94>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <MX_TIM5_Init+0x94>)
 8000e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e32:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <MX_TIM5_Init+0x94>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <MX_TIM5_Init+0x94>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e40:	4813      	ldr	r0, [pc, #76]	; (8000e90 <MX_TIM5_Init+0x94>)
 8000e42:	f001 fe13 	bl	8002a6c <HAL_TIM_Base_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e4c:	f000 f93e 	bl	80010cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <MX_TIM5_Init+0x94>)
 8000e5e:	f002 f959 	bl	8003114 <HAL_TIM_ConfigClockSource>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000e68:	f000 f930 	bl	80010cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_TIM5_Init+0x94>)
 8000e7a:	f002 fbff 	bl	800367c <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000e84:	f000 f922 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	3720      	adds	r7, #32
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000010c 	.word	0x2000010c
 8000e94:	40000c00 	.word	0x40000c00

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <MX_GPIO_Init+0xd4>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	4a2e      	ldr	r2, [pc, #184]	; (8000f6c <MX_GPIO_Init+0xd4>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eba:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <MX_GPIO_Init+0xd4>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ec6:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <MX_GPIO_Init+0xd4>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	4a28      	ldr	r2, [pc, #160]	; (8000f6c <MX_GPIO_Init+0xd4>)
 8000ecc:	f043 0320 	orr.w	r3, r3, #32
 8000ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <MX_GPIO_Init+0xd4>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	f003 0320 	and.w	r3, r3, #32
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <MX_GPIO_Init+0xd4>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	4a22      	ldr	r2, [pc, #136]	; (8000f6c <MX_GPIO_Init+0xd4>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eea:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <MX_GPIO_Init+0xd4>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <MX_GPIO_Init+0xd4>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	4a1c      	ldr	r2, [pc, #112]	; (8000f6c <MX_GPIO_Init+0xd4>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <MX_GPIO_Init+0xd4>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2120      	movs	r1, #32
 8000f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f16:	f000 fd3d 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480f      	ldr	r0, [pc, #60]	; (8000f70 <MX_GPIO_Init+0xd8>)
 8000f32:	f000 fbad 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f36:	2320      	movs	r3, #32
 8000f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f50:	f000 fb9e 	bl	8001690 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2100      	movs	r1, #0
 8000f58:	2028      	movs	r0, #40	; 0x28
 8000f5a:	f000 fb64 	bl	8001626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f5e:	2028      	movs	r0, #40	; 0x28
 8000f60:	f000 fb7b 	bl	800165a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f64:	bf00      	nop
 8000f66:	3728      	adds	r7, #40	; 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	48000800 	.word	0x48000800
 8000f74:	00000000 	.word	0x00000000

08000f78 <QEIEncoderPosVel_Update>:

/* USER CODE BEGIN 4 */
void QEIEncoderPosVel_Update()
{
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
//collect data
	QEIdata.TimeStamp[NEW] = micros();
 8000f7e:	f000 f88b 	bl	8001098 <micros>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4934      	ldr	r1, [pc, #208]	; (8001058 <QEIEncoderPosVel_Update+0xe0>)
 8000f88:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8000f8c:	4b33      	ldr	r3, [pc, #204]	; (800105c <QEIEncoderPosVel_Update+0xe4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	4a31      	ldr	r2, [pc, #196]	; (8001058 <QEIEncoderPosVel_Update+0xe0>)
 8000f94:	6013      	str	r3, [r2, #0]
	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 3072;
 8000f96:	4b30      	ldr	r3, [pc, #192]	; (8001058 <QEIEncoderPosVel_Update+0xe0>)
 8000f98:	6819      	ldr	r1, [r3, #0]
 8000f9a:	4b31      	ldr	r3, [pc, #196]	; (8001060 <QEIEncoderPosVel_Update+0xe8>)
 8000f9c:	fba3 2301 	umull	r2, r3, r3, r1
 8000fa0:	0ada      	lsrs	r2, r3, #11
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	029b      	lsls	r3, r3, #10
 8000faa:	1aca      	subs	r2, r1, r3
 8000fac:	ee07 2a90 	vmov	s15, r2
 8000fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <QEIEncoderPosVel_Update+0xe0>)
 8000fb6:	edc3 7a06 	vstr	s15, [r3, #24]
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8000fba:	4b27      	ldr	r3, [pc, #156]	; (8001058 <QEIEncoderPosVel_Update+0xe0>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <QEIEncoderPosVel_Update+0xe0>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	607b      	str	r3, [r7, #4]
	//Handle Warp around
	if(diffPosition > 32256)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f5b3 4ffc 	cmp.w	r3, #32256	; 0x7e00
 8000fcc:	dd03      	ble.n	8000fd6 <QEIEncoderPosVel_Update+0x5e>
	diffPosition -=64512;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8000fd4:	607b      	str	r3, [r7, #4]
	if(diffPosition < -32256)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f513 4ffc 	cmn.w	r3, #32256	; 0x7e00
 8000fdc:	da03      	bge.n	8000fe6 <QEIEncoderPosVel_Update+0x6e>
	diffPosition +=64512;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8000fe4:	607b      	str	r3, [r7, #4]
	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <QEIEncoderPosVel_Update+0xe0>)
 8000fe8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000fec:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <QEIEncoderPosVel_Update+0xe0>)
 8000fee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000ff2:	1a84      	subs	r4, r0, r2
 8000ff4:	eb61 0503 	sbc.w	r5, r1, r3
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	f7ff fbbc 	bl	8000778 <__aeabi_ul2d>
 8001000:	a313      	add	r3, pc, #76	; (adr r3, 8001050 <QEIEncoderPosVel_Update+0xd8>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	f7ff f907 	bl	8000218 <__aeabi_dmul>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fbe7 	bl	80007e4 <__aeabi_d2f>
 8001016:	4603      	mov	r3, r0
 8001018:	603b      	str	r3, [r7, #0]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	ee07 3a90 	vmov	s15, r3
 8001020:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001024:	ed97 7a00 	vldr	s14, [r7]
 8001028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <QEIEncoderPosVel_Update+0xe0>)
 800102e:	edc3 7a07 	vstr	s15, [r3, #28]
	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <QEIEncoderPosVel_Update+0xe0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <QEIEncoderPosVel_Update+0xe0>)
 8001038:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <QEIEncoderPosVel_Update+0xe0>)
 800103c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001040:	4905      	ldr	r1, [pc, #20]	; (8001058 <QEIEncoderPosVel_Update+0xe0>)
 8001042:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bdb0      	pop	{r4, r5, r7, pc}
 800104e:	bf00      	nop
 8001050:	a0b5ed8d 	.word	0xa0b5ed8d
 8001054:	3eb0c6f7 	.word	0x3eb0c6f7
 8001058:	20000160 	.word	0x20000160
 800105c:	200000c0 	.word	0x200000c0
 8001060:	aaaaaaab 	.word	0xaaaaaaab

08001064 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8001064:	b4b0      	push	{r4, r5, r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d108      	bne.n	8001086 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
	_micros += UINT32_MAX;
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	1e54      	subs	r4, r2, #1
 800107c:	f143 0500 	adc.w	r5, r3, #0
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001082:	e9c3 4500 	strd	r4, r5, [r3]
	}
	}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bcb0      	pop	{r4, r5, r7}
 800108e:	4770      	bx	lr
 8001090:	2000010c 	.word	0x2000010c
 8001094:	20000180 	.word	0x20000180

08001098 <micros>:
uint64_t micros()
{
 8001098:	b4b0      	push	{r4, r5, r7}
 800109a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <micros+0x2c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	2200      	movs	r2, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	4611      	mov	r1, r2
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <micros+0x30>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	1884      	adds	r4, r0, r2
 80010b0:	eb41 0503 	adc.w	r5, r1, r3
 80010b4:	4622      	mov	r2, r4
 80010b6:	462b      	mov	r3, r5
}
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	bcb0      	pop	{r4, r5, r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	2000010c 	.word	0x2000010c
 80010c8:	20000180 	.word	0x20000180

080010cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d0:	b672      	cpsid	i
}
 80010d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <Error_Handler+0x8>
	...

080010d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_MspInit+0x44>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_MspInit+0x44>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_MspInit+0x44>)
 80010ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_MspInit+0x44>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <HAL_MspInit+0x44>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	6593      	str	r3, [r2, #88]	; 0x58
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_MspInit+0x44>)
 8001104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800110e:	f000 fd21 	bl	8001b54 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b09e      	sub	sp, #120	; 0x78
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	2254      	movs	r2, #84	; 0x54
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f003 f9e5 	bl	8004510 <memset>
  if(huart->Instance==LPUART1)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a1f      	ldr	r2, [pc, #124]	; (80011c8 <HAL_UART_MspInit+0xa8>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d136      	bne.n	80011be <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001150:	2320      	movs	r3, #32
 8001152:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fa37 	bl	80025d0 <HAL_RCCEx_PeriphCLKConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001168:	f7ff ffb0 	bl	80010cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_UART_MspInit+0xac>)
 800116e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001170:	4a16      	ldr	r2, [pc, #88]	; (80011cc <HAL_UART_MspInit+0xac>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_UART_MspInit+0xac>)
 800117a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_UART_MspInit+0xac>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	4a10      	ldr	r2, [pc, #64]	; (80011cc <HAL_UART_MspInit+0xac>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_UART_MspInit+0xac>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800119c:	230c      	movs	r3, #12
 800119e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80011ac:	230c      	movs	r3, #12
 80011ae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ba:	f000 fa69 	bl	8001690 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3778      	adds	r7, #120	; 0x78
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40008000 	.word	0x40008000
 80011cc:	40021000 	.word	0x40021000

080011d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a17      	ldr	r2, [pc, #92]	; (800124c <HAL_TIM_Encoder_MspInit+0x7c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d128      	bne.n	8001244 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_TIM_Encoder_MspInit+0x80>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	4a16      	ldr	r2, [pc, #88]	; (8001250 <HAL_TIM_Encoder_MspInit+0x80>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6593      	str	r3, [r2, #88]	; 0x58
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <HAL_TIM_Encoder_MspInit+0x80>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_TIM_Encoder_MspInit+0x80>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <HAL_TIM_Encoder_MspInit+0x80>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_TIM_Encoder_MspInit+0x80>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001222:	23c0      	movs	r3, #192	; 0xc0
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001232:	2302      	movs	r3, #2
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001240:	f000 fa26 	bl	8001690 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001244:	bf00      	nop
 8001246:	3728      	adds	r7, #40	; 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40000400 	.word	0x40000400
 8001250:	40021000 	.word	0x40021000

08001254 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <HAL_TIM_Base_MspInit+0x44>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d113      	bne.n	800128e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_TIM_Base_MspInit+0x48>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126a:	4a0c      	ldr	r2, [pc, #48]	; (800129c <HAL_TIM_Base_MspInit+0x48>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	6593      	str	r3, [r2, #88]	; 0x58
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_TIM_Base_MspInit+0x48>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2032      	movs	r0, #50	; 0x32
 8001284:	f000 f9cf 	bl	8001626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001288:	2032      	movs	r0, #50	; 0x32
 800128a:	f000 f9e6 	bl	800165a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40000c00 	.word	0x40000c00
 800129c:	40021000 	.word	0x40021000

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <NMI_Handler+0x4>

080012a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <MemManage_Handler+0x4>

080012b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <UsageFault_Handler+0x4>

080012be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ec:	f000 f8a2 	bl	8001434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012fc:	f000 fb62 	bl	80019c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}

08001304 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <TIM5_IRQHandler+0x10>)
 800130a:	f001 fdb3 	bl	8002e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000010c 	.word	0x2000010c

08001318 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SystemInit+0x20>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <SystemInit+0x20>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800133c:	480d      	ldr	r0, [pc, #52]	; (8001374 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800133e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001340:	f7ff ffea 	bl	8001318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <LoopForever+0x6>)
  ldr r1, =_edata
 8001346:	490d      	ldr	r1, [pc, #52]	; (800137c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001348:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <LoopForever+0xe>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800135c:	4c0a      	ldr	r4, [pc, #40]	; (8001388 <LoopForever+0x16>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136a:	f003 f8d9 	bl	8004520 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800136e:	f7ff fc07 	bl	8000b80 <main>

08001372 <LoopForever>:

LoopForever:
    b LoopForever
 8001372:	e7fe      	b.n	8001372 <LoopForever>
  ldr   r0, =_estack
 8001374:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001380:	080045d0 	.word	0x080045d0
  ldr r2, =_sbss
 8001384:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001388:	20000194 	.word	0x20000194

0800138c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC1_2_IRQHandler>

0800138e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001398:	2003      	movs	r0, #3
 800139a:	f000 f939 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800139e:	2000      	movs	r0, #0
 80013a0:	f000 f80e 	bl	80013c0 <HAL_InitTick>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	e001      	b.n	80013b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013b0:	f7ff fe92 	bl	80010d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013b4:	79fb      	ldrb	r3, [r7, #7]

}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <HAL_InitTick+0x68>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d022      	beq.n	800141a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_InitTick+0x6c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <HAL_InitTick+0x68>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 f944 	bl	8001676 <HAL_SYSTICK_Config>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10f      	bne.n	8001414 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b0f      	cmp	r3, #15
 80013f8:	d809      	bhi.n	800140e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fa:	2200      	movs	r2, #0
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001402:	f000 f910 	bl	8001626 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_InitTick+0x70>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	e007      	b.n	800141e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]
 8001412:	e004      	b.n	800141e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
 8001418:	e001      	b.n	800141e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800141e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000008 	.word	0x20000008
 800142c:	20000000 	.word	0x20000000
 8001430:	20000004 	.word	0x20000004

08001434 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_IncTick+0x1c>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_IncTick+0x20>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4413      	add	r3, r2
 8001442:	4a03      	ldr	r2, [pc, #12]	; (8001450 <HAL_IncTick+0x1c>)
 8001444:	6013      	str	r3, [r2, #0]
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	20000190 	.word	0x20000190
 8001454:	20000008 	.word	0x20000008

08001458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return uwTick;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <HAL_GetTick+0x14>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000190 	.word	0x20000190

08001470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800148c:	4013      	ands	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800149c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a2:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	60d3      	str	r3, [r2, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <__NVIC_GetPriorityGrouping+0x18>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	f003 0307 	and.w	r3, r3, #7
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	db0b      	blt.n	80014fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 021f 	and.w	r2, r3, #31
 80014ec:	4907      	ldr	r1, [pc, #28]	; (800150c <__NVIC_EnableIRQ+0x38>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	2001      	movs	r0, #1
 80014f6:	fa00 f202 	lsl.w	r2, r0, r2
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015dc:	d301      	bcc.n	80015e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2301      	movs	r3, #1
 80015e0:	e00f      	b.n	8001602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <SysTick_Config+0x40>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ea:	210f      	movs	r1, #15
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f7ff ff8e 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <SysTick_Config+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <SysTick_Config+0x40>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff29 	bl	8001470 <__NVIC_SetPriorityGrouping>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001634:	f7ff ff40 	bl	80014b8 <__NVIC_GetPriorityGrouping>
 8001638:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f7ff ff90 	bl	8001564 <NVIC_EncodePriority>
 8001644:	4602      	mov	r2, r0
 8001646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff5f 	bl	8001510 <__NVIC_SetPriority>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff33 	bl	80014d4 <__NVIC_EnableIRQ>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffa4 	bl	80015cc <SysTick_Config>
 8001684:	4603      	mov	r3, r0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800169e:	e15a      	b.n	8001956 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2101      	movs	r1, #1
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	4013      	ands	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 814c 	beq.w	8001950 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d005      	beq.n	80016d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d130      	bne.n	8001732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001706:	2201      	movs	r2, #1
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	091b      	lsrs	r3, r3, #4
 800171c:	f003 0201 	and.w	r2, r3, #1
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	2b03      	cmp	r3, #3
 800173c:	d017      	beq.n	800176e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d123      	bne.n	80017c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	08da      	lsrs	r2, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3208      	adds	r2, #8
 8001782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	220f      	movs	r2, #15
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	691a      	ldr	r2, [r3, #16]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	08da      	lsrs	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3208      	adds	r2, #8
 80017bc:	6939      	ldr	r1, [r7, #16]
 80017be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	2203      	movs	r2, #3
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0203 	and.w	r2, r3, #3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 80a6 	beq.w	8001950 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001804:	4b5b      	ldr	r3, [pc, #364]	; (8001974 <HAL_GPIO_Init+0x2e4>)
 8001806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001808:	4a5a      	ldr	r2, [pc, #360]	; (8001974 <HAL_GPIO_Init+0x2e4>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6613      	str	r3, [r2, #96]	; 0x60
 8001810:	4b58      	ldr	r3, [pc, #352]	; (8001974 <HAL_GPIO_Init+0x2e4>)
 8001812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800181c:	4a56      	ldr	r2, [pc, #344]	; (8001978 <HAL_GPIO_Init+0x2e8>)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001846:	d01f      	beq.n	8001888 <HAL_GPIO_Init+0x1f8>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a4c      	ldr	r2, [pc, #304]	; (800197c <HAL_GPIO_Init+0x2ec>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d019      	beq.n	8001884 <HAL_GPIO_Init+0x1f4>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a4b      	ldr	r2, [pc, #300]	; (8001980 <HAL_GPIO_Init+0x2f0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d013      	beq.n	8001880 <HAL_GPIO_Init+0x1f0>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a4a      	ldr	r2, [pc, #296]	; (8001984 <HAL_GPIO_Init+0x2f4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d00d      	beq.n	800187c <HAL_GPIO_Init+0x1ec>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a49      	ldr	r2, [pc, #292]	; (8001988 <HAL_GPIO_Init+0x2f8>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d007      	beq.n	8001878 <HAL_GPIO_Init+0x1e8>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a48      	ldr	r2, [pc, #288]	; (800198c <HAL_GPIO_Init+0x2fc>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d101      	bne.n	8001874 <HAL_GPIO_Init+0x1e4>
 8001870:	2305      	movs	r3, #5
 8001872:	e00a      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 8001874:	2306      	movs	r3, #6
 8001876:	e008      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 8001878:	2304      	movs	r3, #4
 800187a:	e006      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 800187c:	2303      	movs	r3, #3
 800187e:	e004      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 8001880:	2302      	movs	r3, #2
 8001882:	e002      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 8001888:	2300      	movs	r3, #0
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	f002 0203 	and.w	r2, r2, #3
 8001890:	0092      	lsls	r2, r2, #2
 8001892:	4093      	lsls	r3, r2
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800189a:	4937      	ldr	r1, [pc, #220]	; (8001978 <HAL_GPIO_Init+0x2e8>)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	3302      	adds	r3, #2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018a8:	4b39      	ldr	r3, [pc, #228]	; (8001990 <HAL_GPIO_Init+0x300>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018cc:	4a30      	ldr	r2, [pc, #192]	; (8001990 <HAL_GPIO_Init+0x300>)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_GPIO_Init+0x300>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018f6:	4a26      	ldr	r2, [pc, #152]	; (8001990 <HAL_GPIO_Init+0x300>)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018fc:	4b24      	ldr	r3, [pc, #144]	; (8001990 <HAL_GPIO_Init+0x300>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001920:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <HAL_GPIO_Init+0x300>)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001926:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_GPIO_Init+0x300>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800194a:	4a11      	ldr	r2, [pc, #68]	; (8001990 <HAL_GPIO_Init+0x300>)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	f47f ae9d 	bne.w	80016a0 <HAL_GPIO_Init+0x10>
  }
}
 8001966:	bf00      	nop
 8001968:	bf00      	nop
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	40021000 	.word	0x40021000
 8001978:	40010000 	.word	0x40010000
 800197c:	48000400 	.word	0x48000400
 8001980:	48000800 	.word	0x48000800
 8001984:	48000c00 	.word	0x48000c00
 8001988:	48001000 	.word	0x48001000
 800198c:	48001400 	.word	0x48001400
 8001990:	40010400 	.word	0x40010400

08001994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
 80019a0:	4613      	mov	r3, r2
 80019a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a4:	787b      	ldrb	r3, [r7, #1]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f806 	bl	80019f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40010400 	.word	0x40010400

080019f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d141      	bne.n	8001a9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a1a:	4b4b      	ldr	r3, [pc, #300]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a26:	d131      	bne.n	8001a8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a28:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a2e:	4a46      	ldr	r2, [pc, #280]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a38:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a40:	4a41      	ldr	r2, [pc, #260]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a48:	4b40      	ldr	r3, [pc, #256]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2232      	movs	r2, #50	; 0x32
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	4a3f      	ldr	r2, [pc, #252]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a54:	fba2 2303 	umull	r2, r3, r2, r3
 8001a58:	0c9b      	lsrs	r3, r3, #18
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a5e:	e002      	b.n	8001a66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a66:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a72:	d102      	bne.n	8001a7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f2      	bne.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a7a:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a86:	d158      	bne.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e057      	b.n	8001b3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a92:	4a2d      	ldr	r2, [pc, #180]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a9c:	e04d      	b.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa4:	d141      	bne.n	8001b2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aa6:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab2:	d131      	bne.n	8001b18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aba:	4a23      	ldr	r2, [pc, #140]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ac4:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001acc:	4a1e      	ldr	r2, [pc, #120]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2232      	movs	r2, #50	; 0x32
 8001ada:	fb02 f303 	mul.w	r3, r2, r3
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	0c9b      	lsrs	r3, r3, #18
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aea:	e002      	b.n	8001af2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afe:	d102      	bne.n	8001b06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f2      	bne.n	8001aec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b12:	d112      	bne.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e011      	b.n	8001b3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b28:	e007      	b.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	431bde83 	.word	0x431bde83

08001b54 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b62:	6093      	str	r3, [r2, #8]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40007000 	.word	0x40007000

08001b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e2fe      	b.n	8002184 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d075      	beq.n	8001c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b92:	4b97      	ldr	r3, [pc, #604]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b9c:	4b94      	ldr	r3, [pc, #592]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	2b0c      	cmp	r3, #12
 8001baa:	d102      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3e>
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d002      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x44>
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d10b      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	4b8d      	ldr	r3, [pc, #564]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d05b      	beq.n	8001c7c <HAL_RCC_OscConfig+0x108>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d157      	bne.n	8001c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e2d9      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd8:	d106      	bne.n	8001be8 <HAL_RCC_OscConfig+0x74>
 8001bda:	4b85      	ldr	r3, [pc, #532]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a84      	ldr	r2, [pc, #528]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e01d      	b.n	8001c24 <HAL_RCC_OscConfig+0xb0>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x98>
 8001bf2:	4b7f      	ldr	r3, [pc, #508]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a7e      	ldr	r2, [pc, #504]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b7c      	ldr	r3, [pc, #496]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a7b      	ldr	r2, [pc, #492]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e00b      	b.n	8001c24 <HAL_RCC_OscConfig+0xb0>
 8001c0c:	4b78      	ldr	r3, [pc, #480]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a77      	ldr	r2, [pc, #476]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b75      	ldr	r3, [pc, #468]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a74      	ldr	r2, [pc, #464]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d013      	beq.n	8001c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fc14 	bl	8001458 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c34:	f7ff fc10 	bl	8001458 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e29e      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c46:	4b6a      	ldr	r3, [pc, #424]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0xc0>
 8001c52:	e014      	b.n	8001c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff fc00 	bl	8001458 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff fbfc 	bl	8001458 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e28a      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c6e:	4b60      	ldr	r3, [pc, #384]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0xe8>
 8001c7a:	e000      	b.n	8001c7e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d075      	beq.n	8001d76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c8a:	4b59      	ldr	r3, [pc, #356]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c94:	4b56      	ldr	r3, [pc, #344]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b0c      	cmp	r3, #12
 8001ca2:	d102      	bne.n	8001caa <HAL_RCC_OscConfig+0x136>
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d002      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x13c>
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d11f      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cb0:	4b4f      	ldr	r3, [pc, #316]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x154>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e25d      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc8:	4b49      	ldr	r3, [pc, #292]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	061b      	lsls	r3, r3, #24
 8001cd6:	4946      	ldr	r1, [pc, #280]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cdc:	4b45      	ldr	r3, [pc, #276]	; (8001df4 <HAL_RCC_OscConfig+0x280>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fb6d 	bl	80013c0 <HAL_InitTick>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d043      	beq.n	8001d74 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e249      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d023      	beq.n	8001d40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf8:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a3c      	ldr	r2, [pc, #240]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7ff fba8 	bl	8001458 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fba4 	bl	8001458 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e232      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d1e:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2a:	4b31      	ldr	r3, [pc, #196]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	061b      	lsls	r3, r3, #24
 8001d38:	492d      	ldr	r1, [pc, #180]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	604b      	str	r3, [r1, #4]
 8001d3e:	e01a      	b.n	8001d76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d40:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a2a      	ldr	r2, [pc, #168]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fb84 	bl	8001458 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d54:	f7ff fb80 	bl	8001458 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e20e      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d66:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x1e0>
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d041      	beq.n	8001e06 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d01c      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d90:	4a17      	ldr	r2, [pc, #92]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fb5d 	bl	8001458 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da2:	f7ff fb59 	bl	8001458 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e1e7      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001db4:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0ef      	beq.n	8001da2 <HAL_RCC_OscConfig+0x22e>
 8001dc2:	e020      	b.n	8001e06 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dca:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7ff fb40 	bl	8001458 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dda:	e00d      	b.n	8001df8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fb3c 	bl	8001458 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d906      	bls.n	8001df8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1ca      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001df8:	4b8c      	ldr	r3, [pc, #560]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1ea      	bne.n	8001ddc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80a6 	beq.w	8001f60 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e14:	2300      	movs	r3, #0
 8001e16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e18:	4b84      	ldr	r3, [pc, #528]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_OscConfig+0x2b4>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <HAL_RCC_OscConfig+0x2b6>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00d      	beq.n	8001e4a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	4b7f      	ldr	r3, [pc, #508]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	4a7e      	ldr	r2, [pc, #504]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e38:	6593      	str	r3, [r2, #88]	; 0x58
 8001e3a:	4b7c      	ldr	r3, [pc, #496]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e46:	2301      	movs	r3, #1
 8001e48:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e4a:	4b79      	ldr	r3, [pc, #484]	; (8002030 <HAL_RCC_OscConfig+0x4bc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d118      	bne.n	8001e88 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e56:	4b76      	ldr	r3, [pc, #472]	; (8002030 <HAL_RCC_OscConfig+0x4bc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a75      	ldr	r2, [pc, #468]	; (8002030 <HAL_RCC_OscConfig+0x4bc>)
 8001e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e62:	f7ff faf9 	bl	8001458 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6a:	f7ff faf5 	bl	8001458 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e183      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e7c:	4b6c      	ldr	r3, [pc, #432]	; (8002030 <HAL_RCC_OscConfig+0x4bc>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d108      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x32e>
 8001e90:	4b66      	ldr	r3, [pc, #408]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	4a65      	ldr	r2, [pc, #404]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ea0:	e024      	b.n	8001eec <HAL_RCC_OscConfig+0x378>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b05      	cmp	r3, #5
 8001ea8:	d110      	bne.n	8001ecc <HAL_RCC_OscConfig+0x358>
 8001eaa:	4b60      	ldr	r3, [pc, #384]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	4a5e      	ldr	r2, [pc, #376]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eba:	4b5c      	ldr	r3, [pc, #368]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec0:	4a5a      	ldr	r2, [pc, #360]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eca:	e00f      	b.n	8001eec <HAL_RCC_OscConfig+0x378>
 8001ecc:	4b57      	ldr	r3, [pc, #348]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed2:	4a56      	ldr	r2, [pc, #344]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001edc:	4b53      	ldr	r3, [pc, #332]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee2:	4a52      	ldr	r2, [pc, #328]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001ee4:	f023 0304 	bic.w	r3, r3, #4
 8001ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d016      	beq.n	8001f22 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef4:	f7ff fab0 	bl	8001458 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efc:	f7ff faac 	bl	8001458 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e138      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f12:	4b46      	ldr	r3, [pc, #280]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0ed      	beq.n	8001efc <HAL_RCC_OscConfig+0x388>
 8001f20:	e015      	b.n	8001f4e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f22:	f7ff fa99 	bl	8001458 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f7ff fa95 	bl	8001458 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e121      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f40:	4b3a      	ldr	r3, [pc, #232]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1ed      	bne.n	8001f2a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f4e:	7ffb      	ldrb	r3, [r7, #31]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f54:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	4a34      	ldr	r2, [pc, #208]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d03c      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d01c      	beq.n	8001fae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f74:	4b2d      	ldr	r3, [pc, #180]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f7a:	4a2c      	ldr	r2, [pc, #176]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f84:	f7ff fa68 	bl	8001458 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f8c:	f7ff fa64 	bl	8001458 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e0f2      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f9e:	4b23      	ldr	r3, [pc, #140]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001fa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0ef      	beq.n	8001f8c <HAL_RCC_OscConfig+0x418>
 8001fac:	e01b      	b.n	8001fe6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001fb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbe:	f7ff fa4b 	bl	8001458 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fc6:	f7ff fa47 	bl	8001458 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e0d5      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001fda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1ef      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 80c9 	beq.w	8002182 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	f000 8083 	beq.w	8002104 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d15e      	bne.n	80020c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a08      	ldr	r2, [pc, #32]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 800200c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7ff fa21 	bl	8001458 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002018:	e00c      	b.n	8002034 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201a:	f7ff fa1d 	bl	8001458 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d905      	bls.n	8002034 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e0ab      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
 800202c:	40021000 	.word	0x40021000
 8002030:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002034:	4b55      	ldr	r3, [pc, #340]	; (800218c <HAL_RCC_OscConfig+0x618>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1ec      	bne.n	800201a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002040:	4b52      	ldr	r3, [pc, #328]	; (800218c <HAL_RCC_OscConfig+0x618>)
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	4b52      	ldr	r3, [pc, #328]	; (8002190 <HAL_RCC_OscConfig+0x61c>)
 8002046:	4013      	ands	r3, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6a11      	ldr	r1, [r2, #32]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002050:	3a01      	subs	r2, #1
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	4311      	orrs	r1, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800205a:	0212      	lsls	r2, r2, #8
 800205c:	4311      	orrs	r1, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002062:	0852      	lsrs	r2, r2, #1
 8002064:	3a01      	subs	r2, #1
 8002066:	0552      	lsls	r2, r2, #21
 8002068:	4311      	orrs	r1, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800206e:	0852      	lsrs	r2, r2, #1
 8002070:	3a01      	subs	r2, #1
 8002072:	0652      	lsls	r2, r2, #25
 8002074:	4311      	orrs	r1, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800207a:	06d2      	lsls	r2, r2, #27
 800207c:	430a      	orrs	r2, r1
 800207e:	4943      	ldr	r1, [pc, #268]	; (800218c <HAL_RCC_OscConfig+0x618>)
 8002080:	4313      	orrs	r3, r2
 8002082:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002084:	4b41      	ldr	r3, [pc, #260]	; (800218c <HAL_RCC_OscConfig+0x618>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a40      	ldr	r2, [pc, #256]	; (800218c <HAL_RCC_OscConfig+0x618>)
 800208a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800208e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002090:	4b3e      	ldr	r3, [pc, #248]	; (800218c <HAL_RCC_OscConfig+0x618>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4a3d      	ldr	r2, [pc, #244]	; (800218c <HAL_RCC_OscConfig+0x618>)
 8002096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800209a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7ff f9dc 	bl	8001458 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a4:	f7ff f9d8 	bl	8001458 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e066      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b6:	4b35      	ldr	r3, [pc, #212]	; (800218c <HAL_RCC_OscConfig+0x618>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x530>
 80020c2:	e05e      	b.n	8002182 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c4:	4b31      	ldr	r3, [pc, #196]	; (800218c <HAL_RCC_OscConfig+0x618>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a30      	ldr	r2, [pc, #192]	; (800218c <HAL_RCC_OscConfig+0x618>)
 80020ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7ff f9c2 	bl	8001458 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7ff f9be 	bl	8001458 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e04c      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ea:	4b28      	ldr	r3, [pc, #160]	; (800218c <HAL_RCC_OscConfig+0x618>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020f6:	4b25      	ldr	r3, [pc, #148]	; (800218c <HAL_RCC_OscConfig+0x618>)
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	4924      	ldr	r1, [pc, #144]	; (800218c <HAL_RCC_OscConfig+0x618>)
 80020fc:	4b25      	ldr	r3, [pc, #148]	; (8002194 <HAL_RCC_OscConfig+0x620>)
 80020fe:	4013      	ands	r3, r2
 8002100:	60cb      	str	r3, [r1, #12]
 8002102:	e03e      	b.n	8002182 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e039      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <HAL_RCC_OscConfig+0x618>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f003 0203 	and.w	r2, r3, #3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	429a      	cmp	r2, r3
 8002122:	d12c      	bne.n	800217e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	3b01      	subs	r3, #1
 8002130:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	429a      	cmp	r2, r3
 8002134:	d123      	bne.n	800217e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d11b      	bne.n	800217e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d113      	bne.n	800217e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	085b      	lsrs	r3, r3, #1
 8002162:	3b01      	subs	r3, #1
 8002164:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002166:	429a      	cmp	r2, r3
 8002168:	d109      	bne.n	800217e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002174:	085b      	lsrs	r3, r3, #1
 8002176:	3b01      	subs	r3, #1
 8002178:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d001      	beq.n	8002182 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3720      	adds	r7, #32
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	019f800c 	.word	0x019f800c
 8002194:	feeefffc 	.word	0xfeeefffc

08002198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e11e      	b.n	80023ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b0:	4b91      	ldr	r3, [pc, #580]	; (80023f8 <HAL_RCC_ClockConfig+0x260>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d910      	bls.n	80021e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b8e      	ldr	r3, [pc, #568]	; (80023f8 <HAL_RCC_ClockConfig+0x260>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 020f 	bic.w	r2, r3, #15
 80021c6:	498c      	ldr	r1, [pc, #560]	; (80023f8 <HAL_RCC_ClockConfig+0x260>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b8a      	ldr	r3, [pc, #552]	; (80023f8 <HAL_RCC_ClockConfig+0x260>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e106      	b.n	80023ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d073      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d129      	bne.n	8002248 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f4:	4b81      	ldr	r3, [pc, #516]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0f4      	b.n	80023ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002204:	f000 f99e 	bl	8002544 <RCC_GetSysClockFreqFromPLLSource>
 8002208:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4a7c      	ldr	r2, [pc, #496]	; (8002400 <HAL_RCC_ClockConfig+0x268>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d93f      	bls.n	8002292 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002212:	4b7a      	ldr	r3, [pc, #488]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002226:	2b00      	cmp	r3, #0
 8002228:	d033      	beq.n	8002292 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	d12f      	bne.n	8002292 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002232:	4b72      	ldr	r3, [pc, #456]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800223a:	4a70      	ldr	r2, [pc, #448]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 800223c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002240:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e024      	b.n	8002292 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d107      	bne.n	8002260 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002250:	4b6a      	ldr	r3, [pc, #424]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0c6      	b.n	80023ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002260:	4b66      	ldr	r3, [pc, #408]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0be      	b.n	80023ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002270:	f000 f8ce 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 8002274:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4a61      	ldr	r2, [pc, #388]	; (8002400 <HAL_RCC_ClockConfig+0x268>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d909      	bls.n	8002292 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800227e:	4b5f      	ldr	r3, [pc, #380]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002286:	4a5d      	ldr	r2, [pc, #372]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002292:	4b5a      	ldr	r3, [pc, #360]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f023 0203 	bic.w	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4957      	ldr	r1, [pc, #348]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022a4:	f7ff f8d8 	bl	8001458 <HAL_GetTick>
 80022a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ac:	f7ff f8d4 	bl	8001458 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e095      	b.n	80023ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	4b4e      	ldr	r3, [pc, #312]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 020c 	and.w	r2, r3, #12
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d1eb      	bne.n	80022ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d023      	beq.n	8002328 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ec:	4b43      	ldr	r3, [pc, #268]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a42      	ldr	r2, [pc, #264]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 80022f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002304:	4b3d      	ldr	r3, [pc, #244]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800230c:	4a3b      	ldr	r2, [pc, #236]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 800230e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002312:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002314:	4b39      	ldr	r3, [pc, #228]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4936      	ldr	r1, [pc, #216]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002322:	4313      	orrs	r3, r2
 8002324:	608b      	str	r3, [r1, #8]
 8002326:	e008      	b.n	800233a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2b80      	cmp	r3, #128	; 0x80
 800232c:	d105      	bne.n	800233a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800232e:	4b33      	ldr	r3, [pc, #204]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	4a32      	ldr	r2, [pc, #200]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002334:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002338:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800233a:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <HAL_RCC_ClockConfig+0x260>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d21d      	bcs.n	8002384 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_RCC_ClockConfig+0x260>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 020f 	bic.w	r2, r3, #15
 8002350:	4929      	ldr	r1, [pc, #164]	; (80023f8 <HAL_RCC_ClockConfig+0x260>)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002358:	f7ff f87e 	bl	8001458 <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	e00a      	b.n	8002376 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002360:	f7ff f87a 	bl	8001458 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e03b      	b.n	80023ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_RCC_ClockConfig+0x260>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d1ed      	bne.n	8002360 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002390:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4917      	ldr	r1, [pc, #92]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ae:	4b13      	ldr	r3, [pc, #76]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	490f      	ldr	r1, [pc, #60]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023c2:	f000 f825 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 80023c6:	4602      	mov	r2, r0
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	490c      	ldr	r1, [pc, #48]	; (8002404 <HAL_RCC_ClockConfig+0x26c>)
 80023d4:	5ccb      	ldrb	r3, [r1, r3]
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	fa22 f303 	lsr.w	r3, r2, r3
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <HAL_RCC_ClockConfig+0x270>)
 80023e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_RCC_ClockConfig+0x274>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe ffea 	bl	80013c0 <HAL_InitTick>
 80023ec:	4603      	mov	r3, r0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40022000 	.word	0x40022000
 80023fc:	40021000 	.word	0x40021000
 8002400:	04c4b400 	.word	0x04c4b400
 8002404:	08004580 	.word	0x08004580
 8002408:	20000000 	.word	0x20000000
 800240c:	20000004 	.word	0x20000004

08002410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002416:	4b2c      	ldr	r3, [pc, #176]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b04      	cmp	r3, #4
 8002420:	d102      	bne.n	8002428 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002422:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	e047      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002428:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b08      	cmp	r3, #8
 8002432:	d102      	bne.n	800243a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002434:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	e03e      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800243a:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b0c      	cmp	r3, #12
 8002444:	d136      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002450:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	3301      	adds	r3, #1
 800245c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d10c      	bne.n	800247e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002464:	4a1a      	ldr	r2, [pc, #104]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	4a16      	ldr	r2, [pc, #88]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800246e:	68d2      	ldr	r2, [r2, #12]
 8002470:	0a12      	lsrs	r2, r2, #8
 8002472:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	617b      	str	r3, [r7, #20]
      break;
 800247c:	e00c      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800247e:	4a13      	ldr	r2, [pc, #76]	; (80024cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	fbb2 f3f3 	udiv	r3, r2, r3
 8002486:	4a10      	ldr	r2, [pc, #64]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002488:	68d2      	ldr	r2, [r2, #12]
 800248a:	0a12      	lsrs	r2, r2, #8
 800248c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002490:	fb02 f303 	mul.w	r3, r2, r3
 8002494:	617b      	str	r3, [r7, #20]
      break;
 8002496:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	0e5b      	lsrs	r3, r3, #25
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	3301      	adds	r3, #1
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	e001      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024b8:	693b      	ldr	r3, [r7, #16]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
 80024cc:	00f42400 	.word	0x00f42400
 80024d0:	016e3600 	.word	0x016e3600

080024d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d8:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000000 	.word	0x20000000

080024ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024f0:	f7ff fff0 	bl	80024d4 <HAL_RCC_GetHCLKFreq>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	0a1b      	lsrs	r3, r3, #8
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	4904      	ldr	r1, [pc, #16]	; (8002514 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002502:	5ccb      	ldrb	r3, [r1, r3]
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000
 8002514:	08004590 	.word	0x08004590

08002518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800251c:	f7ff ffda 	bl	80024d4 <HAL_RCC_GetHCLKFreq>
 8002520:	4602      	mov	r2, r0
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	0adb      	lsrs	r3, r3, #11
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	4904      	ldr	r1, [pc, #16]	; (8002540 <HAL_RCC_GetPCLK2Freq+0x28>)
 800252e:	5ccb      	ldrb	r3, [r1, r3]
 8002530:	f003 031f 	and.w	r3, r3, #31
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002538:	4618      	mov	r0, r3
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000
 8002540:	08004590 	.word	0x08004590

08002544 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	3301      	adds	r3, #1
 8002560:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d10c      	bne.n	8002582 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002568:	4a17      	ldr	r2, [pc, #92]	; (80025c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	4a14      	ldr	r2, [pc, #80]	; (80025c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002572:	68d2      	ldr	r2, [r2, #12]
 8002574:	0a12      	lsrs	r2, r2, #8
 8002576:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	617b      	str	r3, [r7, #20]
    break;
 8002580:	e00c      	b.n	800259c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002582:	4a12      	ldr	r2, [pc, #72]	; (80025cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800258c:	68d2      	ldr	r2, [r2, #12]
 800258e:	0a12      	lsrs	r2, r2, #8
 8002590:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002594:	fb02 f303 	mul.w	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
    break;
 800259a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0e5b      	lsrs	r3, r3, #25
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	3301      	adds	r3, #1
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80025b6:	687b      	ldr	r3, [r7, #4]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40021000 	.word	0x40021000
 80025c8:	016e3600 	.word	0x016e3600
 80025cc:	00f42400 	.word	0x00f42400

080025d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025d8:	2300      	movs	r3, #0
 80025da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025dc:	2300      	movs	r3, #0
 80025de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8098 	beq.w	800271e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f2:	4b43      	ldr	r3, [pc, #268]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10d      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	4b40      	ldr	r3, [pc, #256]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	4a3f      	ldr	r2, [pc, #252]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002608:	6593      	str	r3, [r2, #88]	; 0x58
 800260a:	4b3d      	ldr	r3, [pc, #244]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800260c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002616:	2301      	movs	r3, #1
 8002618:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800261a:	4b3a      	ldr	r3, [pc, #232]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a39      	ldr	r2, [pc, #228]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002624:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002626:	f7fe ff17 	bl	8001458 <HAL_GetTick>
 800262a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800262c:	e009      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262e:	f7fe ff13 	bl	8001458 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d902      	bls.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	74fb      	strb	r3, [r7, #19]
        break;
 8002640:	e005      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002642:	4b30      	ldr	r3, [pc, #192]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0ef      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d159      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002654:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800265e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01e      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	429a      	cmp	r2, r3
 800266e:	d019      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002670:	4b23      	ldr	r3, [pc, #140]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800267a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800267c:	4b20      	ldr	r3, [pc, #128]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	4a1f      	ldr	r2, [pc, #124]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800268c:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002692:	4a1b      	ldr	r2, [pc, #108]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800269c:	4a18      	ldr	r2, [pc, #96]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d016      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7fe fed3 	bl	8001458 <HAL_GetTick>
 80026b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b4:	e00b      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7fe fecf 	bl	8001458 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d902      	bls.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	74fb      	strb	r3, [r7, #19]
            break;
 80026cc:	e006      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ec      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10b      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f0:	4903      	ldr	r1, [pc, #12]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026f8:	e008      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026fa:	7cfb      	ldrb	r3, [r7, #19]
 80026fc:	74bb      	strb	r3, [r7, #18]
 80026fe:	e005      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002700:	40021000 	.word	0x40021000
 8002704:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800270c:	7c7b      	ldrb	r3, [r7, #17]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d105      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002712:	4ba7      	ldr	r3, [pc, #668]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	4aa6      	ldr	r2, [pc, #664]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800272a:	4ba1      	ldr	r3, [pc, #644]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002730:	f023 0203 	bic.w	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	499d      	ldr	r1, [pc, #628]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800274c:	4b98      	ldr	r3, [pc, #608]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f023 020c 	bic.w	r2, r3, #12
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	4995      	ldr	r1, [pc, #596]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800276e:	4b90      	ldr	r3, [pc, #576]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002774:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	498c      	ldr	r1, [pc, #560]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002790:	4b87      	ldr	r3, [pc, #540]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	4984      	ldr	r1, [pc, #528]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027b2:	4b7f      	ldr	r3, [pc, #508]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	497b      	ldr	r1, [pc, #492]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027d4:	4b76      	ldr	r3, [pc, #472]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	4973      	ldr	r1, [pc, #460]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f6:	4b6e      	ldr	r3, [pc, #440]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	496a      	ldr	r1, [pc, #424]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002818:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4962      	ldr	r1, [pc, #392]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800283a:	4b5d      	ldr	r3, [pc, #372]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	4959      	ldr	r1, [pc, #356]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800285c:	4b54      	ldr	r3, [pc, #336]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800285e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	4951      	ldr	r1, [pc, #324]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800287e:	4b4c      	ldr	r3, [pc, #304]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002884:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	4948      	ldr	r1, [pc, #288]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289c:	2b00      	cmp	r3, #0
 800289e:	d015      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028a0:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4940      	ldr	r1, [pc, #256]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028be:	d105      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c0:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4a3a      	ldr	r2, [pc, #232]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d015      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028d8:	4b35      	ldr	r3, [pc, #212]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e6:	4932      	ldr	r1, [pc, #200]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028f6:	d105      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f8:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a2c      	ldr	r2, [pc, #176]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002902:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d015      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002910:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291e:	4924      	ldr	r1, [pc, #144]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800292e:	d105      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002930:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4a1e      	ldr	r2, [pc, #120]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800293a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d015      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002956:	4916      	ldr	r1, [pc, #88]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002966:	d105      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a10      	ldr	r2, [pc, #64]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002972:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d019      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4908      	ldr	r1, [pc, #32]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800299e:	d109      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a02      	ldr	r2, [pc, #8]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029aa:	60d3      	str	r3, [r2, #12]
 80029ac:	e002      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d015      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029c0:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	4926      	ldr	r1, [pc, #152]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029de:	d105      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029e0:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a20      	ldr	r2, [pc, #128]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d015      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a06:	4918      	ldr	r1, [pc, #96]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a16:	d105      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a12      	ldr	r2, [pc, #72]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a22:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d015      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a30:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	490a      	ldr	r1, [pc, #40]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000

08002a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e049      	b.n	8002b12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fe fbde 	bl	8001254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4610      	mov	r0, r2
 8002aac:	f000 fc70 	bl	8003390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d001      	beq.n	8002b34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e054      	b.n	8002bde <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a26      	ldr	r2, [pc, #152]	; (8002bec <HAL_TIM_Base_Start_IT+0xd0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d022      	beq.n	8002b9c <HAL_TIM_Base_Start_IT+0x80>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5e:	d01d      	beq.n	8002b9c <HAL_TIM_Base_Start_IT+0x80>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a22      	ldr	r2, [pc, #136]	; (8002bf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d018      	beq.n	8002b9c <HAL_TIM_Base_Start_IT+0x80>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a21      	ldr	r2, [pc, #132]	; (8002bf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d013      	beq.n	8002b9c <HAL_TIM_Base_Start_IT+0x80>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a1f      	ldr	r2, [pc, #124]	; (8002bf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00e      	beq.n	8002b9c <HAL_TIM_Base_Start_IT+0x80>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1e      	ldr	r2, [pc, #120]	; (8002bfc <HAL_TIM_Base_Start_IT+0xe0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d009      	beq.n	8002b9c <HAL_TIM_Base_Start_IT+0x80>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1c      	ldr	r2, [pc, #112]	; (8002c00 <HAL_TIM_Base_Start_IT+0xe4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d004      	beq.n	8002b9c <HAL_TIM_Base_Start_IT+0x80>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a1b      	ldr	r2, [pc, #108]	; (8002c04 <HAL_TIM_Base_Start_IT+0xe8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d115      	bne.n	8002bc8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_TIM_Base_Start_IT+0xec>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d015      	beq.n	8002bda <HAL_TIM_Base_Start_IT+0xbe>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb4:	d011      	beq.n	8002bda <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0201 	orr.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc6:	e008      	b.n	8002bda <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e000      	b.n	8002bdc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40000800 	.word	0x40000800
 8002bf8:	40000c00 	.word	0x40000c00
 8002bfc:	40013400 	.word	0x40013400
 8002c00:	40014000 	.word	0x40014000
 8002c04:	40015000 	.word	0x40015000
 8002c08:	00010007 	.word	0x00010007

08002c0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e097      	b.n	8002d50 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d106      	bne.n	8002c3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7fe facb 	bl	80011d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002c50:	f023 0307 	bic.w	r3, r3, #7
 8002c54:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4610      	mov	r0, r2
 8002c62:	f000 fb95 	bl	8003390 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8e:	f023 0303 	bic.w	r3, r3, #3
 8002c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002cac:	f023 030c 	bic.w	r3, r3, #12
 8002cb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	011a      	lsls	r2, r3, #4
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	031b      	lsls	r3, r3, #12
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002cea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002cf2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d110      	bne.n	8002daa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d102      	bne.n	8002d94 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d8e:	7b7b      	ldrb	r3, [r7, #13]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d001      	beq.n	8002d98 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e069      	b.n	8002e6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da8:	e031      	b.n	8002e0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d110      	bne.n	8002dd2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002db0:	7bbb      	ldrb	r3, [r7, #14]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d102      	bne.n	8002dbc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002db6:	7b3b      	ldrb	r3, [r7, #12]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d001      	beq.n	8002dc0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e055      	b.n	8002e6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dd0:	e01d      	b.n	8002e0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d108      	bne.n	8002dea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dd8:	7bbb      	ldrb	r3, [r7, #14]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d105      	bne.n	8002dea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dde:	7b7b      	ldrb	r3, [r7, #13]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d102      	bne.n	8002dea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002de4:	7b3b      	ldrb	r3, [r7, #12]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d001      	beq.n	8002dee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e03e      	b.n	8002e6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2202      	movs	r2, #2
 8002df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2202      	movs	r2, #2
 8002e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_TIM_Encoder_Start+0xc4>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d008      	beq.n	8002e2c <HAL_TIM_Encoder_Start+0xd4>
 8002e1a:	e00f      	b.n	8002e3c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2201      	movs	r2, #1
 8002e22:	2100      	movs	r1, #0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fc03 	bl	8003630 <TIM_CCxChannelCmd>
      break;
 8002e2a:	e016      	b.n	8002e5a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2201      	movs	r2, #1
 8002e32:	2104      	movs	r1, #4
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fbfb 	bl	8003630 <TIM_CCxChannelCmd>
      break;
 8002e3a:	e00e      	b.n	8002e5a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2201      	movs	r2, #1
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fbf3 	bl	8003630 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	2104      	movs	r1, #4
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fbec 	bl	8003630 <TIM_CCxChannelCmd>
      break;
 8002e58:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0201 	orr.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d020      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01b      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0202 	mvn.w	r2, #2
 8002ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fa48 	bl	8003354 <HAL_TIM_IC_CaptureCallback>
 8002ec4:	e005      	b.n	8002ed2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fa3a 	bl	8003340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fa4b 	bl	8003368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d020      	beq.n	8002f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d01b      	beq.n	8002f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0204 	mvn.w	r2, #4
 8002ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fa22 	bl	8003354 <HAL_TIM_IC_CaptureCallback>
 8002f10:	e005      	b.n	8002f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fa14 	bl	8003340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fa25 	bl	8003368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d020      	beq.n	8002f70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01b      	beq.n	8002f70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0208 	mvn.w	r2, #8
 8002f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2204      	movs	r2, #4
 8002f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f9fc 	bl	8003354 <HAL_TIM_IC_CaptureCallback>
 8002f5c:	e005      	b.n	8002f6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f9ee 	bl	8003340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f9ff 	bl	8003368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d020      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d01b      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0210 	mvn.w	r2, #16
 8002f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2208      	movs	r2, #8
 8002f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f9d6 	bl	8003354 <HAL_TIM_IC_CaptureCallback>
 8002fa8:	e005      	b.n	8002fb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f9c8 	bl	8003340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f9d9 	bl	8003368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00c      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0201 	mvn.w	r2, #1
 8002fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fe f842 	bl	8001064 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d104      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00c      	beq.n	800300e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d007      	beq.n	800300e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8003006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fbd7 	bl	80037bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00c      	beq.n	8003032 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800302a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fbcf 	bl	80037d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00c      	beq.n	8003056 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d007      	beq.n	8003056 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800304e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f993 	bl	800337c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00c      	beq.n	800307a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f06f 0220 	mvn.w	r2, #32
 8003072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 fb97 	bl	80037a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00c      	beq.n	800309e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fba3 	bl	80037e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00c      	beq.n	80030c2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d007      	beq.n	80030c2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80030ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fb9b 	bl	80037f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00c      	beq.n	80030e6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d007      	beq.n	80030e6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80030de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fb93 	bl	800380c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00c      	beq.n	800310a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fb8b 	bl	8003820 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_TIM_ConfigClockSource+0x1c>
 800312c:	2302      	movs	r3, #2
 800312e:	e0f6      	b.n	800331e <HAL_TIM_ConfigClockSource+0x20a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800314e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800315a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a6f      	ldr	r2, [pc, #444]	; (8003328 <HAL_TIM_ConfigClockSource+0x214>)
 800316a:	4293      	cmp	r3, r2
 800316c:	f000 80c1 	beq.w	80032f2 <HAL_TIM_ConfigClockSource+0x1de>
 8003170:	4a6d      	ldr	r2, [pc, #436]	; (8003328 <HAL_TIM_ConfigClockSource+0x214>)
 8003172:	4293      	cmp	r3, r2
 8003174:	f200 80c6 	bhi.w	8003304 <HAL_TIM_ConfigClockSource+0x1f0>
 8003178:	4a6c      	ldr	r2, [pc, #432]	; (800332c <HAL_TIM_ConfigClockSource+0x218>)
 800317a:	4293      	cmp	r3, r2
 800317c:	f000 80b9 	beq.w	80032f2 <HAL_TIM_ConfigClockSource+0x1de>
 8003180:	4a6a      	ldr	r2, [pc, #424]	; (800332c <HAL_TIM_ConfigClockSource+0x218>)
 8003182:	4293      	cmp	r3, r2
 8003184:	f200 80be 	bhi.w	8003304 <HAL_TIM_ConfigClockSource+0x1f0>
 8003188:	4a69      	ldr	r2, [pc, #420]	; (8003330 <HAL_TIM_ConfigClockSource+0x21c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	f000 80b1 	beq.w	80032f2 <HAL_TIM_ConfigClockSource+0x1de>
 8003190:	4a67      	ldr	r2, [pc, #412]	; (8003330 <HAL_TIM_ConfigClockSource+0x21c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	f200 80b6 	bhi.w	8003304 <HAL_TIM_ConfigClockSource+0x1f0>
 8003198:	4a66      	ldr	r2, [pc, #408]	; (8003334 <HAL_TIM_ConfigClockSource+0x220>)
 800319a:	4293      	cmp	r3, r2
 800319c:	f000 80a9 	beq.w	80032f2 <HAL_TIM_ConfigClockSource+0x1de>
 80031a0:	4a64      	ldr	r2, [pc, #400]	; (8003334 <HAL_TIM_ConfigClockSource+0x220>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	f200 80ae 	bhi.w	8003304 <HAL_TIM_ConfigClockSource+0x1f0>
 80031a8:	4a63      	ldr	r2, [pc, #396]	; (8003338 <HAL_TIM_ConfigClockSource+0x224>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	f000 80a1 	beq.w	80032f2 <HAL_TIM_ConfigClockSource+0x1de>
 80031b0:	4a61      	ldr	r2, [pc, #388]	; (8003338 <HAL_TIM_ConfigClockSource+0x224>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	f200 80a6 	bhi.w	8003304 <HAL_TIM_ConfigClockSource+0x1f0>
 80031b8:	4a60      	ldr	r2, [pc, #384]	; (800333c <HAL_TIM_ConfigClockSource+0x228>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	f000 8099 	beq.w	80032f2 <HAL_TIM_ConfigClockSource+0x1de>
 80031c0:	4a5e      	ldr	r2, [pc, #376]	; (800333c <HAL_TIM_ConfigClockSource+0x228>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	f200 809e 	bhi.w	8003304 <HAL_TIM_ConfigClockSource+0x1f0>
 80031c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80031cc:	f000 8091 	beq.w	80032f2 <HAL_TIM_ConfigClockSource+0x1de>
 80031d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80031d4:	f200 8096 	bhi.w	8003304 <HAL_TIM_ConfigClockSource+0x1f0>
 80031d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031dc:	f000 8089 	beq.w	80032f2 <HAL_TIM_ConfigClockSource+0x1de>
 80031e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e4:	f200 808e 	bhi.w	8003304 <HAL_TIM_ConfigClockSource+0x1f0>
 80031e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ec:	d03e      	beq.n	800326c <HAL_TIM_ConfigClockSource+0x158>
 80031ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f2:	f200 8087 	bhi.w	8003304 <HAL_TIM_ConfigClockSource+0x1f0>
 80031f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fa:	f000 8086 	beq.w	800330a <HAL_TIM_ConfigClockSource+0x1f6>
 80031fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003202:	d87f      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x1f0>
 8003204:	2b70      	cmp	r3, #112	; 0x70
 8003206:	d01a      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x12a>
 8003208:	2b70      	cmp	r3, #112	; 0x70
 800320a:	d87b      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x1f0>
 800320c:	2b60      	cmp	r3, #96	; 0x60
 800320e:	d050      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x19e>
 8003210:	2b60      	cmp	r3, #96	; 0x60
 8003212:	d877      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x1f0>
 8003214:	2b50      	cmp	r3, #80	; 0x50
 8003216:	d03c      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x17e>
 8003218:	2b50      	cmp	r3, #80	; 0x50
 800321a:	d873      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x1f0>
 800321c:	2b40      	cmp	r3, #64	; 0x40
 800321e:	d058      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x1be>
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	d86f      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x1f0>
 8003224:	2b30      	cmp	r3, #48	; 0x30
 8003226:	d064      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x1de>
 8003228:	2b30      	cmp	r3, #48	; 0x30
 800322a:	d86b      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x1f0>
 800322c:	2b20      	cmp	r3, #32
 800322e:	d060      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x1de>
 8003230:	2b20      	cmp	r3, #32
 8003232:	d867      	bhi.n	8003304 <HAL_TIM_ConfigClockSource+0x1f0>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d05c      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x1de>
 8003238:	2b10      	cmp	r3, #16
 800323a:	d05a      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x1de>
 800323c:	e062      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800324e:	f000 f9cf 	bl	80035f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	609a      	str	r2, [r3, #8]
      break;
 800326a:	e04f      	b.n	800330c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800327c:	f000 f9b8 	bl	80035f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800328e:	609a      	str	r2, [r3, #8]
      break;
 8003290:	e03c      	b.n	800330c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800329e:	461a      	mov	r2, r3
 80032a0:	f000 f92a 	bl	80034f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2150      	movs	r1, #80	; 0x50
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f983 	bl	80035b6 <TIM_ITRx_SetConfig>
      break;
 80032b0:	e02c      	b.n	800330c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032be:	461a      	mov	r2, r3
 80032c0:	f000 f949 	bl	8003556 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2160      	movs	r1, #96	; 0x60
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f973 	bl	80035b6 <TIM_ITRx_SetConfig>
      break;
 80032d0:	e01c      	b.n	800330c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032de:	461a      	mov	r2, r3
 80032e0:	f000 f90a 	bl	80034f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2140      	movs	r1, #64	; 0x40
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f963 	bl	80035b6 <TIM_ITRx_SetConfig>
      break;
 80032f0:	e00c      	b.n	800330c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4619      	mov	r1, r3
 80032fc:	4610      	mov	r0, r2
 80032fe:	f000 f95a 	bl	80035b6 <TIM_ITRx_SetConfig>
      break;
 8003302:	e003      	b.n	800330c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      break;
 8003308:	e000      	b.n	800330c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800330a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800331c:	7bfb      	ldrb	r3, [r7, #15]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	00100070 	.word	0x00100070
 800332c:	00100060 	.word	0x00100060
 8003330:	00100050 	.word	0x00100050
 8003334:	00100040 	.word	0x00100040
 8003338:	00100030 	.word	0x00100030
 800333c:	00100020 	.word	0x00100020

08003340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a4c      	ldr	r2, [pc, #304]	; (80034d4 <TIM_Base_SetConfig+0x144>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d017      	beq.n	80033d8 <TIM_Base_SetConfig+0x48>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ae:	d013      	beq.n	80033d8 <TIM_Base_SetConfig+0x48>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a49      	ldr	r2, [pc, #292]	; (80034d8 <TIM_Base_SetConfig+0x148>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00f      	beq.n	80033d8 <TIM_Base_SetConfig+0x48>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a48      	ldr	r2, [pc, #288]	; (80034dc <TIM_Base_SetConfig+0x14c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00b      	beq.n	80033d8 <TIM_Base_SetConfig+0x48>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a47      	ldr	r2, [pc, #284]	; (80034e0 <TIM_Base_SetConfig+0x150>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d007      	beq.n	80033d8 <TIM_Base_SetConfig+0x48>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a46      	ldr	r2, [pc, #280]	; (80034e4 <TIM_Base_SetConfig+0x154>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <TIM_Base_SetConfig+0x48>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a45      	ldr	r2, [pc, #276]	; (80034e8 <TIM_Base_SetConfig+0x158>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d108      	bne.n	80033ea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a39      	ldr	r2, [pc, #228]	; (80034d4 <TIM_Base_SetConfig+0x144>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d023      	beq.n	800343a <TIM_Base_SetConfig+0xaa>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f8:	d01f      	beq.n	800343a <TIM_Base_SetConfig+0xaa>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a36      	ldr	r2, [pc, #216]	; (80034d8 <TIM_Base_SetConfig+0x148>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d01b      	beq.n	800343a <TIM_Base_SetConfig+0xaa>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a35      	ldr	r2, [pc, #212]	; (80034dc <TIM_Base_SetConfig+0x14c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d017      	beq.n	800343a <TIM_Base_SetConfig+0xaa>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a34      	ldr	r2, [pc, #208]	; (80034e0 <TIM_Base_SetConfig+0x150>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d013      	beq.n	800343a <TIM_Base_SetConfig+0xaa>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a33      	ldr	r2, [pc, #204]	; (80034e4 <TIM_Base_SetConfig+0x154>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00f      	beq.n	800343a <TIM_Base_SetConfig+0xaa>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a33      	ldr	r2, [pc, #204]	; (80034ec <TIM_Base_SetConfig+0x15c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00b      	beq.n	800343a <TIM_Base_SetConfig+0xaa>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a32      	ldr	r2, [pc, #200]	; (80034f0 <TIM_Base_SetConfig+0x160>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d007      	beq.n	800343a <TIM_Base_SetConfig+0xaa>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a31      	ldr	r2, [pc, #196]	; (80034f4 <TIM_Base_SetConfig+0x164>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d003      	beq.n	800343a <TIM_Base_SetConfig+0xaa>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a2c      	ldr	r2, [pc, #176]	; (80034e8 <TIM_Base_SetConfig+0x158>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d108      	bne.n	800344c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4313      	orrs	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a18      	ldr	r2, [pc, #96]	; (80034d4 <TIM_Base_SetConfig+0x144>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d013      	beq.n	80034a0 <TIM_Base_SetConfig+0x110>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a1a      	ldr	r2, [pc, #104]	; (80034e4 <TIM_Base_SetConfig+0x154>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00f      	beq.n	80034a0 <TIM_Base_SetConfig+0x110>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a1a      	ldr	r2, [pc, #104]	; (80034ec <TIM_Base_SetConfig+0x15c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00b      	beq.n	80034a0 <TIM_Base_SetConfig+0x110>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a19      	ldr	r2, [pc, #100]	; (80034f0 <TIM_Base_SetConfig+0x160>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d007      	beq.n	80034a0 <TIM_Base_SetConfig+0x110>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <TIM_Base_SetConfig+0x164>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d003      	beq.n	80034a0 <TIM_Base_SetConfig+0x110>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <TIM_Base_SetConfig+0x158>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d103      	bne.n	80034a8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d105      	bne.n	80034c6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f023 0201 	bic.w	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	611a      	str	r2, [r3, #16]
  }
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40012c00 	.word	0x40012c00
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40000800 	.word	0x40000800
 80034e0:	40000c00 	.word	0x40000c00
 80034e4:	40013400 	.word	0x40013400
 80034e8:	40015000 	.word	0x40015000
 80034ec:	40014000 	.word	0x40014000
 80034f0:	40014400 	.word	0x40014400
 80034f4:	40014800 	.word	0x40014800

080034f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	f023 0201 	bic.w	r2, r3, #1
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f023 030a 	bic.w	r3, r3, #10
 8003534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	621a      	str	r2, [r3, #32]
}
 800354a:	bf00      	nop
 800354c:	371c      	adds	r7, #28
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003556:	b480      	push	{r7}
 8003558:	b087      	sub	sp, #28
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f023 0210 	bic.w	r2, r3, #16
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003580:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	031b      	lsls	r3, r3, #12
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003592:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	621a      	str	r2, [r3, #32]
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b085      	sub	sp, #20
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80035cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f043 0307 	orr.w	r3, r3, #7
 80035dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	609a      	str	r2, [r3, #8]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800360a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	021a      	lsls	r2, r3, #8
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	431a      	orrs	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4313      	orrs	r3, r2
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	609a      	str	r2, [r3, #8]
}
 8003624:	bf00      	nop
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	2201      	movs	r2, #1
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a1a      	ldr	r2, [r3, #32]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	43db      	mvns	r3, r3
 8003652:	401a      	ands	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a1a      	ldr	r2, [r3, #32]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	fa01 f303 	lsl.w	r3, r1, r3
 8003668:	431a      	orrs	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003690:	2302      	movs	r3, #2
 8003692:	e074      	b.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a34      	ldr	r2, [pc, #208]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a33      	ldr	r2, [pc, #204]	; (8003790 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a31      	ldr	r2, [pc, #196]	; (8003794 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d108      	bne.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80036ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a21      	ldr	r2, [pc, #132]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d022      	beq.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003714:	d01d      	beq.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d018      	beq.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1d      	ldr	r2, [pc, #116]	; (800379c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00e      	beq.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a15      	ldr	r2, [pc, #84]	; (8003790 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d009      	beq.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a18      	ldr	r2, [pc, #96]	; (80037a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d004      	beq.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a11      	ldr	r2, [pc, #68]	; (8003794 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d10c      	bne.n	800376c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	4313      	orrs	r3, r2
 8003762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40012c00 	.word	0x40012c00
 8003790:	40013400 	.word	0x40013400
 8003794:	40015000 	.word	0x40015000
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800
 80037a0:	40000c00 	.word	0x40000c00
 80037a4:	40014000 	.word	0x40014000

080037a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e042      	b.n	80038cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7fd fc61 	bl	8001120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2224      	movs	r2, #36	; 0x24
 8003862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fb24 	bl	8003ecc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f825 	bl	80038d4 <UART_SetConfig>
 800388a:	4603      	mov	r3, r0
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e01b      	b.n	80038cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fba3 	bl	8004010 <UART_CheckIdleState>
 80038ca:	4603      	mov	r3, r0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d8:	b08c      	sub	sp, #48	; 0x30
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	4baa      	ldr	r3, [pc, #680]	; (8003bac <UART_SetConfig+0x2d8>)
 8003904:	4013      	ands	r3, r2
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800390c:	430b      	orrs	r3, r1
 800390e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a9f      	ldr	r2, [pc, #636]	; (8003bb0 <UART_SetConfig+0x2dc>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d004      	beq.n	8003940 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800393c:	4313      	orrs	r3, r2
 800393e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800394a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003954:	430b      	orrs	r3, r1
 8003956:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	f023 010f 	bic.w	r1, r3, #15
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a90      	ldr	r2, [pc, #576]	; (8003bb4 <UART_SetConfig+0x2e0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d125      	bne.n	80039c4 <UART_SetConfig+0xf0>
 8003978:	4b8f      	ldr	r3, [pc, #572]	; (8003bb8 <UART_SetConfig+0x2e4>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	2b03      	cmp	r3, #3
 8003984:	d81a      	bhi.n	80039bc <UART_SetConfig+0xe8>
 8003986:	a201      	add	r2, pc, #4	; (adr r2, 800398c <UART_SetConfig+0xb8>)
 8003988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398c:	0800399d 	.word	0x0800399d
 8003990:	080039ad 	.word	0x080039ad
 8003994:	080039a5 	.word	0x080039a5
 8003998:	080039b5 	.word	0x080039b5
 800399c:	2301      	movs	r3, #1
 800399e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039a2:	e116      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 80039a4:	2302      	movs	r3, #2
 80039a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039aa:	e112      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 80039ac:	2304      	movs	r3, #4
 80039ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b2:	e10e      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 80039b4:	2308      	movs	r3, #8
 80039b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ba:	e10a      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 80039bc:	2310      	movs	r3, #16
 80039be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c2:	e106      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a7c      	ldr	r2, [pc, #496]	; (8003bbc <UART_SetConfig+0x2e8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d138      	bne.n	8003a40 <UART_SetConfig+0x16c>
 80039ce:	4b7a      	ldr	r3, [pc, #488]	; (8003bb8 <UART_SetConfig+0x2e4>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b0c      	cmp	r3, #12
 80039da:	d82d      	bhi.n	8003a38 <UART_SetConfig+0x164>
 80039dc:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <UART_SetConfig+0x110>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	08003a19 	.word	0x08003a19
 80039e8:	08003a39 	.word	0x08003a39
 80039ec:	08003a39 	.word	0x08003a39
 80039f0:	08003a39 	.word	0x08003a39
 80039f4:	08003a29 	.word	0x08003a29
 80039f8:	08003a39 	.word	0x08003a39
 80039fc:	08003a39 	.word	0x08003a39
 8003a00:	08003a39 	.word	0x08003a39
 8003a04:	08003a21 	.word	0x08003a21
 8003a08:	08003a39 	.word	0x08003a39
 8003a0c:	08003a39 	.word	0x08003a39
 8003a10:	08003a39 	.word	0x08003a39
 8003a14:	08003a31 	.word	0x08003a31
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a1e:	e0d8      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003a20:	2302      	movs	r3, #2
 8003a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a26:	e0d4      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003a28:	2304      	movs	r3, #4
 8003a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a2e:	e0d0      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003a30:	2308      	movs	r3, #8
 8003a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a36:	e0cc      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003a38:	2310      	movs	r3, #16
 8003a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a3e:	e0c8      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a5e      	ldr	r2, [pc, #376]	; (8003bc0 <UART_SetConfig+0x2ec>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d125      	bne.n	8003a96 <UART_SetConfig+0x1c2>
 8003a4a:	4b5b      	ldr	r3, [pc, #364]	; (8003bb8 <UART_SetConfig+0x2e4>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a54:	2b30      	cmp	r3, #48	; 0x30
 8003a56:	d016      	beq.n	8003a86 <UART_SetConfig+0x1b2>
 8003a58:	2b30      	cmp	r3, #48	; 0x30
 8003a5a:	d818      	bhi.n	8003a8e <UART_SetConfig+0x1ba>
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d00a      	beq.n	8003a76 <UART_SetConfig+0x1a2>
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d814      	bhi.n	8003a8e <UART_SetConfig+0x1ba>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <UART_SetConfig+0x19a>
 8003a68:	2b10      	cmp	r3, #16
 8003a6a:	d008      	beq.n	8003a7e <UART_SetConfig+0x1aa>
 8003a6c:	e00f      	b.n	8003a8e <UART_SetConfig+0x1ba>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a74:	e0ad      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003a76:	2302      	movs	r3, #2
 8003a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a7c:	e0a9      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003a7e:	2304      	movs	r3, #4
 8003a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a84:	e0a5      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003a86:	2308      	movs	r3, #8
 8003a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a8c:	e0a1      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003a8e:	2310      	movs	r3, #16
 8003a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a94:	e09d      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a4a      	ldr	r2, [pc, #296]	; (8003bc4 <UART_SetConfig+0x2f0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d125      	bne.n	8003aec <UART_SetConfig+0x218>
 8003aa0:	4b45      	ldr	r3, [pc, #276]	; (8003bb8 <UART_SetConfig+0x2e4>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003aaa:	2bc0      	cmp	r3, #192	; 0xc0
 8003aac:	d016      	beq.n	8003adc <UART_SetConfig+0x208>
 8003aae:	2bc0      	cmp	r3, #192	; 0xc0
 8003ab0:	d818      	bhi.n	8003ae4 <UART_SetConfig+0x210>
 8003ab2:	2b80      	cmp	r3, #128	; 0x80
 8003ab4:	d00a      	beq.n	8003acc <UART_SetConfig+0x1f8>
 8003ab6:	2b80      	cmp	r3, #128	; 0x80
 8003ab8:	d814      	bhi.n	8003ae4 <UART_SetConfig+0x210>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <UART_SetConfig+0x1f0>
 8003abe:	2b40      	cmp	r3, #64	; 0x40
 8003ac0:	d008      	beq.n	8003ad4 <UART_SetConfig+0x200>
 8003ac2:	e00f      	b.n	8003ae4 <UART_SetConfig+0x210>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aca:	e082      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003acc:	2302      	movs	r3, #2
 8003ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ad2:	e07e      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ada:	e07a      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003adc:	2308      	movs	r3, #8
 8003ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ae2:	e076      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aea:	e072      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a35      	ldr	r2, [pc, #212]	; (8003bc8 <UART_SetConfig+0x2f4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d12a      	bne.n	8003b4c <UART_SetConfig+0x278>
 8003af6:	4b30      	ldr	r3, [pc, #192]	; (8003bb8 <UART_SetConfig+0x2e4>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b04:	d01a      	beq.n	8003b3c <UART_SetConfig+0x268>
 8003b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b0a:	d81b      	bhi.n	8003b44 <UART_SetConfig+0x270>
 8003b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b10:	d00c      	beq.n	8003b2c <UART_SetConfig+0x258>
 8003b12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b16:	d815      	bhi.n	8003b44 <UART_SetConfig+0x270>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <UART_SetConfig+0x250>
 8003b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b20:	d008      	beq.n	8003b34 <UART_SetConfig+0x260>
 8003b22:	e00f      	b.n	8003b44 <UART_SetConfig+0x270>
 8003b24:	2300      	movs	r3, #0
 8003b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b2a:	e052      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b32:	e04e      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003b34:	2304      	movs	r3, #4
 8003b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b3a:	e04a      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003b3c:	2308      	movs	r3, #8
 8003b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b42:	e046      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003b44:	2310      	movs	r3, #16
 8003b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b4a:	e042      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a17      	ldr	r2, [pc, #92]	; (8003bb0 <UART_SetConfig+0x2dc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d13a      	bne.n	8003bcc <UART_SetConfig+0x2f8>
 8003b56:	4b18      	ldr	r3, [pc, #96]	; (8003bb8 <UART_SetConfig+0x2e4>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b64:	d01a      	beq.n	8003b9c <UART_SetConfig+0x2c8>
 8003b66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b6a:	d81b      	bhi.n	8003ba4 <UART_SetConfig+0x2d0>
 8003b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b70:	d00c      	beq.n	8003b8c <UART_SetConfig+0x2b8>
 8003b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b76:	d815      	bhi.n	8003ba4 <UART_SetConfig+0x2d0>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <UART_SetConfig+0x2b0>
 8003b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b80:	d008      	beq.n	8003b94 <UART_SetConfig+0x2c0>
 8003b82:	e00f      	b.n	8003ba4 <UART_SetConfig+0x2d0>
 8003b84:	2300      	movs	r3, #0
 8003b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b8a:	e022      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b92:	e01e      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003b94:	2304      	movs	r3, #4
 8003b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b9a:	e01a      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ba2:	e016      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003baa:	e012      	b.n	8003bd2 <UART_SetConfig+0x2fe>
 8003bac:	cfff69f3 	.word	0xcfff69f3
 8003bb0:	40008000 	.word	0x40008000
 8003bb4:	40013800 	.word	0x40013800
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40004400 	.word	0x40004400
 8003bc0:	40004800 	.word	0x40004800
 8003bc4:	40004c00 	.word	0x40004c00
 8003bc8:	40005000 	.word	0x40005000
 8003bcc:	2310      	movs	r3, #16
 8003bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4aae      	ldr	r2, [pc, #696]	; (8003e90 <UART_SetConfig+0x5bc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	f040 8097 	bne.w	8003d0c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d823      	bhi.n	8003c2e <UART_SetConfig+0x35a>
 8003be6:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <UART_SetConfig+0x318>)
 8003be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bec:	08003c11 	.word	0x08003c11
 8003bf0:	08003c2f 	.word	0x08003c2f
 8003bf4:	08003c19 	.word	0x08003c19
 8003bf8:	08003c2f 	.word	0x08003c2f
 8003bfc:	08003c1f 	.word	0x08003c1f
 8003c00:	08003c2f 	.word	0x08003c2f
 8003c04:	08003c2f 	.word	0x08003c2f
 8003c08:	08003c2f 	.word	0x08003c2f
 8003c0c:	08003c27 	.word	0x08003c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c10:	f7fe fc6c 	bl	80024ec <HAL_RCC_GetPCLK1Freq>
 8003c14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c16:	e010      	b.n	8003c3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c18:	4b9e      	ldr	r3, [pc, #632]	; (8003e94 <UART_SetConfig+0x5c0>)
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c1c:	e00d      	b.n	8003c3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1e:	f7fe fbf7 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 8003c22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c24:	e009      	b.n	8003c3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c2c:	e005      	b.n	8003c3a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8130 	beq.w	8003ea2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	4a94      	ldr	r2, [pc, #592]	; (8003e98 <UART_SetConfig+0x5c4>)
 8003c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	4413      	add	r3, r2
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d305      	bcc.n	8003c72 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d903      	bls.n	8003c7a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c78:	e113      	b.n	8003ea2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	60fa      	str	r2, [r7, #12]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	4a84      	ldr	r2, [pc, #528]	; (8003e98 <UART_SetConfig+0x5c4>)
 8003c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2200      	movs	r2, #0
 8003c90:	603b      	str	r3, [r7, #0]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c9c:	f7fc fdf2 	bl	8000884 <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	020b      	lsls	r3, r1, #8
 8003cb2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003cb6:	0202      	lsls	r2, r0, #8
 8003cb8:	6979      	ldr	r1, [r7, #20]
 8003cba:	6849      	ldr	r1, [r1, #4]
 8003cbc:	0849      	lsrs	r1, r1, #1
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	460c      	mov	r4, r1
 8003cc2:	4605      	mov	r5, r0
 8003cc4:	eb12 0804 	adds.w	r8, r2, r4
 8003cc8:	eb43 0905 	adc.w	r9, r3, r5
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	469a      	mov	sl, r3
 8003cd4:	4693      	mov	fp, r2
 8003cd6:	4652      	mov	r2, sl
 8003cd8:	465b      	mov	r3, fp
 8003cda:	4640      	mov	r0, r8
 8003cdc:	4649      	mov	r1, r9
 8003cde:	f7fc fdd1 	bl	8000884 <__aeabi_uldivmod>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cf0:	d308      	bcc.n	8003d04 <UART_SetConfig+0x430>
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cf8:	d204      	bcs.n	8003d04 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a3a      	ldr	r2, [r7, #32]
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	e0ce      	b.n	8003ea2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d0a:	e0ca      	b.n	8003ea2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d14:	d166      	bne.n	8003de4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003d16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d827      	bhi.n	8003d6e <UART_SetConfig+0x49a>
 8003d1e:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <UART_SetConfig+0x450>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003d49 	.word	0x08003d49
 8003d28:	08003d51 	.word	0x08003d51
 8003d2c:	08003d59 	.word	0x08003d59
 8003d30:	08003d6f 	.word	0x08003d6f
 8003d34:	08003d5f 	.word	0x08003d5f
 8003d38:	08003d6f 	.word	0x08003d6f
 8003d3c:	08003d6f 	.word	0x08003d6f
 8003d40:	08003d6f 	.word	0x08003d6f
 8003d44:	08003d67 	.word	0x08003d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d48:	f7fe fbd0 	bl	80024ec <HAL_RCC_GetPCLK1Freq>
 8003d4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d4e:	e014      	b.n	8003d7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d50:	f7fe fbe2 	bl	8002518 <HAL_RCC_GetPCLK2Freq>
 8003d54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d56:	e010      	b.n	8003d7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d58:	4b4e      	ldr	r3, [pc, #312]	; (8003e94 <UART_SetConfig+0x5c0>)
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d5c:	e00d      	b.n	8003d7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d5e:	f7fe fb57 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 8003d62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d64:	e009      	b.n	8003d7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d6c:	e005      	b.n	8003d7a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8090 	beq.w	8003ea2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	4a44      	ldr	r2, [pc, #272]	; (8003e98 <UART_SetConfig+0x5c4>)
 8003d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d94:	005a      	lsls	r2, r3, #1
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	085b      	lsrs	r3, r3, #1
 8003d9c:	441a      	add	r2, r3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	2b0f      	cmp	r3, #15
 8003dac:	d916      	bls.n	8003ddc <UART_SetConfig+0x508>
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db4:	d212      	bcs.n	8003ddc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	f023 030f 	bic.w	r3, r3, #15
 8003dbe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	085b      	lsrs	r3, r3, #1
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	8bfb      	ldrh	r3, [r7, #30]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	8bfa      	ldrh	r2, [r7, #30]
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	e062      	b.n	8003ea2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003de2:	e05e      	b.n	8003ea2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003de4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d828      	bhi.n	8003e3e <UART_SetConfig+0x56a>
 8003dec:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <UART_SetConfig+0x520>)
 8003dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df2:	bf00      	nop
 8003df4:	08003e19 	.word	0x08003e19
 8003df8:	08003e21 	.word	0x08003e21
 8003dfc:	08003e29 	.word	0x08003e29
 8003e00:	08003e3f 	.word	0x08003e3f
 8003e04:	08003e2f 	.word	0x08003e2f
 8003e08:	08003e3f 	.word	0x08003e3f
 8003e0c:	08003e3f 	.word	0x08003e3f
 8003e10:	08003e3f 	.word	0x08003e3f
 8003e14:	08003e37 	.word	0x08003e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e18:	f7fe fb68 	bl	80024ec <HAL_RCC_GetPCLK1Freq>
 8003e1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e1e:	e014      	b.n	8003e4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e20:	f7fe fb7a 	bl	8002518 <HAL_RCC_GetPCLK2Freq>
 8003e24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e26:	e010      	b.n	8003e4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e28:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <UART_SetConfig+0x5c0>)
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e2c:	e00d      	b.n	8003e4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2e:	f7fe faef 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 8003e32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e34:	e009      	b.n	8003e4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e3c:	e005      	b.n	8003e4a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e48:	bf00      	nop
    }

    if (pclk != 0U)
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d028      	beq.n	8003ea2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	4a10      	ldr	r2, [pc, #64]	; (8003e98 <UART_SetConfig+0x5c4>)
 8003e56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	441a      	add	r2, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	2b0f      	cmp	r3, #15
 8003e78:	d910      	bls.n	8003e9c <UART_SetConfig+0x5c8>
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d20c      	bcs.n	8003e9c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60da      	str	r2, [r3, #12]
 8003e8c:	e009      	b.n	8003ea2 <UART_SetConfig+0x5ce>
 8003e8e:	bf00      	nop
 8003e90:	40008000 	.word	0x40008000
 8003e94:	00f42400 	.word	0x00f42400
 8003e98:	08004598 	.word	0x08004598
      }
      else
      {
        ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003ebe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3730      	adds	r7, #48	; 0x30
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ecc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01a      	beq.n	8003fe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fca:	d10a      	bne.n	8003fe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	605a      	str	r2, [r3, #4]
  }
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b098      	sub	sp, #96	; 0x60
 8004014:	af02      	add	r7, sp, #8
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004020:	f7fd fa1a 	bl	8001458 <HAL_GetTick>
 8004024:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b08      	cmp	r3, #8
 8004032:	d12f      	bne.n	8004094 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800403c:	2200      	movs	r2, #0
 800403e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f88e 	bl	8004164 <UART_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d022      	beq.n	8004094 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800405c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004062:	653b      	str	r3, [r7, #80]	; 0x50
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800406c:	647b      	str	r3, [r7, #68]	; 0x44
 800406e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800407a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e6      	bne.n	800404e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e063      	b.n	800415c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d149      	bne.n	8004136 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040aa:	2200      	movs	r2, #0
 80040ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f857 	bl	8004164 <UART_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d03c      	beq.n	8004136 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	623b      	str	r3, [r7, #32]
   return(result);
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040da:	633b      	str	r3, [r7, #48]	; 0x30
 80040dc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e6      	bne.n	80040bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3308      	adds	r3, #8
 80040f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	64bb      	str	r3, [r7, #72]	; 0x48
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3308      	adds	r3, #8
 800410c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800410e:	61fa      	str	r2, [r7, #28]
 8004110:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	69b9      	ldr	r1, [r7, #24]
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	617b      	str	r3, [r7, #20]
   return(result);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e5      	bne.n	80040ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e012      	b.n	800415c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3758      	adds	r7, #88	; 0x58
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	4613      	mov	r3, r2
 8004172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004174:	e04f      	b.n	8004216 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d04b      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417e:	f7fd f96b 	bl	8001458 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	429a      	cmp	r2, r3
 800418c:	d302      	bcc.n	8004194 <UART_WaitOnFlagUntilTimeout+0x30>
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e04e      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d037      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b80      	cmp	r3, #128	; 0x80
 80041aa:	d034      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b40      	cmp	r3, #64	; 0x40
 80041b0:	d031      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d110      	bne.n	80041e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2208      	movs	r2, #8
 80041c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f838 	bl	800423e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2208      	movs	r2, #8
 80041d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e029      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f0:	d111      	bne.n	8004216 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f81e 	bl	800423e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e00f      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4013      	ands	r3, r2
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	429a      	cmp	r2, r3
 8004224:	bf0c      	ite	eq
 8004226:	2301      	moveq	r3, #1
 8004228:	2300      	movne	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	429a      	cmp	r2, r3
 8004232:	d0a0      	beq.n	8004176 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800423e:	b480      	push	{r7}
 8004240:	b095      	sub	sp, #84	; 0x54
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800425a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004264:	643b      	str	r3, [r7, #64]	; 0x40
 8004266:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800426a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e6      	bne.n	8004246 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3308      	adds	r3, #8
 800427e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	61fb      	str	r3, [r7, #28]
   return(result);
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800428e:	f023 0301 	bic.w	r3, r3, #1
 8004292:	64bb      	str	r3, [r7, #72]	; 0x48
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3308      	adds	r3, #8
 800429a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800429c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e3      	bne.n	8004278 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d118      	bne.n	80042ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f023 0310 	bic.w	r3, r3, #16
 80042cc:	647b      	str	r3, [r7, #68]	; 0x44
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	6979      	ldr	r1, [r7, #20]
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	613b      	str	r3, [r7, #16]
   return(result);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e6      	bne.n	80042b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80042fe:	bf00      	nop
 8004300:	3754      	adds	r7, #84	; 0x54
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800430a:	b480      	push	{r7}
 800430c:	b085      	sub	sp, #20
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_UARTEx_DisableFifoMode+0x16>
 800431c:	2302      	movs	r3, #2
 800431e:	e027      	b.n	8004370 <HAL_UARTEx_DisableFifoMode+0x66>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2224      	movs	r2, #36	; 0x24
 800432c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800434e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004390:	2302      	movs	r3, #2
 8004392:	e02d      	b.n	80043f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2224      	movs	r2, #36	; 0x24
 80043a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0201 	bic.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f84f 	bl	8004474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800440c:	2302      	movs	r3, #2
 800440e:	e02d      	b.n	800446c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2224      	movs	r2, #36	; 0x24
 800441c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0201 	bic.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f811 	bl	8004474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004480:	2b00      	cmp	r3, #0
 8004482:	d108      	bne.n	8004496 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004494:	e031      	b.n	80044fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004496:	2308      	movs	r3, #8
 8004498:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800449a:	2308      	movs	r3, #8
 800449c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	0e5b      	lsrs	r3, r3, #25
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	0f5b      	lsrs	r3, r3, #29
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044be:	7bbb      	ldrb	r3, [r7, #14]
 80044c0:	7b3a      	ldrb	r2, [r7, #12]
 80044c2:	4911      	ldr	r1, [pc, #68]	; (8004508 <UARTEx_SetNbDataToProcess+0x94>)
 80044c4:	5c8a      	ldrb	r2, [r1, r2]
 80044c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80044ca:	7b3a      	ldrb	r2, [r7, #12]
 80044cc:	490f      	ldr	r1, [pc, #60]	; (800450c <UARTEx_SetNbDataToProcess+0x98>)
 80044ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	7b7a      	ldrb	r2, [r7, #13]
 80044e0:	4909      	ldr	r1, [pc, #36]	; (8004508 <UARTEx_SetNbDataToProcess+0x94>)
 80044e2:	5c8a      	ldrb	r2, [r1, r2]
 80044e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80044e8:	7b7a      	ldrb	r2, [r7, #13]
 80044ea:	4908      	ldr	r1, [pc, #32]	; (800450c <UARTEx_SetNbDataToProcess+0x98>)
 80044ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80044fa:	bf00      	nop
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	080045b0 	.word	0x080045b0
 800450c:	080045b8 	.word	0x080045b8

08004510 <memset>:
 8004510:	4402      	add	r2, r0
 8004512:	4603      	mov	r3, r0
 8004514:	4293      	cmp	r3, r2
 8004516:	d100      	bne.n	800451a <memset+0xa>
 8004518:	4770      	bx	lr
 800451a:	f803 1b01 	strb.w	r1, [r3], #1
 800451e:	e7f9      	b.n	8004514 <memset+0x4>

08004520 <__libc_init_array>:
 8004520:	b570      	push	{r4, r5, r6, lr}
 8004522:	4d0d      	ldr	r5, [pc, #52]	; (8004558 <__libc_init_array+0x38>)
 8004524:	4c0d      	ldr	r4, [pc, #52]	; (800455c <__libc_init_array+0x3c>)
 8004526:	1b64      	subs	r4, r4, r5
 8004528:	10a4      	asrs	r4, r4, #2
 800452a:	2600      	movs	r6, #0
 800452c:	42a6      	cmp	r6, r4
 800452e:	d109      	bne.n	8004544 <__libc_init_array+0x24>
 8004530:	4d0b      	ldr	r5, [pc, #44]	; (8004560 <__libc_init_array+0x40>)
 8004532:	4c0c      	ldr	r4, [pc, #48]	; (8004564 <__libc_init_array+0x44>)
 8004534:	f000 f818 	bl	8004568 <_init>
 8004538:	1b64      	subs	r4, r4, r5
 800453a:	10a4      	asrs	r4, r4, #2
 800453c:	2600      	movs	r6, #0
 800453e:	42a6      	cmp	r6, r4
 8004540:	d105      	bne.n	800454e <__libc_init_array+0x2e>
 8004542:	bd70      	pop	{r4, r5, r6, pc}
 8004544:	f855 3b04 	ldr.w	r3, [r5], #4
 8004548:	4798      	blx	r3
 800454a:	3601      	adds	r6, #1
 800454c:	e7ee      	b.n	800452c <__libc_init_array+0xc>
 800454e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004552:	4798      	blx	r3
 8004554:	3601      	adds	r6, #1
 8004556:	e7f2      	b.n	800453e <__libc_init_array+0x1e>
 8004558:	080045c8 	.word	0x080045c8
 800455c:	080045c8 	.word	0x080045c8
 8004560:	080045c8 	.word	0x080045c8
 8004564:	080045cc 	.word	0x080045cc

08004568 <_init>:
 8004568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456a:	bf00      	nop
 800456c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456e:	bc08      	pop	{r3}
 8004570:	469e      	mov	lr, r3
 8004572:	4770      	bx	lr

08004574 <_fini>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	bf00      	nop
 8004578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457a:	bc08      	pop	{r3}
 800457c:	469e      	mov	lr, r3
 800457e:	4770      	bx	lr
