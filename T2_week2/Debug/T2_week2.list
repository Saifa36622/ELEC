
T2_week2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005400  08005400  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005400  08005400  00015400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005408  08005408  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005408  08005408  00015408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800540c  0800540c  0001540c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000000c  0800541c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  0800541c  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011cec  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000234a  00000000  00000000  00031d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  000340b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ade  00000000  00000000  00034ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261f5  00000000  00000000  000359b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e2a  00000000  00000000  0005bbab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc8bd  00000000  00000000  0006d9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b68  00000000  00000000  0016a294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0016ddfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080053a8 	.word	0x080053a8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080053a8 	.word	0x080053a8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb95 	bl	8000c46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f816 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f97c 	bl	800081c <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f950 	bl	80007c8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f904 	bl	8000734 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800052c:	f000 f85a 	bl	80005e4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_IT(&hadc1);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000530:	217f      	movs	r1, #127	; 0x7f
 8000532:	4804      	ldr	r0, [pc, #16]	; (8000544 <main+0x30>)
 8000534:	f002 f992 	bl	800285c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 40);
 8000538:	2228      	movs	r2, #40	; 0x28
 800053a:	4903      	ldr	r1, [pc, #12]	; (8000548 <main+0x34>)
 800053c:	4801      	ldr	r0, [pc, #4]	; (8000544 <main+0x30>)
 800053e:	f001 f815 	bl	800156c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000542:	e7fe      	b.n	8000542 <main+0x2e>
 8000544:	20000028 	.word	0x20000028
 8000548:	20000188 	.word	0x20000188

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	; 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	2238      	movs	r2, #56	; 0x38
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f004 fef8 	bl	8005350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800056e:	2000      	movs	r0, #0
 8000570:	f003 f850 	bl	8003614 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2340      	movs	r3, #64	; 0x40
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800058a:	2304      	movs	r3, #4
 800058c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800058e:	2355      	movs	r3, #85	; 0x55
 8000590:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0318 	add.w	r3, r7, #24
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 f8ea 	bl	800377c <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ae:	f000 f9a3 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2303      	movs	r3, #3
 80005b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2104      	movs	r1, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fbe8 	bl	8003da0 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005d6:	f000 f98f 	bl	80008f8 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	; 0x30
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2220      	movs	r2, #32
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 fea7 	bl	8005350 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000602:	4b47      	ldr	r3, [pc, #284]	; (8000720 <MX_ADC1_Init+0x13c>)
 8000604:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000608:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800060a:	4b45      	ldr	r3, [pc, #276]	; (8000720 <MX_ADC1_Init+0x13c>)
 800060c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000610:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000612:	4b43      	ldr	r3, [pc, #268]	; (8000720 <MX_ADC1_Init+0x13c>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000618:	4b41      	ldr	r3, [pc, #260]	; (8000720 <MX_ADC1_Init+0x13c>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061e:	4b40      	ldr	r3, [pc, #256]	; (8000720 <MX_ADC1_Init+0x13c>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000624:	4b3e      	ldr	r3, [pc, #248]	; (8000720 <MX_ADC1_Init+0x13c>)
 8000626:	2201      	movs	r2, #1
 8000628:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062a:	4b3d      	ldr	r3, [pc, #244]	; (8000720 <MX_ADC1_Init+0x13c>)
 800062c:	2204      	movs	r2, #4
 800062e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000630:	4b3b      	ldr	r3, [pc, #236]	; (8000720 <MX_ADC1_Init+0x13c>)
 8000632:	2200      	movs	r2, #0
 8000634:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000636:	4b3a      	ldr	r3, [pc, #232]	; (8000720 <MX_ADC1_Init+0x13c>)
 8000638:	2201      	movs	r2, #1
 800063a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 800063c:	4b38      	ldr	r3, [pc, #224]	; (8000720 <MX_ADC1_Init+0x13c>)
 800063e:	2204      	movs	r2, #4
 8000640:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000642:	4b37      	ldr	r3, [pc, #220]	; (8000720 <MX_ADC1_Init+0x13c>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064a:	4b35      	ldr	r3, [pc, #212]	; (8000720 <MX_ADC1_Init+0x13c>)
 800064c:	2200      	movs	r2, #0
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000650:	4b33      	ldr	r3, [pc, #204]	; (8000720 <MX_ADC1_Init+0x13c>)
 8000652:	2200      	movs	r2, #0
 8000654:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000656:	4b32      	ldr	r3, [pc, #200]	; (8000720 <MX_ADC1_Init+0x13c>)
 8000658:	2201      	movs	r2, #1
 800065a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065e:	4b30      	ldr	r3, [pc, #192]	; (8000720 <MX_ADC1_Init+0x13c>)
 8000660:	2200      	movs	r2, #0
 8000662:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000664:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <MX_ADC1_Init+0x13c>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	482c      	ldr	r0, [pc, #176]	; (8000720 <MX_ADC1_Init+0x13c>)
 800066e:	f000 fdc1 	bl	80011f4 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000678:	f000 f93e 	bl	80008f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000684:	4619      	mov	r1, r3
 8000686:	4826      	ldr	r0, [pc, #152]	; (8000720 <MX_ADC1_Init+0x13c>)
 8000688:	f002 f97c 	bl	8002984 <HAL_ADCEx_MultiModeConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000692:	f000 f931 	bl	80008f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000696:	4b23      	ldr	r3, [pc, #140]	; (8000724 <MX_ADC1_Init+0x140>)
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069a:	2306      	movs	r3, #6
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800069e:	2307      	movs	r3, #7
 80006a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a2:	237f      	movs	r3, #127	; 0x7f
 80006a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a6:	2304      	movs	r3, #4
 80006a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	481b      	ldr	r0, [pc, #108]	; (8000720 <MX_ADC1_Init+0x13c>)
 80006b4:	f001 fab6 	bl	8001c24 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006be:	f000 f91b 	bl	80008f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <MX_ADC1_Init+0x144>)
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c6:	230c      	movs	r3, #12
 80006c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	4814      	ldr	r0, [pc, #80]	; (8000720 <MX_ADC1_Init+0x13c>)
 80006d0:	f001 faa8 	bl	8001c24 <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006da:	f000 f90d 	bl	80008f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_ADC1_Init+0x148>)
 80006e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e2:	2312      	movs	r3, #18
 80006e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	480d      	ldr	r0, [pc, #52]	; (8000720 <MX_ADC1_Init+0x13c>)
 80006ec:	f001 fa9a 	bl	8001c24 <HAL_ADC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80006f6:	f000 f8ff 	bl	80008f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_ADC1_Init+0x14c>)
 80006fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006fe:	2318      	movs	r3, #24
 8000700:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4619      	mov	r1, r3
 8000706:	4806      	ldr	r0, [pc, #24]	; (8000720 <MX_ADC1_Init+0x13c>)
 8000708:	f001 fa8c 	bl	8001c24 <HAL_ADC_ConfigChannel>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000712:	f000 f8f1 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	3730      	adds	r7, #48	; 0x30
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000028 	.word	0x20000028
 8000724:	04300002 	.word	0x04300002
 8000728:	08600004 	.word	0x08600004
 800072c:	3ef08000 	.word	0x3ef08000
 8000730:	c3210000 	.word	0xc3210000

08000734 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000738:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 800073a:	4a22      	ldr	r2, [pc, #136]	; (80007c4 <MX_LPUART1_UART_Init+0x90>)
 800073c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000776:	4812      	ldr	r0, [pc, #72]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 8000778:	f003 ff7c 	bl	8004674 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 f8b9 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000786:	2100      	movs	r1, #0
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 800078a:	f004 fd17 	bl	80051bc <HAL_UARTEx_SetTxFifoThreshold>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000794:	f000 f8b0 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000798:	2100      	movs	r1, #0
 800079a:	4809      	ldr	r0, [pc, #36]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 800079c:	f004 fd4c 	bl	8005238 <HAL_UARTEx_SetRxFifoThreshold>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007a6:	f000 f8a7 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 80007ac:	f004 fccd 	bl	800514a <HAL_UARTEx_DisableFifoMode>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007b6:	f000 f89f 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000f4 	.word	0x200000f4
 80007c4:	40008000 	.word	0x40008000

080007c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_DMA_Init+0x50>)
 80007d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007d2:	4a11      	ldr	r2, [pc, #68]	; (8000818 <MX_DMA_Init+0x50>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6493      	str	r3, [r2, #72]	; 0x48
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_DMA_Init+0x50>)
 80007dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_DMA_Init+0x50>)
 80007e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ea:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <MX_DMA_Init+0x50>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6493      	str	r3, [r2, #72]	; 0x48
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_DMA_Init+0x50>)
 80007f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	200b      	movs	r0, #11
 8000804:	f002 faa1 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000808:	200b      	movs	r0, #11
 800080a:	f002 fab8 	bl	8002d7e <HAL_NVIC_EnableIRQ>

}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <MX_GPIO_Init+0xd4>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <MX_GPIO_Init+0xd4>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <MX_GPIO_Init+0xd4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <MX_GPIO_Init+0xd4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a28      	ldr	r2, [pc, #160]	; (80008f0 <MX_GPIO_Init+0xd4>)
 8000850:	f043 0320 	orr.w	r3, r3, #32
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <MX_GPIO_Init+0xd4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0320 	and.w	r3, r3, #32
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <MX_GPIO_Init+0xd4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a22      	ldr	r2, [pc, #136]	; (80008f0 <MX_GPIO_Init+0xd4>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_GPIO_Init+0xd4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_GPIO_Init+0xd4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <MX_GPIO_Init+0xd4>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_GPIO_Init+0xd4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2120      	movs	r1, #32
 8000896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089a:	f002 fe7f 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	480f      	ldr	r0, [pc, #60]	; (80008f4 <MX_GPIO_Init+0xd8>)
 80008b6:	f002 fcef 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ba:	2320      	movs	r3, #32
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d4:	f002 fce0 	bl	8003298 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	2028      	movs	r0, #40	; 0x28
 80008de:	f002 fa34 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008e2:	2028      	movs	r0, #40	; 0x28
 80008e4:	f002 fa4b 	bl	8002d7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40021000 	.word	0x40021000
 80008f4:	48000800 	.word	0x48000800

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <HAL_MspInit+0x44>)
 800090c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090e:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <HAL_MspInit+0x44>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6613      	str	r3, [r2, #96]	; 0x60
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <HAL_MspInit+0x44>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x44>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x44>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6593      	str	r3, [r2, #88]	; 0x58
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x44>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800093a:	f002 ff0f 	bl	800375c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000

0800094c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b0a0      	sub	sp, #128	; 0x80
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000964:	f107 0318 	add.w	r3, r7, #24
 8000968:	2254      	movs	r2, #84	; 0x54
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f004 fcef 	bl	8005350 <memset>
  if(hadc->Instance==ADC1)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800097a:	d17f      	bne.n	8000a7c <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800097c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000980:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000982:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000986:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000988:	f107 0318 	add.w	r3, r7, #24
 800098c:	4618      	mov	r0, r3
 800098e:	f003 fc23 	bl	80041d8 <HAL_RCCEx_PeriphCLKConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000998:	f7ff ffae 	bl	80008f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800099c:	4b39      	ldr	r3, [pc, #228]	; (8000a84 <HAL_ADC_MspInit+0x138>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a0:	4a38      	ldr	r2, [pc, #224]	; (8000a84 <HAL_ADC_MspInit+0x138>)
 80009a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a8:	4b36      	ldr	r3, [pc, #216]	; (8000a84 <HAL_ADC_MspInit+0x138>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b33      	ldr	r3, [pc, #204]	; (8000a84 <HAL_ADC_MspInit+0x138>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b8:	4a32      	ldr	r2, [pc, #200]	; (8000a84 <HAL_ADC_MspInit+0x138>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c0:	4b30      	ldr	r3, [pc, #192]	; (8000a84 <HAL_ADC_MspInit+0x138>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009cc:	4b2d      	ldr	r3, [pc, #180]	; (8000a84 <HAL_ADC_MspInit+0x138>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d0:	4a2c      	ldr	r2, [pc, #176]	; (8000a84 <HAL_ADC_MspInit+0x138>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d8:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <HAL_ADC_MspInit+0x138>)
 80009da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009e4:	2303      	movs	r3, #3
 80009e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e8:	2303      	movs	r3, #3
 80009ea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009f4:	4619      	mov	r1, r3
 80009f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fa:	f002 fc4d 	bl	8003298 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009fe:	2301      	movs	r3, #1
 8000a00:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a02:	2303      	movs	r3, #3
 8000a04:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	481d      	ldr	r0, [pc, #116]	; (8000a88 <HAL_ADC_MspInit+0x13c>)
 8000a12:	f002 fc41 	bl	8003298 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a16:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <HAL_ADC_MspInit+0x140>)
 8000a18:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <HAL_ADC_MspInit+0x144>)
 8000a1a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <HAL_ADC_MspInit+0x140>)
 8000a1e:	2205      	movs	r2, #5
 8000a20:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <HAL_ADC_MspInit+0x140>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_ADC_MspInit+0x140>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <HAL_ADC_MspInit+0x140>)
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_ADC_MspInit+0x140>)
 8000a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a3a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <HAL_ADC_MspInit+0x140>)
 8000a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a42:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_ADC_MspInit+0x140>)
 8000a46:	2220      	movs	r2, #32
 8000a48:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <HAL_ADC_MspInit+0x140>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a50:	480e      	ldr	r0, [pc, #56]	; (8000a8c <HAL_ADC_MspInit+0x140>)
 8000a52:	f002 f9af 	bl	8002db4 <HAL_DMA_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000a5c:	f7ff ff4c 	bl	80008f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_ADC_MspInit+0x140>)
 8000a64:	655a      	str	r2, [r3, #84]	; 0x54
 8000a66:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <HAL_ADC_MspInit+0x140>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2012      	movs	r0, #18
 8000a72:	f002 f96a 	bl	8002d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a76:	2012      	movs	r0, #18
 8000a78:	f002 f981 	bl	8002d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	3780      	adds	r7, #128	; 0x80
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40021000 	.word	0x40021000
 8000a88:	48000400 	.word	0x48000400
 8000a8c:	20000094 	.word	0x20000094
 8000a90:	40020008 	.word	0x40020008

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09e      	sub	sp, #120	; 0x78
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	2254      	movs	r2, #84	; 0x54
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f004 fc4b 	bl	8005350 <memset>
  if(huart->Instance==LPUART1)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a1f      	ldr	r2, [pc, #124]	; (8000b3c <HAL_UART_MspInit+0xa8>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d136      	bne.n	8000b32 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ac4:	2320      	movs	r3, #32
 8000ac6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f003 fb81 	bl	80041d8 <HAL_RCCEx_PeriphCLKConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000adc:	f7ff ff0c 	bl	80008f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_UART_MspInit+0xac>)
 8000ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae4:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <HAL_UART_MspInit+0xac>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_UART_MspInit+0xac>)
 8000aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_UART_MspInit+0xac>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afc:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <HAL_UART_MspInit+0xac>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_UART_MspInit+0xac>)
 8000b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b10:	230c      	movs	r3, #12
 8000b12:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b20:	230c      	movs	r3, #12
 8000b22:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2e:	f002 fbb3 	bl	8003298 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b32:	bf00      	nop
 8000b34:	3778      	adds	r7, #120	; 0x78
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40008000 	.word	0x40008000
 8000b40:	40021000 	.word	0x40021000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f8ac 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <DMA1_Channel1_IRQHandler+0x10>)
 8000b9e:	f002 fa2c 	bl	8002ffa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000094 	.word	0x20000094

08000bac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <ADC1_2_IRQHandler+0x10>)
 8000bb2:	f000 fdaf 	bl	8001714 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000028 	.word	0x20000028

08000bc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bc4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bc8:	f002 fd00 	bl	80035cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bf6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf8:	f7ff ffea 	bl	8000bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfe:	490d      	ldr	r1, [pc, #52]	; (8000c34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <LoopForever+0xe>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c14:	4c0a      	ldr	r4, [pc, #40]	; (8000c40 <LoopForever+0x16>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c22:	f004 fb9d 	bl	8005360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c26:	f7ff fc75 	bl	8000514 <main>

08000c2a <LoopForever>:

LoopForever:
    b LoopForever
 8000c2a:	e7fe      	b.n	8000c2a <LoopForever>
  ldr   r0, =_estack
 8000c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c38:	08005410 	.word	0x08005410
  ldr r2, =_sbss
 8000c3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c40:	200001dc 	.word	0x200001dc

08000c44 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC3_IRQHandler>

08000c46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f002 f86f 	bl	8002d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c56:	2000      	movs	r0, #0
 8000c58:	f000 f80e 	bl	8000c78 <HAL_InitTick>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	71fb      	strb	r3, [r7, #7]
 8000c66:	e001      	b.n	8000c6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c68:	f7ff fe4c 	bl	8000904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]

}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_InitTick+0x68>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d022      	beq.n	8000cd2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_InitTick+0x6c>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_InitTick+0x68>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 f87a 	bl	8002d9a <HAL_SYSTICK_Config>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d10f      	bne.n	8000ccc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b0f      	cmp	r3, #15
 8000cb0:	d809      	bhi.n	8000cc6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cba:	f002 f846 	bl	8002d4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <HAL_InitTick+0x70>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	e007      	b.n	8000cd6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	73fb      	strb	r3, [r7, #15]
 8000cca:	e004      	b.n	8000cd6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	73fb      	strb	r3, [r7, #15]
 8000cd0:	e001      	b.n	8000cd6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_IncTick+0x1c>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <HAL_IncTick+0x20>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a03      	ldr	r2, [pc, #12]	; (8000d08 <HAL_IncTick+0x1c>)
 8000cfc:	6013      	str	r3, [r2, #0]
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	200001d8 	.word	0x200001d8
 8000d0c:	20000008 	.word	0x20000008

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200001d8 	.word	0x200001d8

08000d28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	609a      	str	r2, [r3, #8]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	431a      	orrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	609a      	str	r2, [r3, #8]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	3360      	adds	r3, #96	; 0x60
 8000da2:	461a      	mov	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <LL_ADC_SetOffset+0x44>)
 8000db2:	4013      	ands	r3, r2
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000dc8:	bf00      	nop
 8000dca:	371c      	adds	r7, #28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	03fff000 	.word	0x03fff000

08000dd8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3360      	adds	r3, #96	; 0x60
 8000de6:	461a      	mov	r2, r3
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b087      	sub	sp, #28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3360      	adds	r3, #96	; 0x60
 8000e14:	461a      	mov	r2, r3
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e2e:	bf00      	nop
 8000e30:	371c      	adds	r7, #28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b087      	sub	sp, #28
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3360      	adds	r3, #96	; 0x60
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000e64:	bf00      	nop
 8000e66:	371c      	adds	r7, #28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3360      	adds	r3, #96	; 0x60
 8000e80:	461a      	mov	r2, r3
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	431a      	orrs	r2, r3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000e9a:	bf00      	nop
 8000e9c:	371c      	adds	r7, #28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	615a      	str	r2, [r3, #20]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d101      	bne.n	8000ee4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e000      	b.n	8000ee6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b087      	sub	sp, #28
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3330      	adds	r3, #48	; 0x30
 8000f02:	461a      	mov	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	0a1b      	lsrs	r3, r3, #8
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	f003 030c 	and.w	r3, r3, #12
 8000f0e:	4413      	add	r3, r2
 8000f10:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	f003 031f 	and.w	r3, r3, #31
 8000f1c:	211f      	movs	r1, #31
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	401a      	ands	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	0e9b      	lsrs	r3, r3, #26
 8000f2a:	f003 011f 	and.w	r1, r3, #31
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	f003 031f 	and.w	r3, r3, #31
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f3e:	bf00      	nop
 8000f40:	371c      	adds	r7, #28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3314      	adds	r3, #20
 8000f80:	461a      	mov	r2, r3
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	0e5b      	lsrs	r3, r3, #25
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	4413      	add	r3, r2
 8000f8e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	0d1b      	lsrs	r3, r3, #20
 8000f98:	f003 031f 	and.w	r3, r3, #31
 8000f9c:	2107      	movs	r1, #7
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	0d1b      	lsrs	r3, r3, #20
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fba:	bf00      	nop
 8000fbc:	371c      	adds	r7, #28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0318 	and.w	r3, r3, #24
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000fec:	40d9      	lsrs	r1, r3
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	400b      	ands	r3, r1
 8000ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	0007ffff 	.word	0x0007ffff

08001010 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 031f 	and.w	r3, r3, #31
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001058:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	6093      	str	r3, [r2, #8]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800107c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001080:	d101      	bne.n	8001086 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010d0:	d101      	bne.n	80010d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010f8:	f043 0201 	orr.w	r2, r3, #1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800111c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001120:	f043 0202 	orr.w	r2, r3, #2
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <LL_ADC_IsEnabled+0x18>
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <LL_ADC_IsEnabled+0x1a>
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b02      	cmp	r3, #2
 800116c:	d101      	bne.n	8001172 <LL_ADC_IsDisableOngoing+0x18>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <LL_ADC_IsDisableOngoing+0x1a>
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001190:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001194:	f043 0204 	orr.w	r2, r3, #4
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d101      	bne.n	80011c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d101      	bne.n	80011e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e1a9      	b.n	8001562 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001218:	2b00      	cmp	r3, #0
 800121a:	d109      	bne.n	8001230 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff fb95 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff19 	bl	800106c <LL_ADC_IsDeepPowerDownEnabled>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d004      	beq.n	800124a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff feff 	bl	8001048 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff34 	bl	80010bc <LL_ADC_IsInternalRegulatorEnabled>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d115      	bne.n	8001286 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff18 	bl	8001094 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001264:	4b9c      	ldr	r3, [pc, #624]	; (80014d8 <HAL_ADC_Init+0x2e4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	099b      	lsrs	r3, r3, #6
 800126a:	4a9c      	ldr	r2, [pc, #624]	; (80014dc <HAL_ADC_Init+0x2e8>)
 800126c:	fba2 2303 	umull	r2, r3, r2, r3
 8001270:	099b      	lsrs	r3, r3, #6
 8001272:	3301      	adds	r3, #1
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001278:	e002      	b.n	8001280 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3b01      	subs	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f9      	bne.n	800127a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff16 	bl	80010bc <LL_ADC_IsInternalRegulatorEnabled>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10d      	bne.n	80012b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129a:	f043 0210 	orr.w	r2, r3, #16
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a6:	f043 0201 	orr.w	r2, r3, #1
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff76 	bl	80011a8 <LL_ADC_REG_IsConversionOngoing>
 80012bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f040 8142 	bne.w	8001550 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f040 813e 	bne.w	8001550 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012dc:	f043 0202 	orr.w	r2, r3, #2
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff23 	bl	8001134 <LL_ADC_IsEnabled>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d141      	bne.n	8001378 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012fc:	d004      	beq.n	8001308 <HAL_ADC_Init+0x114>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a77      	ldr	r2, [pc, #476]	; (80014e0 <HAL_ADC_Init+0x2ec>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d10f      	bne.n	8001328 <HAL_ADC_Init+0x134>
 8001308:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800130c:	f7ff ff12 	bl	8001134 <LL_ADC_IsEnabled>
 8001310:	4604      	mov	r4, r0
 8001312:	4873      	ldr	r0, [pc, #460]	; (80014e0 <HAL_ADC_Init+0x2ec>)
 8001314:	f7ff ff0e 	bl	8001134 <LL_ADC_IsEnabled>
 8001318:	4603      	mov	r3, r0
 800131a:	4323      	orrs	r3, r4
 800131c:	2b00      	cmp	r3, #0
 800131e:	bf0c      	ite	eq
 8001320:	2301      	moveq	r3, #1
 8001322:	2300      	movne	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	e012      	b.n	800134e <HAL_ADC_Init+0x15a>
 8001328:	486e      	ldr	r0, [pc, #440]	; (80014e4 <HAL_ADC_Init+0x2f0>)
 800132a:	f7ff ff03 	bl	8001134 <LL_ADC_IsEnabled>
 800132e:	4604      	mov	r4, r0
 8001330:	486d      	ldr	r0, [pc, #436]	; (80014e8 <HAL_ADC_Init+0x2f4>)
 8001332:	f7ff feff 	bl	8001134 <LL_ADC_IsEnabled>
 8001336:	4603      	mov	r3, r0
 8001338:	431c      	orrs	r4, r3
 800133a:	486c      	ldr	r0, [pc, #432]	; (80014ec <HAL_ADC_Init+0x2f8>)
 800133c:	f7ff fefa 	bl	8001134 <LL_ADC_IsEnabled>
 8001340:	4603      	mov	r3, r0
 8001342:	4323      	orrs	r3, r4
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf0c      	ite	eq
 8001348:	2301      	moveq	r3, #1
 800134a:	2300      	movne	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d012      	beq.n	8001378 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800135a:	d004      	beq.n	8001366 <HAL_ADC_Init+0x172>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a5f      	ldr	r2, [pc, #380]	; (80014e0 <HAL_ADC_Init+0x2ec>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d101      	bne.n	800136a <HAL_ADC_Init+0x176>
 8001366:	4a62      	ldr	r2, [pc, #392]	; (80014f0 <HAL_ADC_Init+0x2fc>)
 8001368:	e000      	b.n	800136c <HAL_ADC_Init+0x178>
 800136a:	4a62      	ldr	r2, [pc, #392]	; (80014f4 <HAL_ADC_Init+0x300>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4619      	mov	r1, r3
 8001372:	4610      	mov	r0, r2
 8001374:	f7ff fcd8 	bl	8000d28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7f5b      	ldrb	r3, [r3, #29]
 800137c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001382:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001388:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800138e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001396:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d106      	bne.n	80013b4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013aa:	3b01      	subs	r3, #1
 80013ac:	045b      	lsls	r3, r3, #17
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d009      	beq.n	80013d0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	4b48      	ldr	r3, [pc, #288]	; (80014f8 <HAL_ADC_Init+0x304>)
 80013d8:	4013      	ands	r3, r2
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	69b9      	ldr	r1, [r7, #24]
 80013e0:	430b      	orrs	r3, r1
 80013e2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fee5 	bl	80011ce <LL_ADC_INJ_IsConversionOngoing>
 8001404:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d17f      	bne.n	800150c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d17c      	bne.n	800150c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001416:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800141e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800142e:	f023 0302 	bic.w	r3, r3, #2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	69b9      	ldr	r1, [r7, #24]
 8001438:	430b      	orrs	r3, r1
 800143a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d017      	beq.n	8001474 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	691a      	ldr	r2, [r3, #16]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001452:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800145c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001460:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6911      	ldr	r1, [r2, #16]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	430b      	orrs	r3, r1
 800146e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001472:	e013      	b.n	800149c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001482:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001498:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d12a      	bne.n	80014fc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014b0:	f023 0304 	bic.w	r3, r3, #4
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014bc:	4311      	orrs	r1, r2
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80014c2:	4311      	orrs	r1, r2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014c8:	430a      	orrs	r2, r1
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0201 	orr.w	r2, r2, #1
 80014d4:	611a      	str	r2, [r3, #16]
 80014d6:	e019      	b.n	800150c <HAL_ADC_Init+0x318>
 80014d8:	20000000 	.word	0x20000000
 80014dc:	053e2d63 	.word	0x053e2d63
 80014e0:	50000100 	.word	0x50000100
 80014e4:	50000400 	.word	0x50000400
 80014e8:	50000500 	.word	0x50000500
 80014ec:	50000600 	.word	0x50000600
 80014f0:	50000300 	.word	0x50000300
 80014f4:	50000700 	.word	0x50000700
 80014f8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0201 	bic.w	r2, r2, #1
 800150a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d10c      	bne.n	800152e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f023 010f 	bic.w	r1, r3, #15
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	1e5a      	subs	r2, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	631a      	str	r2, [r3, #48]	; 0x30
 800152c:	e007      	b.n	800153e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 020f 	bic.w	r2, r2, #15
 800153c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001542:	f023 0303 	bic.w	r3, r3, #3
 8001546:	f043 0201 	orr.w	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	65da      	str	r2, [r3, #92]	; 0x5c
 800154e:	e007      	b.n	8001560 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001554:	f043 0210 	orr.w	r2, r3, #16
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001560:	7ffb      	ldrb	r3, [r7, #31]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd90      	pop	{r4, r7, pc}
 800156a:	bf00      	nop

0800156c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001580:	d004      	beq.n	800158c <HAL_ADC_Start_DMA+0x20>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a5a      	ldr	r2, [pc, #360]	; (80016f0 <HAL_ADC_Start_DMA+0x184>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d101      	bne.n	8001590 <HAL_ADC_Start_DMA+0x24>
 800158c:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <HAL_ADC_Start_DMA+0x188>)
 800158e:	e000      	b.n	8001592 <HAL_ADC_Start_DMA+0x26>
 8001590:	4b59      	ldr	r3, [pc, #356]	; (80016f8 <HAL_ADC_Start_DMA+0x18c>)
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fd3c 	bl	8001010 <LL_ADC_GetMultimode>
 8001598:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fe02 	bl	80011a8 <LL_ADC_REG_IsConversionOngoing>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f040 809b 	bne.w	80016e2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <HAL_ADC_Start_DMA+0x4e>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e096      	b.n	80016e8 <HAL_ADC_Start_DMA+0x17c>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a4d      	ldr	r2, [pc, #308]	; (80016fc <HAL_ADC_Start_DMA+0x190>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d008      	beq.n	80015de <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	2b05      	cmp	r3, #5
 80015d6:	d002      	beq.n	80015de <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	2b09      	cmp	r3, #9
 80015dc:	d17a      	bne.n	80016d4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f000 ff60 	bl	80024a4 <ADC_Enable>
 80015e4:	4603      	mov	r3, r0
 80015e6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d16d      	bne.n	80016ca <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015f6:	f023 0301 	bic.w	r3, r3, #1
 80015fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a3a      	ldr	r2, [pc, #232]	; (80016f0 <HAL_ADC_Start_DMA+0x184>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d009      	beq.n	8001620 <HAL_ADC_Start_DMA+0xb4>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a3b      	ldr	r2, [pc, #236]	; (8001700 <HAL_ADC_Start_DMA+0x194>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d002      	beq.n	800161c <HAL_ADC_Start_DMA+0xb0>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	e003      	b.n	8001624 <HAL_ADC_Start_DMA+0xb8>
 800161c:	4b39      	ldr	r3, [pc, #228]	; (8001704 <HAL_ADC_Start_DMA+0x198>)
 800161e:	e001      	b.n	8001624 <HAL_ADC_Start_DMA+0xb8>
 8001620:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	4293      	cmp	r3, r2
 800162a:	d002      	beq.n	8001632 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d105      	bne.n	800163e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001636:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164e:	f023 0206 	bic.w	r2, r3, #6
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	661a      	str	r2, [r3, #96]	; 0x60
 8001656:	e002      	b.n	800165e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001662:	4a29      	ldr	r2, [pc, #164]	; (8001708 <HAL_ADC_Start_DMA+0x19c>)
 8001664:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166a:	4a28      	ldr	r2, [pc, #160]	; (800170c <HAL_ADC_Start_DMA+0x1a0>)
 800166c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001672:	4a27      	ldr	r2, [pc, #156]	; (8001710 <HAL_ADC_Start_DMA+0x1a4>)
 8001674:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	221c      	movs	r2, #28
 800167c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0210 	orr.w	r2, r2, #16
 8001694:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0201 	orr.w	r2, r2, #1
 80016a4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3340      	adds	r3, #64	; 0x40
 80016b0:	4619      	mov	r1, r3
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f001 fc25 	bl	8002f04 <HAL_DMA_Start_IT>
 80016ba:	4603      	mov	r3, r0
 80016bc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fd5c 	bl	8001180 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80016c8:	e00d      	b.n	80016e6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80016d2:	e008      	b.n	80016e6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80016e0:	e001      	b.n	80016e6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016e2:	2302      	movs	r3, #2
 80016e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	50000100 	.word	0x50000100
 80016f4:	50000300 	.word	0x50000300
 80016f8:	50000700 	.word	0x50000700
 80016fc:	50000600 	.word	0x50000600
 8001700:	50000500 	.word	0x50000500
 8001704:	50000400 	.word	0x50000400
 8001708:	0800268f 	.word	0x0800268f
 800170c:	08002767 	.word	0x08002767
 8001710:	08002783 	.word	0x08002783

08001714 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001738:	d004      	beq.n	8001744 <HAL_ADC_IRQHandler+0x30>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a8e      	ldr	r2, [pc, #568]	; (8001978 <HAL_ADC_IRQHandler+0x264>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d101      	bne.n	8001748 <HAL_ADC_IRQHandler+0x34>
 8001744:	4b8d      	ldr	r3, [pc, #564]	; (800197c <HAL_ADC_IRQHandler+0x268>)
 8001746:	e000      	b.n	800174a <HAL_ADC_IRQHandler+0x36>
 8001748:	4b8d      	ldr	r3, [pc, #564]	; (8001980 <HAL_ADC_IRQHandler+0x26c>)
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fc60 	bl	8001010 <LL_ADC_GetMultimode>
 8001750:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d017      	beq.n	800178c <HAL_ADC_IRQHandler+0x78>
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d012      	beq.n	800178c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176a:	f003 0310 	and.w	r3, r3, #16
 800176e:	2b00      	cmp	r3, #0
 8001770:	d105      	bne.n	800177e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001776:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f001 f8f6 	bl	8002970 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2202      	movs	r2, #2
 800178a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	d004      	beq.n	80017a0 <HAL_ADC_IRQHandler+0x8c>
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10b      	bne.n	80017b8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 8094 	beq.w	80018d4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 808e 	beq.w	80018d4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d105      	bne.n	80017d0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fb79 	bl	8000ecc <LL_ADC_REG_IsTriggerSourceSWStart>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d072      	beq.n	80018c6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a64      	ldr	r2, [pc, #400]	; (8001978 <HAL_ADC_IRQHandler+0x264>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d009      	beq.n	80017fe <HAL_ADC_IRQHandler+0xea>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a65      	ldr	r2, [pc, #404]	; (8001984 <HAL_ADC_IRQHandler+0x270>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d002      	beq.n	80017fa <HAL_ADC_IRQHandler+0xe6>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	e003      	b.n	8001802 <HAL_ADC_IRQHandler+0xee>
 80017fa:	4b63      	ldr	r3, [pc, #396]	; (8001988 <HAL_ADC_IRQHandler+0x274>)
 80017fc:	e001      	b.n	8001802 <HAL_ADC_IRQHandler+0xee>
 80017fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	4293      	cmp	r3, r2
 8001808:	d008      	beq.n	800181c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b05      	cmp	r3, #5
 8001814:	d002      	beq.n	800181c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	2b09      	cmp	r3, #9
 800181a:	d104      	bne.n	8001826 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	623b      	str	r3, [r7, #32]
 8001824:	e014      	b.n	8001850 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a53      	ldr	r2, [pc, #332]	; (8001978 <HAL_ADC_IRQHandler+0x264>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d009      	beq.n	8001844 <HAL_ADC_IRQHandler+0x130>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a53      	ldr	r2, [pc, #332]	; (8001984 <HAL_ADC_IRQHandler+0x270>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d002      	beq.n	8001840 <HAL_ADC_IRQHandler+0x12c>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	e003      	b.n	8001848 <HAL_ADC_IRQHandler+0x134>
 8001840:	4b51      	ldr	r3, [pc, #324]	; (8001988 <HAL_ADC_IRQHandler+0x274>)
 8001842:	e001      	b.n	8001848 <HAL_ADC_IRQHandler+0x134>
 8001844:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001848:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d135      	bne.n	80018c6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	2b08      	cmp	r3, #8
 8001866:	d12e      	bne.n	80018c6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fc9b 	bl	80011a8 <LL_ADC_REG_IsConversionOngoing>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d11a      	bne.n	80018ae <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 020c 	bic.w	r2, r2, #12
 8001886:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d112      	bne.n	80018c6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a4:	f043 0201 	orr.w	r2, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80018ac:	e00b      	b.n	80018c6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b2:	f043 0210 	orr.w	r2, r3, #16
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018be:	f043 0201 	orr.w	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f984 	bl	8001bd4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	220c      	movs	r2, #12
 80018d2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d004      	beq.n	80018e8 <HAL_ADC_IRQHandler+0x1d4>
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	f003 0320 	and.w	r3, r3, #32
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10b      	bne.n	8001900 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 80b3 	beq.w	8001a5a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80ad 	beq.w	8001a5a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	2b00      	cmp	r3, #0
 800190a:	d105      	bne.n	8001918 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001910:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fb14 	bl	8000f4a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001922:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff facf 	bl	8000ecc <LL_ADC_REG_IsTriggerSourceSWStart>
 800192e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a10      	ldr	r2, [pc, #64]	; (8001978 <HAL_ADC_IRQHandler+0x264>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d009      	beq.n	800194e <HAL_ADC_IRQHandler+0x23a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a11      	ldr	r2, [pc, #68]	; (8001984 <HAL_ADC_IRQHandler+0x270>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d002      	beq.n	800194a <HAL_ADC_IRQHandler+0x236>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	e003      	b.n	8001952 <HAL_ADC_IRQHandler+0x23e>
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_ADC_IRQHandler+0x274>)
 800194c:	e001      	b.n	8001952 <HAL_ADC_IRQHandler+0x23e>
 800194e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	4293      	cmp	r3, r2
 8001958:	d008      	beq.n	800196c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2b06      	cmp	r3, #6
 8001964:	d002      	beq.n	800196c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2b07      	cmp	r3, #7
 800196a:	d10f      	bne.n	800198c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	623b      	str	r3, [r7, #32]
 8001974:	e01f      	b.n	80019b6 <HAL_ADC_IRQHandler+0x2a2>
 8001976:	bf00      	nop
 8001978:	50000100 	.word	0x50000100
 800197c:	50000300 	.word	0x50000300
 8001980:	50000700 	.word	0x50000700
 8001984:	50000500 	.word	0x50000500
 8001988:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a8b      	ldr	r2, [pc, #556]	; (8001bc0 <HAL_ADC_IRQHandler+0x4ac>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d009      	beq.n	80019aa <HAL_ADC_IRQHandler+0x296>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a8a      	ldr	r2, [pc, #552]	; (8001bc4 <HAL_ADC_IRQHandler+0x4b0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d002      	beq.n	80019a6 <HAL_ADC_IRQHandler+0x292>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	e003      	b.n	80019ae <HAL_ADC_IRQHandler+0x29a>
 80019a6:	4b88      	ldr	r3, [pc, #544]	; (8001bc8 <HAL_ADC_IRQHandler+0x4b4>)
 80019a8:	e001      	b.n	80019ae <HAL_ADC_IRQHandler+0x29a>
 80019aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019ae:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d047      	beq.n	8001a4c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d007      	beq.n	80019d6 <HAL_ADC_IRQHandler+0x2c2>
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d03f      	beq.n	8001a4c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d13a      	bne.n	8001a4c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e0:	2b40      	cmp	r3, #64	; 0x40
 80019e2:	d133      	bne.n	8001a4c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80019e4:	6a3b      	ldr	r3, [r7, #32]
 80019e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d12e      	bne.n	8001a4c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fbeb 	bl	80011ce <LL_ADC_INJ_IsConversionOngoing>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d11a      	bne.n	8001a34 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a0c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d112      	bne.n	8001a4c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	f043 0201 	orr.w	r2, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a32:	e00b      	b.n	8001a4c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a38:	f043 0210 	orr.w	r2, r3, #16
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a44:	f043 0201 	orr.w	r2, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 ff67 	bl	8002920 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2260      	movs	r2, #96	; 0x60
 8001a58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d011      	beq.n	8001a88 <HAL_ADC_IRQHandler+0x374>
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00c      	beq.n	8001a88 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f8be 	bl	8001bfc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d012      	beq.n	8001ab8 <HAL_ADC_IRQHandler+0x3a4>
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00d      	beq.n	8001ab8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 ff4d 	bl	8002948 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ab6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d012      	beq.n	8001ae8 <HAL_ADC_IRQHandler+0x3d4>
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00d      	beq.n	8001ae8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 ff3f 	bl	800295c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d043      	beq.n	8001b7a <HAL_ADC_IRQHandler+0x466>
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d03e      	beq.n	8001b7a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8001b04:	2301      	movs	r3, #1
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
 8001b08:	e021      	b.n	8001b4e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d015      	beq.n	8001b3c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b18:	d004      	beq.n	8001b24 <HAL_ADC_IRQHandler+0x410>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a28      	ldr	r2, [pc, #160]	; (8001bc0 <HAL_ADC_IRQHandler+0x4ac>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d101      	bne.n	8001b28 <HAL_ADC_IRQHandler+0x414>
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <HAL_ADC_IRQHandler+0x4b8>)
 8001b26:	e000      	b.n	8001b2a <HAL_ADC_IRQHandler+0x416>
 8001b28:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <HAL_ADC_IRQHandler+0x4bc>)
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fa7e 	bl	800102c <LL_ADC_GetMultiDMATransfer>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00b      	beq.n	8001b4e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001b36:	2301      	movs	r3, #1
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3a:	e008      	b.n	8001b4e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d10e      	bne.n	8001b72 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b64:	f043 0202 	orr.w	r2, r3, #2
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f84f 	bl	8001c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2210      	movs	r2, #16
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d018      	beq.n	8001bb6 <HAL_ADC_IRQHandler+0x4a2>
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d013      	beq.n	8001bb6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b92:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9e:	f043 0208 	orr.w	r2, r3, #8
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bae:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 febf 	bl	8002934 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001bb6:	bf00      	nop
 8001bb8:	3728      	adds	r7, #40	; 0x28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	50000100 	.word	0x50000100
 8001bc4:	50000500 	.word	0x50000500
 8001bc8:	50000400 	.word	0x50000400
 8001bcc:	50000300 	.word	0x50000300
 8001bd0:	50000700 	.word	0x50000700

08001bd4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b0b6      	sub	sp, #216	; 0xd8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d102      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x24>
 8001c42:	2302      	movs	r3, #2
 8001c44:	f000 bc13 	b.w	800246e <HAL_ADC_ConfigChannel+0x84a>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff faa7 	bl	80011a8 <LL_ADC_REG_IsConversionOngoing>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f040 83f3 	bne.w	8002448 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	6859      	ldr	r1, [r3, #4]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	f7ff f93f 	bl	8000ef2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fa95 	bl	80011a8 <LL_ADC_REG_IsConversionOngoing>
 8001c7e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff faa1 	bl	80011ce <LL_ADC_INJ_IsConversionOngoing>
 8001c8c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f040 81d9 	bne.w	800204c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f040 81d4 	bne.w	800204c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cac:	d10f      	bne.n	8001cce <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f7ff f959 	bl	8000f70 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f8ed 	bl	8000ea6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ccc:	e00e      	b.n	8001cec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6819      	ldr	r1, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f7ff f948 	bl	8000f70 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff f8dd 	bl	8000ea6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	695a      	ldr	r2, [r3, #20]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	08db      	lsrs	r3, r3, #3
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d022      	beq.n	8001d54 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6919      	ldr	r1, [r3, #16]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d1e:	f7ff f837 	bl	8000d90 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	6919      	ldr	r1, [r3, #16]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f7ff f883 	bl	8000e3a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d102      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x126>
 8001d44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d48:	e000      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x128>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f7ff f88f 	bl	8000e70 <LL_ADC_SetOffsetSaturation>
 8001d52:	e17b      	b.n	800204c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff f83c 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10a      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x15c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff f831 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 8001d76:	4603      	mov	r3, r0
 8001d78:	0e9b      	lsrs	r3, r3, #26
 8001d7a:	f003 021f 	and.w	r2, r3, #31
 8001d7e:	e01e      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x19a>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f826 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001da2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001da6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001dae:	2320      	movs	r3, #32
 8001db0:	e004      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001db2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001db6:	fab3 f383 	clz	r3, r3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d105      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x1b2>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0e9b      	lsrs	r3, r3, #26
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	e018      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x1e4>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001df2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001dfa:	2320      	movs	r3, #32
 8001dfc:	e004      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001dfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d106      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fff5 	bl	8000e04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2101      	movs	r1, #1
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe ffd9 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10a      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x222>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2101      	movs	r1, #1
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe ffce 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	0e9b      	lsrs	r3, r3, #26
 8001e40:	f003 021f 	and.w	r2, r3, #31
 8001e44:	e01e      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x260>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe ffc3 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001e74:	2320      	movs	r3, #32
 8001e76:	e004      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001e78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x278>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0e9b      	lsrs	r3, r3, #26
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	e018      	b.n	8001ece <HAL_ADC_ConfigChannel+0x2aa>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001eb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001eb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	e004      	b.n	8001ece <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001ec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d106      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2101      	movs	r1, #1
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe ff92 	bl	8000e04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe ff76 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10a      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x2e8>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2102      	movs	r1, #2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe ff6b 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 8001f02:	4603      	mov	r3, r0
 8001f04:	0e9b      	lsrs	r3, r3, #26
 8001f06:	f003 021f 	and.w	r2, r3, #31
 8001f0a:	e01e      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x326>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2102      	movs	r1, #2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe ff60 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001f3a:	2320      	movs	r3, #32
 8001f3c:	e004      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001f3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d105      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x33e>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	0e9b      	lsrs	r3, r3, #26
 8001f5c:	f003 031f 	and.w	r3, r3, #31
 8001f60:	e016      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x36c>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001f74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001f82:	2320      	movs	r3, #32
 8001f84:	e004      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d106      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2102      	movs	r1, #2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe ff31 	bl	8000e04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2103      	movs	r1, #3
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe ff15 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10a      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x3aa>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2103      	movs	r1, #3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe ff0a 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	0e9b      	lsrs	r3, r3, #26
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	e017      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x3da>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2103      	movs	r1, #3
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe feff 	bl	8000dd8 <LL_ADC_GetOffsetChannel>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001fe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fe8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	e003      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002006:	2b00      	cmp	r3, #0
 8002008:	d105      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x3f2>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	0e9b      	lsrs	r3, r3, #26
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	e011      	b.n	800203a <HAL_ADC_ConfigChannel+0x416>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800201e:	fa93 f3a3 	rbit	r3, r3
 8002022:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002026:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800202e:	2320      	movs	r3, #32
 8002030:	e003      	b.n	800203a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800203a:	429a      	cmp	r2, r3
 800203c:	d106      	bne.n	800204c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2200      	movs	r2, #0
 8002044:	2103      	movs	r1, #3
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fedc 	bl	8000e04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff f86f 	bl	8001134 <LL_ADC_IsEnabled>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	f040 813d 	bne.w	80022d8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6819      	ldr	r1, [r3, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	461a      	mov	r2, r3
 800206c:	f7fe ffac 	bl	8000fc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4aa2      	ldr	r2, [pc, #648]	; (8002300 <HAL_ADC_ConfigChannel+0x6dc>)
 8002076:	4293      	cmp	r3, r2
 8002078:	f040 812e 	bne.w	80022d8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10b      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x480>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	0e9b      	lsrs	r3, r3, #26
 8002092:	3301      	adds	r3, #1
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	2b09      	cmp	r3, #9
 800209a:	bf94      	ite	ls
 800209c:	2301      	movls	r3, #1
 800209e:	2300      	movhi	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	e019      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x4b4>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80020b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020b4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80020b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80020bc:	2320      	movs	r3, #32
 80020be:	e003      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80020c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	3301      	adds	r3, #1
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	2b09      	cmp	r3, #9
 80020d0:	bf94      	ite	ls
 80020d2:	2301      	movls	r3, #1
 80020d4:	2300      	movhi	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d079      	beq.n	80021d0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d107      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x4d4>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	0e9b      	lsrs	r3, r3, #26
 80020ee:	3301      	adds	r3, #1
 80020f0:	069b      	lsls	r3, r3, #26
 80020f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020f6:	e015      	b.n	8002124 <HAL_ADC_ConfigChannel+0x500>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002108:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800210a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002110:	2320      	movs	r3, #32
 8002112:	e003      	b.n	800211c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	3301      	adds	r3, #1
 800211e:	069b      	lsls	r3, r3, #26
 8002120:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x520>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	0e9b      	lsrs	r3, r3, #26
 8002136:	3301      	adds	r3, #1
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	2101      	movs	r1, #1
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	e017      	b.n	8002174 <HAL_ADC_ConfigChannel+0x550>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002154:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800215c:	2320      	movs	r3, #32
 800215e:	e003      	b.n	8002168 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	3301      	adds	r3, #1
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	2101      	movs	r1, #1
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	ea42 0103 	orr.w	r1, r2, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10a      	bne.n	800219a <HAL_ADC_ConfigChannel+0x576>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	0e9b      	lsrs	r3, r3, #26
 800218a:	3301      	adds	r3, #1
 800218c:	f003 021f 	and.w	r2, r3, #31
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	051b      	lsls	r3, r3, #20
 8002198:	e018      	b.n	80021cc <HAL_ADC_ConfigChannel+0x5a8>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80021a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80021ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80021b2:	2320      	movs	r3, #32
 80021b4:	e003      	b.n	80021be <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80021b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b8:	fab3 f383 	clz	r3, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021cc:	430b      	orrs	r3, r1
 80021ce:	e07e      	b.n	80022ce <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d107      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x5c8>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	0e9b      	lsrs	r3, r3, #26
 80021e2:	3301      	adds	r3, #1
 80021e4:	069b      	lsls	r3, r3, #26
 80021e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ea:	e015      	b.n	8002218 <HAL_ADC_ConfigChannel+0x5f4>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80021fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80021fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002204:	2320      	movs	r3, #32
 8002206:	e003      	b.n	8002210 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	3301      	adds	r3, #1
 8002212:	069b      	lsls	r3, r3, #26
 8002214:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002220:	2b00      	cmp	r3, #0
 8002222:	d109      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x614>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0e9b      	lsrs	r3, r3, #26
 800222a:	3301      	adds	r3, #1
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	2101      	movs	r1, #1
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	e017      	b.n	8002268 <HAL_ADC_ConfigChannel+0x644>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	61fb      	str	r3, [r7, #28]
  return result;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002250:	2320      	movs	r3, #32
 8002252:	e003      	b.n	800225c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	fab3 f383 	clz	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	3301      	adds	r3, #1
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	2101      	movs	r1, #1
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	ea42 0103 	orr.w	r1, r2, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10d      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x670>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	0e9b      	lsrs	r3, r3, #26
 800227e:	3301      	adds	r3, #1
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	4613      	mov	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4413      	add	r3, r2
 800228a:	3b1e      	subs	r3, #30
 800228c:	051b      	lsls	r3, r3, #20
 800228e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002292:	e01b      	b.n	80022cc <HAL_ADC_ConfigChannel+0x6a8>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	613b      	str	r3, [r7, #16]
  return result;
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80022ac:	2320      	movs	r3, #32
 80022ae:	e003      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	3301      	adds	r3, #1
 80022ba:	f003 021f 	and.w	r2, r3, #31
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	3b1e      	subs	r3, #30
 80022c6:	051b      	lsls	r3, r3, #20
 80022c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d2:	4619      	mov	r1, r3
 80022d4:	f7fe fe4c 	bl	8000f70 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_ADC_ConfigChannel+0x6e0>)
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80be 	beq.w	8002462 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022ee:	d004      	beq.n	80022fa <HAL_ADC_ConfigChannel+0x6d6>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a04      	ldr	r2, [pc, #16]	; (8002308 <HAL_ADC_ConfigChannel+0x6e4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d10a      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x6ec>
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <HAL_ADC_ConfigChannel+0x6e8>)
 80022fc:	e009      	b.n	8002312 <HAL_ADC_ConfigChannel+0x6ee>
 80022fe:	bf00      	nop
 8002300:	407f0000 	.word	0x407f0000
 8002304:	80080000 	.word	0x80080000
 8002308:	50000100 	.word	0x50000100
 800230c:	50000300 	.word	0x50000300
 8002310:	4b59      	ldr	r3, [pc, #356]	; (8002478 <HAL_ADC_ConfigChannel+0x854>)
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fd2e 	bl	8000d74 <LL_ADC_GetCommonPathInternalCh>
 8002318:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a56      	ldr	r2, [pc, #344]	; (800247c <HAL_ADC_ConfigChannel+0x858>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d004      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x70c>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a55      	ldr	r2, [pc, #340]	; (8002480 <HAL_ADC_ConfigChannel+0x85c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d13a      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002330:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002334:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d134      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002344:	d005      	beq.n	8002352 <HAL_ADC_ConfigChannel+0x72e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a4e      	ldr	r2, [pc, #312]	; (8002484 <HAL_ADC_ConfigChannel+0x860>)
 800234c:	4293      	cmp	r3, r2
 800234e:	f040 8085 	bne.w	800245c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800235a:	d004      	beq.n	8002366 <HAL_ADC_ConfigChannel+0x742>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a49      	ldr	r2, [pc, #292]	; (8002488 <HAL_ADC_ConfigChannel+0x864>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <HAL_ADC_ConfigChannel+0x746>
 8002366:	4a49      	ldr	r2, [pc, #292]	; (800248c <HAL_ADC_ConfigChannel+0x868>)
 8002368:	e000      	b.n	800236c <HAL_ADC_ConfigChannel+0x748>
 800236a:	4a43      	ldr	r2, [pc, #268]	; (8002478 <HAL_ADC_ConfigChannel+0x854>)
 800236c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002370:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002374:	4619      	mov	r1, r3
 8002376:	4610      	mov	r0, r2
 8002378:	f7fe fce9 	bl	8000d4e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800237c:	4b44      	ldr	r3, [pc, #272]	; (8002490 <HAL_ADC_ConfigChannel+0x86c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	099b      	lsrs	r3, r3, #6
 8002382:	4a44      	ldr	r2, [pc, #272]	; (8002494 <HAL_ADC_ConfigChannel+0x870>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	099b      	lsrs	r3, r3, #6
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002396:	e002      	b.n	800239e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3b01      	subs	r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1f9      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023a4:	e05a      	b.n	800245c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a3b      	ldr	r2, [pc, #236]	; (8002498 <HAL_ADC_ConfigChannel+0x874>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d125      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d11f      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a31      	ldr	r2, [pc, #196]	; (8002488 <HAL_ADC_ConfigChannel+0x864>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d104      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x7ac>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a34      	ldr	r2, [pc, #208]	; (800249c <HAL_ADC_ConfigChannel+0x878>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d047      	beq.n	8002460 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023d8:	d004      	beq.n	80023e4 <HAL_ADC_ConfigChannel+0x7c0>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a2a      	ldr	r2, [pc, #168]	; (8002488 <HAL_ADC_ConfigChannel+0x864>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x7c4>
 80023e4:	4a29      	ldr	r2, [pc, #164]	; (800248c <HAL_ADC_ConfigChannel+0x868>)
 80023e6:	e000      	b.n	80023ea <HAL_ADC_ConfigChannel+0x7c6>
 80023e8:	4a23      	ldr	r2, [pc, #140]	; (8002478 <HAL_ADC_ConfigChannel+0x854>)
 80023ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f2:	4619      	mov	r1, r3
 80023f4:	4610      	mov	r0, r2
 80023f6:	f7fe fcaa 	bl	8000d4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023fa:	e031      	b.n	8002460 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a27      	ldr	r2, [pc, #156]	; (80024a0 <HAL_ADC_ConfigChannel+0x87c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d12d      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002406:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d127      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <HAL_ADC_ConfigChannel+0x864>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d022      	beq.n	8002462 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002424:	d004      	beq.n	8002430 <HAL_ADC_ConfigChannel+0x80c>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a17      	ldr	r2, [pc, #92]	; (8002488 <HAL_ADC_ConfigChannel+0x864>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d101      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x810>
 8002430:	4a16      	ldr	r2, [pc, #88]	; (800248c <HAL_ADC_ConfigChannel+0x868>)
 8002432:	e000      	b.n	8002436 <HAL_ADC_ConfigChannel+0x812>
 8002434:	4a10      	ldr	r2, [pc, #64]	; (8002478 <HAL_ADC_ConfigChannel+0x854>)
 8002436:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800243a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800243e:	4619      	mov	r1, r3
 8002440:	4610      	mov	r0, r2
 8002442:	f7fe fc84 	bl	8000d4e <LL_ADC_SetCommonPathInternalCh>
 8002446:	e00c      	b.n	8002462 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244c:	f043 0220 	orr.w	r2, r3, #32
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800245a:	e002      	b.n	8002462 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800245c:	bf00      	nop
 800245e:	e000      	b.n	8002462 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002460:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800246a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800246e:	4618      	mov	r0, r3
 8002470:	37d8      	adds	r7, #216	; 0xd8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	50000700 	.word	0x50000700
 800247c:	c3210000 	.word	0xc3210000
 8002480:	90c00010 	.word	0x90c00010
 8002484:	50000600 	.word	0x50000600
 8002488:	50000100 	.word	0x50000100
 800248c:	50000300 	.word	0x50000300
 8002490:	20000000 	.word	0x20000000
 8002494:	053e2d63 	.word	0x053e2d63
 8002498:	c7520000 	.word	0xc7520000
 800249c:	50000500 	.word	0x50000500
 80024a0:	cb840000 	.word	0xcb840000

080024a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fe3d 	bl	8001134 <LL_ADC_IsEnabled>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d176      	bne.n	80025ae <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	4b3c      	ldr	r3, [pc, #240]	; (80025b8 <ADC_Enable+0x114>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00d      	beq.n	80024ea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	f043 0210 	orr.w	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e062      	b.n	80025b0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fdf8 	bl	80010e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024fc:	d004      	beq.n	8002508 <ADC_Enable+0x64>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a2e      	ldr	r2, [pc, #184]	; (80025bc <ADC_Enable+0x118>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d101      	bne.n	800250c <ADC_Enable+0x68>
 8002508:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <ADC_Enable+0x11c>)
 800250a:	e000      	b.n	800250e <ADC_Enable+0x6a>
 800250c:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <ADC_Enable+0x120>)
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe fc30 	bl	8000d74 <LL_ADC_GetCommonPathInternalCh>
 8002514:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800251a:	2b00      	cmp	r3, #0
 800251c:	d013      	beq.n	8002546 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800251e:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <ADC_Enable+0x124>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	099b      	lsrs	r3, r3, #6
 8002524:	4a29      	ldr	r2, [pc, #164]	; (80025cc <ADC_Enable+0x128>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	099b      	lsrs	r3, r3, #6
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002538:	e002      	b.n	8002540 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3b01      	subs	r3, #1
 800253e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f9      	bne.n	800253a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002546:	f7fe fbe3 	bl	8000d10 <HAL_GetTick>
 800254a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800254c:	e028      	b.n	80025a0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fdee 	bl	8001134 <LL_ADC_IsEnabled>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d104      	bne.n	8002568 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fdbe 	bl	80010e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002568:	f7fe fbd2 	bl	8000d10 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d914      	bls.n	80025a0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b01      	cmp	r3, #1
 8002582:	d00d      	beq.n	80025a0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	f043 0210 	orr.w	r2, r3, #16
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002594:	f043 0201 	orr.w	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e007      	b.n	80025b0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d1cf      	bne.n	800254e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	8000003f 	.word	0x8000003f
 80025bc:	50000100 	.word	0x50000100
 80025c0:	50000300 	.word	0x50000300
 80025c4:	50000700 	.word	0x50000700
 80025c8:	20000000 	.word	0x20000000
 80025cc:	053e2d63 	.word	0x053e2d63

080025d0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe fdbc 	bl	800115a <LL_ADC_IsDisableOngoing>
 80025e2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fda3 	bl	8001134 <LL_ADC_IsEnabled>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d047      	beq.n	8002684 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d144      	bne.n	8002684 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 030d 	and.w	r3, r3, #13
 8002604:	2b01      	cmp	r3, #1
 8002606:	d10c      	bne.n	8002622 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe fd7d 	bl	800110c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2203      	movs	r2, #3
 8002618:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800261a:	f7fe fb79 	bl	8000d10 <HAL_GetTick>
 800261e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002620:	e029      	b.n	8002676 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	f043 0210 	orr.w	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e023      	b.n	8002686 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800263e:	f7fe fb67 	bl	8000d10 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d914      	bls.n	8002676 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00d      	beq.n	8002676 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265e:	f043 0210 	orr.w	r2, r3, #16
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266a:	f043 0201 	orr.w	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e007      	b.n	8002686 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1dc      	bne.n	800263e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d14b      	bne.n	8002740 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d021      	beq.n	8002706 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fc00 	bl	8000ecc <LL_ADC_REG_IsTriggerSourceSWStart>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d032      	beq.n	8002738 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d12b      	bne.n	8002738 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d11f      	bne.n	8002738 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	f043 0201 	orr.w	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	65da      	str	r2, [r3, #92]	; 0x5c
 8002704:	e018      	b.n	8002738 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d111      	bne.n	8002738 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002718:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d105      	bne.n	8002738 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	f043 0201 	orr.w	r2, r3, #1
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f7ff fa4b 	bl	8001bd4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800273e:	e00e      	b.n	800275e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff fa5f 	bl	8001c10 <HAL_ADC_ErrorCallback>
}
 8002752:	e004      	b.n	800275e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	4798      	blx	r3
}
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b084      	sub	sp, #16
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f7ff fa37 	bl	8001be8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002794:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a0:	f043 0204 	orr.w	r2, r3, #4
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f7ff fa31 	bl	8001c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <LL_ADC_IsEnabled>:
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <LL_ADC_IsEnabled+0x18>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <LL_ADC_IsEnabled+0x1a>
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_StartCalibration>:
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80027ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	609a      	str	r2, [r3, #8]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <LL_ADC_IsCalibrationOnGoing>:
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800281e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002822:	d101      	bne.n	8002828 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <LL_ADC_REG_IsConversionOngoing>:
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b04      	cmp	r3, #4
 8002848:	d101      	bne.n	800284e <LL_ADC_REG_IsConversionOngoing+0x18>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_ADCEx_Calibration_Start+0x1c>
 8002874:	2302      	movs	r3, #2
 8002876:	e04d      	b.n	8002914 <HAL_ADCEx_Calibration_Start+0xb8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff fea5 	bl	80025d0 <ADC_Disable>
 8002886:	4603      	mov	r3, r0
 8002888:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d136      	bne.n	80028fe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002898:	f023 0302 	bic.w	r3, r3, #2
 800289c:	f043 0202 	orr.w	r2, r3, #2
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff ff96 	bl	80027dc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80028b0:	e014      	b.n	80028dc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	3301      	adds	r3, #1
 80028b6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4a18      	ldr	r2, [pc, #96]	; (800291c <HAL_ADCEx_Calibration_Start+0xc0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d90d      	bls.n	80028dc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	f023 0312 	bic.w	r3, r3, #18
 80028c8:	f043 0210 	orr.w	r2, r3, #16
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e01b      	b.n	8002914 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff94 	bl	800280e <LL_ADC_IsCalibrationOnGoing>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e2      	bne.n	80028b2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	f023 0303 	bic.w	r3, r3, #3
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80028fc:	e005      	b.n	800290a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002902:	f043 0210 	orr.w	r2, r3, #16
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	0004de01 	.word	0x0004de01

08002920 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b0a1      	sub	sp, #132	; 0x84
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800299e:	2302      	movs	r3, #2
 80029a0:	e0e7      	b.n	8002b72 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80029aa:	2300      	movs	r3, #0
 80029ac:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80029ae:	2300      	movs	r3, #0
 80029b0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029ba:	d102      	bne.n	80029c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029bc:	4b6f      	ldr	r3, [pc, #444]	; (8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	e009      	b.n	80029d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a6e      	ldr	r2, [pc, #440]	; (8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d102      	bne.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80029cc:	4b6d      	ldr	r3, [pc, #436]	; (8002b84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	e001      	b.n	80029d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10b      	bne.n	80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e0:	f043 0220 	orr.w	r2, r3, #32
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0be      	b.n	8002b72 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff1d 	bl	8002836 <LL_ADC_REG_IsConversionOngoing>
 80029fc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff ff17 	bl	8002836 <LL_ADC_REG_IsConversionOngoing>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f040 80a0 	bne.w	8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002a10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f040 809c 	bne.w	8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a20:	d004      	beq.n	8002a2c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a55      	ldr	r2, [pc, #340]	; (8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d101      	bne.n	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002a2c:	4b56      	ldr	r3, [pc, #344]	; (8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002a2e:	e000      	b.n	8002a32 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002a30:	4b56      	ldr	r3, [pc, #344]	; (8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002a32:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d04b      	beq.n	8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a4e:	035b      	lsls	r3, r3, #13
 8002a50:	430b      	orrs	r3, r1
 8002a52:	431a      	orrs	r2, r3
 8002a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a60:	d004      	beq.n	8002a6c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a45      	ldr	r2, [pc, #276]	; (8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d10f      	bne.n	8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002a6c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a70:	f7ff fea1 	bl	80027b6 <LL_ADC_IsEnabled>
 8002a74:	4604      	mov	r4, r0
 8002a76:	4841      	ldr	r0, [pc, #260]	; (8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a78:	f7ff fe9d 	bl	80027b6 <LL_ADC_IsEnabled>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4323      	orrs	r3, r4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	e012      	b.n	8002ab2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002a8c:	483c      	ldr	r0, [pc, #240]	; (8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a8e:	f7ff fe92 	bl	80027b6 <LL_ADC_IsEnabled>
 8002a92:	4604      	mov	r4, r0
 8002a94:	483b      	ldr	r0, [pc, #236]	; (8002b84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a96:	f7ff fe8e 	bl	80027b6 <LL_ADC_IsEnabled>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	431c      	orrs	r4, r3
 8002a9e:	483c      	ldr	r0, [pc, #240]	; (8002b90 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002aa0:	f7ff fe89 	bl	80027b6 <LL_ADC_IsEnabled>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4323      	orrs	r3, r4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d056      	beq.n	8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002abe:	f023 030f 	bic.w	r3, r3, #15
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	6811      	ldr	r1, [r2, #0]
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	6892      	ldr	r2, [r2, #8]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	431a      	orrs	r2, r3
 8002ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ad0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ad2:	e047      	b.n	8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002adc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ade:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae8:	d004      	beq.n	8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a23      	ldr	r2, [pc, #140]	; (8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d10f      	bne.n	8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002af4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002af8:	f7ff fe5d 	bl	80027b6 <LL_ADC_IsEnabled>
 8002afc:	4604      	mov	r4, r0
 8002afe:	481f      	ldr	r0, [pc, #124]	; (8002b7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b00:	f7ff fe59 	bl	80027b6 <LL_ADC_IsEnabled>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4323      	orrs	r3, r4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e012      	b.n	8002b3a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002b14:	481a      	ldr	r0, [pc, #104]	; (8002b80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b16:	f7ff fe4e 	bl	80027b6 <LL_ADC_IsEnabled>
 8002b1a:	4604      	mov	r4, r0
 8002b1c:	4819      	ldr	r0, [pc, #100]	; (8002b84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b1e:	f7ff fe4a 	bl	80027b6 <LL_ADC_IsEnabled>
 8002b22:	4603      	mov	r3, r0
 8002b24:	431c      	orrs	r4, r3
 8002b26:	481a      	ldr	r0, [pc, #104]	; (8002b90 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002b28:	f7ff fe45 	bl	80027b6 <LL_ADC_IsEnabled>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4323      	orrs	r3, r4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d012      	beq.n	8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b46:	f023 030f 	bic.w	r3, r3, #15
 8002b4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b4c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b4e:	e009      	b.n	8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	f043 0220 	orr.w	r2, r3, #32
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002b62:	e000      	b.n	8002b66 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3784      	adds	r7, #132	; 0x84
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd90      	pop	{r4, r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	50000100 	.word	0x50000100
 8002b80:	50000400 	.word	0x50000400
 8002b84:	50000500 	.word	0x50000500
 8002b88:	50000300 	.word	0x50000300
 8002b8c:	50000700 	.word	0x50000700
 8002b90:	50000600 	.word	0x50000600

08002b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc6:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	60d3      	str	r3, [r2, #12]
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f003 0307 	and.w	r3, r3, #7
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	db0b      	blt.n	8002c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	f003 021f 	and.w	r2, r3, #31
 8002c10:	4907      	ldr	r1, [pc, #28]	; (8002c30 <__NVIC_EnableIRQ+0x38>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	2001      	movs	r0, #1
 8002c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	e000e100 	.word	0xe000e100

08002c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	db0a      	blt.n	8002c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	490c      	ldr	r1, [pc, #48]	; (8002c80 <__NVIC_SetPriority+0x4c>)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	0112      	lsls	r2, r2, #4
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	440b      	add	r3, r1
 8002c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c5c:	e00a      	b.n	8002c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4908      	ldr	r1, [pc, #32]	; (8002c84 <__NVIC_SetPriority+0x50>)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	3b04      	subs	r3, #4
 8002c6c:	0112      	lsls	r2, r2, #4
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	440b      	add	r3, r1
 8002c72:	761a      	strb	r2, [r3, #24]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000e100 	.word	0xe000e100
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	bf28      	it	cs
 8002ca6:	2304      	movcs	r3, #4
 8002ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d902      	bls.n	8002cb8 <NVIC_EncodePriority+0x30>
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3b03      	subs	r3, #3
 8002cb6:	e000      	b.n	8002cba <NVIC_EncodePriority+0x32>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	401a      	ands	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cda:	43d9      	mvns	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	4313      	orrs	r3, r2
         );
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3724      	adds	r7, #36	; 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d00:	d301      	bcc.n	8002d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d02:	2301      	movs	r3, #1
 8002d04:	e00f      	b.n	8002d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d06:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <SysTick_Config+0x40>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d0e:	210f      	movs	r1, #15
 8002d10:	f04f 30ff 	mov.w	r0, #4294967295
 8002d14:	f7ff ff8e 	bl	8002c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <SysTick_Config+0x40>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d1e:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <SysTick_Config+0x40>)
 8002d20:	2207      	movs	r2, #7
 8002d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	e000e010 	.word	0xe000e010

08002d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ff29 	bl	8002b94 <__NVIC_SetPriorityGrouping>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	4603      	mov	r3, r0
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d58:	f7ff ff40 	bl	8002bdc <__NVIC_GetPriorityGrouping>
 8002d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	6978      	ldr	r0, [r7, #20]
 8002d64:	f7ff ff90 	bl	8002c88 <NVIC_EncodePriority>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff5f 	bl	8002c34 <__NVIC_SetPriority>
}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	4603      	mov	r3, r0
 8002d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff33 	bl	8002bf8 <__NVIC_EnableIRQ>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff ffa4 	bl	8002cf0 <SysTick_Config>
 8002da8:	4603      	mov	r3, r0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e08d      	b.n	8002ee2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b47      	ldr	r3, [pc, #284]	; (8002eec <HAL_DMA_Init+0x138>)
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d80f      	bhi.n	8002df2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4b45      	ldr	r3, [pc, #276]	; (8002ef0 <HAL_DMA_Init+0x13c>)
 8002dda:	4413      	add	r3, r2
 8002ddc:	4a45      	ldr	r2, [pc, #276]	; (8002ef4 <HAL_DMA_Init+0x140>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	009a      	lsls	r2, r3, #2
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a42      	ldr	r2, [pc, #264]	; (8002ef8 <HAL_DMA_Init+0x144>)
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40
 8002df0:	e00e      	b.n	8002e10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b40      	ldr	r3, [pc, #256]	; (8002efc <HAL_DMA_Init+0x148>)
 8002dfa:	4413      	add	r3, r2
 8002dfc:	4a3d      	ldr	r2, [pc, #244]	; (8002ef4 <HAL_DMA_Init+0x140>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	009a      	lsls	r2, r3, #2
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a3c      	ldr	r2, [pc, #240]	; (8002f00 <HAL_DMA_Init+0x14c>)
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f9b6 	bl	80031d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e70:	d102      	bne.n	8002e78 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e8c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d010      	beq.n	8002eb8 <HAL_DMA_Init+0x104>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d80c      	bhi.n	8002eb8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f9d6 	bl	8003250 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	e008      	b.n	8002eca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40020407 	.word	0x40020407
 8002ef0:	bffdfff8 	.word	0xbffdfff8
 8002ef4:	cccccccd 	.word	0xcccccccd
 8002ef8:	40020000 	.word	0x40020000
 8002efc:	bffdfbf8 	.word	0xbffdfbf8
 8002f00:	40020400 	.word	0x40020400

08002f04 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_DMA_Start_IT+0x20>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e066      	b.n	8002ff2 <HAL_DMA_Start_IT+0xee>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d155      	bne.n	8002fe4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0201 	bic.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f8fb 	bl	8003158 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 020e 	orr.w	r2, r2, #14
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e00f      	b.n	8002f9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0204 	bic.w	r2, r2, #4
 8002f8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 020a 	orr.w	r2, r2, #10
 8002f9a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d007      	beq.n	8002fba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fb8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0201 	orr.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	e005      	b.n	8002ff0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fec:	2302      	movs	r3, #2
 8002fee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	2204      	movs	r2, #4
 800301c:	409a      	lsls	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4013      	ands	r3, r2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d026      	beq.n	8003074 <HAL_DMA_IRQHandler+0x7a>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d021      	beq.n	8003074 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b00      	cmp	r3, #0
 800303c:	d107      	bne.n	800304e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0204 	bic.w	r2, r2, #4
 800304c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	f003 021f 	and.w	r2, r3, #31
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	2104      	movs	r1, #4
 800305c:	fa01 f202 	lsl.w	r2, r1, r2
 8003060:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	2b00      	cmp	r3, #0
 8003068:	d071      	beq.n	800314e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003072:	e06c      	b.n	800314e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2202      	movs	r2, #2
 800307e:	409a      	lsls	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d02e      	beq.n	80030e6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d029      	beq.n	80030e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10b      	bne.n	80030b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 020a 	bic.w	r2, r2, #10
 80030ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030bc:	f003 021f 	and.w	r2, r3, #31
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	2102      	movs	r1, #2
 80030c6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d038      	beq.n	800314e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80030e4:	e033      	b.n	800314e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f003 031f 	and.w	r3, r3, #31
 80030ee:	2208      	movs	r2, #8
 80030f0:	409a      	lsls	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d02a      	beq.n	8003150 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d025      	beq.n	8003150 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 020e 	bic.w	r2, r2, #14
 8003112:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003118:	f003 021f 	and.w	r2, r3, #31
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	2101      	movs	r1, #1
 8003122:	fa01 f202 	lsl.w	r2, r1, r2
 8003126:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003142:	2b00      	cmp	r3, #0
 8003144:	d004      	beq.n	8003150 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800314e:	bf00      	nop
 8003150:	bf00      	nop
}
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800316e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003174:	2b00      	cmp	r3, #0
 8003176:	d004      	beq.n	8003182 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003180:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	f003 021f 	and.w	r2, r3, #31
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	2101      	movs	r1, #1
 8003190:	fa01 f202 	lsl.w	r2, r1, r2
 8003194:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d108      	bne.n	80031b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031b6:	e007      	b.n	80031c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	60da      	str	r2, [r3, #12]
}
 80031c8:	bf00      	nop
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b16      	ldr	r3, [pc, #88]	; (800323c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d802      	bhi.n	80031ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80031e8:	4b15      	ldr	r3, [pc, #84]	; (8003240 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	e001      	b.n	80031f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80031f0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	3b08      	subs	r3, #8
 80031fe:	4a12      	ldr	r2, [pc, #72]	; (8003248 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320c:	089b      	lsrs	r3, r3, #2
 800320e:	009a      	lsls	r2, r3, #2
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	461a      	mov	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a0b      	ldr	r2, [pc, #44]	; (800324c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800321e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	2201      	movs	r2, #1
 8003228:	409a      	lsls	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800322e:	bf00      	nop
 8003230:	371c      	adds	r7, #28
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40020407 	.word	0x40020407
 8003240:	40020800 	.word	0x40020800
 8003244:	40020820 	.word	0x40020820
 8003248:	cccccccd 	.word	0xcccccccd
 800324c:	40020880 	.word	0x40020880

08003250 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	461a      	mov	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a08      	ldr	r2, [pc, #32]	; (8003294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003272:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3b01      	subs	r3, #1
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	2201      	movs	r2, #1
 800327e:	409a      	lsls	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	1000823f 	.word	0x1000823f
 8003294:	40020940 	.word	0x40020940

08003298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032a6:	e15a      	b.n	800355e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	2101      	movs	r1, #1
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	fa01 f303 	lsl.w	r3, r1, r3
 80032b4:	4013      	ands	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 814c 	beq.w	8003558 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d005      	beq.n	80032d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d130      	bne.n	800333a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	2203      	movs	r2, #3
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800330e:	2201      	movs	r2, #1
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4013      	ands	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	f003 0201 	and.w	r2, r3, #1
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b03      	cmp	r3, #3
 8003344:	d017      	beq.n	8003376 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	2203      	movs	r2, #3
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4013      	ands	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d123      	bne.n	80033ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	08da      	lsrs	r2, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3208      	adds	r2, #8
 800338a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800338e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	220f      	movs	r2, #15
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	08da      	lsrs	r2, r3, #3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3208      	adds	r2, #8
 80033c4:	6939      	ldr	r1, [r7, #16]
 80033c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	2203      	movs	r2, #3
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43db      	mvns	r3, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 0203 	and.w	r2, r3, #3
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 80a6 	beq.w	8003558 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340c:	4b5b      	ldr	r3, [pc, #364]	; (800357c <HAL_GPIO_Init+0x2e4>)
 800340e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003410:	4a5a      	ldr	r2, [pc, #360]	; (800357c <HAL_GPIO_Init+0x2e4>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	6613      	str	r3, [r2, #96]	; 0x60
 8003418:	4b58      	ldr	r3, [pc, #352]	; (800357c <HAL_GPIO_Init+0x2e4>)
 800341a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003424:	4a56      	ldr	r2, [pc, #344]	; (8003580 <HAL_GPIO_Init+0x2e8>)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	089b      	lsrs	r3, r3, #2
 800342a:	3302      	adds	r3, #2
 800342c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003430:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	220f      	movs	r2, #15
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4013      	ands	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800344e:	d01f      	beq.n	8003490 <HAL_GPIO_Init+0x1f8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a4c      	ldr	r2, [pc, #304]	; (8003584 <HAL_GPIO_Init+0x2ec>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d019      	beq.n	800348c <HAL_GPIO_Init+0x1f4>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a4b      	ldr	r2, [pc, #300]	; (8003588 <HAL_GPIO_Init+0x2f0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <HAL_GPIO_Init+0x1f0>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a4a      	ldr	r2, [pc, #296]	; (800358c <HAL_GPIO_Init+0x2f4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00d      	beq.n	8003484 <HAL_GPIO_Init+0x1ec>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a49      	ldr	r2, [pc, #292]	; (8003590 <HAL_GPIO_Init+0x2f8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d007      	beq.n	8003480 <HAL_GPIO_Init+0x1e8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a48      	ldr	r2, [pc, #288]	; (8003594 <HAL_GPIO_Init+0x2fc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_GPIO_Init+0x1e4>
 8003478:	2305      	movs	r3, #5
 800347a:	e00a      	b.n	8003492 <HAL_GPIO_Init+0x1fa>
 800347c:	2306      	movs	r3, #6
 800347e:	e008      	b.n	8003492 <HAL_GPIO_Init+0x1fa>
 8003480:	2304      	movs	r3, #4
 8003482:	e006      	b.n	8003492 <HAL_GPIO_Init+0x1fa>
 8003484:	2303      	movs	r3, #3
 8003486:	e004      	b.n	8003492 <HAL_GPIO_Init+0x1fa>
 8003488:	2302      	movs	r3, #2
 800348a:	e002      	b.n	8003492 <HAL_GPIO_Init+0x1fa>
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <HAL_GPIO_Init+0x1fa>
 8003490:	2300      	movs	r3, #0
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	f002 0203 	and.w	r2, r2, #3
 8003498:	0092      	lsls	r2, r2, #2
 800349a:	4093      	lsls	r3, r2
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034a2:	4937      	ldr	r1, [pc, #220]	; (8003580 <HAL_GPIO_Init+0x2e8>)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	089b      	lsrs	r3, r3, #2
 80034a8:	3302      	adds	r3, #2
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034b0:	4b39      	ldr	r3, [pc, #228]	; (8003598 <HAL_GPIO_Init+0x300>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4013      	ands	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034d4:	4a30      	ldr	r2, [pc, #192]	; (8003598 <HAL_GPIO_Init+0x300>)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034da:	4b2f      	ldr	r3, [pc, #188]	; (8003598 <HAL_GPIO_Init+0x300>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4013      	ands	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034fe:	4a26      	ldr	r2, [pc, #152]	; (8003598 <HAL_GPIO_Init+0x300>)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003504:	4b24      	ldr	r3, [pc, #144]	; (8003598 <HAL_GPIO_Init+0x300>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	43db      	mvns	r3, r3
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003528:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <HAL_GPIO_Init+0x300>)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800352e:	4b1a      	ldr	r3, [pc, #104]	; (8003598 <HAL_GPIO_Init+0x300>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003552:	4a11      	ldr	r2, [pc, #68]	; (8003598 <HAL_GPIO_Init+0x300>)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	3301      	adds	r3, #1
 800355c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	f47f ae9d 	bne.w	80032a8 <HAL_GPIO_Init+0x10>
  }
}
 800356e:	bf00      	nop
 8003570:	bf00      	nop
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	40021000 	.word	0x40021000
 8003580:	40010000 	.word	0x40010000
 8003584:	48000400 	.word	0x48000400
 8003588:	48000800 	.word	0x48000800
 800358c:	48000c00 	.word	0x48000c00
 8003590:	48001000 	.word	0x48001000
 8003594:	48001400 	.word	0x48001400
 8003598:	40010400 	.word	0x40010400

0800359c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
 80035a8:	4613      	mov	r3, r2
 80035aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035ac:	787b      	ldrb	r3, [r7, #1]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035b2:	887a      	ldrh	r2, [r7, #2]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035b8:	e002      	b.n	80035c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035ba:	887a      	ldrh	r2, [r7, #2]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035d6:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	88fb      	ldrh	r3, [r7, #6]
 80035dc:	4013      	ands	r3, r2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d006      	beq.n	80035f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035e2:	4a05      	ldr	r2, [pc, #20]	; (80035f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 f806 	bl	80035fc <HAL_GPIO_EXTI_Callback>
  }
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40010400 	.word	0x40010400

080035fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d141      	bne.n	80036a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003622:	4b4b      	ldr	r3, [pc, #300]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800362a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362e:	d131      	bne.n	8003694 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003630:	4b47      	ldr	r3, [pc, #284]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003636:	4a46      	ldr	r2, [pc, #280]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800363c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003640:	4b43      	ldr	r3, [pc, #268]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003648:	4a41      	ldr	r2, [pc, #260]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800364a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800364e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003650:	4b40      	ldr	r3, [pc, #256]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2232      	movs	r2, #50	; 0x32
 8003656:	fb02 f303 	mul.w	r3, r2, r3
 800365a:	4a3f      	ldr	r2, [pc, #252]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	0c9b      	lsrs	r3, r3, #18
 8003662:	3301      	adds	r3, #1
 8003664:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003666:	e002      	b.n	800366e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3b01      	subs	r3, #1
 800366c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800366e:	4b38      	ldr	r3, [pc, #224]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367a:	d102      	bne.n	8003682 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f2      	bne.n	8003668 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003682:	4b33      	ldr	r3, [pc, #204]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368e:	d158      	bne.n	8003742 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e057      	b.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003694:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800369a:	4a2d      	ldr	r2, [pc, #180]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036a4:	e04d      	b.n	8003742 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ac:	d141      	bne.n	8003732 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ae:	4b28      	ldr	r3, [pc, #160]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ba:	d131      	bne.n	8003720 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036bc:	4b24      	ldr	r3, [pc, #144]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c2:	4a23      	ldr	r2, [pc, #140]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036cc:	4b20      	ldr	r3, [pc, #128]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036d4:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036dc:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2232      	movs	r2, #50	; 0x32
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	0c9b      	lsrs	r3, r3, #18
 80036ee:	3301      	adds	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036f2:	e002      	b.n	80036fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036fa:	4b15      	ldr	r3, [pc, #84]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003706:	d102      	bne.n	800370e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f2      	bne.n	80036f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371a:	d112      	bne.n	8003742 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e011      	b.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003726:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003730:	e007      	b.n	8003742 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800373a:	4a05      	ldr	r2, [pc, #20]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003740:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	40007000 	.word	0x40007000
 8003754:	20000000 	.word	0x20000000
 8003758:	431bde83 	.word	0x431bde83

0800375c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4a04      	ldr	r2, [pc, #16]	; (8003778 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800376a:	6093      	str	r3, [r2, #8]
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40007000 	.word	0x40007000

0800377c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e2fe      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d075      	beq.n	8003886 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800379a:	4b97      	ldr	r3, [pc, #604]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a4:	4b94      	ldr	r3, [pc, #592]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b0c      	cmp	r3, #12
 80037b2:	d102      	bne.n	80037ba <HAL_RCC_OscConfig+0x3e>
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d002      	beq.n	80037c0 <HAL_RCC_OscConfig+0x44>
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d10b      	bne.n	80037d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c0:	4b8d      	ldr	r3, [pc, #564]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d05b      	beq.n	8003884 <HAL_RCC_OscConfig+0x108>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d157      	bne.n	8003884 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e2d9      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e0:	d106      	bne.n	80037f0 <HAL_RCC_OscConfig+0x74>
 80037e2:	4b85      	ldr	r3, [pc, #532]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a84      	ldr	r2, [pc, #528]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	e01d      	b.n	800382c <HAL_RCC_OscConfig+0xb0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037f8:	d10c      	bne.n	8003814 <HAL_RCC_OscConfig+0x98>
 80037fa:	4b7f      	ldr	r3, [pc, #508]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a7e      	ldr	r2, [pc, #504]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b7c      	ldr	r3, [pc, #496]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a7b      	ldr	r2, [pc, #492]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e00b      	b.n	800382c <HAL_RCC_OscConfig+0xb0>
 8003814:	4b78      	ldr	r3, [pc, #480]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a77      	ldr	r2, [pc, #476]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800381a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b75      	ldr	r3, [pc, #468]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a74      	ldr	r2, [pc, #464]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fd fa6c 	bl	8000d10 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383c:	f7fd fa68 	bl	8000d10 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	; 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e29e      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800384e:	4b6a      	ldr	r3, [pc, #424]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0xc0>
 800385a:	e014      	b.n	8003886 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fd fa58 	bl	8000d10 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003864:	f7fd fa54 	bl	8000d10 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	; 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e28a      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003876:	4b60      	ldr	r3, [pc, #384]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0xe8>
 8003882:	e000      	b.n	8003886 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d075      	beq.n	800397e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003892:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800389c:	4b56      	ldr	r3, [pc, #344]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	2b0c      	cmp	r3, #12
 80038aa:	d102      	bne.n	80038b2 <HAL_RCC_OscConfig+0x136>
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d002      	beq.n	80038b8 <HAL_RCC_OscConfig+0x13c>
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d11f      	bne.n	80038f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038b8:	4b4f      	ldr	r3, [pc, #316]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_OscConfig+0x154>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e25d      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d0:	4b49      	ldr	r3, [pc, #292]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	4946      	ldr	r1, [pc, #280]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038e4:	4b45      	ldr	r3, [pc, #276]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd f9c5 	bl	8000c78 <HAL_InitTick>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d043      	beq.n	800397c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e249      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d023      	beq.n	8003948 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003900:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a3c      	ldr	r2, [pc, #240]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fd fa00 	bl	8000d10 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003914:	f7fd f9fc 	bl	8000d10 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e232      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003926:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003932:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	061b      	lsls	r3, r3, #24
 8003940:	492d      	ldr	r1, [pc, #180]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]
 8003946:	e01a      	b.n	800397e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003948:	4b2b      	ldr	r3, [pc, #172]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2a      	ldr	r2, [pc, #168]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800394e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fd f9dc 	bl	8000d10 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395c:	f7fd f9d8 	bl	8000d10 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e20e      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800396e:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x1e0>
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800397c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d041      	beq.n	8003a0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d01c      	beq.n	80039cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003992:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 8003994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003998:	4a17      	ldr	r2, [pc, #92]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a2:	f7fd f9b5 	bl	8000d10 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039aa:	f7fd f9b1 	bl	8000d10 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e1e7      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039bc:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80039be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0ef      	beq.n	80039aa <HAL_RCC_OscConfig+0x22e>
 80039ca:	e020      	b.n	8003a0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80039ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d2:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fd f998 	bl	8000d10 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e2:	e00d      	b.n	8003a00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e4:	f7fd f994 	bl	8000d10 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d906      	bls.n	8003a00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e1ca      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a00:	4b8c      	ldr	r3, [pc, #560]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1ea      	bne.n	80039e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80a6 	beq.w	8003b68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a20:	4b84      	ldr	r3, [pc, #528]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_OscConfig+0x2b4>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <HAL_RCC_OscConfig+0x2b6>
 8003a30:	2300      	movs	r3, #0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00d      	beq.n	8003a52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a36:	4b7f      	ldr	r3, [pc, #508]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	4a7e      	ldr	r2, [pc, #504]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a40:	6593      	str	r3, [r2, #88]	; 0x58
 8003a42:	4b7c      	ldr	r3, [pc, #496]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a52:	4b79      	ldr	r3, [pc, #484]	; (8003c38 <HAL_RCC_OscConfig+0x4bc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d118      	bne.n	8003a90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a5e:	4b76      	ldr	r3, [pc, #472]	; (8003c38 <HAL_RCC_OscConfig+0x4bc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a75      	ldr	r2, [pc, #468]	; (8003c38 <HAL_RCC_OscConfig+0x4bc>)
 8003a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6a:	f7fd f951 	bl	8000d10 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a72:	f7fd f94d 	bl	8000d10 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e183      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a84:	4b6c      	ldr	r3, [pc, #432]	; (8003c38 <HAL_RCC_OscConfig+0x4bc>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d108      	bne.n	8003aaa <HAL_RCC_OscConfig+0x32e>
 8003a98:	4b66      	ldr	r3, [pc, #408]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9e:	4a65      	ldr	r2, [pc, #404]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aa8:	e024      	b.n	8003af4 <HAL_RCC_OscConfig+0x378>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b05      	cmp	r3, #5
 8003ab0:	d110      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x358>
 8003ab2:	4b60      	ldr	r3, [pc, #384]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	4a5e      	ldr	r2, [pc, #376]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003aba:	f043 0304 	orr.w	r3, r3, #4
 8003abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac2:	4b5c      	ldr	r3, [pc, #368]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	4a5a      	ldr	r2, [pc, #360]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad2:	e00f      	b.n	8003af4 <HAL_RCC_OscConfig+0x378>
 8003ad4:	4b57      	ldr	r3, [pc, #348]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	4a56      	ldr	r2, [pc, #344]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ae4:	4b53      	ldr	r3, [pc, #332]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aea:	4a52      	ldr	r2, [pc, #328]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003aec:	f023 0304 	bic.w	r3, r3, #4
 8003af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d016      	beq.n	8003b2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7fd f908 	bl	8000d10 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b02:	e00a      	b.n	8003b1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b04:	f7fd f904 	bl	8000d10 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e138      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1a:	4b46      	ldr	r3, [pc, #280]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ed      	beq.n	8003b04 <HAL_RCC_OscConfig+0x388>
 8003b28:	e015      	b.n	8003b56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2a:	f7fd f8f1 	bl	8000d10 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7fd f8ed 	bl	8000d10 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e121      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b48:	4b3a      	ldr	r3, [pc, #232]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ed      	bne.n	8003b32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b56:	7ffb      	ldrb	r3, [r7, #31]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5c:	4b35      	ldr	r3, [pc, #212]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b60:	4a34      	ldr	r2, [pc, #208]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d03c      	beq.n	8003bee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01c      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b7c:	4b2d      	ldr	r3, [pc, #180]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b82:	4a2c      	ldr	r2, [pc, #176]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fd f8c0 	bl	8000d10 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b94:	f7fd f8bc 	bl	8000d10 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e0f2      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ba6:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ef      	beq.n	8003b94 <HAL_RCC_OscConfig+0x418>
 8003bb4:	e01b      	b.n	8003bee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bb6:	4b1f      	ldr	r3, [pc, #124]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bbc:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003bbe:	f023 0301 	bic.w	r3, r3, #1
 8003bc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc6:	f7fd f8a3 	bl	8000d10 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bce:	f7fd f89f 	bl	8000d10 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e0d5      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003be0:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1ef      	bne.n	8003bce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80c9 	beq.w	8003d8a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bf8:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 030c 	and.w	r3, r3, #12
 8003c00:	2b0c      	cmp	r3, #12
 8003c02:	f000 8083 	beq.w	8003d0c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d15e      	bne.n	8003ccc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0e:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a08      	ldr	r2, [pc, #32]	; (8003c34 <HAL_RCC_OscConfig+0x4b8>)
 8003c14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1a:	f7fd f879 	bl	8000d10 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c20:	e00c      	b.n	8003c3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c22:	f7fd f875 	bl	8000d10 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d905      	bls.n	8003c3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e0ab      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c3c:	4b55      	ldr	r3, [pc, #340]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1ec      	bne.n	8003c22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c48:	4b52      	ldr	r3, [pc, #328]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	4b52      	ldr	r3, [pc, #328]	; (8003d98 <HAL_RCC_OscConfig+0x61c>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6a11      	ldr	r1, [r2, #32]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c58:	3a01      	subs	r2, #1
 8003c5a:	0112      	lsls	r2, r2, #4
 8003c5c:	4311      	orrs	r1, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c62:	0212      	lsls	r2, r2, #8
 8003c64:	4311      	orrs	r1, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c6a:	0852      	lsrs	r2, r2, #1
 8003c6c:	3a01      	subs	r2, #1
 8003c6e:	0552      	lsls	r2, r2, #21
 8003c70:	4311      	orrs	r1, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c76:	0852      	lsrs	r2, r2, #1
 8003c78:	3a01      	subs	r2, #1
 8003c7a:	0652      	lsls	r2, r2, #25
 8003c7c:	4311      	orrs	r1, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c82:	06d2      	lsls	r2, r2, #27
 8003c84:	430a      	orrs	r2, r1
 8003c86:	4943      	ldr	r1, [pc, #268]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c8c:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a40      	ldr	r2, [pc, #256]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c98:	4b3e      	ldr	r3, [pc, #248]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4a3d      	ldr	r2, [pc, #244]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ca2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fd f834 	bl	8000d10 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fd f830 	bl	8000d10 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e066      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbe:	4b35      	ldr	r3, [pc, #212]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x530>
 8003cca:	e05e      	b.n	8003d8a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ccc:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a30      	ldr	r2, [pc, #192]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fd f81a 	bl	8000d10 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7fd f816 	bl	8000d10 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e04c      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf2:	4b28      	ldr	r3, [pc, #160]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003cfe:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	4924      	ldr	r1, [pc, #144]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003d04:	4b25      	ldr	r3, [pc, #148]	; (8003d9c <HAL_RCC_OscConfig+0x620>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	60cb      	str	r3, [r1, #12]
 8003d0a:	e03e      	b.n	8003d8a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e039      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d18:	4b1e      	ldr	r3, [pc, #120]	; (8003d94 <HAL_RCC_OscConfig+0x618>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f003 0203 	and.w	r2, r3, #3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d12c      	bne.n	8003d86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	3b01      	subs	r3, #1
 8003d38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d123      	bne.n	8003d86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d11b      	bne.n	8003d86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d113      	bne.n	8003d86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d109      	bne.n	8003d86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	085b      	lsrs	r3, r3, #1
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d001      	beq.n	8003d8a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3720      	adds	r7, #32
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021000 	.word	0x40021000
 8003d98:	019f800c 	.word	0x019f800c
 8003d9c:	feeefffc 	.word	0xfeeefffc

08003da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e11e      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003db8:	4b91      	ldr	r3, [pc, #580]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d910      	bls.n	8003de8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b8e      	ldr	r3, [pc, #568]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 020f 	bic.w	r2, r3, #15
 8003dce:	498c      	ldr	r1, [pc, #560]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b8a      	ldr	r3, [pc, #552]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e106      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d073      	beq.n	8003edc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d129      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfc:	4b81      	ldr	r3, [pc, #516]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0f4      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e0c:	f000 f99e 	bl	800414c <RCC_GetSysClockFreqFromPLLSource>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4a7c      	ldr	r2, [pc, #496]	; (8004008 <HAL_RCC_ClockConfig+0x268>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d93f      	bls.n	8003e9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e1a:	4b7a      	ldr	r3, [pc, #488]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d033      	beq.n	8003e9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d12f      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e3a:	4b72      	ldr	r3, [pc, #456]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e42:	4a70      	ldr	r2, [pc, #448]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e024      	b.n	8003e9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d107      	bne.n	8003e68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e58:	4b6a      	ldr	r3, [pc, #424]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d109      	bne.n	8003e78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0c6      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e68:	4b66      	ldr	r3, [pc, #408]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0be      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e78:	f000 f8ce 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8003e7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4a61      	ldr	r2, [pc, #388]	; (8004008 <HAL_RCC_ClockConfig+0x268>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d909      	bls.n	8003e9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e86:	4b5f      	ldr	r3, [pc, #380]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e8e:	4a5d      	ldr	r2, [pc, #372]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e9a:	4b5a      	ldr	r3, [pc, #360]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f023 0203 	bic.w	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4957      	ldr	r1, [pc, #348]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eac:	f7fc ff30 	bl	8000d10 <HAL_GetTick>
 8003eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb4:	f7fc ff2c 	bl	8000d10 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e095      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	4b4e      	ldr	r3, [pc, #312]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 020c 	and.w	r2, r3, #12
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d1eb      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d023      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef4:	4b43      	ldr	r3, [pc, #268]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4a42      	ldr	r2, [pc, #264]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003efa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003efe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f0c:	4b3d      	ldr	r3, [pc, #244]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f14:	4a3b      	ldr	r2, [pc, #236]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f1c:	4b39      	ldr	r3, [pc, #228]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	4936      	ldr	r1, [pc, #216]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b80      	cmp	r3, #128	; 0x80
 8003f34:	d105      	bne.n	8003f42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f36:	4b33      	ldr	r3, [pc, #204]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	4a32      	ldr	r2, [pc, #200]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f42:	4b2f      	ldr	r3, [pc, #188]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d21d      	bcs.n	8003f8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f50:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f023 020f 	bic.w	r2, r3, #15
 8003f58:	4929      	ldr	r1, [pc, #164]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f60:	f7fc fed6 	bl	8000d10 <HAL_GetTick>
 8003f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f66:	e00a      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f68:	f7fc fed2 	bl	8000d10 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e03b      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b20      	ldr	r3, [pc, #128]	; (8004000 <HAL_RCC_ClockConfig+0x260>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d1ed      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f98:	4b1a      	ldr	r3, [pc, #104]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4917      	ldr	r1, [pc, #92]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb6:	4b13      	ldr	r3, [pc, #76]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	490f      	ldr	r1, [pc, #60]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fca:	f000 f825 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <HAL_RCC_ClockConfig+0x264>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	490c      	ldr	r1, [pc, #48]	; (800400c <HAL_RCC_ClockConfig+0x26c>)
 8003fdc:	5ccb      	ldrb	r3, [r1, r3]
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe6:	4a0a      	ldr	r2, [pc, #40]	; (8004010 <HAL_RCC_ClockConfig+0x270>)
 8003fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <HAL_RCC_ClockConfig+0x274>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fc fe42 	bl	8000c78 <HAL_InitTick>
 8003ff4:	4603      	mov	r3, r0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40022000 	.word	0x40022000
 8004004:	40021000 	.word	0x40021000
 8004008:	04c4b400 	.word	0x04c4b400
 800400c:	080053c0 	.word	0x080053c0
 8004010:	20000000 	.word	0x20000000
 8004014:	20000004 	.word	0x20000004

08004018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800401e:	4b2c      	ldr	r3, [pc, #176]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b04      	cmp	r3, #4
 8004028:	d102      	bne.n	8004030 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800402a:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	e047      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004030:	4b27      	ldr	r3, [pc, #156]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 030c 	and.w	r3, r3, #12
 8004038:	2b08      	cmp	r3, #8
 800403a:	d102      	bne.n	8004042 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800403c:	4b26      	ldr	r3, [pc, #152]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	e03e      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004042:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	2b0c      	cmp	r3, #12
 800404c:	d136      	bne.n	80040bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800404e:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004058:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	3301      	adds	r3, #1
 8004064:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b03      	cmp	r3, #3
 800406a:	d10c      	bne.n	8004086 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800406c:	4a1a      	ldr	r2, [pc, #104]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	fbb2 f3f3 	udiv	r3, r2, r3
 8004074:	4a16      	ldr	r2, [pc, #88]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004076:	68d2      	ldr	r2, [r2, #12]
 8004078:	0a12      	lsrs	r2, r2, #8
 800407a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	617b      	str	r3, [r7, #20]
      break;
 8004084:	e00c      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004086:	4a13      	ldr	r2, [pc, #76]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	fbb2 f3f3 	udiv	r3, r2, r3
 800408e:	4a10      	ldr	r2, [pc, #64]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004090:	68d2      	ldr	r2, [r2, #12]
 8004092:	0a12      	lsrs	r2, r2, #8
 8004094:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004098:	fb02 f303 	mul.w	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]
      break;
 800409e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	0e5b      	lsrs	r3, r3, #25
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	3301      	adds	r3, #1
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	e001      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040c0:	693b      	ldr	r3, [r7, #16]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000
 80040d4:	00f42400 	.word	0x00f42400
 80040d8:	016e3600 	.word	0x016e3600

080040dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e0:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040e2:	681b      	ldr	r3, [r3, #0]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000000 	.word	0x20000000

080040f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040f8:	f7ff fff0 	bl	80040dc <HAL_RCC_GetHCLKFreq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	0a1b      	lsrs	r3, r3, #8
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	4904      	ldr	r1, [pc, #16]	; (800411c <HAL_RCC_GetPCLK1Freq+0x28>)
 800410a:	5ccb      	ldrb	r3, [r1, r3]
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000
 800411c:	080053d0 	.word	0x080053d0

08004120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004124:	f7ff ffda 	bl	80040dc <HAL_RCC_GetHCLKFreq>
 8004128:	4602      	mov	r2, r0
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_RCC_GetPCLK2Freq+0x24>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	0adb      	lsrs	r3, r3, #11
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	4904      	ldr	r1, [pc, #16]	; (8004148 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004136:	5ccb      	ldrb	r3, [r1, r3]
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000
 8004148:	080053d0 	.word	0x080053d0

0800414c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004152:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800415c:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	3301      	adds	r3, #1
 8004168:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d10c      	bne.n	800418a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004170:	4a17      	ldr	r2, [pc, #92]	; (80041d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	fbb2 f3f3 	udiv	r3, r2, r3
 8004178:	4a14      	ldr	r2, [pc, #80]	; (80041cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800417a:	68d2      	ldr	r2, [r2, #12]
 800417c:	0a12      	lsrs	r2, r2, #8
 800417e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	617b      	str	r3, [r7, #20]
    break;
 8004188:	e00c      	b.n	80041a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800418a:	4a12      	ldr	r2, [pc, #72]	; (80041d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004192:	4a0e      	ldr	r2, [pc, #56]	; (80041cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004194:	68d2      	ldr	r2, [r2, #12]
 8004196:	0a12      	lsrs	r2, r2, #8
 8004198:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800419c:	fb02 f303 	mul.w	r3, r2, r3
 80041a0:	617b      	str	r3, [r7, #20]
    break;
 80041a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041a4:	4b09      	ldr	r3, [pc, #36]	; (80041cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	0e5b      	lsrs	r3, r3, #25
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	3301      	adds	r3, #1
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041be:	687b      	ldr	r3, [r7, #4]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40021000 	.word	0x40021000
 80041d0:	016e3600 	.word	0x016e3600
 80041d4:	00f42400 	.word	0x00f42400

080041d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041e0:	2300      	movs	r3, #0
 80041e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041e4:	2300      	movs	r3, #0
 80041e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 8098 	beq.w	8004326 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f6:	2300      	movs	r3, #0
 80041f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fa:	4b43      	ldr	r3, [pc, #268]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10d      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004206:	4b40      	ldr	r3, [pc, #256]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420a:	4a3f      	ldr	r2, [pc, #252]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800420c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004210:	6593      	str	r3, [r2, #88]	; 0x58
 8004212:	4b3d      	ldr	r3, [pc, #244]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421a:	60bb      	str	r3, [r7, #8]
 800421c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421e:	2301      	movs	r3, #1
 8004220:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004222:	4b3a      	ldr	r3, [pc, #232]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a39      	ldr	r2, [pc, #228]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800422e:	f7fc fd6f 	bl	8000d10 <HAL_GetTick>
 8004232:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004234:	e009      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004236:	f7fc fd6b 	bl	8000d10 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d902      	bls.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	74fb      	strb	r3, [r7, #19]
        break;
 8004248:	e005      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800424a:	4b30      	ldr	r3, [pc, #192]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0ef      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004256:	7cfb      	ldrb	r3, [r7, #19]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d159      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800425c:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01e      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	429a      	cmp	r2, r3
 8004276:	d019      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004278:	4b23      	ldr	r3, [pc, #140]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004282:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004284:	4b20      	ldr	r3, [pc, #128]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	4a1f      	ldr	r2, [pc, #124]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004294:	4b1c      	ldr	r3, [pc, #112]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	4a1b      	ldr	r2, [pc, #108]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800429c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042a4:	4a18      	ldr	r2, [pc, #96]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d016      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b6:	f7fc fd2b 	bl	8000d10 <HAL_GetTick>
 80042ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042bc:	e00b      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fc fd27 	bl	8000d10 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d902      	bls.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	74fb      	strb	r3, [r7, #19]
            break;
 80042d4:	e006      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d6:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0ec      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042e4:	7cfb      	ldrb	r3, [r7, #19]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10b      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ea:	4b07      	ldr	r3, [pc, #28]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f8:	4903      	ldr	r1, [pc, #12]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004300:	e008      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	74bb      	strb	r3, [r7, #18]
 8004306:	e005      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004308:	40021000 	.word	0x40021000
 800430c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004314:	7c7b      	ldrb	r3, [r7, #17]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d105      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431a:	4ba7      	ldr	r3, [pc, #668]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	4aa6      	ldr	r2, [pc, #664]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004324:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004332:	4ba1      	ldr	r3, [pc, #644]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f023 0203 	bic.w	r2, r3, #3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	499d      	ldr	r1, [pc, #628]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004354:	4b98      	ldr	r3, [pc, #608]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f023 020c 	bic.w	r2, r3, #12
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	4995      	ldr	r1, [pc, #596]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004376:	4b90      	ldr	r3, [pc, #576]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	498c      	ldr	r1, [pc, #560]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004398:	4b87      	ldr	r3, [pc, #540]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	4984      	ldr	r1, [pc, #528]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043ba:	4b7f      	ldr	r3, [pc, #508]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	497b      	ldr	r1, [pc, #492]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043dc:	4b76      	ldr	r3, [pc, #472]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	4973      	ldr	r1, [pc, #460]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043fe:	4b6e      	ldr	r3, [pc, #440]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	496a      	ldr	r1, [pc, #424]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004420:	4b65      	ldr	r3, [pc, #404]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	4962      	ldr	r1, [pc, #392]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004442:	4b5d      	ldr	r3, [pc, #372]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	4959      	ldr	r1, [pc, #356]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004464:	4b54      	ldr	r3, [pc, #336]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004466:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800446a:	f023 0203 	bic.w	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	4951      	ldr	r1, [pc, #324]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004486:	4b4c      	ldr	r3, [pc, #304]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	4948      	ldr	r1, [pc, #288]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d015      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044a8:	4b43      	ldr	r3, [pc, #268]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	4940      	ldr	r1, [pc, #256]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c6:	d105      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c8:	4b3b      	ldr	r3, [pc, #236]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4a3a      	ldr	r2, [pc, #232]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d015      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044e0:	4b35      	ldr	r3, [pc, #212]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ee:	4932      	ldr	r1, [pc, #200]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044fe:	d105      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004500:	4b2d      	ldr	r3, [pc, #180]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	4a2c      	ldr	r2, [pc, #176]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800450a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d015      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004518:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	4924      	ldr	r1, [pc, #144]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004536:	d105      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004538:	4b1f      	ldr	r3, [pc, #124]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4a1e      	ldr	r2, [pc, #120]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004542:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d015      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004550:	4b19      	ldr	r3, [pc, #100]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455e:	4916      	ldr	r1, [pc, #88]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800456e:	d105      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004570:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	4a10      	ldr	r2, [pc, #64]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800457a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d019      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	4908      	ldr	r1, [pc, #32]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045a6:	d109      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4a02      	ldr	r2, [pc, #8]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045b2:	60d3      	str	r3, [r2, #12]
 80045b4:	e002      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80045b6:	bf00      	nop
 80045b8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d015      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045c8:	4b29      	ldr	r3, [pc, #164]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d6:	4926      	ldr	r1, [pc, #152]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045e6:	d105      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045e8:	4b21      	ldr	r3, [pc, #132]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4a20      	ldr	r2, [pc, #128]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d015      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004600:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460e:	4918      	ldr	r1, [pc, #96]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461e:	d105      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004620:	4b13      	ldr	r3, [pc, #76]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	4a12      	ldr	r2, [pc, #72]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800462a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d015      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004638:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800463a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800463e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004646:	490a      	ldr	r1, [pc, #40]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004652:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004656:	d105      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	4a04      	ldr	r2, [pc, #16]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800465e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004662:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004664:	7cbb      	ldrb	r3, [r7, #18]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000

08004674 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e042      	b.n	800470c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468c:	2b00      	cmp	r3, #0
 800468e:	d106      	bne.n	800469e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7fc f9fb 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2224      	movs	r2, #36	; 0x24
 80046a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fb24 	bl	8004d0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f825 	bl	8004714 <UART_SetConfig>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e01b      	b.n	800470c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fba3 	bl	8004e50 <UART_CheckIdleState>
 800470a:	4603      	mov	r3, r0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004718:	b08c      	sub	sp, #48	; 0x30
 800471a:	af00      	add	r7, sp, #0
 800471c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	431a      	orrs	r2, r3
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	431a      	orrs	r2, r3
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	4313      	orrs	r3, r2
 800473a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	4baa      	ldr	r3, [pc, #680]	; (80049ec <UART_SetConfig+0x2d8>)
 8004744:	4013      	ands	r3, r2
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800474c:	430b      	orrs	r3, r1
 800474e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a9f      	ldr	r2, [pc, #636]	; (80049f0 <UART_SetConfig+0x2dc>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d004      	beq.n	8004780 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800477c:	4313      	orrs	r3, r2
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800478a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004794:	430b      	orrs	r3, r1
 8004796:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	f023 010f 	bic.w	r1, r3, #15
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a90      	ldr	r2, [pc, #576]	; (80049f4 <UART_SetConfig+0x2e0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d125      	bne.n	8004804 <UART_SetConfig+0xf0>
 80047b8:	4b8f      	ldr	r3, [pc, #572]	; (80049f8 <UART_SetConfig+0x2e4>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d81a      	bhi.n	80047fc <UART_SetConfig+0xe8>
 80047c6:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <UART_SetConfig+0xb8>)
 80047c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047cc:	080047dd 	.word	0x080047dd
 80047d0:	080047ed 	.word	0x080047ed
 80047d4:	080047e5 	.word	0x080047e5
 80047d8:	080047f5 	.word	0x080047f5
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047e2:	e116      	b.n	8004a12 <UART_SetConfig+0x2fe>
 80047e4:	2302      	movs	r3, #2
 80047e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ea:	e112      	b.n	8004a12 <UART_SetConfig+0x2fe>
 80047ec:	2304      	movs	r3, #4
 80047ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047f2:	e10e      	b.n	8004a12 <UART_SetConfig+0x2fe>
 80047f4:	2308      	movs	r3, #8
 80047f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047fa:	e10a      	b.n	8004a12 <UART_SetConfig+0x2fe>
 80047fc:	2310      	movs	r3, #16
 80047fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004802:	e106      	b.n	8004a12 <UART_SetConfig+0x2fe>
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a7c      	ldr	r2, [pc, #496]	; (80049fc <UART_SetConfig+0x2e8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d138      	bne.n	8004880 <UART_SetConfig+0x16c>
 800480e:	4b7a      	ldr	r3, [pc, #488]	; (80049f8 <UART_SetConfig+0x2e4>)
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004814:	f003 030c 	and.w	r3, r3, #12
 8004818:	2b0c      	cmp	r3, #12
 800481a:	d82d      	bhi.n	8004878 <UART_SetConfig+0x164>
 800481c:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <UART_SetConfig+0x110>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004859 	.word	0x08004859
 8004828:	08004879 	.word	0x08004879
 800482c:	08004879 	.word	0x08004879
 8004830:	08004879 	.word	0x08004879
 8004834:	08004869 	.word	0x08004869
 8004838:	08004879 	.word	0x08004879
 800483c:	08004879 	.word	0x08004879
 8004840:	08004879 	.word	0x08004879
 8004844:	08004861 	.word	0x08004861
 8004848:	08004879 	.word	0x08004879
 800484c:	08004879 	.word	0x08004879
 8004850:	08004879 	.word	0x08004879
 8004854:	08004871 	.word	0x08004871
 8004858:	2300      	movs	r3, #0
 800485a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800485e:	e0d8      	b.n	8004a12 <UART_SetConfig+0x2fe>
 8004860:	2302      	movs	r3, #2
 8004862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004866:	e0d4      	b.n	8004a12 <UART_SetConfig+0x2fe>
 8004868:	2304      	movs	r3, #4
 800486a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800486e:	e0d0      	b.n	8004a12 <UART_SetConfig+0x2fe>
 8004870:	2308      	movs	r3, #8
 8004872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004876:	e0cc      	b.n	8004a12 <UART_SetConfig+0x2fe>
 8004878:	2310      	movs	r3, #16
 800487a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800487e:	e0c8      	b.n	8004a12 <UART_SetConfig+0x2fe>
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a5e      	ldr	r2, [pc, #376]	; (8004a00 <UART_SetConfig+0x2ec>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d125      	bne.n	80048d6 <UART_SetConfig+0x1c2>
 800488a:	4b5b      	ldr	r3, [pc, #364]	; (80049f8 <UART_SetConfig+0x2e4>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004890:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004894:	2b30      	cmp	r3, #48	; 0x30
 8004896:	d016      	beq.n	80048c6 <UART_SetConfig+0x1b2>
 8004898:	2b30      	cmp	r3, #48	; 0x30
 800489a:	d818      	bhi.n	80048ce <UART_SetConfig+0x1ba>
 800489c:	2b20      	cmp	r3, #32
 800489e:	d00a      	beq.n	80048b6 <UART_SetConfig+0x1a2>
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d814      	bhi.n	80048ce <UART_SetConfig+0x1ba>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <UART_SetConfig+0x19a>
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d008      	beq.n	80048be <UART_SetConfig+0x1aa>
 80048ac:	e00f      	b.n	80048ce <UART_SetConfig+0x1ba>
 80048ae:	2300      	movs	r3, #0
 80048b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048b4:	e0ad      	b.n	8004a12 <UART_SetConfig+0x2fe>
 80048b6:	2302      	movs	r3, #2
 80048b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048bc:	e0a9      	b.n	8004a12 <UART_SetConfig+0x2fe>
 80048be:	2304      	movs	r3, #4
 80048c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048c4:	e0a5      	b.n	8004a12 <UART_SetConfig+0x2fe>
 80048c6:	2308      	movs	r3, #8
 80048c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048cc:	e0a1      	b.n	8004a12 <UART_SetConfig+0x2fe>
 80048ce:	2310      	movs	r3, #16
 80048d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048d4:	e09d      	b.n	8004a12 <UART_SetConfig+0x2fe>
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a4a      	ldr	r2, [pc, #296]	; (8004a04 <UART_SetConfig+0x2f0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d125      	bne.n	800492c <UART_SetConfig+0x218>
 80048e0:	4b45      	ldr	r3, [pc, #276]	; (80049f8 <UART_SetConfig+0x2e4>)
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048ea:	2bc0      	cmp	r3, #192	; 0xc0
 80048ec:	d016      	beq.n	800491c <UART_SetConfig+0x208>
 80048ee:	2bc0      	cmp	r3, #192	; 0xc0
 80048f0:	d818      	bhi.n	8004924 <UART_SetConfig+0x210>
 80048f2:	2b80      	cmp	r3, #128	; 0x80
 80048f4:	d00a      	beq.n	800490c <UART_SetConfig+0x1f8>
 80048f6:	2b80      	cmp	r3, #128	; 0x80
 80048f8:	d814      	bhi.n	8004924 <UART_SetConfig+0x210>
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <UART_SetConfig+0x1f0>
 80048fe:	2b40      	cmp	r3, #64	; 0x40
 8004900:	d008      	beq.n	8004914 <UART_SetConfig+0x200>
 8004902:	e00f      	b.n	8004924 <UART_SetConfig+0x210>
 8004904:	2300      	movs	r3, #0
 8004906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800490a:	e082      	b.n	8004a12 <UART_SetConfig+0x2fe>
 800490c:	2302      	movs	r3, #2
 800490e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004912:	e07e      	b.n	8004a12 <UART_SetConfig+0x2fe>
 8004914:	2304      	movs	r3, #4
 8004916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800491a:	e07a      	b.n	8004a12 <UART_SetConfig+0x2fe>
 800491c:	2308      	movs	r3, #8
 800491e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004922:	e076      	b.n	8004a12 <UART_SetConfig+0x2fe>
 8004924:	2310      	movs	r3, #16
 8004926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800492a:	e072      	b.n	8004a12 <UART_SetConfig+0x2fe>
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a35      	ldr	r2, [pc, #212]	; (8004a08 <UART_SetConfig+0x2f4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d12a      	bne.n	800498c <UART_SetConfig+0x278>
 8004936:	4b30      	ldr	r3, [pc, #192]	; (80049f8 <UART_SetConfig+0x2e4>)
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004944:	d01a      	beq.n	800497c <UART_SetConfig+0x268>
 8004946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800494a:	d81b      	bhi.n	8004984 <UART_SetConfig+0x270>
 800494c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004950:	d00c      	beq.n	800496c <UART_SetConfig+0x258>
 8004952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004956:	d815      	bhi.n	8004984 <UART_SetConfig+0x270>
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <UART_SetConfig+0x250>
 800495c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004960:	d008      	beq.n	8004974 <UART_SetConfig+0x260>
 8004962:	e00f      	b.n	8004984 <UART_SetConfig+0x270>
 8004964:	2300      	movs	r3, #0
 8004966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800496a:	e052      	b.n	8004a12 <UART_SetConfig+0x2fe>
 800496c:	2302      	movs	r3, #2
 800496e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004972:	e04e      	b.n	8004a12 <UART_SetConfig+0x2fe>
 8004974:	2304      	movs	r3, #4
 8004976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800497a:	e04a      	b.n	8004a12 <UART_SetConfig+0x2fe>
 800497c:	2308      	movs	r3, #8
 800497e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004982:	e046      	b.n	8004a12 <UART_SetConfig+0x2fe>
 8004984:	2310      	movs	r3, #16
 8004986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800498a:	e042      	b.n	8004a12 <UART_SetConfig+0x2fe>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a17      	ldr	r2, [pc, #92]	; (80049f0 <UART_SetConfig+0x2dc>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d13a      	bne.n	8004a0c <UART_SetConfig+0x2f8>
 8004996:	4b18      	ldr	r3, [pc, #96]	; (80049f8 <UART_SetConfig+0x2e4>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049a4:	d01a      	beq.n	80049dc <UART_SetConfig+0x2c8>
 80049a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049aa:	d81b      	bhi.n	80049e4 <UART_SetConfig+0x2d0>
 80049ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b0:	d00c      	beq.n	80049cc <UART_SetConfig+0x2b8>
 80049b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b6:	d815      	bhi.n	80049e4 <UART_SetConfig+0x2d0>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <UART_SetConfig+0x2b0>
 80049bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c0:	d008      	beq.n	80049d4 <UART_SetConfig+0x2c0>
 80049c2:	e00f      	b.n	80049e4 <UART_SetConfig+0x2d0>
 80049c4:	2300      	movs	r3, #0
 80049c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ca:	e022      	b.n	8004a12 <UART_SetConfig+0x2fe>
 80049cc:	2302      	movs	r3, #2
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049d2:	e01e      	b.n	8004a12 <UART_SetConfig+0x2fe>
 80049d4:	2304      	movs	r3, #4
 80049d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049da:	e01a      	b.n	8004a12 <UART_SetConfig+0x2fe>
 80049dc:	2308      	movs	r3, #8
 80049de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049e2:	e016      	b.n	8004a12 <UART_SetConfig+0x2fe>
 80049e4:	2310      	movs	r3, #16
 80049e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ea:	e012      	b.n	8004a12 <UART_SetConfig+0x2fe>
 80049ec:	cfff69f3 	.word	0xcfff69f3
 80049f0:	40008000 	.word	0x40008000
 80049f4:	40013800 	.word	0x40013800
 80049f8:	40021000 	.word	0x40021000
 80049fc:	40004400 	.word	0x40004400
 8004a00:	40004800 	.word	0x40004800
 8004a04:	40004c00 	.word	0x40004c00
 8004a08:	40005000 	.word	0x40005000
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4aae      	ldr	r2, [pc, #696]	; (8004cd0 <UART_SetConfig+0x5bc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	f040 8097 	bne.w	8004b4c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d823      	bhi.n	8004a6e <UART_SetConfig+0x35a>
 8004a26:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <UART_SetConfig+0x318>)
 8004a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2c:	08004a51 	.word	0x08004a51
 8004a30:	08004a6f 	.word	0x08004a6f
 8004a34:	08004a59 	.word	0x08004a59
 8004a38:	08004a6f 	.word	0x08004a6f
 8004a3c:	08004a5f 	.word	0x08004a5f
 8004a40:	08004a6f 	.word	0x08004a6f
 8004a44:	08004a6f 	.word	0x08004a6f
 8004a48:	08004a6f 	.word	0x08004a6f
 8004a4c:	08004a67 	.word	0x08004a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a50:	f7ff fb50 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 8004a54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a56:	e010      	b.n	8004a7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a58:	4b9e      	ldr	r3, [pc, #632]	; (8004cd4 <UART_SetConfig+0x5c0>)
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a5c:	e00d      	b.n	8004a7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a5e:	f7ff fadb 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8004a62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a64:	e009      	b.n	8004a7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a6c:	e005      	b.n	8004a7a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8130 	beq.w	8004ce2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	4a94      	ldr	r2, [pc, #592]	; (8004cd8 <UART_SetConfig+0x5c4>)
 8004a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	4413      	add	r3, r2
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d305      	bcc.n	8004ab2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d903      	bls.n	8004aba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ab8:	e113      	b.n	8004ce2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	2200      	movs	r2, #0
 8004abe:	60bb      	str	r3, [r7, #8]
 8004ac0:	60fa      	str	r2, [r7, #12]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	4a84      	ldr	r2, [pc, #528]	; (8004cd8 <UART_SetConfig+0x5c4>)
 8004ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2200      	movs	r2, #0
 8004ad0:	603b      	str	r3, [r7, #0]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ad8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004adc:	f7fb fb9c 	bl	8000218 <__aeabi_uldivmod>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	020b      	lsls	r3, r1, #8
 8004af2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004af6:	0202      	lsls	r2, r0, #8
 8004af8:	6979      	ldr	r1, [r7, #20]
 8004afa:	6849      	ldr	r1, [r1, #4]
 8004afc:	0849      	lsrs	r1, r1, #1
 8004afe:	2000      	movs	r0, #0
 8004b00:	460c      	mov	r4, r1
 8004b02:	4605      	mov	r5, r0
 8004b04:	eb12 0804 	adds.w	r8, r2, r4
 8004b08:	eb43 0905 	adc.w	r9, r3, r5
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	469a      	mov	sl, r3
 8004b14:	4693      	mov	fp, r2
 8004b16:	4652      	mov	r2, sl
 8004b18:	465b      	mov	r3, fp
 8004b1a:	4640      	mov	r0, r8
 8004b1c:	4649      	mov	r1, r9
 8004b1e:	f7fb fb7b 	bl	8000218 <__aeabi_uldivmod>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4613      	mov	r3, r2
 8004b28:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b30:	d308      	bcc.n	8004b44 <UART_SetConfig+0x430>
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b38:	d204      	bcs.n	8004b44 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6a3a      	ldr	r2, [r7, #32]
 8004b40:	60da      	str	r2, [r3, #12]
 8004b42:	e0ce      	b.n	8004ce2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b4a:	e0ca      	b.n	8004ce2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b54:	d166      	bne.n	8004c24 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004b56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d827      	bhi.n	8004bae <UART_SetConfig+0x49a>
 8004b5e:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <UART_SetConfig+0x450>)
 8004b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b64:	08004b89 	.word	0x08004b89
 8004b68:	08004b91 	.word	0x08004b91
 8004b6c:	08004b99 	.word	0x08004b99
 8004b70:	08004baf 	.word	0x08004baf
 8004b74:	08004b9f 	.word	0x08004b9f
 8004b78:	08004baf 	.word	0x08004baf
 8004b7c:	08004baf 	.word	0x08004baf
 8004b80:	08004baf 	.word	0x08004baf
 8004b84:	08004ba7 	.word	0x08004ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b88:	f7ff fab4 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 8004b8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b8e:	e014      	b.n	8004bba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b90:	f7ff fac6 	bl	8004120 <HAL_RCC_GetPCLK2Freq>
 8004b94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b96:	e010      	b.n	8004bba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b98:	4b4e      	ldr	r3, [pc, #312]	; (8004cd4 <UART_SetConfig+0x5c0>)
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b9c:	e00d      	b.n	8004bba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b9e:	f7ff fa3b 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8004ba2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ba4:	e009      	b.n	8004bba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bac:	e005      	b.n	8004bba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8090 	beq.w	8004ce2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	4a44      	ldr	r2, [pc, #272]	; (8004cd8 <UART_SetConfig+0x5c4>)
 8004bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bd4:	005a      	lsls	r2, r3, #1
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	085b      	lsrs	r3, r3, #1
 8004bdc:	441a      	add	r2, r3
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	2b0f      	cmp	r3, #15
 8004bec:	d916      	bls.n	8004c1c <UART_SetConfig+0x508>
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf4:	d212      	bcs.n	8004c1c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	f023 030f 	bic.w	r3, r3, #15
 8004bfe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	085b      	lsrs	r3, r3, #1
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	8bfb      	ldrh	r3, [r7, #30]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	8bfa      	ldrh	r2, [r7, #30]
 8004c18:	60da      	str	r2, [r3, #12]
 8004c1a:	e062      	b.n	8004ce2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c22:	e05e      	b.n	8004ce2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d828      	bhi.n	8004c7e <UART_SetConfig+0x56a>
 8004c2c:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <UART_SetConfig+0x520>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c61 	.word	0x08004c61
 8004c3c:	08004c69 	.word	0x08004c69
 8004c40:	08004c7f 	.word	0x08004c7f
 8004c44:	08004c6f 	.word	0x08004c6f
 8004c48:	08004c7f 	.word	0x08004c7f
 8004c4c:	08004c7f 	.word	0x08004c7f
 8004c50:	08004c7f 	.word	0x08004c7f
 8004c54:	08004c77 	.word	0x08004c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c58:	f7ff fa4c 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 8004c5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c5e:	e014      	b.n	8004c8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c60:	f7ff fa5e 	bl	8004120 <HAL_RCC_GetPCLK2Freq>
 8004c64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c66:	e010      	b.n	8004c8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c68:	4b1a      	ldr	r3, [pc, #104]	; (8004cd4 <UART_SetConfig+0x5c0>)
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c6c:	e00d      	b.n	8004c8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c6e:	f7ff f9d3 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8004c72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c74:	e009      	b.n	8004c8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c7c:	e005      	b.n	8004c8a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c88:	bf00      	nop
    }

    if (pclk != 0U)
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d028      	beq.n	8004ce2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <UART_SetConfig+0x5c4>)
 8004c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	441a      	add	r2, r3
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	2b0f      	cmp	r3, #15
 8004cb8:	d910      	bls.n	8004cdc <UART_SetConfig+0x5c8>
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc0:	d20c      	bcs.n	8004cdc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60da      	str	r2, [r3, #12]
 8004ccc:	e009      	b.n	8004ce2 <UART_SetConfig+0x5ce>
 8004cce:	bf00      	nop
 8004cd0:	40008000 	.word	0x40008000
 8004cd4:	00f42400 	.word	0x00f42400
 8004cd8:	080053d8 	.word	0x080053d8
      }
      else
      {
        ret = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004cfe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3730      	adds	r7, #48	; 0x30
 8004d06:	46bd      	mov	sp, r7
 8004d08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004d0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01a      	beq.n	8004e22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e0a:	d10a      	bne.n	8004e22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	605a      	str	r2, [r3, #4]
  }
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b098      	sub	sp, #96	; 0x60
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e60:	f7fb ff56 	bl	8000d10 <HAL_GetTick>
 8004e64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d12f      	bne.n	8004ed4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f88e 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d022      	beq.n	8004ed4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eac:	647b      	str	r3, [r7, #68]	; 0x44
 8004eae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004eb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e6      	bne.n	8004e8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e063      	b.n	8004f9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d149      	bne.n	8004f76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eea:	2200      	movs	r2, #0
 8004eec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f857 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d03c      	beq.n	8004f76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	623b      	str	r3, [r7, #32]
   return(result);
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f1a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f1c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e6      	bne.n	8004efc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3308      	adds	r3, #8
 8004f34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f023 0301 	bic.w	r3, r3, #1
 8004f44:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f4e:	61fa      	str	r2, [r7, #28]
 8004f50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	69b9      	ldr	r1, [r7, #24]
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	617b      	str	r3, [r7, #20]
   return(result);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e5      	bne.n	8004f2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e012      	b.n	8004f9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3758      	adds	r7, #88	; 0x58
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb4:	e04f      	b.n	8005056 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbc:	d04b      	beq.n	8005056 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fbe:	f7fb fea7 	bl	8000d10 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d302      	bcc.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e04e      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d037      	beq.n	8005056 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b80      	cmp	r3, #128	; 0x80
 8004fea:	d034      	beq.n	8005056 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d031      	beq.n	8005056 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d110      	bne.n	8005022 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2208      	movs	r2, #8
 8005006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f838 	bl	800507e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2208      	movs	r2, #8
 8005012:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e029      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800502c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005030:	d111      	bne.n	8005056 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800503a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f81e 	bl	800507e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e00f      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4013      	ands	r3, r2
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	429a      	cmp	r2, r3
 8005064:	bf0c      	ite	eq
 8005066:	2301      	moveq	r3, #1
 8005068:	2300      	movne	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	429a      	cmp	r2, r3
 8005072:	d0a0      	beq.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800507e:	b480      	push	{r7}
 8005080:	b095      	sub	sp, #84	; 0x54
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800509a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a4:	643b      	str	r3, [r7, #64]	; 0x40
 80050a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e6      	bne.n	8005086 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3308      	adds	r3, #8
 80050be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ce:	f023 0301 	bic.w	r3, r3, #1
 80050d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3308      	adds	r3, #8
 80050da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e3      	bne.n	80050b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d118      	bne.n	800512a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	60bb      	str	r3, [r7, #8]
   return(result);
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f023 0310 	bic.w	r3, r3, #16
 800510c:	647b      	str	r3, [r7, #68]	; 0x44
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005116:	61bb      	str	r3, [r7, #24]
 8005118:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	6979      	ldr	r1, [r7, #20]
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	613b      	str	r3, [r7, #16]
   return(result);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e6      	bne.n	80050f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800513e:	bf00      	nop
 8005140:	3754      	adds	r7, #84	; 0x54
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800514a:	b480      	push	{r7}
 800514c:	b085      	sub	sp, #20
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <HAL_UARTEx_DisableFifoMode+0x16>
 800515c:	2302      	movs	r3, #2
 800515e:	e027      	b.n	80051b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2224      	movs	r2, #36	; 0x24
 800516c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0201 	bic.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800518e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e02d      	b.n	8005230 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2224      	movs	r2, #36	; 0x24
 80051e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0201 	bic.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f84f 	bl	80052b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800524c:	2302      	movs	r3, #2
 800524e:	e02d      	b.n	80052ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2224      	movs	r2, #36	; 0x24
 800525c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0201 	bic.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f811 	bl	80052b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2220      	movs	r2, #32
 800529e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d108      	bne.n	80052d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052d4:	e031      	b.n	800533a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052d6:	2308      	movs	r3, #8
 80052d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052da:	2308      	movs	r3, #8
 80052dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	0e5b      	lsrs	r3, r3, #25
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	0f5b      	lsrs	r3, r3, #29
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052fe:	7bbb      	ldrb	r3, [r7, #14]
 8005300:	7b3a      	ldrb	r2, [r7, #12]
 8005302:	4911      	ldr	r1, [pc, #68]	; (8005348 <UARTEx_SetNbDataToProcess+0x94>)
 8005304:	5c8a      	ldrb	r2, [r1, r2]
 8005306:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800530a:	7b3a      	ldrb	r2, [r7, #12]
 800530c:	490f      	ldr	r1, [pc, #60]	; (800534c <UARTEx_SetNbDataToProcess+0x98>)
 800530e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005310:	fb93 f3f2 	sdiv	r3, r3, r2
 8005314:	b29a      	uxth	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	7b7a      	ldrb	r2, [r7, #13]
 8005320:	4909      	ldr	r1, [pc, #36]	; (8005348 <UARTEx_SetNbDataToProcess+0x94>)
 8005322:	5c8a      	ldrb	r2, [r1, r2]
 8005324:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005328:	7b7a      	ldrb	r2, [r7, #13]
 800532a:	4908      	ldr	r1, [pc, #32]	; (800534c <UARTEx_SetNbDataToProcess+0x98>)
 800532c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800532e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005332:	b29a      	uxth	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800533a:	bf00      	nop
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	080053f0 	.word	0x080053f0
 800534c:	080053f8 	.word	0x080053f8

08005350 <memset>:
 8005350:	4402      	add	r2, r0
 8005352:	4603      	mov	r3, r0
 8005354:	4293      	cmp	r3, r2
 8005356:	d100      	bne.n	800535a <memset+0xa>
 8005358:	4770      	bx	lr
 800535a:	f803 1b01 	strb.w	r1, [r3], #1
 800535e:	e7f9      	b.n	8005354 <memset+0x4>

08005360 <__libc_init_array>:
 8005360:	b570      	push	{r4, r5, r6, lr}
 8005362:	4d0d      	ldr	r5, [pc, #52]	; (8005398 <__libc_init_array+0x38>)
 8005364:	4c0d      	ldr	r4, [pc, #52]	; (800539c <__libc_init_array+0x3c>)
 8005366:	1b64      	subs	r4, r4, r5
 8005368:	10a4      	asrs	r4, r4, #2
 800536a:	2600      	movs	r6, #0
 800536c:	42a6      	cmp	r6, r4
 800536e:	d109      	bne.n	8005384 <__libc_init_array+0x24>
 8005370:	4d0b      	ldr	r5, [pc, #44]	; (80053a0 <__libc_init_array+0x40>)
 8005372:	4c0c      	ldr	r4, [pc, #48]	; (80053a4 <__libc_init_array+0x44>)
 8005374:	f000 f818 	bl	80053a8 <_init>
 8005378:	1b64      	subs	r4, r4, r5
 800537a:	10a4      	asrs	r4, r4, #2
 800537c:	2600      	movs	r6, #0
 800537e:	42a6      	cmp	r6, r4
 8005380:	d105      	bne.n	800538e <__libc_init_array+0x2e>
 8005382:	bd70      	pop	{r4, r5, r6, pc}
 8005384:	f855 3b04 	ldr.w	r3, [r5], #4
 8005388:	4798      	blx	r3
 800538a:	3601      	adds	r6, #1
 800538c:	e7ee      	b.n	800536c <__libc_init_array+0xc>
 800538e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005392:	4798      	blx	r3
 8005394:	3601      	adds	r6, #1
 8005396:	e7f2      	b.n	800537e <__libc_init_array+0x1e>
 8005398:	08005408 	.word	0x08005408
 800539c:	08005408 	.word	0x08005408
 80053a0:	08005408 	.word	0x08005408
 80053a4:	0800540c 	.word	0x0800540c

080053a8 <_init>:
 80053a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053aa:	bf00      	nop
 80053ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ae:	bc08      	pop	{r3}
 80053b0:	469e      	mov	lr, r3
 80053b2:	4770      	bx	lr

080053b4 <_fini>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	bf00      	nop
 80053b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ba:	bc08      	pop	{r3}
 80053bc:	469e      	mov	lr, r3
 80053be:	4770      	bx	lr
