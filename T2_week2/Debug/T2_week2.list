
T2_week2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058cc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005aa4  08005aa4  00015aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ae4  08005ae4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ae4  08005ae4  00015ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005aec  08005aec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aec  08005aec  00015aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005af0  08005af0  00015af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000000c  08005b00  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08005b00  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013054  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025bc  00000000  00000000  000330d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  00035690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b87  00000000  00000000  00036590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002683e  00000000  00000000  00037117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e4c  00000000  00000000  0005d955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff5c0  00000000  00000000  000707a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f30  00000000  00000000  0016fd64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00173c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005a8c 	.word	0x08005a8c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005a8c 	.word	0x08005a8c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fc93 	bl	8000e42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f834 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fa0e 	bl	8000940 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f9e2 	bl	80008ec <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f996 	bl	8000858 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800052c:	f000 f878 	bl	8000620 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000530:	f000 f91e 	bl	8000770 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000534:	f000 f956 	bl	80007e4 <MX_DAC2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_IT(&hadc1);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000538:	217f      	movs	r1, #127	; 0x7f
 800053a:	480f      	ldr	r0, [pc, #60]	; (8000578 <main+0x64>)
 800053c:	f002 fa8c 	bl	8002a58 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 40);
 8000540:	2228      	movs	r2, #40	; 0x28
 8000542:	490e      	ldr	r1, [pc, #56]	; (800057c <main+0x68>)
 8000544:	480c      	ldr	r0, [pc, #48]	; (8000578 <main+0x64>)
 8000546:	f001 f90f 	bl	8001768 <HAL_ADC_Start_DMA>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800054a:	2100      	movs	r1, #0
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <main+0x6c>)
 800054e:	f002 fd51 	bl	8002ff4 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8000552:	2100      	movs	r1, #0
 8000554:	480b      	ldr	r0, [pc, #44]	; (8000584 <main+0x70>)
 8000556:	f002 fd4d 	bl	8002ff4 <HAL_DAC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,4095);
 800055a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800055e:	2200      	movs	r2, #0
 8000560:	2100      	movs	r1, #0
 8000562:	4807      	ldr	r0, [pc, #28]	; (8000580 <main+0x6c>)
 8000564:	f002 fdb2 	bl	80030cc <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R,4095);
 8000568:	f640 73ff 	movw	r3, #4095	; 0xfff
 800056c:	2200      	movs	r2, #0
 800056e:	2100      	movs	r1, #0
 8000570:	4804      	ldr	r0, [pc, #16]	; (8000584 <main+0x70>)
 8000572:	f002 fdab 	bl	80030cc <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,4095);
 8000576:	e7f0      	b.n	800055a <main+0x46>
 8000578:	20000028 	.word	0x20000028
 800057c:	200001b0 	.word	0x200001b0
 8000580:	200000f4 	.word	0x200000f4
 8000584:	20000108 	.word	0x20000108

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0318 	add.w	r3, r7, #24
 8000592:	2238      	movs	r2, #56	; 0x38
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f005 fa4c 	bl	8005a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f003 fba4 	bl	8003cf8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ba:	2340      	movs	r3, #64	; 0x40
 80005bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005c6:	2304      	movs	r3, #4
 80005c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ca:	2355      	movs	r3, #85	; 0x55
 80005cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fc3e 	bl	8003e60 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ea:	f000 fa17 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2303      	movs	r3, #3
 80005f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2104      	movs	r1, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f003 ff3c 	bl	8004484 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000612:	f000 fa03 	bl	8000a1c <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08c      	sub	sp, #48	; 0x30
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2220      	movs	r2, #32
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f005 f9fb 	bl	8005a34 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800063e:	4b47      	ldr	r3, [pc, #284]	; (800075c <MX_ADC1_Init+0x13c>)
 8000640:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000644:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000646:	4b45      	ldr	r3, [pc, #276]	; (800075c <MX_ADC1_Init+0x13c>)
 8000648:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800064c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800064e:	4b43      	ldr	r3, [pc, #268]	; (800075c <MX_ADC1_Init+0x13c>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000654:	4b41      	ldr	r3, [pc, #260]	; (800075c <MX_ADC1_Init+0x13c>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800065a:	4b40      	ldr	r3, [pc, #256]	; (800075c <MX_ADC1_Init+0x13c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000660:	4b3e      	ldr	r3, [pc, #248]	; (800075c <MX_ADC1_Init+0x13c>)
 8000662:	2201      	movs	r2, #1
 8000664:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000666:	4b3d      	ldr	r3, [pc, #244]	; (800075c <MX_ADC1_Init+0x13c>)
 8000668:	2204      	movs	r2, #4
 800066a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800066c:	4b3b      	ldr	r3, [pc, #236]	; (800075c <MX_ADC1_Init+0x13c>)
 800066e:	2200      	movs	r2, #0
 8000670:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000672:	4b3a      	ldr	r3, [pc, #232]	; (800075c <MX_ADC1_Init+0x13c>)
 8000674:	2201      	movs	r2, #1
 8000676:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8000678:	4b38      	ldr	r3, [pc, #224]	; (800075c <MX_ADC1_Init+0x13c>)
 800067a:	2204      	movs	r2, #4
 800067c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800067e:	4b37      	ldr	r3, [pc, #220]	; (800075c <MX_ADC1_Init+0x13c>)
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000686:	4b35      	ldr	r3, [pc, #212]	; (800075c <MX_ADC1_Init+0x13c>)
 8000688:	2200      	movs	r2, #0
 800068a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068c:	4b33      	ldr	r3, [pc, #204]	; (800075c <MX_ADC1_Init+0x13c>)
 800068e:	2200      	movs	r2, #0
 8000690:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000692:	4b32      	ldr	r3, [pc, #200]	; (800075c <MX_ADC1_Init+0x13c>)
 8000694:	2201      	movs	r2, #1
 8000696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800069a:	4b30      	ldr	r3, [pc, #192]	; (800075c <MX_ADC1_Init+0x13c>)
 800069c:	2200      	movs	r2, #0
 800069e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006a0:	4b2e      	ldr	r3, [pc, #184]	; (800075c <MX_ADC1_Init+0x13c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a8:	482c      	ldr	r0, [pc, #176]	; (800075c <MX_ADC1_Init+0x13c>)
 80006aa:	f000 fea1 	bl	80013f0 <HAL_ADC_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006b4:	f000 f9b2 	bl	8000a1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c0:	4619      	mov	r1, r3
 80006c2:	4826      	ldr	r0, [pc, #152]	; (800075c <MX_ADC1_Init+0x13c>)
 80006c4:	f002 fa5c 	bl	8002b80 <HAL_ADCEx_MultiModeConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006ce:	f000 f9a5 	bl	8000a1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006d2:	4b23      	ldr	r3, [pc, #140]	; (8000760 <MX_ADC1_Init+0x140>)
 80006d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d6:	2306      	movs	r3, #6
 80006d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80006da:	2307      	movs	r3, #7
 80006dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006de:	237f      	movs	r3, #127	; 0x7f
 80006e0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006e2:	2304      	movs	r3, #4
 80006e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	4619      	mov	r1, r3
 80006ee:	481b      	ldr	r0, [pc, #108]	; (800075c <MX_ADC1_Init+0x13c>)
 80006f0:	f001 fb96 	bl	8001e20 <HAL_ADC_ConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006fa:	f000 f98f 	bl	8000a1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_ADC1_Init+0x144>)
 8000700:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000702:	230c      	movs	r3, #12
 8000704:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4619      	mov	r1, r3
 800070a:	4814      	ldr	r0, [pc, #80]	; (800075c <MX_ADC1_Init+0x13c>)
 800070c:	f001 fb88 	bl	8001e20 <HAL_ADC_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000716:	f000 f981 	bl	8000a1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_ADC1_Init+0x148>)
 800071c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800071e:	2312      	movs	r3, #18
 8000720:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4619      	mov	r1, r3
 8000726:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_ADC1_Init+0x13c>)
 8000728:	f001 fb7a 	bl	8001e20 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000732:	f000 f973 	bl	8000a1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_ADC1_Init+0x14c>)
 8000738:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800073a:	2318      	movs	r3, #24
 800073c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4619      	mov	r1, r3
 8000742:	4806      	ldr	r0, [pc, #24]	; (800075c <MX_ADC1_Init+0x13c>)
 8000744:	f001 fb6c 	bl	8001e20 <HAL_ADC_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800074e:	f000 f965 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	3730      	adds	r7, #48	; 0x30
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000028 	.word	0x20000028
 8000760:	04300002 	.word	0x04300002
 8000764:	08600004 	.word	0x08600004
 8000768:	3ef08000 	.word	0x3ef08000
 800076c:	c3210000 	.word	0xc3210000

08000770 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	; 0x30
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2230      	movs	r2, #48	; 0x30
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f005 f959 	bl	8005a34 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_DAC1_Init+0x6c>)
 8000784:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <MX_DAC1_Init+0x70>)
 8000786:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000788:	4814      	ldr	r0, [pc, #80]	; (80007dc <MX_DAC1_Init+0x6c>)
 800078a:	f002 fc10 	bl	8002fae <HAL_DAC_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000794:	f000 f942 	bl	8000a1c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000798:	2302      	movs	r3, #2
 800079a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	; (80007dc <MX_DAC1_Init+0x6c>)
 80007c4:	f002 fcb0 	bl	8003128 <HAL_DAC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80007ce:	f000 f925 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3730      	adds	r7, #48	; 0x30
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000f4 	.word	0x200000f4
 80007e0:	50000800 	.word	0x50000800

080007e4 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	; 0x30
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2230      	movs	r2, #48	; 0x30
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f005 f91f 	bl	8005a34 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_DAC2_Init+0x6c>)
 80007f8:	4a16      	ldr	r2, [pc, #88]	; (8000854 <MX_DAC2_Init+0x70>)
 80007fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80007fc:	4814      	ldr	r0, [pc, #80]	; (8000850 <MX_DAC2_Init+0x6c>)
 80007fe:	f002 fbd6 	bl	8002fae <HAL_DAC_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000808:	f000 f908 	bl	8000a1c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800080c:	2302      	movs	r3, #2
 800080e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000828:	2301      	movs	r3, #1
 800082a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	2200      	movs	r2, #0
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <MX_DAC2_Init+0x6c>)
 8000838:	f002 fc76 	bl	8003128 <HAL_DAC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000842:	f000 f8eb 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3730      	adds	r7, #48	; 0x30
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000108 	.word	0x20000108
 8000854:	50000c00 	.word	0x50000c00

08000858 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800085c:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 800085e:	4a22      	ldr	r2, [pc, #136]	; (80008e8 <MX_LPUART1_UART_Init+0x90>)
 8000860:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000862:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800089a:	4812      	ldr	r0, [pc, #72]	; (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 800089c:	f004 fa5c 	bl	8004d58 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80008a6:	f000 f8b9 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008aa:	2100      	movs	r1, #0
 80008ac:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 80008ae:	f004 fff7 	bl	80058a0 <HAL_UARTEx_SetTxFifoThreshold>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80008b8:	f000 f8b0 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008bc:	2100      	movs	r1, #0
 80008be:	4809      	ldr	r0, [pc, #36]	; (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 80008c0:	f005 f82c 	bl	800591c <HAL_UARTEx_SetRxFifoThreshold>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80008ca:	f000 f8a7 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_LPUART1_UART_Init+0x8c>)
 80008d0:	f004 ffad 	bl	800582e <HAL_UARTEx_DisableFifoMode>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80008da:	f000 f89f 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000011c 	.word	0x2000011c
 80008e8:	40008000 	.word	0x40008000

080008ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_DMA_Init+0x50>)
 80008f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008f6:	4a11      	ldr	r2, [pc, #68]	; (800093c <MX_DMA_Init+0x50>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6493      	str	r3, [r2, #72]	; 0x48
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_DMA_Init+0x50>)
 8000900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_DMA_Init+0x50>)
 800090c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800090e:	4a0b      	ldr	r2, [pc, #44]	; (800093c <MX_DMA_Init+0x50>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6493      	str	r3, [r2, #72]	; 0x48
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_DMA_Init+0x50>)
 8000918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	200b      	movs	r0, #11
 8000928:	f002 fb0d 	bl	8002f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800092c:	200b      	movs	r0, #11
 800092e:	f002 fb24 	bl	8002f7a <HAL_NVIC_EnableIRQ>

}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <MX_GPIO_Init+0xd4>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a2e      	ldr	r2, [pc, #184]	; (8000a14 <MX_GPIO_Init+0xd4>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <MX_GPIO_Init+0xd4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800096e:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <MX_GPIO_Init+0xd4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a28      	ldr	r2, [pc, #160]	; (8000a14 <MX_GPIO_Init+0xd4>)
 8000974:	f043 0320 	orr.w	r3, r3, #32
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <MX_GPIO_Init+0xd4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0320 	and.w	r3, r3, #32
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <MX_GPIO_Init+0xd4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a22      	ldr	r2, [pc, #136]	; (8000a14 <MX_GPIO_Init+0xd4>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <MX_GPIO_Init+0xd4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_GPIO_Init+0xd4>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <MX_GPIO_Init+0xd4>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_GPIO_Init+0xd4>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2120      	movs	r1, #32
 80009ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009be:	f003 f95f 	bl	8003c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	480f      	ldr	r0, [pc, #60]	; (8000a18 <MX_GPIO_Init+0xd8>)
 80009da:	f002 ffcf 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009de:	2320      	movs	r3, #32
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f8:	f002 ffc0 	bl	800397c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	2028      	movs	r0, #40	; 0x28
 8000a02:	f002 faa0 	bl	8002f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a06:	2028      	movs	r0, #40	; 0x28
 8000a08:	f002 fab7 	bl	8002f7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	; 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40021000 	.word	0x40021000
 8000a18:	48000800 	.word	0x48000800

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_MspInit+0x44>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_MspInit+0x44>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6613      	str	r3, [r2, #96]	; 0x60
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_MspInit+0x44>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x44>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x44>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6593      	str	r3, [r2, #88]	; 0x58
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x44>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a5e:	f003 f9ef 	bl	8003e40 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0a0      	sub	sp, #128	; 0x80
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a88:	f107 0318 	add.w	r3, r7, #24
 8000a8c:	2254      	movs	r2, #84	; 0x54
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f004 ffcf 	bl	8005a34 <memset>
  if(hadc->Instance==ADC1)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a9e:	d17f      	bne.n	8000ba0 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000aa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aa4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000aa6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aac:	f107 0318 	add.w	r3, r7, #24
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f003 ff03 	bl	80048bc <HAL_RCCEx_PeriphCLKConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000abc:	f7ff ffae 	bl	8000a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ac0:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <HAL_ADC_MspInit+0x138>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac4:	4a38      	ldr	r2, [pc, #224]	; (8000ba8 <HAL_ADC_MspInit+0x138>)
 8000ac6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000acc:	4b36      	ldr	r3, [pc, #216]	; (8000ba8 <HAL_ADC_MspInit+0x138>)
 8000ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b33      	ldr	r3, [pc, #204]	; (8000ba8 <HAL_ADC_MspInit+0x138>)
 8000ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000adc:	4a32      	ldr	r2, [pc, #200]	; (8000ba8 <HAL_ADC_MspInit+0x138>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae4:	4b30      	ldr	r3, [pc, #192]	; (8000ba8 <HAL_ADC_MspInit+0x138>)
 8000ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af0:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <HAL_ADC_MspInit+0x138>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af4:	4a2c      	ldr	r2, [pc, #176]	; (8000ba8 <HAL_ADC_MspInit+0x138>)
 8000af6:	f043 0302 	orr.w	r3, r3, #2
 8000afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afc:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <HAL_ADC_MspInit+0x138>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1e:	f002 ff2d 	bl	800397c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b22:	2301      	movs	r3, #1
 8000b24:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b26:	2303      	movs	r3, #3
 8000b28:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b32:	4619      	mov	r1, r3
 8000b34:	481d      	ldr	r0, [pc, #116]	; (8000bac <HAL_ADC_MspInit+0x13c>)
 8000b36:	f002 ff21 	bl	800397c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <HAL_ADC_MspInit+0x140>)
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000b3e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <HAL_ADC_MspInit+0x140>)
 8000b42:	2205      	movs	r2, #5
 8000b44:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <HAL_ADC_MspInit+0x140>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_ADC_MspInit+0x140>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <HAL_ADC_MspInit+0x140>)
 8000b54:	2280      	movs	r2, #128	; 0x80
 8000b56:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_ADC_MspInit+0x140>)
 8000b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b5e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <HAL_ADC_MspInit+0x140>)
 8000b62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b66:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_ADC_MspInit+0x140>)
 8000b6a:	2220      	movs	r2, #32
 8000b6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <HAL_ADC_MspInit+0x140>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b74:	480e      	ldr	r0, [pc, #56]	; (8000bb0 <HAL_ADC_MspInit+0x140>)
 8000b76:	f002 fc8f 	bl	8003498 <HAL_DMA_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000b80:	f7ff ff4c 	bl	8000a1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <HAL_ADC_MspInit+0x140>)
 8000b88:	655a      	str	r2, [r3, #84]	; 0x54
 8000b8a:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <HAL_ADC_MspInit+0x140>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2012      	movs	r0, #18
 8000b96:	f002 f9d6 	bl	8002f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b9a:	2012      	movs	r0, #18
 8000b9c:	f002 f9ed 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ba0:	bf00      	nop
 8000ba2:	3780      	adds	r7, #128	; 0x80
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	20000094 	.word	0x20000094
 8000bb4:	40020008 	.word	0x40020008

08000bb8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a2b      	ldr	r2, [pc, #172]	; (8000c84 <HAL_DAC_MspInit+0xcc>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d125      	bne.n	8000c26 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000bda:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <HAL_DAC_MspInit+0xd0>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	4a2a      	ldr	r2, [pc, #168]	; (8000c88 <HAL_DAC_MspInit+0xd0>)
 8000be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be6:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <HAL_DAC_MspInit+0xd0>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bee:	61bb      	str	r3, [r7, #24]
 8000bf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <HAL_DAC_MspInit+0xd0>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	4a24      	ldr	r2, [pc, #144]	; (8000c88 <HAL_DAC_MspInit+0xd0>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfe:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <HAL_DAC_MspInit+0xd0>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c0a:	2310      	movs	r3, #16
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c20:	f002 feac 	bl	800397c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8000c24:	e029      	b.n	8000c7a <HAL_DAC_MspInit+0xc2>
  else if(hdac->Instance==DAC2)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a18      	ldr	r2, [pc, #96]	; (8000c8c <HAL_DAC_MspInit+0xd4>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d124      	bne.n	8000c7a <HAL_DAC_MspInit+0xc2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_DAC_MspInit+0xd0>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <HAL_DAC_MspInit+0xd0>)
 8000c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_DAC_MspInit+0xd0>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_DAC_MspInit+0xd0>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <HAL_DAC_MspInit+0xd0>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <HAL_DAC_MspInit+0xd0>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c60:	2340      	movs	r3, #64	; 0x40
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c64:	2303      	movs	r3, #3
 8000c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4619      	mov	r1, r3
 8000c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c76:	f002 fe81 	bl	800397c <HAL_GPIO_Init>
}
 8000c7a:	bf00      	nop
 8000c7c:	3730      	adds	r7, #48	; 0x30
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	50000800 	.word	0x50000800
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	50000c00 	.word	0x50000c00

08000c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b09e      	sub	sp, #120	; 0x78
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	2254      	movs	r2, #84	; 0x54
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f004 febf 	bl	8005a34 <memset>
  if(huart->Instance==LPUART1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <HAL_UART_MspInit+0xa8>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d136      	bne.n	8000d2e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000cc0:	2320      	movs	r3, #32
 8000cc2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 fdf5 	bl	80048bc <HAL_RCCEx_PeriphCLKConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cd8:	f7ff fea0 	bl	8000a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <HAL_UART_MspInit+0xac>)
 8000cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ce0:	4a16      	ldr	r2, [pc, #88]	; (8000d3c <HAL_UART_MspInit+0xac>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <HAL_UART_MspInit+0xac>)
 8000cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_UART_MspInit+0xac>)
 8000cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf8:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_UART_MspInit+0xac>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_UART_MspInit+0xac>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000d0c:	230c      	movs	r3, #12
 8000d0e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d24:	4619      	mov	r1, r3
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2a:	f002 fe27 	bl	800397c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3778      	adds	r7, #120	; 0x78
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40008000 	.word	0x40008000
 8000d3c:	40021000 	.word	0x40021000

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 f8ac 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <DMA1_Channel1_IRQHandler+0x10>)
 8000d9a:	f002 fca0 	bl	80036de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000094 	.word	0x20000094

08000da8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <ADC1_2_IRQHandler+0x10>)
 8000dae:	f000 fdaf 	bl	8001910 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000028 	.word	0x20000028

08000dbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000dc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dc4:	f002 ff74 	bl	8003cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000df2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df4:	f7ff ffea 	bl	8000dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfa:	490d      	ldr	r1, [pc, #52]	; (8000e30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <LoopForever+0xe>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e10:	4c0a      	ldr	r4, [pc, #40]	; (8000e3c <LoopForever+0x16>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f004 fe11 	bl	8005a44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e22:	f7ff fb77 	bl	8000514 <main>

08000e26 <LoopForever>:

LoopForever:
    b LoopForever
 8000e26:	e7fe      	b.n	8000e26 <LoopForever>
  ldr   r0, =_estack
 8000e28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e34:	08005af4 	.word	0x08005af4
  ldr r2, =_sbss
 8000e38:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e3c:	20000204 	.word	0x20000204

08000e40 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC3_IRQHandler>

08000e42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f002 f86f 	bl	8002f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e52:	2000      	movs	r0, #0
 8000e54:	f000 f80e 	bl	8000e74 <HAL_InitTick>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d002      	beq.n	8000e64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	71fb      	strb	r3, [r7, #7]
 8000e62:	e001      	b.n	8000e68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e64:	f7ff fde0 	bl	8000a28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e68:	79fb      	ldrb	r3, [r7, #7]

}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <HAL_InitTick+0x68>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d022      	beq.n	8000ece <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_InitTick+0x6c>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <HAL_InitTick+0x68>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e94:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f002 f87a 	bl	8002f96 <HAL_SYSTICK_Config>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10f      	bne.n	8000ec8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b0f      	cmp	r3, #15
 8000eac:	d809      	bhi.n	8000ec2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb6:	f002 f846 	bl	8002f46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_InitTick+0x70>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	e007      	b.n	8000ed2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e004      	b.n	8000ed2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	e001      	b.n	8000ed2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <HAL_IncTick+0x1c>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_IncTick+0x20>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4a03      	ldr	r2, [pc, #12]	; (8000f04 <HAL_IncTick+0x1c>)
 8000ef8:	6013      	str	r3, [r2, #0]
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	20000200 	.word	0x20000200
 8000f08:	20000008 	.word	0x20000008

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000200 	.word	0x20000200

08000f24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	609a      	str	r2, [r3, #8]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3360      	adds	r3, #96	; 0x60
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <LL_ADC_SetOffset+0x44>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fc4:	bf00      	nop
 8000fc6:	371c      	adds	r7, #28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	03fff000 	.word	0x03fff000

08000fd4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3360      	adds	r3, #96	; 0x60
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3360      	adds	r3, #96	; 0x60
 8001010:	461a      	mov	r2, r3
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	431a      	orrs	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800102a:	bf00      	nop
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001036:	b480      	push	{r7}
 8001038:	b087      	sub	sp, #28
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3360      	adds	r3, #96	; 0x60
 8001046:	461a      	mov	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	431a      	orrs	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001060:	bf00      	nop
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3360      	adds	r3, #96	; 0x60
 800107c:	461a      	mov	r2, r3
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	431a      	orrs	r2, r3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001096:	bf00      	nop
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	615a      	str	r2, [r3, #20]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b087      	sub	sp, #28
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	60f8      	str	r0, [r7, #12]
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3330      	adds	r3, #48	; 0x30
 80010fe:	461a      	mov	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	0a1b      	lsrs	r3, r3, #8
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	4413      	add	r3, r2
 800110c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	f003 031f 	and.w	r3, r3, #31
 8001118:	211f      	movs	r1, #31
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	401a      	ands	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	0e9b      	lsrs	r3, r3, #26
 8001126:	f003 011f 	and.w	r1, r3, #31
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	f003 031f 	and.w	r3, r3, #31
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	431a      	orrs	r2, r3
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800113a:	bf00      	nop
 800113c:	371c      	adds	r7, #28
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3314      	adds	r3, #20
 800117c:	461a      	mov	r2, r3
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	0e5b      	lsrs	r3, r3, #25
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	4413      	add	r3, r2
 800118a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	0d1b      	lsrs	r3, r3, #20
 8001194:	f003 031f 	and.w	r3, r3, #31
 8001198:	2107      	movs	r1, #7
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	401a      	ands	r2, r3
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	0d1b      	lsrs	r3, r3, #20
 80011a6:	f003 031f 	and.w	r3, r3, #31
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	fa01 f303 	lsl.w	r3, r1, r3
 80011b0:	431a      	orrs	r2, r3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011b6:	bf00      	nop
 80011b8:	371c      	adds	r7, #28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011dc:	43db      	mvns	r3, r3
 80011de:	401a      	ands	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 0318 	and.w	r3, r3, #24
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011e8:	40d9      	lsrs	r1, r3
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	400b      	ands	r3, r1
 80011ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011f2:	431a      	orrs	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	0007ffff 	.word	0x0007ffff

0800120c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 031f 	and.w	r3, r3, #31
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001254:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	6093      	str	r3, [r2, #8]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800127c:	d101      	bne.n	8001282 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012cc:	d101      	bne.n	80012d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012f4:	f043 0201 	orr.w	r2, r3, #1
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001318:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800131c:	f043 0202 	orr.w	r2, r3, #2
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b01      	cmp	r3, #1
 8001342:	d101      	bne.n	8001348 <LL_ADC_IsEnabled+0x18>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <LL_ADC_IsEnabled+0x1a>
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b02      	cmp	r3, #2
 8001368:	d101      	bne.n	800136e <LL_ADC_IsDisableOngoing+0x18>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <LL_ADC_IsDisableOngoing+0x1a>
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800138c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001390:	f043 0204 	orr.w	r2, r3, #4
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d101      	bne.n	80013bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d101      	bne.n	80013e2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e1a9      	b.n	800175e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001414:	2b00      	cmp	r3, #0
 8001416:	d109      	bne.n	800142c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff fb29 	bl	8000a70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff19 	bl	8001268 <LL_ADC_IsDeepPowerDownEnabled>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d004      	beq.n	8001446 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff feff 	bl	8001244 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff34 	bl	80012b8 <LL_ADC_IsInternalRegulatorEnabled>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d115      	bne.n	8001482 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff18 	bl	8001290 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001460:	4b9c      	ldr	r3, [pc, #624]	; (80016d4 <HAL_ADC_Init+0x2e4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	099b      	lsrs	r3, r3, #6
 8001466:	4a9c      	ldr	r2, [pc, #624]	; (80016d8 <HAL_ADC_Init+0x2e8>)
 8001468:	fba2 2303 	umull	r2, r3, r2, r3
 800146c:	099b      	lsrs	r3, r3, #6
 800146e:	3301      	adds	r3, #1
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001474:	e002      	b.n	800147c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	3b01      	subs	r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f9      	bne.n	8001476 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff16 	bl	80012b8 <LL_ADC_IsInternalRegulatorEnabled>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10d      	bne.n	80014ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001496:	f043 0210 	orr.w	r2, r3, #16
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a2:	f043 0201 	orr.w	r2, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff76 	bl	80013a4 <LL_ADC_REG_IsConversionOngoing>
 80014b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 8142 	bne.w	800174c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f040 813e 	bne.w	800174c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014d8:	f043 0202 	orr.w	r2, r3, #2
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff23 	bl	8001330 <LL_ADC_IsEnabled>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d141      	bne.n	8001574 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014f8:	d004      	beq.n	8001504 <HAL_ADC_Init+0x114>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a77      	ldr	r2, [pc, #476]	; (80016dc <HAL_ADC_Init+0x2ec>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d10f      	bne.n	8001524 <HAL_ADC_Init+0x134>
 8001504:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001508:	f7ff ff12 	bl	8001330 <LL_ADC_IsEnabled>
 800150c:	4604      	mov	r4, r0
 800150e:	4873      	ldr	r0, [pc, #460]	; (80016dc <HAL_ADC_Init+0x2ec>)
 8001510:	f7ff ff0e 	bl	8001330 <LL_ADC_IsEnabled>
 8001514:	4603      	mov	r3, r0
 8001516:	4323      	orrs	r3, r4
 8001518:	2b00      	cmp	r3, #0
 800151a:	bf0c      	ite	eq
 800151c:	2301      	moveq	r3, #1
 800151e:	2300      	movne	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	e012      	b.n	800154a <HAL_ADC_Init+0x15a>
 8001524:	486e      	ldr	r0, [pc, #440]	; (80016e0 <HAL_ADC_Init+0x2f0>)
 8001526:	f7ff ff03 	bl	8001330 <LL_ADC_IsEnabled>
 800152a:	4604      	mov	r4, r0
 800152c:	486d      	ldr	r0, [pc, #436]	; (80016e4 <HAL_ADC_Init+0x2f4>)
 800152e:	f7ff feff 	bl	8001330 <LL_ADC_IsEnabled>
 8001532:	4603      	mov	r3, r0
 8001534:	431c      	orrs	r4, r3
 8001536:	486c      	ldr	r0, [pc, #432]	; (80016e8 <HAL_ADC_Init+0x2f8>)
 8001538:	f7ff fefa 	bl	8001330 <LL_ADC_IsEnabled>
 800153c:	4603      	mov	r3, r0
 800153e:	4323      	orrs	r3, r4
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf0c      	ite	eq
 8001544:	2301      	moveq	r3, #1
 8001546:	2300      	movne	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d012      	beq.n	8001574 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001556:	d004      	beq.n	8001562 <HAL_ADC_Init+0x172>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a5f      	ldr	r2, [pc, #380]	; (80016dc <HAL_ADC_Init+0x2ec>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d101      	bne.n	8001566 <HAL_ADC_Init+0x176>
 8001562:	4a62      	ldr	r2, [pc, #392]	; (80016ec <HAL_ADC_Init+0x2fc>)
 8001564:	e000      	b.n	8001568 <HAL_ADC_Init+0x178>
 8001566:	4a62      	ldr	r2, [pc, #392]	; (80016f0 <HAL_ADC_Init+0x300>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4619      	mov	r1, r3
 800156e:	4610      	mov	r0, r2
 8001570:	f7ff fcd8 	bl	8000f24 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7f5b      	ldrb	r3, [r3, #29]
 8001578:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800157e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001584:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800158a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001592:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d106      	bne.n	80015b0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	3b01      	subs	r3, #1
 80015a8:	045b      	lsls	r3, r3, #17
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d009      	beq.n	80015cc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	4b48      	ldr	r3, [pc, #288]	; (80016f4 <HAL_ADC_Init+0x304>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	69b9      	ldr	r1, [r7, #24]
 80015dc:	430b      	orrs	r3, r1
 80015de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fee5 	bl	80013ca <LL_ADC_INJ_IsConversionOngoing>
 8001600:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d17f      	bne.n	8001708 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d17c      	bne.n	8001708 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001612:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800161a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800162a:	f023 0302 	bic.w	r3, r3, #2
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	69b9      	ldr	r1, [r7, #24]
 8001634:	430b      	orrs	r3, r1
 8001636:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d017      	beq.n	8001670 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800164e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001658:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800165c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6911      	ldr	r1, [r2, #16]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	430b      	orrs	r3, r1
 800166a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800166e:	e013      	b.n	8001698 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691a      	ldr	r2, [r3, #16]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800167e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001690:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001694:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d12a      	bne.n	80016f8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016ac:	f023 0304 	bic.w	r3, r3, #4
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016b8:	4311      	orrs	r1, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80016be:	4311      	orrs	r1, r2
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016c4:	430a      	orrs	r2, r1
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0201 	orr.w	r2, r2, #1
 80016d0:	611a      	str	r2, [r3, #16]
 80016d2:	e019      	b.n	8001708 <HAL_ADC_Init+0x318>
 80016d4:	20000000 	.word	0x20000000
 80016d8:	053e2d63 	.word	0x053e2d63
 80016dc:	50000100 	.word	0x50000100
 80016e0:	50000400 	.word	0x50000400
 80016e4:	50000500 	.word	0x50000500
 80016e8:	50000600 	.word	0x50000600
 80016ec:	50000300 	.word	0x50000300
 80016f0:	50000700 	.word	0x50000700
 80016f4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	691a      	ldr	r2, [r3, #16]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0201 	bic.w	r2, r2, #1
 8001706:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d10c      	bne.n	800172a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f023 010f 	bic.w	r1, r3, #15
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	1e5a      	subs	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	631a      	str	r2, [r3, #48]	; 0x30
 8001728:	e007      	b.n	800173a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 020f 	bic.w	r2, r2, #15
 8001738:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173e:	f023 0303 	bic.w	r3, r3, #3
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	65da      	str	r2, [r3, #92]	; 0x5c
 800174a:	e007      	b.n	800175c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001750:	f043 0210 	orr.w	r2, r3, #16
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800175c:	7ffb      	ldrb	r3, [r7, #31]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3724      	adds	r7, #36	; 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd90      	pop	{r4, r7, pc}
 8001766:	bf00      	nop

08001768 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800177c:	d004      	beq.n	8001788 <HAL_ADC_Start_DMA+0x20>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a5a      	ldr	r2, [pc, #360]	; (80018ec <HAL_ADC_Start_DMA+0x184>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d101      	bne.n	800178c <HAL_ADC_Start_DMA+0x24>
 8001788:	4b59      	ldr	r3, [pc, #356]	; (80018f0 <HAL_ADC_Start_DMA+0x188>)
 800178a:	e000      	b.n	800178e <HAL_ADC_Start_DMA+0x26>
 800178c:	4b59      	ldr	r3, [pc, #356]	; (80018f4 <HAL_ADC_Start_DMA+0x18c>)
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fd3c 	bl	800120c <LL_ADC_GetMultimode>
 8001794:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fe02 	bl	80013a4 <LL_ADC_REG_IsConversionOngoing>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f040 809b 	bne.w	80018de <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_ADC_Start_DMA+0x4e>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e096      	b.n	80018e4 <HAL_ADC_Start_DMA+0x17c>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a4d      	ldr	r2, [pc, #308]	; (80018f8 <HAL_ADC_Start_DMA+0x190>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d008      	beq.n	80017da <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d005      	beq.n	80017da <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	d002      	beq.n	80017da <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	2b09      	cmp	r3, #9
 80017d8:	d17a      	bne.n	80018d0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 ff60 	bl	80026a0 <ADC_Enable>
 80017e0:	4603      	mov	r3, r0
 80017e2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d16d      	bne.n	80018c6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a3a      	ldr	r2, [pc, #232]	; (80018ec <HAL_ADC_Start_DMA+0x184>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d009      	beq.n	800181c <HAL_ADC_Start_DMA+0xb4>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a3b      	ldr	r2, [pc, #236]	; (80018fc <HAL_ADC_Start_DMA+0x194>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d002      	beq.n	8001818 <HAL_ADC_Start_DMA+0xb0>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	e003      	b.n	8001820 <HAL_ADC_Start_DMA+0xb8>
 8001818:	4b39      	ldr	r3, [pc, #228]	; (8001900 <HAL_ADC_Start_DMA+0x198>)
 800181a:	e001      	b.n	8001820 <HAL_ADC_Start_DMA+0xb8>
 800181c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	4293      	cmp	r3, r2
 8001826:	d002      	beq.n	800182e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d105      	bne.n	800183a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001832:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d006      	beq.n	8001854 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184a:	f023 0206 	bic.w	r2, r3, #6
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	661a      	str	r2, [r3, #96]	; 0x60
 8001852:	e002      	b.n	800185a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185e:	4a29      	ldr	r2, [pc, #164]	; (8001904 <HAL_ADC_Start_DMA+0x19c>)
 8001860:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001866:	4a28      	ldr	r2, [pc, #160]	; (8001908 <HAL_ADC_Start_DMA+0x1a0>)
 8001868:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186e:	4a27      	ldr	r2, [pc, #156]	; (800190c <HAL_ADC_Start_DMA+0x1a4>)
 8001870:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	221c      	movs	r2, #28
 8001878:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 0210 	orr.w	r2, r2, #16
 8001890:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f042 0201 	orr.w	r2, r2, #1
 80018a0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	3340      	adds	r3, #64	; 0x40
 80018ac:	4619      	mov	r1, r3
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f001 fe99 	bl	80035e8 <HAL_DMA_Start_IT>
 80018b6:	4603      	mov	r3, r0
 80018b8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fd5c 	bl	800137c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80018c4:	e00d      	b.n	80018e2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80018ce:	e008      	b.n	80018e2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80018dc:	e001      	b.n	80018e2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018de:	2302      	movs	r3, #2
 80018e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	50000100 	.word	0x50000100
 80018f0:	50000300 	.word	0x50000300
 80018f4:	50000700 	.word	0x50000700
 80018f8:	50000600 	.word	0x50000600
 80018fc:	50000500 	.word	0x50000500
 8001900:	50000400 	.word	0x50000400
 8001904:	0800288b 	.word	0x0800288b
 8001908:	08002963 	.word	0x08002963
 800190c:	0800297f 	.word	0x0800297f

08001910 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001934:	d004      	beq.n	8001940 <HAL_ADC_IRQHandler+0x30>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a8e      	ldr	r2, [pc, #568]	; (8001b74 <HAL_ADC_IRQHandler+0x264>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_ADC_IRQHandler+0x34>
 8001940:	4b8d      	ldr	r3, [pc, #564]	; (8001b78 <HAL_ADC_IRQHandler+0x268>)
 8001942:	e000      	b.n	8001946 <HAL_ADC_IRQHandler+0x36>
 8001944:	4b8d      	ldr	r3, [pc, #564]	; (8001b7c <HAL_ADC_IRQHandler+0x26c>)
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fc60 	bl	800120c <LL_ADC_GetMultimode>
 800194c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d017      	beq.n	8001988 <HAL_ADC_IRQHandler+0x78>
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d012      	beq.n	8001988 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	2b00      	cmp	r3, #0
 800196c:	d105      	bne.n	800197a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001972:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f001 f8f6 	bl	8002b6c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2202      	movs	r2, #2
 8001986:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <HAL_ADC_IRQHandler+0x8c>
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10b      	bne.n	80019b4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8094 	beq.w	8001ad0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 808e 	beq.w	8001ad0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d105      	bne.n	80019cc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fb79 	bl	80010c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d072      	beq.n	8001ac2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a64      	ldr	r2, [pc, #400]	; (8001b74 <HAL_ADC_IRQHandler+0x264>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d009      	beq.n	80019fa <HAL_ADC_IRQHandler+0xea>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a65      	ldr	r2, [pc, #404]	; (8001b80 <HAL_ADC_IRQHandler+0x270>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d002      	beq.n	80019f6 <HAL_ADC_IRQHandler+0xe6>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	e003      	b.n	80019fe <HAL_ADC_IRQHandler+0xee>
 80019f6:	4b63      	ldr	r3, [pc, #396]	; (8001b84 <HAL_ADC_IRQHandler+0x274>)
 80019f8:	e001      	b.n	80019fe <HAL_ADC_IRQHandler+0xee>
 80019fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d008      	beq.n	8001a18 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2b05      	cmp	r3, #5
 8001a10:	d002      	beq.n	8001a18 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2b09      	cmp	r3, #9
 8001a16:	d104      	bne.n	8001a22 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	623b      	str	r3, [r7, #32]
 8001a20:	e014      	b.n	8001a4c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a53      	ldr	r2, [pc, #332]	; (8001b74 <HAL_ADC_IRQHandler+0x264>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d009      	beq.n	8001a40 <HAL_ADC_IRQHandler+0x130>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a53      	ldr	r2, [pc, #332]	; (8001b80 <HAL_ADC_IRQHandler+0x270>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d002      	beq.n	8001a3c <HAL_ADC_IRQHandler+0x12c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	e003      	b.n	8001a44 <HAL_ADC_IRQHandler+0x134>
 8001a3c:	4b51      	ldr	r3, [pc, #324]	; (8001b84 <HAL_ADC_IRQHandler+0x274>)
 8001a3e:	e001      	b.n	8001a44 <HAL_ADC_IRQHandler+0x134>
 8001a40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a44:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d135      	bne.n	8001ac2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d12e      	bne.n	8001ac2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fc9b 	bl	80013a4 <LL_ADC_REG_IsConversionOngoing>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d11a      	bne.n	8001aaa <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 020c 	bic.w	r2, r2, #12
 8001a82:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d112      	bne.n	8001ac2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa0:	f043 0201 	orr.w	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aa8:	e00b      	b.n	8001ac2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aae:	f043 0210 	orr.w	r2, r3, #16
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aba:	f043 0201 	orr.w	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f984 	bl	8001dd0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	220c      	movs	r2, #12
 8001ace:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0320 	and.w	r3, r3, #32
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <HAL_ADC_IRQHandler+0x1d4>
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	f003 0320 	and.w	r3, r3, #32
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10b      	bne.n	8001afc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 80b3 	beq.w	8001c56 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 80ad 	beq.w	8001c56 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d105      	bne.n	8001b14 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fb14 	bl	8001146 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001b1e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff facf 	bl	80010c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b2a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <HAL_ADC_IRQHandler+0x264>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d009      	beq.n	8001b4a <HAL_ADC_IRQHandler+0x23a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a11      	ldr	r2, [pc, #68]	; (8001b80 <HAL_ADC_IRQHandler+0x270>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d002      	beq.n	8001b46 <HAL_ADC_IRQHandler+0x236>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	e003      	b.n	8001b4e <HAL_ADC_IRQHandler+0x23e>
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_ADC_IRQHandler+0x274>)
 8001b48:	e001      	b.n	8001b4e <HAL_ADC_IRQHandler+0x23e>
 8001b4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d008      	beq.n	8001b68 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d002      	beq.n	8001b68 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b07      	cmp	r3, #7
 8001b66:	d10f      	bne.n	8001b88 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	623b      	str	r3, [r7, #32]
 8001b70:	e01f      	b.n	8001bb2 <HAL_ADC_IRQHandler+0x2a2>
 8001b72:	bf00      	nop
 8001b74:	50000100 	.word	0x50000100
 8001b78:	50000300 	.word	0x50000300
 8001b7c:	50000700 	.word	0x50000700
 8001b80:	50000500 	.word	0x50000500
 8001b84:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a8b      	ldr	r2, [pc, #556]	; (8001dbc <HAL_ADC_IRQHandler+0x4ac>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d009      	beq.n	8001ba6 <HAL_ADC_IRQHandler+0x296>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a8a      	ldr	r2, [pc, #552]	; (8001dc0 <HAL_ADC_IRQHandler+0x4b0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d002      	beq.n	8001ba2 <HAL_ADC_IRQHandler+0x292>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	e003      	b.n	8001baa <HAL_ADC_IRQHandler+0x29a>
 8001ba2:	4b88      	ldr	r3, [pc, #544]	; (8001dc4 <HAL_ADC_IRQHandler+0x4b4>)
 8001ba4:	e001      	b.n	8001baa <HAL_ADC_IRQHandler+0x29a>
 8001ba6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001baa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d047      	beq.n	8001c48 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_ADC_IRQHandler+0x2c2>
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d03f      	beq.n	8001c48 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d13a      	bne.n	8001c48 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bdc:	2b40      	cmp	r3, #64	; 0x40
 8001bde:	d133      	bne.n	8001c48 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d12e      	bne.n	8001c48 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fbeb 	bl	80013ca <LL_ADC_INJ_IsConversionOngoing>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d11a      	bne.n	8001c30 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c08:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d112      	bne.n	8001c48 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c26:	f043 0201 	orr.w	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c2e:	e00b      	b.n	8001c48 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c34:	f043 0210 	orr.w	r2, r3, #16
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c40:	f043 0201 	orr.w	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 ff67 	bl	8002b1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2260      	movs	r2, #96	; 0x60
 8001c54:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d011      	beq.n	8001c84 <HAL_ADC_IRQHandler+0x374>
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00c      	beq.n	8001c84 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8be 	bl	8001df8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2280      	movs	r2, #128	; 0x80
 8001c82:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d012      	beq.n	8001cb4 <HAL_ADC_IRQHandler+0x3a4>
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00d      	beq.n	8001cb4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 ff4d 	bl	8002b44 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d012      	beq.n	8001ce4 <HAL_ADC_IRQHandler+0x3d4>
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00d      	beq.n	8001ce4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ccc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 ff3f 	bl	8002b58 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d043      	beq.n	8001d76 <HAL_ADC_IRQHandler+0x466>
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d03e      	beq.n	8001d76 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8001d00:	2301      	movs	r3, #1
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
 8001d04:	e021      	b.n	8001d4a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d015      	beq.n	8001d38 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d14:	d004      	beq.n	8001d20 <HAL_ADC_IRQHandler+0x410>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a28      	ldr	r2, [pc, #160]	; (8001dbc <HAL_ADC_IRQHandler+0x4ac>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d101      	bne.n	8001d24 <HAL_ADC_IRQHandler+0x414>
 8001d20:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <HAL_ADC_IRQHandler+0x4b8>)
 8001d22:	e000      	b.n	8001d26 <HAL_ADC_IRQHandler+0x416>
 8001d24:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <HAL_ADC_IRQHandler+0x4bc>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fa7e 	bl	8001228 <LL_ADC_GetMultiDMATransfer>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00b      	beq.n	8001d4a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001d32:	2301      	movs	r3, #1
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
 8001d36:	e008      	b.n	8001d4a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001d46:	2301      	movs	r3, #1
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d10e      	bne.n	8001d6e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d60:	f043 0202 	orr.w	r2, r3, #2
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f84f 	bl	8001e0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2210      	movs	r2, #16
 8001d74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d018      	beq.n	8001db2 <HAL_ADC_IRQHandler+0x4a2>
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d013      	beq.n	8001db2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9a:	f043 0208 	orr.w	r2, r3, #8
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001daa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 febf 	bl	8002b30 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001db2:	bf00      	nop
 8001db4:	3728      	adds	r7, #40	; 0x28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	50000100 	.word	0x50000100
 8001dc0:	50000500 	.word	0x50000500
 8001dc4:	50000400 	.word	0x50000400
 8001dc8:	50000300 	.word	0x50000300
 8001dcc:	50000700 	.word	0x50000700

08001dd0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b0b6      	sub	sp, #216	; 0xd8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d102      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x24>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	f000 bc13 	b.w	800266a <HAL_ADC_ConfigChannel+0x84a>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff faa7 	bl	80013a4 <LL_ADC_REG_IsConversionOngoing>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f040 83f3 	bne.w	8002644 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6859      	ldr	r1, [r3, #4]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f7ff f93f 	bl	80010ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fa95 	bl	80013a4 <LL_ADC_REG_IsConversionOngoing>
 8001e7a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff faa1 	bl	80013ca <LL_ADC_INJ_IsConversionOngoing>
 8001e88:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f040 81d9 	bne.w	8002248 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 81d4 	bne.w	8002248 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ea8:	d10f      	bne.n	8001eca <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f7ff f959 	bl	800116c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f8ed 	bl	80010a2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ec8:	e00e      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6819      	ldr	r1, [r3, #0]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f7ff f948 	bl	800116c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff f8dd 	bl	80010a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	08db      	lsrs	r3, r3, #3
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d022      	beq.n	8001f50 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6919      	ldr	r1, [r3, #16]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f1a:	f7ff f837 	bl	8000f8c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6919      	ldr	r1, [r3, #16]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f7ff f883 	bl	8001036 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d102      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x126>
 8001f40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f44:	e000      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x128>
 8001f46:	2300      	movs	r3, #0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f7ff f88f 	bl	800106c <LL_ADC_SetOffsetSaturation>
 8001f4e:	e17b      	b.n	8002248 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff f83c 	bl	8000fd4 <LL_ADC_GetOffsetChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10a      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x15c>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff f831 	bl	8000fd4 <LL_ADC_GetOffsetChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	0e9b      	lsrs	r3, r3, #26
 8001f76:	f003 021f 	and.w	r2, r3, #31
 8001f7a:	e01e      	b.n	8001fba <HAL_ADC_ConfigChannel+0x19a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff f826 	bl	8000fd4 <LL_ADC_GetOffsetChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001faa:	2320      	movs	r3, #32
 8001fac:	e004      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001fae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d105      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x1b2>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	0e9b      	lsrs	r3, r3, #26
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	e018      	b.n	8002004 <HAL_ADC_ConfigChannel+0x1e4>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001fee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	e004      	b.n	8002004 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001ffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002004:	429a      	cmp	r2, r3
 8002006:	d106      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fff5 	bl	8001000 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2101      	movs	r1, #1
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe ffd9 	bl	8000fd4 <LL_ADC_GetOffsetChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x222>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe ffce 	bl	8000fd4 <LL_ADC_GetOffsetChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	0e9b      	lsrs	r3, r3, #26
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	e01e      	b.n	8002080 <HAL_ADC_ConfigChannel+0x260>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2101      	movs	r1, #1
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe ffc3 	bl	8000fd4 <LL_ADC_GetOffsetChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002060:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002070:	2320      	movs	r3, #32
 8002072:	e004      	b.n	800207e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002074:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x278>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	0e9b      	lsrs	r3, r3, #26
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	e018      	b.n	80020ca <HAL_ADC_ConfigChannel+0x2aa>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80020ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80020b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80020bc:	2320      	movs	r3, #32
 80020be:	e004      	b.n	80020ca <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80020c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d106      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2200      	movs	r2, #0
 80020d4:	2101      	movs	r1, #1
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe ff92 	bl	8001000 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2102      	movs	r1, #2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe ff76 	bl	8000fd4 <LL_ADC_GetOffsetChannel>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10a      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x2e8>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2102      	movs	r1, #2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe ff6b 	bl	8000fd4 <LL_ADC_GetOffsetChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	f003 021f 	and.w	r2, r3, #31
 8002106:	e01e      	b.n	8002146 <HAL_ADC_ConfigChannel+0x326>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2102      	movs	r1, #2
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe ff60 	bl	8000fd4 <LL_ADC_GetOffsetChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002126:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800212a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800212e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002136:	2320      	movs	r3, #32
 8002138:	e004      	b.n	8002144 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800213a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214e:	2b00      	cmp	r3, #0
 8002150:	d105      	bne.n	800215e <HAL_ADC_ConfigChannel+0x33e>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	0e9b      	lsrs	r3, r3, #26
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	e016      	b.n	800218c <HAL_ADC_ConfigChannel+0x36c>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002170:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002172:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002176:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800217e:	2320      	movs	r3, #32
 8002180:	e004      	b.n	800218c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002182:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800218c:	429a      	cmp	r2, r3
 800218e:	d106      	bne.n	800219e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2200      	movs	r2, #0
 8002196:	2102      	movs	r1, #2
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe ff31 	bl	8001000 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2103      	movs	r1, #3
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe ff15 	bl	8000fd4 <LL_ADC_GetOffsetChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10a      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x3aa>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2103      	movs	r1, #3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe ff0a 	bl	8000fd4 <LL_ADC_GetOffsetChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	0e9b      	lsrs	r3, r3, #26
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	e017      	b.n	80021fa <HAL_ADC_ConfigChannel+0x3da>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2103      	movs	r1, #3
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe feff 	bl	8000fd4 <LL_ADC_GetOffsetChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80021e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021e4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80021e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80021ec:	2320      	movs	r3, #32
 80021ee:	e003      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80021f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002202:	2b00      	cmp	r3, #0
 8002204:	d105      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x3f2>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	0e9b      	lsrs	r3, r3, #26
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	e011      	b.n	8002236 <HAL_ADC_ConfigChannel+0x416>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002222:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800222a:	2320      	movs	r3, #32
 800222c:	e003      	b.n	8002236 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800222e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002236:	429a      	cmp	r2, r3
 8002238:	d106      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	2103      	movs	r1, #3
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fedc 	bl	8001000 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff f86f 	bl	8001330 <LL_ADC_IsEnabled>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	f040 813d 	bne.w	80024d4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6819      	ldr	r1, [r3, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	461a      	mov	r2, r3
 8002268:	f7fe ffac 	bl	80011c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4aa2      	ldr	r2, [pc, #648]	; (80024fc <HAL_ADC_ConfigChannel+0x6dc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	f040 812e 	bne.w	80024d4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10b      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x480>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0e9b      	lsrs	r3, r3, #26
 800228e:	3301      	adds	r3, #1
 8002290:	f003 031f 	and.w	r3, r3, #31
 8002294:	2b09      	cmp	r3, #9
 8002296:	bf94      	ite	ls
 8002298:	2301      	movls	r3, #1
 800229a:	2300      	movhi	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e019      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x4b4>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80022ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022b0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80022b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80022b8:	2320      	movs	r3, #32
 80022ba:	e003      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80022bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	2b09      	cmp	r3, #9
 80022cc:	bf94      	ite	ls
 80022ce:	2301      	movls	r3, #1
 80022d0:	2300      	movhi	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d079      	beq.n	80023cc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d107      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x4d4>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	3301      	adds	r3, #1
 80022ec:	069b      	lsls	r3, r3, #26
 80022ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022f2:	e015      	b.n	8002320 <HAL_ADC_ConfigChannel+0x500>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002304:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800230c:	2320      	movs	r3, #32
 800230e:	e003      	b.n	8002318 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	3301      	adds	r3, #1
 800231a:	069b      	lsls	r3, r3, #26
 800231c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x520>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0e9b      	lsrs	r3, r3, #26
 8002332:	3301      	adds	r3, #1
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	2101      	movs	r1, #1
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	e017      	b.n	8002370 <HAL_ADC_ConfigChannel+0x550>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800234e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002350:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002358:	2320      	movs	r3, #32
 800235a:	e003      	b.n	8002364 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800235c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	2101      	movs	r1, #1
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	ea42 0103 	orr.w	r1, r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x576>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0e9b      	lsrs	r3, r3, #26
 8002386:	3301      	adds	r3, #1
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	051b      	lsls	r3, r3, #20
 8002394:	e018      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x5a8>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80023a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80023ae:	2320      	movs	r3, #32
 80023b0:	e003      	b.n	80023ba <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80023b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	3301      	adds	r3, #1
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	4613      	mov	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c8:	430b      	orrs	r3, r1
 80023ca:	e07e      	b.n	80024ca <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d107      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x5c8>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	3301      	adds	r3, #1
 80023e0:	069b      	lsls	r3, r3, #26
 80023e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023e6:	e015      	b.n	8002414 <HAL_ADC_ConfigChannel+0x5f4>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80023fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002400:	2320      	movs	r3, #32
 8002402:	e003      	b.n	800240c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	3301      	adds	r3, #1
 800240e:	069b      	lsls	r3, r3, #26
 8002410:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x614>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0e9b      	lsrs	r3, r3, #26
 8002426:	3301      	adds	r3, #1
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	2101      	movs	r1, #1
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	e017      	b.n	8002464 <HAL_ADC_ConfigChannel+0x644>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	61fb      	str	r3, [r7, #28]
  return result;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800244c:	2320      	movs	r3, #32
 800244e:	e003      	b.n	8002458 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	3301      	adds	r3, #1
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	2101      	movs	r1, #1
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	ea42 0103 	orr.w	r1, r2, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10d      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x670>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	3301      	adds	r3, #1
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	3b1e      	subs	r3, #30
 8002488:	051b      	lsls	r3, r3, #20
 800248a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800248e:	e01b      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x6a8>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	613b      	str	r3, [r7, #16]
  return result;
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e003      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	f003 021f 	and.w	r2, r3, #31
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	3b1e      	subs	r3, #30
 80024c2:	051b      	lsls	r3, r3, #20
 80024c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7fe fe4c 	bl	800116c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <HAL_ADC_ConfigChannel+0x6e0>)
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80be 	beq.w	800265e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ea:	d004      	beq.n	80024f6 <HAL_ADC_ConfigChannel+0x6d6>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <HAL_ADC_ConfigChannel+0x6e4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10a      	bne.n	800250c <HAL_ADC_ConfigChannel+0x6ec>
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <HAL_ADC_ConfigChannel+0x6e8>)
 80024f8:	e009      	b.n	800250e <HAL_ADC_ConfigChannel+0x6ee>
 80024fa:	bf00      	nop
 80024fc:	407f0000 	.word	0x407f0000
 8002500:	80080000 	.word	0x80080000
 8002504:	50000100 	.word	0x50000100
 8002508:	50000300 	.word	0x50000300
 800250c:	4b59      	ldr	r3, [pc, #356]	; (8002674 <HAL_ADC_ConfigChannel+0x854>)
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe fd2e 	bl	8000f70 <LL_ADC_GetCommonPathInternalCh>
 8002514:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a56      	ldr	r2, [pc, #344]	; (8002678 <HAL_ADC_ConfigChannel+0x858>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d004      	beq.n	800252c <HAL_ADC_ConfigChannel+0x70c>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a55      	ldr	r2, [pc, #340]	; (800267c <HAL_ADC_ConfigChannel+0x85c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d13a      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800252c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d134      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002540:	d005      	beq.n	800254e <HAL_ADC_ConfigChannel+0x72e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a4e      	ldr	r2, [pc, #312]	; (8002680 <HAL_ADC_ConfigChannel+0x860>)
 8002548:	4293      	cmp	r3, r2
 800254a:	f040 8085 	bne.w	8002658 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002556:	d004      	beq.n	8002562 <HAL_ADC_ConfigChannel+0x742>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a49      	ldr	r2, [pc, #292]	; (8002684 <HAL_ADC_ConfigChannel+0x864>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d101      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x746>
 8002562:	4a49      	ldr	r2, [pc, #292]	; (8002688 <HAL_ADC_ConfigChannel+0x868>)
 8002564:	e000      	b.n	8002568 <HAL_ADC_ConfigChannel+0x748>
 8002566:	4a43      	ldr	r2, [pc, #268]	; (8002674 <HAL_ADC_ConfigChannel+0x854>)
 8002568:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800256c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002570:	4619      	mov	r1, r3
 8002572:	4610      	mov	r0, r2
 8002574:	f7fe fce9 	bl	8000f4a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002578:	4b44      	ldr	r3, [pc, #272]	; (800268c <HAL_ADC_ConfigChannel+0x86c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	4a44      	ldr	r2, [pc, #272]	; (8002690 <HAL_ADC_ConfigChannel+0x870>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002592:	e002      	b.n	800259a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	3b01      	subs	r3, #1
 8002598:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f9      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025a0:	e05a      	b.n	8002658 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a3b      	ldr	r2, [pc, #236]	; (8002694 <HAL_ADC_ConfigChannel+0x874>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d125      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d11f      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a31      	ldr	r2, [pc, #196]	; (8002684 <HAL_ADC_ConfigChannel+0x864>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d104      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x7ac>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a34      	ldr	r2, [pc, #208]	; (8002698 <HAL_ADC_ConfigChannel+0x878>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d047      	beq.n	800265c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025d4:	d004      	beq.n	80025e0 <HAL_ADC_ConfigChannel+0x7c0>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a2a      	ldr	r2, [pc, #168]	; (8002684 <HAL_ADC_ConfigChannel+0x864>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d101      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x7c4>
 80025e0:	4a29      	ldr	r2, [pc, #164]	; (8002688 <HAL_ADC_ConfigChannel+0x868>)
 80025e2:	e000      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x7c6>
 80025e4:	4a23      	ldr	r2, [pc, #140]	; (8002674 <HAL_ADC_ConfigChannel+0x854>)
 80025e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ee:	4619      	mov	r1, r3
 80025f0:	4610      	mov	r0, r2
 80025f2:	f7fe fcaa 	bl	8000f4a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025f6:	e031      	b.n	800265c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a27      	ldr	r2, [pc, #156]	; (800269c <HAL_ADC_ConfigChannel+0x87c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d12d      	bne.n	800265e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002602:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d127      	bne.n	800265e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1c      	ldr	r2, [pc, #112]	; (8002684 <HAL_ADC_ConfigChannel+0x864>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d022      	beq.n	800265e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002620:	d004      	beq.n	800262c <HAL_ADC_ConfigChannel+0x80c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a17      	ldr	r2, [pc, #92]	; (8002684 <HAL_ADC_ConfigChannel+0x864>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x810>
 800262c:	4a16      	ldr	r2, [pc, #88]	; (8002688 <HAL_ADC_ConfigChannel+0x868>)
 800262e:	e000      	b.n	8002632 <HAL_ADC_ConfigChannel+0x812>
 8002630:	4a10      	ldr	r2, [pc, #64]	; (8002674 <HAL_ADC_ConfigChannel+0x854>)
 8002632:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002636:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800263a:	4619      	mov	r1, r3
 800263c:	4610      	mov	r0, r2
 800263e:	f7fe fc84 	bl	8000f4a <LL_ADC_SetCommonPathInternalCh>
 8002642:	e00c      	b.n	800265e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	f043 0220 	orr.w	r2, r3, #32
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002656:	e002      	b.n	800265e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002658:	bf00      	nop
 800265a:	e000      	b.n	800265e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800265c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002666:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800266a:	4618      	mov	r0, r3
 800266c:	37d8      	adds	r7, #216	; 0xd8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	50000700 	.word	0x50000700
 8002678:	c3210000 	.word	0xc3210000
 800267c:	90c00010 	.word	0x90c00010
 8002680:	50000600 	.word	0x50000600
 8002684:	50000100 	.word	0x50000100
 8002688:	50000300 	.word	0x50000300
 800268c:	20000000 	.word	0x20000000
 8002690:	053e2d63 	.word	0x053e2d63
 8002694:	c7520000 	.word	0xc7520000
 8002698:	50000500 	.word	0x50000500
 800269c:	cb840000 	.word	0xcb840000

080026a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe fe3d 	bl	8001330 <LL_ADC_IsEnabled>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d176      	bne.n	80027aa <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	4b3c      	ldr	r3, [pc, #240]	; (80027b4 <ADC_Enable+0x114>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00d      	beq.n	80026e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	f043 0210 	orr.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e062      	b.n	80027ac <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe fdf8 	bl	80012e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026f8:	d004      	beq.n	8002704 <ADC_Enable+0x64>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a2e      	ldr	r2, [pc, #184]	; (80027b8 <ADC_Enable+0x118>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d101      	bne.n	8002708 <ADC_Enable+0x68>
 8002704:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <ADC_Enable+0x11c>)
 8002706:	e000      	b.n	800270a <ADC_Enable+0x6a>
 8002708:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <ADC_Enable+0x120>)
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fc30 	bl	8000f70 <LL_ADC_GetCommonPathInternalCh>
 8002710:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002716:	2b00      	cmp	r3, #0
 8002718:	d013      	beq.n	8002742 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800271a:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <ADC_Enable+0x124>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	099b      	lsrs	r3, r3, #6
 8002720:	4a29      	ldr	r2, [pc, #164]	; (80027c8 <ADC_Enable+0x128>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	099b      	lsrs	r3, r3, #6
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002734:	e002      	b.n	800273c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	3b01      	subs	r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f9      	bne.n	8002736 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002742:	f7fe fbe3 	bl	8000f0c <HAL_GetTick>
 8002746:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002748:	e028      	b.n	800279c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fdee 	bl	8001330 <LL_ADC_IsEnabled>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d104      	bne.n	8002764 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fdbe 	bl	80012e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002764:	f7fe fbd2 	bl	8000f0c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d914      	bls.n	800279c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d00d      	beq.n	800279c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	f043 0210 	orr.w	r2, r3, #16
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002790:	f043 0201 	orr.w	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e007      	b.n	80027ac <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d1cf      	bne.n	800274a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	8000003f 	.word	0x8000003f
 80027b8:	50000100 	.word	0x50000100
 80027bc:	50000300 	.word	0x50000300
 80027c0:	50000700 	.word	0x50000700
 80027c4:	20000000 	.word	0x20000000
 80027c8:	053e2d63 	.word	0x053e2d63

080027cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fdbc 	bl	8001356 <LL_ADC_IsDisableOngoing>
 80027de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe fda3 	bl	8001330 <LL_ADC_IsEnabled>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d047      	beq.n	8002880 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d144      	bne.n	8002880 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 030d 	and.w	r3, r3, #13
 8002800:	2b01      	cmp	r3, #1
 8002802:	d10c      	bne.n	800281e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fd7d 	bl	8001308 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2203      	movs	r2, #3
 8002814:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002816:	f7fe fb79 	bl	8000f0c <HAL_GetTick>
 800281a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800281c:	e029      	b.n	8002872 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	f043 0210 	orr.w	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282e:	f043 0201 	orr.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e023      	b.n	8002882 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800283a:	f7fe fb67 	bl	8000f0c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d914      	bls.n	8002872 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00d      	beq.n	8002872 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	f043 0210 	orr.w	r2, r3, #16
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e007      	b.n	8002882 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1dc      	bne.n	800283a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b084      	sub	sp, #16
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d14b      	bne.n	800293c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d021      	beq.n	8002902 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fc00 	bl	80010c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d032      	beq.n	8002934 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d12b      	bne.n	8002934 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d11f      	bne.n	8002934 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	f043 0201 	orr.w	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002900:	e018      	b.n	8002934 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d111      	bne.n	8002934 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002914:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	f043 0201 	orr.w	r2, r3, #1
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f7ff fa4b 	bl	8001dd0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800293a:	e00e      	b.n	800295a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f7ff fa5f 	bl	8001e0c <HAL_ADC_ErrorCallback>
}
 800294e:	e004      	b.n	800295a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	4798      	blx	r3
}
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f7ff fa37 	bl	8001de4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299c:	f043 0204 	orr.w	r2, r3, #4
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f7ff fa31 	bl	8001e0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <LL_ADC_IsEnabled>:
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <LL_ADC_IsEnabled+0x18>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <LL_ADC_IsEnabled+0x1a>
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_ADC_StartCalibration>:
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80029ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	609a      	str	r2, [r3, #8]
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_ADC_IsCalibrationOnGoing>:
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a1e:	d101      	bne.n	8002a24 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d101      	bne.n	8002a4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_ADCEx_Calibration_Start+0x1c>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e04d      	b.n	8002b10 <HAL_ADCEx_Calibration_Start+0xb8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff fea5 	bl	80027cc <ADC_Disable>
 8002a82:	4603      	mov	r3, r0
 8002a84:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d136      	bne.n	8002afa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a94:	f023 0302 	bic.w	r3, r3, #2
 8002a98:	f043 0202 	orr.w	r2, r3, #2
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6839      	ldr	r1, [r7, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff ff96 	bl	80029d8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002aac:	e014      	b.n	8002ad8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4a18      	ldr	r2, [pc, #96]	; (8002b18 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d90d      	bls.n	8002ad8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac0:	f023 0312 	bic.w	r3, r3, #18
 8002ac4:	f043 0210 	orr.w	r2, r3, #16
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e01b      	b.n	8002b10 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff94 	bl	8002a0a <LL_ADC_IsCalibrationOnGoing>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e2      	bne.n	8002aae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	f023 0303 	bic.w	r3, r3, #3
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002af8:	e005      	b.n	8002b06 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afe:	f043 0210 	orr.w	r2, r3, #16
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	0004de01 	.word	0x0004de01

08002b1c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b0a1      	sub	sp, #132	; 0x84
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e0e7      	b.n	8002d6e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002baa:	2300      	movs	r3, #0
 8002bac:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb6:	d102      	bne.n	8002bbe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bb8:	4b6f      	ldr	r3, [pc, #444]	; (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	e009      	b.n	8002bd2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a6e      	ldr	r2, [pc, #440]	; (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d102      	bne.n	8002bce <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002bc8:	4b6d      	ldr	r3, [pc, #436]	; (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	e001      	b.n	8002bd2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bdc:	f043 0220 	orr.w	r2, r3, #32
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0be      	b.n	8002d6e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff ff1d 	bl	8002a32 <LL_ADC_REG_IsConversionOngoing>
 8002bf8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ff17 	bl	8002a32 <LL_ADC_REG_IsConversionOngoing>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 80a0 	bne.w	8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f040 809c 	bne.w	8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c1c:	d004      	beq.n	8002c28 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a55      	ldr	r2, [pc, #340]	; (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d101      	bne.n	8002c2c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002c28:	4b56      	ldr	r3, [pc, #344]	; (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002c2a:	e000      	b.n	8002c2e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002c2c:	4b56      	ldr	r3, [pc, #344]	; (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002c2e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d04b      	beq.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c4a:	035b      	lsls	r3, r3, #13
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c5c:	d004      	beq.n	8002c68 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a45      	ldr	r2, [pc, #276]	; (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d10f      	bne.n	8002c88 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002c68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c6c:	f7ff fea1 	bl	80029b2 <LL_ADC_IsEnabled>
 8002c70:	4604      	mov	r4, r0
 8002c72:	4841      	ldr	r0, [pc, #260]	; (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c74:	f7ff fe9d 	bl	80029b2 <LL_ADC_IsEnabled>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4323      	orrs	r3, r4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	e012      	b.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002c88:	483c      	ldr	r0, [pc, #240]	; (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c8a:	f7ff fe92 	bl	80029b2 <LL_ADC_IsEnabled>
 8002c8e:	4604      	mov	r4, r0
 8002c90:	483b      	ldr	r0, [pc, #236]	; (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c92:	f7ff fe8e 	bl	80029b2 <LL_ADC_IsEnabled>
 8002c96:	4603      	mov	r3, r0
 8002c98:	431c      	orrs	r4, r3
 8002c9a:	483c      	ldr	r0, [pc, #240]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002c9c:	f7ff fe89 	bl	80029b2 <LL_ADC_IsEnabled>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4323      	orrs	r3, r4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d056      	beq.n	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cba:	f023 030f 	bic.w	r3, r3, #15
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	6811      	ldr	r1, [r2, #0]
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	6892      	ldr	r2, [r2, #8]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ccc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cce:	e047      	b.n	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002cd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cda:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ce4:	d004      	beq.n	8002cf0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a23      	ldr	r2, [pc, #140]	; (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d10f      	bne.n	8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002cf0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002cf4:	f7ff fe5d 	bl	80029b2 <LL_ADC_IsEnabled>
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	481f      	ldr	r0, [pc, #124]	; (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cfc:	f7ff fe59 	bl	80029b2 <LL_ADC_IsEnabled>
 8002d00:	4603      	mov	r3, r0
 8002d02:	4323      	orrs	r3, r4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf0c      	ite	eq
 8002d08:	2301      	moveq	r3, #1
 8002d0a:	2300      	movne	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e012      	b.n	8002d36 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002d10:	481a      	ldr	r0, [pc, #104]	; (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d12:	f7ff fe4e 	bl	80029b2 <LL_ADC_IsEnabled>
 8002d16:	4604      	mov	r4, r0
 8002d18:	4819      	ldr	r0, [pc, #100]	; (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d1a:	f7ff fe4a 	bl	80029b2 <LL_ADC_IsEnabled>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	431c      	orrs	r4, r3
 8002d22:	481a      	ldr	r0, [pc, #104]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002d24:	f7ff fe45 	bl	80029b2 <LL_ADC_IsEnabled>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4323      	orrs	r3, r4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d012      	beq.n	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d42:	f023 030f 	bic.w	r3, r3, #15
 8002d46:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d48:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d4a:	e009      	b.n	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d50:	f043 0220 	orr.w	r2, r3, #32
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d5e:	e000      	b.n	8002d62 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3784      	adds	r7, #132	; 0x84
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd90      	pop	{r4, r7, pc}
 8002d76:	bf00      	nop
 8002d78:	50000100 	.word	0x50000100
 8002d7c:	50000400 	.word	0x50000400
 8002d80:	50000500 	.word	0x50000500
 8002d84:	50000300 	.word	0x50000300
 8002d88:	50000700 	.word	0x50000700
 8002d8c:	50000600 	.word	0x50000600

08002d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dac:	4013      	ands	r3, r2
 8002dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc2:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	60d3      	str	r3, [r2, #12]
}
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	f003 0307 	and.w	r3, r3, #7
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	db0b      	blt.n	8002e1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	f003 021f 	and.w	r2, r3, #31
 8002e0c:	4907      	ldr	r1, [pc, #28]	; (8002e2c <__NVIC_EnableIRQ+0x38>)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	2001      	movs	r0, #1
 8002e16:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000e100 	.word	0xe000e100

08002e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db0a      	blt.n	8002e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	490c      	ldr	r1, [pc, #48]	; (8002e7c <__NVIC_SetPriority+0x4c>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	440b      	add	r3, r1
 8002e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e58:	e00a      	b.n	8002e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4908      	ldr	r1, [pc, #32]	; (8002e80 <__NVIC_SetPriority+0x50>)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3b04      	subs	r3, #4
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	761a      	strb	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	; 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f1c3 0307 	rsb	r3, r3, #7
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	bf28      	it	cs
 8002ea2:	2304      	movcs	r3, #4
 8002ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d902      	bls.n	8002eb4 <NVIC_EncodePriority+0x30>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3b03      	subs	r3, #3
 8002eb2:	e000      	b.n	8002eb6 <NVIC_EncodePriority+0x32>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43d9      	mvns	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	4313      	orrs	r3, r2
         );
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3724      	adds	r7, #36	; 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002efc:	d301      	bcc.n	8002f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002efe:	2301      	movs	r3, #1
 8002f00:	e00f      	b.n	8002f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f02:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <SysTick_Config+0x40>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f0a:	210f      	movs	r1, #15
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	f7ff ff8e 	bl	8002e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <SysTick_Config+0x40>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <SysTick_Config+0x40>)
 8002f1c:	2207      	movs	r2, #7
 8002f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	e000e010 	.word	0xe000e010

08002f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ff29 	bl	8002d90 <__NVIC_SetPriorityGrouping>
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f54:	f7ff ff40 	bl	8002dd8 <__NVIC_GetPriorityGrouping>
 8002f58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f7ff ff90 	bl	8002e84 <NVIC_EncodePriority>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff5f 	bl	8002e30 <__NVIC_SetPriority>
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff33 	bl	8002df4 <__NVIC_EnableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ffa4 	bl	8002eec <SysTick_Config>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e014      	b.n	8002fea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	791b      	ldrb	r3, [r3, #4]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d105      	bne.n	8002fd6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7fd fdf1 	bl	8000bb8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e056      	b.n	80030b6 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	795b      	ldrb	r3, [r3, #5]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_DAC_Start+0x20>
 8003010:	2302      	movs	r3, #2
 8003012:	e050      	b.n	80030b6 <HAL_DAC_Start+0xc2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2202      	movs	r2, #2
 800301e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6819      	ldr	r1, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2201      	movs	r2, #1
 800302e:	409a      	lsls	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003038:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <HAL_DAC_Start+0xd0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	4a22      	ldr	r2, [pc, #136]	; (80030c8 <HAL_DAC_Start+0xd4>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	099b      	lsrs	r3, r3, #6
 8003046:	3301      	adds	r3, #1
 8003048:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800304a:	e002      	b.n	8003052 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3b01      	subs	r3, #1
 8003050:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f9      	bne.n	800304c <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10f      	bne.n	800307e <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003068:	2b02      	cmp	r3, #2
 800306a:	d11d      	bne.n	80030a8 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	605a      	str	r2, [r3, #4]
 800307c:	e014      	b.n	80030a8 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2102      	movs	r1, #2
 8003090:	fa01 f303 	lsl.w	r3, r1, r3
 8003094:	429a      	cmp	r2, r3
 8003096:	d107      	bne.n	80030a8 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0202 	orr.w	r2, r2, #2
 80030a6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	20000000 	.word	0x20000000
 80030c8:	053e2d63 	.word	0x053e2d63

080030cc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e018      	b.n	800311a <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d105      	bne.n	8003106 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4413      	add	r3, r2
 8003100:	3308      	adds	r3, #8
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	e004      	b.n	8003110 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4413      	add	r3, r2
 800310c:	3314      	adds	r3, #20
 800310e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	461a      	mov	r2, r3
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <HAL_DAC_ConfigChannel+0x1c>
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e19e      	b.n	8003486 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	795b      	ldrb	r3, [r3, #5]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_DAC_ConfigChannel+0x2c>
 8003150:	2302      	movs	r3, #2
 8003152:	e198      	b.n	8003486 <HAL_DAC_ConfigChannel+0x35e>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2202      	movs	r2, #2
 800315e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b04      	cmp	r3, #4
 8003166:	d17a      	bne.n	800325e <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003168:	f7fd fed0 	bl	8000f0c <HAL_GetTick>
 800316c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d13d      	bne.n	80031f0 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003174:	e018      	b.n	80031a8 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003176:	f7fd fec9 	bl	8000f0c <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	d911      	bls.n	80031a8 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f043 0208 	orr.w	r2, r3, #8
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2203      	movs	r2, #3
 80031a2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e16e      	b.n	8003486 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1df      	bne.n	8003176 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031be:	641a      	str	r2, [r3, #64]	; 0x40
 80031c0:	e020      	b.n	8003204 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031c2:	f7fd fea3 	bl	8000f0c <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d90f      	bls.n	80031f0 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	da0a      	bge.n	80031f0 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f043 0208 	orr.w	r2, r3, #8
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2203      	movs	r2, #3
 80031ea:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e14a      	b.n	8003486 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	dbe3      	blt.n	80031c2 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003202:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003214:	fa01 f303 	lsl.w	r3, r1, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	ea02 0103 	and.w	r1, r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	409a      	lsls	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	21ff      	movs	r1, #255	; 0xff
 8003240:	fa01 f303 	lsl.w	r3, r1, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	ea02 0103 	and.w	r1, r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	409a      	lsls	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d11d      	bne.n	80032a2 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	221f      	movs	r2, #31
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327e:	4013      	ands	r3, r2
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003296:	4313      	orrs	r3, r2
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2207      	movs	r2, #7
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ba:	4013      	ands	r3, r2
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d102      	bne.n	80032cc <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	623b      	str	r3, [r7, #32]
 80032ca:	e00f      	b.n	80032ec <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d102      	bne.n	80032da <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80032d4:	2301      	movs	r3, #1
 80032d6:	623b      	str	r3, [r7, #32]
 80032d8:	e008      	b.n	80032ec <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80032e2:	2301      	movs	r3, #1
 80032e4:	623b      	str	r3, [r7, #32]
 80032e6:	e001      	b.n	80032ec <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	6a3a      	ldr	r2, [r7, #32]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330e:	4013      	ands	r3, r2
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	791b      	ldrb	r3, [r3, #4]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d102      	bne.n	8003320 <HAL_DAC_ConfigChannel+0x1f8>
 800331a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800331e:	e000      	b.n	8003322 <HAL_DAC_ConfigChannel+0x1fa>
 8003320:	2300      	movs	r3, #0
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333a:	4013      	ands	r3, r2
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	795b      	ldrb	r3, [r3, #5]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d102      	bne.n	800334c <HAL_DAC_ConfigChannel+0x224>
 8003346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800334a:	e000      	b.n	800334e <HAL_DAC_ConfigChannel+0x226>
 800334c:	2300      	movs	r3, #0
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d114      	bne.n	800338e <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003364:	f001 fa2c 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 8003368:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4a48      	ldr	r2, [pc, #288]	; (8003490 <HAL_DAC_ConfigChannel+0x368>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d904      	bls.n	800337c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
 800337a:	e00f      	b.n	800339c <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4a45      	ldr	r2, [pc, #276]	; (8003494 <HAL_DAC_ConfigChannel+0x36c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d90a      	bls.n	800339a <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
 800338c:	e006      	b.n	800339c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	4313      	orrs	r3, r2
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
 8003398:	e000      	b.n	800339c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800339a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033aa:	4313      	orrs	r3, r2
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6819      	ldr	r1, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	400a      	ands	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ee:	4013      	ands	r3, r2
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003406:	4313      	orrs	r3, r2
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003410:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6819      	ldr	r1, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	22c0      	movs	r2, #192	; 0xc0
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43da      	mvns	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	400a      	ands	r2, r1
 800342c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	089b      	lsrs	r3, r3, #2
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	089b      	lsrs	r3, r3, #2
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4313      	orrs	r3, r2
 800344a:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	f640 710f 	movw	r1, #3855	; 0xf0f
 800345c:	fa01 f303 	lsl.w	r3, r1, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	ea02 0103 	and.w	r1, r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	409a      	lsls	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003484:	7ffb      	ldrb	r3, [r7, #31]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3728      	adds	r7, #40	; 0x28
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	09896800 	.word	0x09896800
 8003494:	04c4b400 	.word	0x04c4b400

08003498 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e08d      	b.n	80035c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	4b47      	ldr	r3, [pc, #284]	; (80035d0 <HAL_DMA_Init+0x138>)
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d80f      	bhi.n	80034d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	4b45      	ldr	r3, [pc, #276]	; (80035d4 <HAL_DMA_Init+0x13c>)
 80034be:	4413      	add	r3, r2
 80034c0:	4a45      	ldr	r2, [pc, #276]	; (80035d8 <HAL_DMA_Init+0x140>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	091b      	lsrs	r3, r3, #4
 80034c8:	009a      	lsls	r2, r3, #2
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a42      	ldr	r2, [pc, #264]	; (80035dc <HAL_DMA_Init+0x144>)
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40
 80034d4:	e00e      	b.n	80034f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	4b40      	ldr	r3, [pc, #256]	; (80035e0 <HAL_DMA_Init+0x148>)
 80034de:	4413      	add	r3, r2
 80034e0:	4a3d      	ldr	r2, [pc, #244]	; (80035d8 <HAL_DMA_Init+0x140>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	009a      	lsls	r2, r3, #2
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a3c      	ldr	r2, [pc, #240]	; (80035e4 <HAL_DMA_Init+0x14c>)
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800350a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003518:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003524:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003530:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f9b6 	bl	80038b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003554:	d102      	bne.n	800355c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003570:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d010      	beq.n	800359c <HAL_DMA_Init+0x104>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b04      	cmp	r3, #4
 8003580:	d80c      	bhi.n	800359c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f9d6 	bl	8003934 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	e008      	b.n	80035ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40020407 	.word	0x40020407
 80035d4:	bffdfff8 	.word	0xbffdfff8
 80035d8:	cccccccd 	.word	0xcccccccd
 80035dc:	40020000 	.word	0x40020000
 80035e0:	bffdfbf8 	.word	0xbffdfbf8
 80035e4:	40020400 	.word	0x40020400

080035e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_DMA_Start_IT+0x20>
 8003604:	2302      	movs	r3, #2
 8003606:	e066      	b.n	80036d6 <HAL_DMA_Start_IT+0xee>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d155      	bne.n	80036c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0201 	bic.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f8fb 	bl	800383c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 020e 	orr.w	r2, r2, #14
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e00f      	b.n	8003680 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0204 	bic.w	r2, r2, #4
 800366e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 020a 	orr.w	r2, r2, #10
 800367e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800369c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0201 	orr.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e005      	b.n	80036d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
 80036d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	2204      	movs	r2, #4
 8003700:	409a      	lsls	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4013      	ands	r3, r2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d026      	beq.n	8003758 <HAL_DMA_IRQHandler+0x7a>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d021      	beq.n	8003758 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d107      	bne.n	8003732 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0204 	bic.w	r2, r2, #4
 8003730:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	f003 021f 	and.w	r2, r3, #31
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	2104      	movs	r1, #4
 8003740:	fa01 f202 	lsl.w	r2, r1, r2
 8003744:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	2b00      	cmp	r3, #0
 800374c:	d071      	beq.n	8003832 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003756:	e06c      	b.n	8003832 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	2202      	movs	r2, #2
 8003762:	409a      	lsls	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d02e      	beq.n	80037ca <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d029      	beq.n	80037ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10b      	bne.n	800379c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 020a 	bic.w	r2, r2, #10
 8003792:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a0:	f003 021f 	and.w	r2, r3, #31
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	2102      	movs	r1, #2
 80037aa:	fa01 f202 	lsl.w	r2, r1, r2
 80037ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d038      	beq.n	8003832 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80037c8:	e033      	b.n	8003832 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2208      	movs	r2, #8
 80037d4:	409a      	lsls	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4013      	ands	r3, r2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d02a      	beq.n	8003834 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d025      	beq.n	8003834 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 020e 	bic.w	r2, r2, #14
 80037f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fc:	f003 021f 	and.w	r2, r3, #31
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	2101      	movs	r1, #1
 8003806:	fa01 f202 	lsl.w	r2, r1, r2
 800380a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003832:	bf00      	nop
 8003834:	bf00      	nop
}
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003852:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003858:	2b00      	cmp	r3, #0
 800385a:	d004      	beq.n	8003866 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003864:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	f003 021f 	and.w	r2, r3, #31
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	2101      	movs	r1, #1
 8003874:	fa01 f202 	lsl.w	r2, r1, r2
 8003878:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b10      	cmp	r3, #16
 8003888:	d108      	bne.n	800389c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800389a:	e007      	b.n	80038ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	60da      	str	r2, [r3, #12]
}
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	4b16      	ldr	r3, [pc, #88]	; (8003920 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d802      	bhi.n	80038d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80038cc:	4b15      	ldr	r3, [pc, #84]	; (8003924 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	e001      	b.n	80038d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80038d4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	3b08      	subs	r3, #8
 80038e2:	4a12      	ldr	r2, [pc, #72]	; (800392c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	089b      	lsrs	r3, r3, #2
 80038f2:	009a      	lsls	r2, r3, #2
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4413      	add	r3, r2
 80038f8:	461a      	mov	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a0b      	ldr	r2, [pc, #44]	; (8003930 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003902:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	2201      	movs	r2, #1
 800390c:	409a      	lsls	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003912:	bf00      	nop
 8003914:	371c      	adds	r7, #28
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40020407 	.word	0x40020407
 8003924:	40020800 	.word	0x40020800
 8003928:	40020820 	.word	0x40020820
 800392c:	cccccccd 	.word	0xcccccccd
 8003930:	40020880 	.word	0x40020880

08003934 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	461a      	mov	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a08      	ldr	r2, [pc, #32]	; (8003978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003956:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	3b01      	subs	r3, #1
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	2201      	movs	r2, #1
 8003962:	409a      	lsls	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003968:	bf00      	nop
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	1000823f 	.word	0x1000823f
 8003978:	40020940 	.word	0x40020940

0800397c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800398a:	e15a      	b.n	8003c42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	2101      	movs	r1, #1
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	fa01 f303 	lsl.w	r3, r1, r3
 8003998:	4013      	ands	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 814c 	beq.w	8003c3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d005      	beq.n	80039bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d130      	bne.n	8003a1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039f2:	2201      	movs	r2, #1
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	f003 0201 	and.w	r2, r3, #1
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d017      	beq.n	8003a5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	2203      	movs	r2, #3
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d123      	bne.n	8003aae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	08da      	lsrs	r2, r3, #3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3208      	adds	r2, #8
 8003a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	220f      	movs	r2, #15
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43db      	mvns	r3, r3
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4013      	ands	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	08da      	lsrs	r2, r3, #3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3208      	adds	r2, #8
 8003aa8:	6939      	ldr	r1, [r7, #16]
 8003aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	2203      	movs	r2, #3
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 0203 	and.w	r2, r3, #3
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80a6 	beq.w	8003c3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003af0:	4b5b      	ldr	r3, [pc, #364]	; (8003c60 <HAL_GPIO_Init+0x2e4>)
 8003af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af4:	4a5a      	ldr	r2, [pc, #360]	; (8003c60 <HAL_GPIO_Init+0x2e4>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6613      	str	r3, [r2, #96]	; 0x60
 8003afc:	4b58      	ldr	r3, [pc, #352]	; (8003c60 <HAL_GPIO_Init+0x2e4>)
 8003afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b08:	4a56      	ldr	r2, [pc, #344]	; (8003c64 <HAL_GPIO_Init+0x2e8>)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	3302      	adds	r3, #2
 8003b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f003 0303 	and.w	r3, r3, #3
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	220f      	movs	r2, #15
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b32:	d01f      	beq.n	8003b74 <HAL_GPIO_Init+0x1f8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a4c      	ldr	r2, [pc, #304]	; (8003c68 <HAL_GPIO_Init+0x2ec>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d019      	beq.n	8003b70 <HAL_GPIO_Init+0x1f4>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a4b      	ldr	r2, [pc, #300]	; (8003c6c <HAL_GPIO_Init+0x2f0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d013      	beq.n	8003b6c <HAL_GPIO_Init+0x1f0>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a4a      	ldr	r2, [pc, #296]	; (8003c70 <HAL_GPIO_Init+0x2f4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00d      	beq.n	8003b68 <HAL_GPIO_Init+0x1ec>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a49      	ldr	r2, [pc, #292]	; (8003c74 <HAL_GPIO_Init+0x2f8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d007      	beq.n	8003b64 <HAL_GPIO_Init+0x1e8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a48      	ldr	r2, [pc, #288]	; (8003c78 <HAL_GPIO_Init+0x2fc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d101      	bne.n	8003b60 <HAL_GPIO_Init+0x1e4>
 8003b5c:	2305      	movs	r3, #5
 8003b5e:	e00a      	b.n	8003b76 <HAL_GPIO_Init+0x1fa>
 8003b60:	2306      	movs	r3, #6
 8003b62:	e008      	b.n	8003b76 <HAL_GPIO_Init+0x1fa>
 8003b64:	2304      	movs	r3, #4
 8003b66:	e006      	b.n	8003b76 <HAL_GPIO_Init+0x1fa>
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e004      	b.n	8003b76 <HAL_GPIO_Init+0x1fa>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e002      	b.n	8003b76 <HAL_GPIO_Init+0x1fa>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <HAL_GPIO_Init+0x1fa>
 8003b74:	2300      	movs	r3, #0
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	f002 0203 	and.w	r2, r2, #3
 8003b7c:	0092      	lsls	r2, r2, #2
 8003b7e:	4093      	lsls	r3, r2
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b86:	4937      	ldr	r1, [pc, #220]	; (8003c64 <HAL_GPIO_Init+0x2e8>)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	089b      	lsrs	r3, r3, #2
 8003b8c:	3302      	adds	r3, #2
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b94:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <HAL_GPIO_Init+0x300>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bb8:	4a30      	ldr	r2, [pc, #192]	; (8003c7c <HAL_GPIO_Init+0x300>)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bbe:	4b2f      	ldr	r3, [pc, #188]	; (8003c7c <HAL_GPIO_Init+0x300>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003be2:	4a26      	ldr	r2, [pc, #152]	; (8003c7c <HAL_GPIO_Init+0x300>)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003be8:	4b24      	ldr	r3, [pc, #144]	; (8003c7c <HAL_GPIO_Init+0x300>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c0c:	4a1b      	ldr	r2, [pc, #108]	; (8003c7c <HAL_GPIO_Init+0x300>)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c12:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <HAL_GPIO_Init+0x300>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c36:	4a11      	ldr	r2, [pc, #68]	; (8003c7c <HAL_GPIO_Init+0x300>)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f47f ae9d 	bne.w	800398c <HAL_GPIO_Init+0x10>
  }
}
 8003c52:	bf00      	nop
 8003c54:	bf00      	nop
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40010000 	.word	0x40010000
 8003c68:	48000400 	.word	0x48000400
 8003c6c:	48000800 	.word	0x48000800
 8003c70:	48000c00 	.word	0x48000c00
 8003c74:	48001000 	.word	0x48001000
 8003c78:	48001400 	.word	0x48001400
 8003c7c:	40010400 	.word	0x40010400

08003c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	807b      	strh	r3, [r7, #2]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c90:	787b      	ldrb	r3, [r7, #1]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c96:	887a      	ldrh	r2, [r7, #2]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c9c:	e002      	b.n	8003ca4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c9e:	887a      	ldrh	r2, [r7, #2]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d006      	beq.n	8003cd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cc6:	4a05      	ldr	r2, [pc, #20]	; (8003cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 f806 	bl	8003ce0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cd4:	bf00      	nop
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40010400 	.word	0x40010400

08003ce0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d141      	bne.n	8003d8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d06:	4b4b      	ldr	r3, [pc, #300]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d12:	d131      	bne.n	8003d78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d14:	4b47      	ldr	r3, [pc, #284]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d1a:	4a46      	ldr	r2, [pc, #280]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d24:	4b43      	ldr	r3, [pc, #268]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d2c:	4a41      	ldr	r2, [pc, #260]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d34:	4b40      	ldr	r3, [pc, #256]	; (8003e38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2232      	movs	r2, #50	; 0x32
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	4a3f      	ldr	r2, [pc, #252]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d40:	fba2 2303 	umull	r2, r3, r2, r3
 8003d44:	0c9b      	lsrs	r3, r3, #18
 8003d46:	3301      	adds	r3, #1
 8003d48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d4a:	e002      	b.n	8003d52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d52:	4b38      	ldr	r3, [pc, #224]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5e:	d102      	bne.n	8003d66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f2      	bne.n	8003d4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d66:	4b33      	ldr	r3, [pc, #204]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d72:	d158      	bne.n	8003e26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e057      	b.n	8003e28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d78:	4b2e      	ldr	r3, [pc, #184]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d7e:	4a2d      	ldr	r2, [pc, #180]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d88:	e04d      	b.n	8003e26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d90:	d141      	bne.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d92:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9e:	d131      	bne.n	8003e04 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003da0:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da6:	4a23      	ldr	r2, [pc, #140]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003db0:	4b20      	ldr	r3, [pc, #128]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003db8:	4a1e      	ldr	r2, [pc, #120]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2232      	movs	r2, #50	; 0x32
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	4a1c      	ldr	r2, [pc, #112]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	0c9b      	lsrs	r3, r3, #18
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd6:	e002      	b.n	8003dde <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dde:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dea:	d102      	bne.n	8003df2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f2      	bne.n	8003dd8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfe:	d112      	bne.n	8003e26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e011      	b.n	8003e28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e14:	e007      	b.n	8003e26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e1e:	4a05      	ldr	r2, [pc, #20]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e24:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	40007000 	.word	0x40007000
 8003e38:	20000000 	.word	0x20000000
 8003e3c:	431bde83 	.word	0x431bde83

08003e40 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a04      	ldr	r2, [pc, #16]	; (8003e5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e4e:	6093      	str	r3, [r2, #8]
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	40007000 	.word	0x40007000

08003e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e2fe      	b.n	8004470 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d075      	beq.n	8003f6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7e:	4b97      	ldr	r3, [pc, #604]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e88:	4b94      	ldr	r3, [pc, #592]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	2b0c      	cmp	r3, #12
 8003e96:	d102      	bne.n	8003e9e <HAL_RCC_OscConfig+0x3e>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d002      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x44>
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d10b      	bne.n	8003ebc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	4b8d      	ldr	r3, [pc, #564]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d05b      	beq.n	8003f68 <HAL_RCC_OscConfig+0x108>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d157      	bne.n	8003f68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e2d9      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec4:	d106      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x74>
 8003ec6:	4b85      	ldr	r3, [pc, #532]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a84      	ldr	r2, [pc, #528]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	e01d      	b.n	8003f10 <HAL_RCC_OscConfig+0xb0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003edc:	d10c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x98>
 8003ede:	4b7f      	ldr	r3, [pc, #508]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a7e      	ldr	r2, [pc, #504]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4b7c      	ldr	r3, [pc, #496]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a7b      	ldr	r2, [pc, #492]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e00b      	b.n	8003f10 <HAL_RCC_OscConfig+0xb0>
 8003ef8:	4b78      	ldr	r3, [pc, #480]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a77      	ldr	r2, [pc, #476]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	4b75      	ldr	r3, [pc, #468]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a74      	ldr	r2, [pc, #464]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d013      	beq.n	8003f40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f18:	f7fc fff8 	bl	8000f0c <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f20:	f7fc fff4 	bl	8000f0c <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	; 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e29e      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f32:	4b6a      	ldr	r3, [pc, #424]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0xc0>
 8003f3e:	e014      	b.n	8003f6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fc ffe4 	bl	8000f0c <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f48:	f7fc ffe0 	bl	8000f0c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	; 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e28a      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f5a:	4b60      	ldr	r3, [pc, #384]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0xe8>
 8003f66:	e000      	b.n	8003f6a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d075      	beq.n	8004062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f76:	4b59      	ldr	r3, [pc, #356]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f80:	4b56      	ldr	r3, [pc, #344]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	d102      	bne.n	8003f96 <HAL_RCC_OscConfig+0x136>
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d002      	beq.n	8003f9c <HAL_RCC_OscConfig+0x13c>
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d11f      	bne.n	8003fdc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f9c:	4b4f      	ldr	r3, [pc, #316]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x154>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e25d      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb4:	4b49      	ldr	r3, [pc, #292]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	061b      	lsls	r3, r3, #24
 8003fc2:	4946      	ldr	r1, [pc, #280]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fc8:	4b45      	ldr	r3, [pc, #276]	; (80040e0 <HAL_RCC_OscConfig+0x280>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fc ff51 	bl	8000e74 <HAL_InitTick>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d043      	beq.n	8004060 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e249      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d023      	beq.n	800402c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe4:	4b3d      	ldr	r3, [pc, #244]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a3c      	ldr	r2, [pc, #240]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8003fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fc ff8c 	bl	8000f0c <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff8:	f7fc ff88 	bl	8000f0c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e232      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800400a:	4b34      	ldr	r3, [pc, #208]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004016:	4b31      	ldr	r3, [pc, #196]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	492d      	ldr	r1, [pc, #180]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8004026:	4313      	orrs	r3, r2
 8004028:	604b      	str	r3, [r1, #4]
 800402a:	e01a      	b.n	8004062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800402c:	4b2b      	ldr	r3, [pc, #172]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a2a      	ldr	r2, [pc, #168]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8004032:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fc ff68 	bl	8000f0c <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004040:	f7fc ff64 	bl	8000f0c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e20e      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004052:	4b22      	ldr	r3, [pc, #136]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f0      	bne.n	8004040 <HAL_RCC_OscConfig+0x1e0>
 800405e:	e000      	b.n	8004062 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004060:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d041      	beq.n	80040f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d01c      	beq.n	80040b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004076:	4b19      	ldr	r3, [pc, #100]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 8004078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800407c:	4a17      	ldr	r2, [pc, #92]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004086:	f7fc ff41 	bl	8000f0c <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800408e:	f7fc ff3d 	bl	8000f0c <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e1e7      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040a0:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 80040a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0ef      	beq.n	800408e <HAL_RCC_OscConfig+0x22e>
 80040ae:	e020      	b.n	80040f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b0:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 80040b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b6:	4a09      	ldr	r2, [pc, #36]	; (80040dc <HAL_RCC_OscConfig+0x27c>)
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7fc ff24 	bl	8000f0c <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040c6:	e00d      	b.n	80040e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c8:	f7fc ff20 	bl	8000f0c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d906      	bls.n	80040e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e1ca      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
 80040da:	bf00      	nop
 80040dc:	40021000 	.word	0x40021000
 80040e0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040e4:	4b8c      	ldr	r3, [pc, #560]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 80040e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1ea      	bne.n	80040c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 80a6 	beq.w	800424c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004100:	2300      	movs	r3, #0
 8004102:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004104:	4b84      	ldr	r3, [pc, #528]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 8004106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_OscConfig+0x2b4>
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <HAL_RCC_OscConfig+0x2b6>
 8004114:	2300      	movs	r3, #0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00d      	beq.n	8004136 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800411a:	4b7f      	ldr	r3, [pc, #508]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411e:	4a7e      	ldr	r2, [pc, #504]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 8004120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004124:	6593      	str	r3, [r2, #88]	; 0x58
 8004126:	4b7c      	ldr	r3, [pc, #496]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 8004128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004132:	2301      	movs	r3, #1
 8004134:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004136:	4b79      	ldr	r3, [pc, #484]	; (800431c <HAL_RCC_OscConfig+0x4bc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d118      	bne.n	8004174 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004142:	4b76      	ldr	r3, [pc, #472]	; (800431c <HAL_RCC_OscConfig+0x4bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a75      	ldr	r2, [pc, #468]	; (800431c <HAL_RCC_OscConfig+0x4bc>)
 8004148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800414e:	f7fc fedd 	bl	8000f0c <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004156:	f7fc fed9 	bl	8000f0c <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e183      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004168:	4b6c      	ldr	r3, [pc, #432]	; (800431c <HAL_RCC_OscConfig+0x4bc>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d108      	bne.n	800418e <HAL_RCC_OscConfig+0x32e>
 800417c:	4b66      	ldr	r3, [pc, #408]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004182:	4a65      	ldr	r2, [pc, #404]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800418c:	e024      	b.n	80041d8 <HAL_RCC_OscConfig+0x378>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b05      	cmp	r3, #5
 8004194:	d110      	bne.n	80041b8 <HAL_RCC_OscConfig+0x358>
 8004196:	4b60      	ldr	r3, [pc, #384]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	4a5e      	ldr	r2, [pc, #376]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 800419e:	f043 0304 	orr.w	r3, r3, #4
 80041a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041a6:	4b5c      	ldr	r3, [pc, #368]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	4a5a      	ldr	r2, [pc, #360]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041b6:	e00f      	b.n	80041d8 <HAL_RCC_OscConfig+0x378>
 80041b8:	4b57      	ldr	r3, [pc, #348]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	4a56      	ldr	r2, [pc, #344]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 80041c0:	f023 0301 	bic.w	r3, r3, #1
 80041c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041c8:	4b53      	ldr	r3, [pc, #332]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	4a52      	ldr	r2, [pc, #328]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 80041d0:	f023 0304 	bic.w	r3, r3, #4
 80041d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d016      	beq.n	800420e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e0:	f7fc fe94 	bl	8000f0c <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e6:	e00a      	b.n	80041fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e8:	f7fc fe90 	bl	8000f0c <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e138      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041fe:	4b46      	ldr	r3, [pc, #280]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0ed      	beq.n	80041e8 <HAL_RCC_OscConfig+0x388>
 800420c:	e015      	b.n	800423a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420e:	f7fc fe7d 	bl	8000f0c <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004214:	e00a      	b.n	800422c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004216:	f7fc fe79 	bl	8000f0c <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	f241 3288 	movw	r2, #5000	; 0x1388
 8004224:	4293      	cmp	r3, r2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e121      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800422c:	4b3a      	ldr	r3, [pc, #232]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1ed      	bne.n	8004216 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800423a:	7ffb      	ldrb	r3, [r7, #31]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d105      	bne.n	800424c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004240:	4b35      	ldr	r3, [pc, #212]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 8004242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004244:	4a34      	ldr	r2, [pc, #208]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 8004246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0320 	and.w	r3, r3, #32
 8004254:	2b00      	cmp	r3, #0
 8004256:	d03c      	beq.n	80042d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d01c      	beq.n	800429a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004260:	4b2d      	ldr	r3, [pc, #180]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 8004262:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004266:	4a2c      	ldr	r2, [pc, #176]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004270:	f7fc fe4c 	bl	8000f0c <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004278:	f7fc fe48 	bl	8000f0c <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e0f2      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800428a:	4b23      	ldr	r3, [pc, #140]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 800428c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0ef      	beq.n	8004278 <HAL_RCC_OscConfig+0x418>
 8004298:	e01b      	b.n	80042d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800429a:	4b1f      	ldr	r3, [pc, #124]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 800429c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042a0:	4a1d      	ldr	r2, [pc, #116]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042aa:	f7fc fe2f 	bl	8000f0c <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042b2:	f7fc fe2b 	bl	8000f0c <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e0d5      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042c4:	4b14      	ldr	r3, [pc, #80]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 80042c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1ef      	bne.n	80042b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 80c9 	beq.w	800446e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042dc:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 030c 	and.w	r3, r3, #12
 80042e4:	2b0c      	cmp	r3, #12
 80042e6:	f000 8083 	beq.w	80043f0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d15e      	bne.n	80043b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f2:	4b09      	ldr	r3, [pc, #36]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a08      	ldr	r2, [pc, #32]	; (8004318 <HAL_RCC_OscConfig+0x4b8>)
 80042f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fe:	f7fc fe05 	bl	8000f0c <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004304:	e00c      	b.n	8004320 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004306:	f7fc fe01 	bl	8000f0c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d905      	bls.n	8004320 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e0ab      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
 8004318:	40021000 	.word	0x40021000
 800431c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004320:	4b55      	ldr	r3, [pc, #340]	; (8004478 <HAL_RCC_OscConfig+0x618>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1ec      	bne.n	8004306 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800432c:	4b52      	ldr	r3, [pc, #328]	; (8004478 <HAL_RCC_OscConfig+0x618>)
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	4b52      	ldr	r3, [pc, #328]	; (800447c <HAL_RCC_OscConfig+0x61c>)
 8004332:	4013      	ands	r3, r2
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6a11      	ldr	r1, [r2, #32]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800433c:	3a01      	subs	r2, #1
 800433e:	0112      	lsls	r2, r2, #4
 8004340:	4311      	orrs	r1, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004346:	0212      	lsls	r2, r2, #8
 8004348:	4311      	orrs	r1, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800434e:	0852      	lsrs	r2, r2, #1
 8004350:	3a01      	subs	r2, #1
 8004352:	0552      	lsls	r2, r2, #21
 8004354:	4311      	orrs	r1, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800435a:	0852      	lsrs	r2, r2, #1
 800435c:	3a01      	subs	r2, #1
 800435e:	0652      	lsls	r2, r2, #25
 8004360:	4311      	orrs	r1, r2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004366:	06d2      	lsls	r2, r2, #27
 8004368:	430a      	orrs	r2, r1
 800436a:	4943      	ldr	r1, [pc, #268]	; (8004478 <HAL_RCC_OscConfig+0x618>)
 800436c:	4313      	orrs	r3, r2
 800436e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004370:	4b41      	ldr	r3, [pc, #260]	; (8004478 <HAL_RCC_OscConfig+0x618>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a40      	ldr	r2, [pc, #256]	; (8004478 <HAL_RCC_OscConfig+0x618>)
 8004376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800437a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800437c:	4b3e      	ldr	r3, [pc, #248]	; (8004478 <HAL_RCC_OscConfig+0x618>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4a3d      	ldr	r2, [pc, #244]	; (8004478 <HAL_RCC_OscConfig+0x618>)
 8004382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004386:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fc fdc0 	bl	8000f0c <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004390:	f7fc fdbc 	bl	8000f0c <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e066      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a2:	4b35      	ldr	r3, [pc, #212]	; (8004478 <HAL_RCC_OscConfig+0x618>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCC_OscConfig+0x530>
 80043ae:	e05e      	b.n	800446e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b0:	4b31      	ldr	r3, [pc, #196]	; (8004478 <HAL_RCC_OscConfig+0x618>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a30      	ldr	r2, [pc, #192]	; (8004478 <HAL_RCC_OscConfig+0x618>)
 80043b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fc fda6 	bl	8000f0c <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c4:	f7fc fda2 	bl	8000f0c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e04c      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d6:	4b28      	ldr	r3, [pc, #160]	; (8004478 <HAL_RCC_OscConfig+0x618>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80043e2:	4b25      	ldr	r3, [pc, #148]	; (8004478 <HAL_RCC_OscConfig+0x618>)
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	4924      	ldr	r1, [pc, #144]	; (8004478 <HAL_RCC_OscConfig+0x618>)
 80043e8:	4b25      	ldr	r3, [pc, #148]	; (8004480 <HAL_RCC_OscConfig+0x620>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	60cb      	str	r3, [r1, #12]
 80043ee:	e03e      	b.n	800446e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e039      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80043fc:	4b1e      	ldr	r3, [pc, #120]	; (8004478 <HAL_RCC_OscConfig+0x618>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f003 0203 	and.w	r2, r3, #3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	429a      	cmp	r2, r3
 800440e:	d12c      	bne.n	800446a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	3b01      	subs	r3, #1
 800441c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d123      	bne.n	800446a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800442e:	429a      	cmp	r2, r3
 8004430:	d11b      	bne.n	800446a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800443e:	429a      	cmp	r2, r3
 8004440:	d113      	bne.n	800446a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	085b      	lsrs	r3, r3, #1
 800444e:	3b01      	subs	r3, #1
 8004450:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004452:	429a      	cmp	r2, r3
 8004454:	d109      	bne.n	800446a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004460:	085b      	lsrs	r3, r3, #1
 8004462:	3b01      	subs	r3, #1
 8004464:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d001      	beq.n	800446e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3720      	adds	r7, #32
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40021000 	.word	0x40021000
 800447c:	019f800c 	.word	0x019f800c
 8004480:	feeefffc 	.word	0xfeeefffc

08004484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e11e      	b.n	80046da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800449c:	4b91      	ldr	r3, [pc, #580]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d910      	bls.n	80044cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044aa:	4b8e      	ldr	r3, [pc, #568]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 020f 	bic.w	r2, r3, #15
 80044b2:	498c      	ldr	r1, [pc, #560]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ba:	4b8a      	ldr	r3, [pc, #552]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e106      	b.n	80046da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d073      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d129      	bne.n	8004534 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e0:	4b81      	ldr	r3, [pc, #516]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0f4      	b.n	80046da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80044f0:	f000 f99e 	bl	8004830 <RCC_GetSysClockFreqFromPLLSource>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4a7c      	ldr	r2, [pc, #496]	; (80046ec <HAL_RCC_ClockConfig+0x268>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d93f      	bls.n	800457e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044fe:	4b7a      	ldr	r3, [pc, #488]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d009      	beq.n	800451e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004512:	2b00      	cmp	r3, #0
 8004514:	d033      	beq.n	800457e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800451a:	2b00      	cmp	r3, #0
 800451c:	d12f      	bne.n	800457e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800451e:	4b72      	ldr	r3, [pc, #456]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004526:	4a70      	ldr	r2, [pc, #448]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 8004528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800452c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e024      	b.n	800457e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d107      	bne.n	800454c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453c:	4b6a      	ldr	r3, [pc, #424]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0c6      	b.n	80046da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800454c:	4b66      	ldr	r3, [pc, #408]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0be      	b.n	80046da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800455c:	f000 f8ce 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 8004560:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4a61      	ldr	r2, [pc, #388]	; (80046ec <HAL_RCC_ClockConfig+0x268>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d909      	bls.n	800457e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800456a:	4b5f      	ldr	r3, [pc, #380]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004572:	4a5d      	ldr	r2, [pc, #372]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 8004574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004578:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800457a:	2380      	movs	r3, #128	; 0x80
 800457c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800457e:	4b5a      	ldr	r3, [pc, #360]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f023 0203 	bic.w	r2, r3, #3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4957      	ldr	r1, [pc, #348]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800458c:	4313      	orrs	r3, r2
 800458e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004590:	f7fc fcbc 	bl	8000f0c <HAL_GetTick>
 8004594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004596:	e00a      	b.n	80045ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004598:	f7fc fcb8 	bl	8000f0c <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e095      	b.n	80046da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ae:	4b4e      	ldr	r3, [pc, #312]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 020c 	and.w	r2, r3, #12
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	429a      	cmp	r2, r3
 80045be:	d1eb      	bne.n	8004598 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d023      	beq.n	8004614 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045d8:	4b43      	ldr	r3, [pc, #268]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4a42      	ldr	r2, [pc, #264]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 80045de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80045f0:	4b3d      	ldr	r3, [pc, #244]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045f8:	4a3b      	ldr	r2, [pc, #236]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 80045fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004600:	4b39      	ldr	r3, [pc, #228]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	4936      	ldr	r1, [pc, #216]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
 8004612:	e008      	b.n	8004626 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2b80      	cmp	r3, #128	; 0x80
 8004618:	d105      	bne.n	8004626 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800461a:	4b33      	ldr	r3, [pc, #204]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	4a32      	ldr	r2, [pc, #200]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 8004620:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004624:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004626:	4b2f      	ldr	r3, [pc, #188]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d21d      	bcs.n	8004670 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004634:	4b2b      	ldr	r3, [pc, #172]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f023 020f 	bic.w	r2, r3, #15
 800463c:	4929      	ldr	r1, [pc, #164]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	4313      	orrs	r3, r2
 8004642:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004644:	f7fc fc62 	bl	8000f0c <HAL_GetTick>
 8004648:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800464a:	e00a      	b.n	8004662 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464c:	f7fc fc5e 	bl	8000f0c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f241 3288 	movw	r2, #5000	; 0x1388
 800465a:	4293      	cmp	r3, r2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e03b      	b.n	80046da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	4b20      	ldr	r3, [pc, #128]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d1ed      	bne.n	800464c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800467c:	4b1a      	ldr	r3, [pc, #104]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	4917      	ldr	r1, [pc, #92]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800469a:	4b13      	ldr	r3, [pc, #76]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	490f      	ldr	r1, [pc, #60]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046ae:	f000 f825 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 80046b2:	4602      	mov	r2, r0
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	091b      	lsrs	r3, r3, #4
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	490c      	ldr	r1, [pc, #48]	; (80046f0 <HAL_RCC_ClockConfig+0x26c>)
 80046c0:	5ccb      	ldrb	r3, [r1, r3]
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ca:	4a0a      	ldr	r2, [pc, #40]	; (80046f4 <HAL_RCC_ClockConfig+0x270>)
 80046cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046ce:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <HAL_RCC_ClockConfig+0x274>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fc fbce 	bl	8000e74 <HAL_InitTick>
 80046d8:	4603      	mov	r3, r0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40022000 	.word	0x40022000
 80046e8:	40021000 	.word	0x40021000
 80046ec:	04c4b400 	.word	0x04c4b400
 80046f0:	08005aa4 	.word	0x08005aa4
 80046f4:	20000000 	.word	0x20000000
 80046f8:	20000004 	.word	0x20000004

080046fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004702:	4b2c      	ldr	r3, [pc, #176]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 030c 	and.w	r3, r3, #12
 800470a:	2b04      	cmp	r3, #4
 800470c:	d102      	bne.n	8004714 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800470e:	4b2a      	ldr	r3, [pc, #168]	; (80047b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	e047      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004714:	4b27      	ldr	r3, [pc, #156]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 030c 	and.w	r3, r3, #12
 800471c:	2b08      	cmp	r3, #8
 800471e:	d102      	bne.n	8004726 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004720:	4b26      	ldr	r3, [pc, #152]	; (80047bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	e03e      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004726:	4b23      	ldr	r3, [pc, #140]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	2b0c      	cmp	r3, #12
 8004730:	d136      	bne.n	80047a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004732:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800473c:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	3301      	adds	r3, #1
 8004748:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d10c      	bne.n	800476a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004750:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	fbb2 f3f3 	udiv	r3, r2, r3
 8004758:	4a16      	ldr	r2, [pc, #88]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800475a:	68d2      	ldr	r2, [r2, #12]
 800475c:	0a12      	lsrs	r2, r2, #8
 800475e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	617b      	str	r3, [r7, #20]
      break;
 8004768:	e00c      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800476a:	4a13      	ldr	r2, [pc, #76]	; (80047b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004772:	4a10      	ldr	r2, [pc, #64]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004774:	68d2      	ldr	r2, [r2, #12]
 8004776:	0a12      	lsrs	r2, r2, #8
 8004778:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800477c:	fb02 f303 	mul.w	r3, r2, r3
 8004780:	617b      	str	r3, [r7, #20]
      break;
 8004782:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	0e5b      	lsrs	r3, r3, #25
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	3301      	adds	r3, #1
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	e001      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047a4:	693b      	ldr	r3, [r7, #16]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40021000 	.word	0x40021000
 80047b8:	00f42400 	.word	0x00f42400
 80047bc:	016e3600 	.word	0x016e3600

080047c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047c4:	4b03      	ldr	r3, [pc, #12]	; (80047d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047c6:	681b      	ldr	r3, [r3, #0]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	20000000 	.word	0x20000000

080047d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047dc:	f7ff fff0 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b06      	ldr	r3, [pc, #24]	; (80047fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4904      	ldr	r1, [pc, #16]	; (8004800 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ee:	5ccb      	ldrb	r3, [r1, r3]
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40021000 	.word	0x40021000
 8004800:	08005ab4 	.word	0x08005ab4

08004804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004808:	f7ff ffda 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 800480c:	4602      	mov	r2, r0
 800480e:	4b06      	ldr	r3, [pc, #24]	; (8004828 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	0adb      	lsrs	r3, r3, #11
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	4904      	ldr	r1, [pc, #16]	; (800482c <HAL_RCC_GetPCLK2Freq+0x28>)
 800481a:	5ccb      	ldrb	r3, [r1, r3]
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004824:	4618      	mov	r0, r3
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40021000 	.word	0x40021000
 800482c:	08005ab4 	.word	0x08005ab4

08004830 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004836:	4b1e      	ldr	r3, [pc, #120]	; (80048b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004840:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	3301      	adds	r3, #1
 800484c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b03      	cmp	r3, #3
 8004852:	d10c      	bne.n	800486e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004854:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	4a14      	ldr	r2, [pc, #80]	; (80048b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800485e:	68d2      	ldr	r2, [r2, #12]
 8004860:	0a12      	lsrs	r2, r2, #8
 8004862:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004866:	fb02 f303 	mul.w	r3, r2, r3
 800486a:	617b      	str	r3, [r7, #20]
    break;
 800486c:	e00c      	b.n	8004888 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800486e:	4a12      	ldr	r2, [pc, #72]	; (80048b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	fbb2 f3f3 	udiv	r3, r2, r3
 8004876:	4a0e      	ldr	r2, [pc, #56]	; (80048b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004878:	68d2      	ldr	r2, [r2, #12]
 800487a:	0a12      	lsrs	r2, r2, #8
 800487c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004880:	fb02 f303 	mul.w	r3, r2, r3
 8004884:	617b      	str	r3, [r7, #20]
    break;
 8004886:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004888:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	0e5b      	lsrs	r3, r3, #25
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	3301      	adds	r3, #1
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048a2:	687b      	ldr	r3, [r7, #4]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	371c      	adds	r7, #28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	40021000 	.word	0x40021000
 80048b4:	016e3600 	.word	0x016e3600
 80048b8:	00f42400 	.word	0x00f42400

080048bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048c4:	2300      	movs	r3, #0
 80048c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048c8:	2300      	movs	r3, #0
 80048ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 8098 	beq.w	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048da:	2300      	movs	r3, #0
 80048dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048de:	4b43      	ldr	r3, [pc, #268]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10d      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ea:	4b40      	ldr	r3, [pc, #256]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ee:	4a3f      	ldr	r2, [pc, #252]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f4:	6593      	str	r3, [r2, #88]	; 0x58
 80048f6:	4b3d      	ldr	r3, [pc, #244]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fe:	60bb      	str	r3, [r7, #8]
 8004900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004902:	2301      	movs	r3, #1
 8004904:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004906:	4b3a      	ldr	r3, [pc, #232]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a39      	ldr	r2, [pc, #228]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800490c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004910:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004912:	f7fc fafb 	bl	8000f0c <HAL_GetTick>
 8004916:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004918:	e009      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491a:	f7fc faf7 	bl	8000f0c <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d902      	bls.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	74fb      	strb	r3, [r7, #19]
        break;
 800492c:	e005      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800492e:	4b30      	ldr	r3, [pc, #192]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0ef      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800493a:	7cfb      	ldrb	r3, [r7, #19]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d159      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004940:	4b2a      	ldr	r3, [pc, #168]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800494a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d01e      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	429a      	cmp	r2, r3
 800495a:	d019      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800495c:	4b23      	ldr	r3, [pc, #140]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004966:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004968:	4b20      	ldr	r3, [pc, #128]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496e:	4a1f      	ldr	r2, [pc, #124]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004978:	4b1c      	ldr	r3, [pc, #112]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497e:	4a1b      	ldr	r2, [pc, #108]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004988:	4a18      	ldr	r2, [pc, #96]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d016      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499a:	f7fc fab7 	bl	8000f0c <HAL_GetTick>
 800499e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a0:	e00b      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a2:	f7fc fab3 	bl	8000f0c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d902      	bls.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	74fb      	strb	r3, [r7, #19]
            break;
 80049b8:	e006      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ba:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0ec      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80049c8:	7cfb      	ldrb	r3, [r7, #19]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10b      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049ce:	4b07      	ldr	r3, [pc, #28]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049dc:	4903      	ldr	r1, [pc, #12]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049e4:	e008      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049e6:	7cfb      	ldrb	r3, [r7, #19]
 80049e8:	74bb      	strb	r3, [r7, #18]
 80049ea:	e005      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f4:	7cfb      	ldrb	r3, [r7, #19]
 80049f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049f8:	7c7b      	ldrb	r3, [r7, #17]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d105      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049fe:	4ba7      	ldr	r3, [pc, #668]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a02:	4aa6      	ldr	r2, [pc, #664]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a16:	4ba1      	ldr	r3, [pc, #644]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	f023 0203 	bic.w	r2, r3, #3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	499d      	ldr	r1, [pc, #628]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a38:	4b98      	ldr	r3, [pc, #608]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f023 020c 	bic.w	r2, r3, #12
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	4995      	ldr	r1, [pc, #596]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a5a:	4b90      	ldr	r3, [pc, #576]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	498c      	ldr	r1, [pc, #560]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a7c:	4b87      	ldr	r3, [pc, #540]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	4984      	ldr	r1, [pc, #528]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a9e:	4b7f      	ldr	r3, [pc, #508]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	497b      	ldr	r1, [pc, #492]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ac0:	4b76      	ldr	r3, [pc, #472]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	4973      	ldr	r1, [pc, #460]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ae2:	4b6e      	ldr	r3, [pc, #440]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	496a      	ldr	r1, [pc, #424]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b04:	4b65      	ldr	r3, [pc, #404]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	4962      	ldr	r1, [pc, #392]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b26:	4b5d      	ldr	r3, [pc, #372]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	4959      	ldr	r1, [pc, #356]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b48:	4b54      	ldr	r3, [pc, #336]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b4e:	f023 0203 	bic.w	r2, r3, #3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	4951      	ldr	r1, [pc, #324]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b6a:	4b4c      	ldr	r3, [pc, #304]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	4948      	ldr	r1, [pc, #288]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d015      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b8c:	4b43      	ldr	r3, [pc, #268]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	4940      	ldr	r1, [pc, #256]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004baa:	d105      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bac:	4b3b      	ldr	r3, [pc, #236]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4a3a      	ldr	r2, [pc, #232]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bb6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d015      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bc4:	4b35      	ldr	r3, [pc, #212]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd2:	4932      	ldr	r1, [pc, #200]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be2:	d105      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004be4:	4b2d      	ldr	r3, [pc, #180]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	4a2c      	ldr	r2, [pc, #176]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d015      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bfc:	4b27      	ldr	r3, [pc, #156]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	4924      	ldr	r1, [pc, #144]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c1a:	d105      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c1c:	4b1f      	ldr	r3, [pc, #124]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	4a1e      	ldr	r2, [pc, #120]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d015      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c34:	4b19      	ldr	r3, [pc, #100]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c42:	4916      	ldr	r1, [pc, #88]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c52:	d105      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c54:	4b11      	ldr	r3, [pc, #68]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	4a10      	ldr	r2, [pc, #64]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d019      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	4908      	ldr	r1, [pc, #32]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c8a:	d109      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c8c:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4a02      	ldr	r2, [pc, #8]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c96:	60d3      	str	r3, [r2, #12]
 8004c98:	e002      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004c9a:	bf00      	nop
 8004c9c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d015      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cac:	4b29      	ldr	r3, [pc, #164]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	4926      	ldr	r1, [pc, #152]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cca:	d105      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ccc:	4b21      	ldr	r3, [pc, #132]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	4a20      	ldr	r2, [pc, #128]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d015      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004ce4:	4b1b      	ldr	r3, [pc, #108]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf2:	4918      	ldr	r1, [pc, #96]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d02:	d105      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d04:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4a12      	ldr	r2, [pc, #72]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d0e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d015      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d1c:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2a:	490a      	ldr	r1, [pc, #40]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d3a:	d105      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d48:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40021000 	.word	0x40021000

08004d58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e042      	b.n	8004df0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d106      	bne.n	8004d82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7fb ff87 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2224      	movs	r2, #36	; 0x24
 8004d86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0201 	bic.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fb24 	bl	80053f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f825 	bl	8004df8 <UART_SetConfig>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e01b      	b.n	8004df0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fba3 	bl	8005534 <UART_CheckIdleState>
 8004dee:	4603      	mov	r3, r0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dfc:	b08c      	sub	sp, #48	; 0x30
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	431a      	orrs	r2, r3
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4baa      	ldr	r3, [pc, #680]	; (80050d0 <UART_SetConfig+0x2d8>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	6812      	ldr	r2, [r2, #0]
 8004e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e30:	430b      	orrs	r3, r1
 8004e32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a9f      	ldr	r2, [pc, #636]	; (80050d4 <UART_SetConfig+0x2dc>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d004      	beq.n	8004e64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e60:	4313      	orrs	r3, r2
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004e6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	6812      	ldr	r2, [r2, #0]
 8004e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e82:	f023 010f 	bic.w	r1, r3, #15
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a90      	ldr	r2, [pc, #576]	; (80050d8 <UART_SetConfig+0x2e0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d125      	bne.n	8004ee8 <UART_SetConfig+0xf0>
 8004e9c:	4b8f      	ldr	r3, [pc, #572]	; (80050dc <UART_SetConfig+0x2e4>)
 8004e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d81a      	bhi.n	8004ee0 <UART_SetConfig+0xe8>
 8004eaa:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <UART_SetConfig+0xb8>)
 8004eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb0:	08004ec1 	.word	0x08004ec1
 8004eb4:	08004ed1 	.word	0x08004ed1
 8004eb8:	08004ec9 	.word	0x08004ec9
 8004ebc:	08004ed9 	.word	0x08004ed9
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ec6:	e116      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ece:	e112      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ed6:	e10e      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8004ed8:	2308      	movs	r3, #8
 8004eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ede:	e10a      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ee6:	e106      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a7c      	ldr	r2, [pc, #496]	; (80050e0 <UART_SetConfig+0x2e8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d138      	bne.n	8004f64 <UART_SetConfig+0x16c>
 8004ef2:	4b7a      	ldr	r3, [pc, #488]	; (80050dc <UART_SetConfig+0x2e4>)
 8004ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef8:	f003 030c 	and.w	r3, r3, #12
 8004efc:	2b0c      	cmp	r3, #12
 8004efe:	d82d      	bhi.n	8004f5c <UART_SetConfig+0x164>
 8004f00:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <UART_SetConfig+0x110>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f3d 	.word	0x08004f3d
 8004f0c:	08004f5d 	.word	0x08004f5d
 8004f10:	08004f5d 	.word	0x08004f5d
 8004f14:	08004f5d 	.word	0x08004f5d
 8004f18:	08004f4d 	.word	0x08004f4d
 8004f1c:	08004f5d 	.word	0x08004f5d
 8004f20:	08004f5d 	.word	0x08004f5d
 8004f24:	08004f5d 	.word	0x08004f5d
 8004f28:	08004f45 	.word	0x08004f45
 8004f2c:	08004f5d 	.word	0x08004f5d
 8004f30:	08004f5d 	.word	0x08004f5d
 8004f34:	08004f5d 	.word	0x08004f5d
 8004f38:	08004f55 	.word	0x08004f55
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f42:	e0d8      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8004f44:	2302      	movs	r3, #2
 8004f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f4a:	e0d4      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f52:	e0d0      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8004f54:	2308      	movs	r3, #8
 8004f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f5a:	e0cc      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f62:	e0c8      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a5e      	ldr	r2, [pc, #376]	; (80050e4 <UART_SetConfig+0x2ec>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d125      	bne.n	8004fba <UART_SetConfig+0x1c2>
 8004f6e:	4b5b      	ldr	r3, [pc, #364]	; (80050dc <UART_SetConfig+0x2e4>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f78:	2b30      	cmp	r3, #48	; 0x30
 8004f7a:	d016      	beq.n	8004faa <UART_SetConfig+0x1b2>
 8004f7c:	2b30      	cmp	r3, #48	; 0x30
 8004f7e:	d818      	bhi.n	8004fb2 <UART_SetConfig+0x1ba>
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d00a      	beq.n	8004f9a <UART_SetConfig+0x1a2>
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	d814      	bhi.n	8004fb2 <UART_SetConfig+0x1ba>
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <UART_SetConfig+0x19a>
 8004f8c:	2b10      	cmp	r3, #16
 8004f8e:	d008      	beq.n	8004fa2 <UART_SetConfig+0x1aa>
 8004f90:	e00f      	b.n	8004fb2 <UART_SetConfig+0x1ba>
 8004f92:	2300      	movs	r3, #0
 8004f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f98:	e0ad      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fa0:	e0a9      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8004fa2:	2304      	movs	r3, #4
 8004fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fa8:	e0a5      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8004faa:	2308      	movs	r3, #8
 8004fac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fb0:	e0a1      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8004fb2:	2310      	movs	r3, #16
 8004fb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fb8:	e09d      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a4a      	ldr	r2, [pc, #296]	; (80050e8 <UART_SetConfig+0x2f0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d125      	bne.n	8005010 <UART_SetConfig+0x218>
 8004fc4:	4b45      	ldr	r3, [pc, #276]	; (80050dc <UART_SetConfig+0x2e4>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fce:	2bc0      	cmp	r3, #192	; 0xc0
 8004fd0:	d016      	beq.n	8005000 <UART_SetConfig+0x208>
 8004fd2:	2bc0      	cmp	r3, #192	; 0xc0
 8004fd4:	d818      	bhi.n	8005008 <UART_SetConfig+0x210>
 8004fd6:	2b80      	cmp	r3, #128	; 0x80
 8004fd8:	d00a      	beq.n	8004ff0 <UART_SetConfig+0x1f8>
 8004fda:	2b80      	cmp	r3, #128	; 0x80
 8004fdc:	d814      	bhi.n	8005008 <UART_SetConfig+0x210>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <UART_SetConfig+0x1f0>
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d008      	beq.n	8004ff8 <UART_SetConfig+0x200>
 8004fe6:	e00f      	b.n	8005008 <UART_SetConfig+0x210>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fee:	e082      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ff6:	e07e      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ffe:	e07a      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8005000:	2308      	movs	r3, #8
 8005002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005006:	e076      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8005008:	2310      	movs	r3, #16
 800500a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800500e:	e072      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a35      	ldr	r2, [pc, #212]	; (80050ec <UART_SetConfig+0x2f4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d12a      	bne.n	8005070 <UART_SetConfig+0x278>
 800501a:	4b30      	ldr	r3, [pc, #192]	; (80050dc <UART_SetConfig+0x2e4>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005024:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005028:	d01a      	beq.n	8005060 <UART_SetConfig+0x268>
 800502a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800502e:	d81b      	bhi.n	8005068 <UART_SetConfig+0x270>
 8005030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005034:	d00c      	beq.n	8005050 <UART_SetConfig+0x258>
 8005036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800503a:	d815      	bhi.n	8005068 <UART_SetConfig+0x270>
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <UART_SetConfig+0x250>
 8005040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005044:	d008      	beq.n	8005058 <UART_SetConfig+0x260>
 8005046:	e00f      	b.n	8005068 <UART_SetConfig+0x270>
 8005048:	2300      	movs	r3, #0
 800504a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800504e:	e052      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8005050:	2302      	movs	r3, #2
 8005052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005056:	e04e      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8005058:	2304      	movs	r3, #4
 800505a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800505e:	e04a      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8005060:	2308      	movs	r3, #8
 8005062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005066:	e046      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8005068:	2310      	movs	r3, #16
 800506a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800506e:	e042      	b.n	80050f6 <UART_SetConfig+0x2fe>
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a17      	ldr	r2, [pc, #92]	; (80050d4 <UART_SetConfig+0x2dc>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d13a      	bne.n	80050f0 <UART_SetConfig+0x2f8>
 800507a:	4b18      	ldr	r3, [pc, #96]	; (80050dc <UART_SetConfig+0x2e4>)
 800507c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005080:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005084:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005088:	d01a      	beq.n	80050c0 <UART_SetConfig+0x2c8>
 800508a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800508e:	d81b      	bhi.n	80050c8 <UART_SetConfig+0x2d0>
 8005090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005094:	d00c      	beq.n	80050b0 <UART_SetConfig+0x2b8>
 8005096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800509a:	d815      	bhi.n	80050c8 <UART_SetConfig+0x2d0>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <UART_SetConfig+0x2b0>
 80050a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a4:	d008      	beq.n	80050b8 <UART_SetConfig+0x2c0>
 80050a6:	e00f      	b.n	80050c8 <UART_SetConfig+0x2d0>
 80050a8:	2300      	movs	r3, #0
 80050aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ae:	e022      	b.n	80050f6 <UART_SetConfig+0x2fe>
 80050b0:	2302      	movs	r3, #2
 80050b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050b6:	e01e      	b.n	80050f6 <UART_SetConfig+0x2fe>
 80050b8:	2304      	movs	r3, #4
 80050ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050be:	e01a      	b.n	80050f6 <UART_SetConfig+0x2fe>
 80050c0:	2308      	movs	r3, #8
 80050c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050c6:	e016      	b.n	80050f6 <UART_SetConfig+0x2fe>
 80050c8:	2310      	movs	r3, #16
 80050ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ce:	e012      	b.n	80050f6 <UART_SetConfig+0x2fe>
 80050d0:	cfff69f3 	.word	0xcfff69f3
 80050d4:	40008000 	.word	0x40008000
 80050d8:	40013800 	.word	0x40013800
 80050dc:	40021000 	.word	0x40021000
 80050e0:	40004400 	.word	0x40004400
 80050e4:	40004800 	.word	0x40004800
 80050e8:	40004c00 	.word	0x40004c00
 80050ec:	40005000 	.word	0x40005000
 80050f0:	2310      	movs	r3, #16
 80050f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4aae      	ldr	r2, [pc, #696]	; (80053b4 <UART_SetConfig+0x5bc>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	f040 8097 	bne.w	8005230 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005102:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005106:	2b08      	cmp	r3, #8
 8005108:	d823      	bhi.n	8005152 <UART_SetConfig+0x35a>
 800510a:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <UART_SetConfig+0x318>)
 800510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005110:	08005135 	.word	0x08005135
 8005114:	08005153 	.word	0x08005153
 8005118:	0800513d 	.word	0x0800513d
 800511c:	08005153 	.word	0x08005153
 8005120:	08005143 	.word	0x08005143
 8005124:	08005153 	.word	0x08005153
 8005128:	08005153 	.word	0x08005153
 800512c:	08005153 	.word	0x08005153
 8005130:	0800514b 	.word	0x0800514b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005134:	f7ff fb50 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 8005138:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800513a:	e010      	b.n	800515e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800513c:	4b9e      	ldr	r3, [pc, #632]	; (80053b8 <UART_SetConfig+0x5c0>)
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005140:	e00d      	b.n	800515e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005142:	f7ff fadb 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 8005146:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005148:	e009      	b.n	800515e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005150:	e005      	b.n	800515e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800515c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 8130 	beq.w	80053c6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	4a94      	ldr	r2, [pc, #592]	; (80053bc <UART_SetConfig+0x5c4>)
 800516c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005170:	461a      	mov	r2, r3
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	fbb3 f3f2 	udiv	r3, r3, r2
 8005178:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	4413      	add	r3, r2
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	429a      	cmp	r2, r3
 8005188:	d305      	bcc.n	8005196 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	429a      	cmp	r2, r3
 8005194:	d903      	bls.n	800519e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800519c:	e113      	b.n	80053c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	2200      	movs	r2, #0
 80051a2:	60bb      	str	r3, [r7, #8]
 80051a4:	60fa      	str	r2, [r7, #12]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	4a84      	ldr	r2, [pc, #528]	; (80053bc <UART_SetConfig+0x5c4>)
 80051ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2200      	movs	r2, #0
 80051b4:	603b      	str	r3, [r7, #0]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051c0:	f7fb f82a 	bl	8000218 <__aeabi_uldivmod>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4610      	mov	r0, r2
 80051ca:	4619      	mov	r1, r3
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	020b      	lsls	r3, r1, #8
 80051d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051da:	0202      	lsls	r2, r0, #8
 80051dc:	6979      	ldr	r1, [r7, #20]
 80051de:	6849      	ldr	r1, [r1, #4]
 80051e0:	0849      	lsrs	r1, r1, #1
 80051e2:	2000      	movs	r0, #0
 80051e4:	460c      	mov	r4, r1
 80051e6:	4605      	mov	r5, r0
 80051e8:	eb12 0804 	adds.w	r8, r2, r4
 80051ec:	eb43 0905 	adc.w	r9, r3, r5
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	469a      	mov	sl, r3
 80051f8:	4693      	mov	fp, r2
 80051fa:	4652      	mov	r2, sl
 80051fc:	465b      	mov	r3, fp
 80051fe:	4640      	mov	r0, r8
 8005200:	4649      	mov	r1, r9
 8005202:	f7fb f809 	bl	8000218 <__aeabi_uldivmod>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4613      	mov	r3, r2
 800520c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005214:	d308      	bcc.n	8005228 <UART_SetConfig+0x430>
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800521c:	d204      	bcs.n	8005228 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6a3a      	ldr	r2, [r7, #32]
 8005224:	60da      	str	r2, [r3, #12]
 8005226:	e0ce      	b.n	80053c6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800522e:	e0ca      	b.n	80053c6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005238:	d166      	bne.n	8005308 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800523a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800523e:	2b08      	cmp	r3, #8
 8005240:	d827      	bhi.n	8005292 <UART_SetConfig+0x49a>
 8005242:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <UART_SetConfig+0x450>)
 8005244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005248:	0800526d 	.word	0x0800526d
 800524c:	08005275 	.word	0x08005275
 8005250:	0800527d 	.word	0x0800527d
 8005254:	08005293 	.word	0x08005293
 8005258:	08005283 	.word	0x08005283
 800525c:	08005293 	.word	0x08005293
 8005260:	08005293 	.word	0x08005293
 8005264:	08005293 	.word	0x08005293
 8005268:	0800528b 	.word	0x0800528b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800526c:	f7ff fab4 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 8005270:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005272:	e014      	b.n	800529e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005274:	f7ff fac6 	bl	8004804 <HAL_RCC_GetPCLK2Freq>
 8005278:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800527a:	e010      	b.n	800529e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800527c:	4b4e      	ldr	r3, [pc, #312]	; (80053b8 <UART_SetConfig+0x5c0>)
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005280:	e00d      	b.n	800529e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005282:	f7ff fa3b 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 8005286:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005288:	e009      	b.n	800529e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800528a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005290:	e005      	b.n	800529e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800529c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 8090 	beq.w	80053c6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	4a44      	ldr	r2, [pc, #272]	; (80053bc <UART_SetConfig+0x5c4>)
 80052ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052b0:	461a      	mov	r2, r3
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80052b8:	005a      	lsls	r2, r3, #1
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	085b      	lsrs	r3, r3, #1
 80052c0:	441a      	add	r2, r3
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	2b0f      	cmp	r3, #15
 80052d0:	d916      	bls.n	8005300 <UART_SetConfig+0x508>
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d8:	d212      	bcs.n	8005300 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f023 030f 	bic.w	r3, r3, #15
 80052e2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	085b      	lsrs	r3, r3, #1
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	8bfb      	ldrh	r3, [r7, #30]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	8bfa      	ldrh	r2, [r7, #30]
 80052fc:	60da      	str	r2, [r3, #12]
 80052fe:	e062      	b.n	80053c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005306:	e05e      	b.n	80053c6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005308:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800530c:	2b08      	cmp	r3, #8
 800530e:	d828      	bhi.n	8005362 <UART_SetConfig+0x56a>
 8005310:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <UART_SetConfig+0x520>)
 8005312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005316:	bf00      	nop
 8005318:	0800533d 	.word	0x0800533d
 800531c:	08005345 	.word	0x08005345
 8005320:	0800534d 	.word	0x0800534d
 8005324:	08005363 	.word	0x08005363
 8005328:	08005353 	.word	0x08005353
 800532c:	08005363 	.word	0x08005363
 8005330:	08005363 	.word	0x08005363
 8005334:	08005363 	.word	0x08005363
 8005338:	0800535b 	.word	0x0800535b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800533c:	f7ff fa4c 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 8005340:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005342:	e014      	b.n	800536e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005344:	f7ff fa5e 	bl	8004804 <HAL_RCC_GetPCLK2Freq>
 8005348:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800534a:	e010      	b.n	800536e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800534c:	4b1a      	ldr	r3, [pc, #104]	; (80053b8 <UART_SetConfig+0x5c0>)
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005350:	e00d      	b.n	800536e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005352:	f7ff f9d3 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 8005356:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005358:	e009      	b.n	800536e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800535a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005360:	e005      	b.n	800536e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800536c:	bf00      	nop
    }

    if (pclk != 0U)
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	2b00      	cmp	r3, #0
 8005372:	d028      	beq.n	80053c6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	4a10      	ldr	r2, [pc, #64]	; (80053bc <UART_SetConfig+0x5c4>)
 800537a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800537e:	461a      	mov	r2, r3
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	fbb3 f2f2 	udiv	r2, r3, r2
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	085b      	lsrs	r3, r3, #1
 800538c:	441a      	add	r2, r3
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	fbb2 f3f3 	udiv	r3, r2, r3
 8005396:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	2b0f      	cmp	r3, #15
 800539c:	d910      	bls.n	80053c0 <UART_SetConfig+0x5c8>
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a4:	d20c      	bcs.n	80053c0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60da      	str	r2, [r3, #12]
 80053b0:	e009      	b.n	80053c6 <UART_SetConfig+0x5ce>
 80053b2:	bf00      	nop
 80053b4:	40008000 	.word	0x40008000
 80053b8:	00f42400 	.word	0x00f42400
 80053bc:	08005abc 	.word	0x08005abc
      }
      else
      {
        ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2200      	movs	r2, #0
 80053da:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2200      	movs	r2, #0
 80053e0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80053e2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3730      	adds	r7, #48	; 0x30
 80053ea:	46bd      	mov	sp, r7
 80053ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080053f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01a      	beq.n	8005506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ee:	d10a      	bne.n	8005506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	605a      	str	r2, [r3, #4]
  }
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b098      	sub	sp, #96	; 0x60
 8005538:	af02      	add	r7, sp, #8
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005544:	f7fb fce2 	bl	8000f0c <HAL_GetTick>
 8005548:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b08      	cmp	r3, #8
 8005556:	d12f      	bne.n	80055b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005560:	2200      	movs	r2, #0
 8005562:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f88e 	bl	8005688 <UART_WaitOnFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d022      	beq.n	80055b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	e853 3f00 	ldrex	r3, [r3]
 800557e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005586:	653b      	str	r3, [r7, #80]	; 0x50
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005590:	647b      	str	r3, [r7, #68]	; 0x44
 8005592:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005594:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005598:	e841 2300 	strex	r3, r2, [r1]
 800559c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800559e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1e6      	bne.n	8005572 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e063      	b.n	8005680 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d149      	bne.n	800565a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ce:	2200      	movs	r2, #0
 80055d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f857 	bl	8005688 <UART_WaitOnFlagUntilTimeout>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d03c      	beq.n	800565a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	623b      	str	r3, [r7, #32]
   return(result);
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005600:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e6      	bne.n	80055e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3308      	adds	r3, #8
 8005618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	60fb      	str	r3, [r7, #12]
   return(result);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	64bb      	str	r3, [r7, #72]	; 0x48
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3308      	adds	r3, #8
 8005630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005632:	61fa      	str	r2, [r7, #28]
 8005634:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	69b9      	ldr	r1, [r7, #24]
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	617b      	str	r3, [r7, #20]
   return(result);
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e5      	bne.n	8005612 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e012      	b.n	8005680 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2220      	movs	r2, #32
 800565e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2220      	movs	r2, #32
 8005666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3758      	adds	r7, #88	; 0x58
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	4613      	mov	r3, r2
 8005696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005698:	e04f      	b.n	800573a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a0:	d04b      	beq.n	800573a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a2:	f7fb fc33 	bl	8000f0c <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d302      	bcc.n	80056b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e04e      	b.n	800575a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d037      	beq.n	800573a <UART_WaitOnFlagUntilTimeout+0xb2>
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b80      	cmp	r3, #128	; 0x80
 80056ce:	d034      	beq.n	800573a <UART_WaitOnFlagUntilTimeout+0xb2>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d031      	beq.n	800573a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d110      	bne.n	8005706 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2208      	movs	r2, #8
 80056ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 f838 	bl	8005762 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2208      	movs	r2, #8
 80056f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e029      	b.n	800575a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005714:	d111      	bne.n	800573a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800571e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 f81e 	bl	8005762 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e00f      	b.n	800575a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4013      	ands	r3, r2
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	429a      	cmp	r2, r3
 8005748:	bf0c      	ite	eq
 800574a:	2301      	moveq	r3, #1
 800574c:	2300      	movne	r3, #0
 800574e:	b2db      	uxtb	r3, r3
 8005750:	461a      	mov	r2, r3
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	429a      	cmp	r2, r3
 8005756:	d0a0      	beq.n	800569a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005762:	b480      	push	{r7}
 8005764:	b095      	sub	sp, #84	; 0x54
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005772:	e853 3f00 	ldrex	r3, [r3]
 8005776:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800577e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005788:	643b      	str	r3, [r7, #64]	; 0x40
 800578a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800578e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005790:	e841 2300 	strex	r3, r2, [r1]
 8005794:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e6      	bne.n	800576a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3308      	adds	r3, #8
 80057a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b2:	f023 0301 	bic.w	r3, r3, #1
 80057b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3308      	adds	r3, #8
 80057be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e3      	bne.n	800579c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d118      	bne.n	800580e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f023 0310 	bic.w	r3, r3, #16
 80057f0:	647b      	str	r3, [r7, #68]	; 0x44
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057fa:	61bb      	str	r3, [r7, #24]
 80057fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	6979      	ldr	r1, [r7, #20]
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	613b      	str	r3, [r7, #16]
   return(result);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e6      	bne.n	80057dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005822:	bf00      	nop
 8005824:	3754      	adds	r7, #84	; 0x54
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_UARTEx_DisableFifoMode+0x16>
 8005840:	2302      	movs	r3, #2
 8005842:	e027      	b.n	8005894 <HAL_UARTEx_DisableFifoMode+0x66>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2224      	movs	r2, #36	; 0x24
 8005850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0201 	bic.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005872:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e02d      	b.n	8005914 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2224      	movs	r2, #36	; 0x24
 80058c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0201 	bic.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f84f 	bl	8005998 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005930:	2302      	movs	r3, #2
 8005932:	e02d      	b.n	8005990 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2224      	movs	r2, #36	; 0x24
 8005940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0201 	bic.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f811 	bl	8005998 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2220      	movs	r2, #32
 8005982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d108      	bne.n	80059ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059b8:	e031      	b.n	8005a1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059ba:	2308      	movs	r3, #8
 80059bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059be:	2308      	movs	r3, #8
 80059c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	0e5b      	lsrs	r3, r3, #25
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	0f5b      	lsrs	r3, r3, #29
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059e2:	7bbb      	ldrb	r3, [r7, #14]
 80059e4:	7b3a      	ldrb	r2, [r7, #12]
 80059e6:	4911      	ldr	r1, [pc, #68]	; (8005a2c <UARTEx_SetNbDataToProcess+0x94>)
 80059e8:	5c8a      	ldrb	r2, [r1, r2]
 80059ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80059ee:	7b3a      	ldrb	r2, [r7, #12]
 80059f0:	490f      	ldr	r1, [pc, #60]	; (8005a30 <UARTEx_SetNbDataToProcess+0x98>)
 80059f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	7b7a      	ldrb	r2, [r7, #13]
 8005a04:	4909      	ldr	r1, [pc, #36]	; (8005a2c <UARTEx_SetNbDataToProcess+0x94>)
 8005a06:	5c8a      	ldrb	r2, [r1, r2]
 8005a08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a0c:	7b7a      	ldrb	r2, [r7, #13]
 8005a0e:	4908      	ldr	r1, [pc, #32]	; (8005a30 <UARTEx_SetNbDataToProcess+0x98>)
 8005a10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a12:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005a1e:	bf00      	nop
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	08005ad4 	.word	0x08005ad4
 8005a30:	08005adc 	.word	0x08005adc

08005a34 <memset>:
 8005a34:	4402      	add	r2, r0
 8005a36:	4603      	mov	r3, r0
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d100      	bne.n	8005a3e <memset+0xa>
 8005a3c:	4770      	bx	lr
 8005a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a42:	e7f9      	b.n	8005a38 <memset+0x4>

08005a44 <__libc_init_array>:
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	4d0d      	ldr	r5, [pc, #52]	; (8005a7c <__libc_init_array+0x38>)
 8005a48:	4c0d      	ldr	r4, [pc, #52]	; (8005a80 <__libc_init_array+0x3c>)
 8005a4a:	1b64      	subs	r4, r4, r5
 8005a4c:	10a4      	asrs	r4, r4, #2
 8005a4e:	2600      	movs	r6, #0
 8005a50:	42a6      	cmp	r6, r4
 8005a52:	d109      	bne.n	8005a68 <__libc_init_array+0x24>
 8005a54:	4d0b      	ldr	r5, [pc, #44]	; (8005a84 <__libc_init_array+0x40>)
 8005a56:	4c0c      	ldr	r4, [pc, #48]	; (8005a88 <__libc_init_array+0x44>)
 8005a58:	f000 f818 	bl	8005a8c <_init>
 8005a5c:	1b64      	subs	r4, r4, r5
 8005a5e:	10a4      	asrs	r4, r4, #2
 8005a60:	2600      	movs	r6, #0
 8005a62:	42a6      	cmp	r6, r4
 8005a64:	d105      	bne.n	8005a72 <__libc_init_array+0x2e>
 8005a66:	bd70      	pop	{r4, r5, r6, pc}
 8005a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6c:	4798      	blx	r3
 8005a6e:	3601      	adds	r6, #1
 8005a70:	e7ee      	b.n	8005a50 <__libc_init_array+0xc>
 8005a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a76:	4798      	blx	r3
 8005a78:	3601      	adds	r6, #1
 8005a7a:	e7f2      	b.n	8005a62 <__libc_init_array+0x1e>
 8005a7c:	08005aec 	.word	0x08005aec
 8005a80:	08005aec 	.word	0x08005aec
 8005a84:	08005aec 	.word	0x08005aec
 8005a88:	08005af0 	.word	0x08005af0

08005a8c <_init>:
 8005a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8e:	bf00      	nop
 8005a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a92:	bc08      	pop	{r3}
 8005a94:	469e      	mov	lr, r3
 8005a96:	4770      	bx	lr

08005a98 <_fini>:
 8005a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9a:	bf00      	nop
 8005a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9e:	bc08      	pop	{r3}
 8005aa0:	469e      	mov	lr, r3
 8005aa2:	4770      	bx	lr
